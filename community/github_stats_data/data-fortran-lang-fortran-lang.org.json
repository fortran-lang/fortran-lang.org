{
    "name": "fortran-lang/fortran-lang.org",
    "issues": [
        {
            "number": 400,
            "user": "p-costa",
            "date": "2022-04-24 10:02:53+00:00",
            "title": "fix dependency of include files under `learn/building_programs` mini-book",
            "text": "I had to do this fix to the dependencies generator, to be able to build a project in the case when the makefile is not in the same directory as the source files. I hope this makes sense!",
            "is_open": false,
            "labels": [
                "bug",
                "learn"
            ],
            "comments": [
                {
                    "user": "p-costa",
                    "date": "2022-04-24 10:15:28+00:00",
                    "text": "(I just noticed that I accidentally did not fork the project... I hope this is fine, else I can close and re-submit a proper PR)"
                },
                {
                    "user": "awvwgk",
                    "date": "2022-04-24 10:19:07+00:00",
                    "text": "I'm surprised this is actually used, I wrote this guide to show how involved the makefile setup can become and motivate people to use fpm or other high-level build systems with proper Fortran support ;)."
                },
                {
                    "user": "p-costa",
                    "date": "2022-04-24 10:26:45+00:00",
                    "text": "I'm surprised this is actually used, I wrote this guide to show how involved the makefile setup can become and motivate people to use fpm or other high-level build systems with proper Fortran support ;).\n\nfpm will come first for me! But I also want to update my naive build workflow using make with this nice and robust one."
                }
            ]
        },
        {
            "number": 399,
            "user": "Beliavsky",
            "date": "2022-04-20 14:33:25+00:00",
            "title": "Provide shorter examples for intrinsic procedures",
            "text": "Some example programs for the Fortran intrinsics, for example the one for ubound, provide a lot of information but are also a bit complicated. I suggest that a short example for an intrinsic be provided before a longer one. At Fortran Discourse I gave this code for ubound:\nprogram main ! output in comments\nimplicit none\nreal :: x(4),y(-4:3),z(5,-3:2,7)\nprint*,lbound(x),ubound(x)     ! 1 4\nprint*,lbound(y),ubound(y)     ! -4 3\nprint*,lbound(z)               ! 1 -3 1\nprint*,ubound(z)               ! 5 2 7\nprint*,lbound(z,2),ubound(z,2) ! -3 2\nend program main",
            "is_open": true,
            "labels": [],
            "comments": []
        },
        {
            "number": 398,
            "user": "mfsch",
            "date": "2022-04-15 16:12:19+00:00",
            "title": "Add feed link to HTML head element",
            "text": "Having the news feed linked in the <head> element makes it easier to subscribe in some software, as they can automatically detect the address of the feed this way. I\u2019ve used the title \u201cFortran Newsletter\u201d that\u2019s also used for the feed itself .",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2022-04-15 16:28:19+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "milancurcic",
                    "date": "2022-04-15 16:28:54+00:00",
                    "text": "Thanks @mfsch! Is there an easy tool I could use to check that this works?"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2022-04-15 16:29:56+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/398/"
                },
                {
                    "user": "mfsch",
                    "date": "2022-04-15 17:37:50+00:00",
                    "text": "I\u2019m using Miniflux, but I\u2019ve also just tried out the Feedbro extension for Firefox, which can detect the feed this way, and I think it should also work with something like this extension in Chrome."
                },
                {
                    "user": "milancurcic",
                    "date": "2022-04-15 17:44:26+00:00",
                    "text": "OK, thanks. I installed miniflux but may take some time figuring out how to use it. Can you confirm with the preview website that the change works as intended? I'm not as familiar with feeds and readers. If yes, I think this PR is good to go."
                },
                {
                    "user": "mfsch",
                    "date": "2022-04-15 18:53:11+00:00",
                    "text": "Miniflux says \u201cUnable to find any subscription.\u201d when trying to add https://fortran-lang.org/ but it does find the feed when adding https://fortran-lang.org/pr/398/."
                },
                {
                    "user": "milancurcic",
                    "date": "2022-04-15 18:59:51+00:00",
                    "text": "Perfect, thanks for confirming, let's merge it."
                },
                {
                    "user": "milancurcic",
                    "date": "2022-04-15 19:00:03+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2022-04-15 19:00:27+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 397,
            "user": "ivan-pi",
            "date": "2022-04-15 10:38:29+00:00",
            "title": "Add NUFFT to package index",
            "text": "Homepage: https://cims.nyu.edu/cmcl/nufft/nufft.html\n@lewisfish - I hope you don't mind me pinging you for help with a review. I'd appreciate if you can reviewing whether the package fulfills the criteria for the Fortran package index and approve/disapprove.",
            "is_open": true,
            "labels": [],
            "comments": [
                {
                    "user": "lewisfish",
                    "date": "2022-04-15 10:58:15+00:00",
                    "text": "No worries, happy to help out. Package fulfills the criteria"
                }
            ]
        },
        {
            "number": 396,
            "user": "ivan-pi",
            "date": "2022-04-15 10:34:33+00:00",
            "title": "Add OpenFFT to package index",
            "text": "Homepage: http://www.openmx-square.org/openfft/\nThe code is written in C but includes a Fortran interface. The library is used for DFT electronic structure calculation as part of the OpenMX (http://www.openmx-square.org/) library.",
            "is_open": true,
            "labels": [],
            "comments": []
        },
        {
            "number": 395,
            "user": "ivan-pi",
            "date": "2022-04-15 01:09:12+00:00",
            "title": "Add 2DECOMP&FFT to package index",
            "text": "Homepage: http://www.2decomp.org/\ncc @ThemosTsikas, are there any tags (keywords) you'd like to see from NAG's perspective? (For more context, the aim the pull request is to add 2DECOMP to the Fortran Package Index at fortran-lang.org; the criteria for a package to be indexed are specified here)\nNote that entries other than 2Decomp are handled in separate pull requests.",
            "is_open": true,
            "labels": [],
            "comments": [
                {
                    "user": "p-costa",
                    "date": "2022-04-15 01:18:05+00:00",
                    "text": "I think that the 2decomp repo is also now hosted/archived on github, here: https://github.com/numericalalgorithmsgroup/2decomp_fft"
                },
                {
                    "user": "ivan-pi",
                    "date": "2022-04-15 10:52:01+00:00",
                    "text": "Thanks for the information. I guess I should reference the NAG GitHub page then. It's a shame there is no link to the original website though, it contains some nice material."
                },
                {
                    "user": "p-costa",
                    "date": "2022-04-15 10:55:01+00:00",
                    "text": "Indeed... Maybe in the future, the list could also show the URL?"
                },
                {
                    "user": "ThemosTsikas",
                    "date": "2022-04-15 13:26:20+00:00",
                    "text": "I have now left NAG. If you need comment from NAG, you can use their support@ email address, care of Lawrence Mulholland."
                }
            ]
        },
        {
            "number": 394,
            "user": "ivan-pi",
            "date": "2022-04-15 00:31:49+00:00",
            "title": "Add SLICOT to package index",
            "text": "Homepage: http://slicot.org/\nGitHub: https://github.com/SLICOT/SLICOT-Reference\ncc @andreasvarga - The Fortran Package Index (https://fortran-lang.org/packages/) provides a searchable index of Fortran software for various purposes. Adding SLICOT to the index would help both new and existing Fortran users to easily find the package. Would you be able to provide some tags (keywords) for the SLICOT library?\nThe conditions that need to be fulfilled for the package to be indexed are given here: https://github.com/fortran-lang/fortran-lang.org/blob/master/PACKAGES.md\nPlease note, this pull request only applied to SLICOT, the other new entries are handled in separate pull requests.",
            "is_open": true,
            "labels": [],
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2022-04-15 11:01:49+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2022-04-15 11:03:29+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/394/"
                },
                {
                    "user": "andreasvarga",
                    "date": "2022-04-15 11:47:45+00:00",
                    "text": "I suggest the following keywords for SLICOT:\nfortran control-systems filtering system-identification system-analysis-and-design descriptor-systems periodic-systems  linear-algebra"
                }
            ]
        },
        {
            "number": 393,
            "user": "ivan-pi",
            "date": "2022-04-15 00:12:37+00:00",
            "title": "Add FATODE to package index",
            "text": "Homepage: https://people.cs.vt.edu/~asandu/Software/FATODE/\nGitHub: https://github.com/ComputationalScienceLaboratory/FATODE\ncc @Steven-Roberts - Could you or another member of the group of Prof. Adrian Sandu (@ComputationalScienceLaboratory) have a look at this pull request? The Fortran package index can be found here: https://fortran-lang.org/packages/. The criteria for being included in the index are available here: https://github.com/fortran-lang/fortran-lang.org/blob/master/PACKAGES.md\nOnly the FATODE entry is to be reviewed here, the other entries are in separate pull requests.",
            "is_open": true,
            "labels": [],
            "comments": []
        },
        {
            "number": 392,
            "user": "ivan-pi",
            "date": "2022-04-14 23:52:23+00:00",
            "title": "Add PROPACK to package index",
            "text": "Addresses a subtask in #232\nProject homepage: http://sun.stanford.edu/~rmunk/PROPACK/\nPROPACK was recently added to SciPy as one of the available SVD solvers.\nNote pencil-code, Elk, and librsb, are handled in other pull requests.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "ivan-pi",
                    "date": "2022-04-15 10:11:05+00:00",
                    "text": "That's a valid point. My mind was just not thinking clearly enough to roll back from a new branch..."
                },
                {
                    "user": "LKedward",
                    "date": "2022-04-15 10:14:01+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2022-04-15 10:15:44+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/392/"
                },
                {
                    "user": "LKedward",
                    "date": "2022-04-15 10:59:10+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2022-04-15 10:59:30+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 391,
            "user": "ivan-pi",
            "date": "2022-04-14 23:09:14+00:00",
            "title": "Add pencil-code to package index",
            "text": "Addresses #232 (comment)\nProject homepage: http://pencil-code.nordita.org/\nIs it okay to have both github and url fields? (no need)\nElk (#390) and librsb (#389) are considered in separate pull requests.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "p-costa",
                    "date": "2022-04-14 23:12:35+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2022-04-14 23:14:14+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/391/"
                },
                {
                    "user": "p-costa",
                    "date": "2022-04-15 10:56:58+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2022-04-15 10:57:21+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 390,
            "user": "ivan-pi",
            "date": "2022-04-14 22:59:03+00:00",
            "title": "Add Elk to package index",
            "text": "Addresses #232 (comment)\nHomepage: https://elk.sourceforge.io/",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2022-04-15 09:55:47+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2022-04-15 09:57:22+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/390/"
                },
                {
                    "user": "LKedward",
                    "date": "2022-04-15 10:07:08+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2022-04-15 10:07:27+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 389,
            "user": "ivan-pi",
            "date": "2022-04-14 22:49:30+00:00",
            "title": "Add librsb to package index",
            "text": "From the website:\n\nlibrsb is a library for sparse matrix computations featuring the Recursive Sparse Blocks (RSB) matrix format. This format allows cache efficient and multi-threaded (that is, shared memory parallel) operations on large sparse matrices. The most common operations necessary to iterative solvers are available, e.g.: matrix-vector multiplication, triangular solution, rows/columns scaling, diagonal extraction / setting, blocks extraction, norm computation, formats conversion. The RSB format is especially well suited for symmetric and transposed multiplication variants. Most numerical kernels code is auto generated, and the supported numerical types can be chosen by the user at build time. librsb can also be built serially (without OpenMP parallelism), if required.\nlibrsb also implements the Sparse BLAS standard, as specified in the [BLAS Technical Forum] documents.\n\nThe package fulfills the required criteria:\n\nRelevance: complete implementation of the Sparse BLAS interface in Fortran\nMaturity: extensive testing has been done over several years\nAvailability: http://librsb.sourceforge.net\nOpen source: LGPL-3.0 or later\nUniqueness: rare package for sparse matrix computations with a special storage format and one of less than a handful of Sparse BLAS implementation\n\ncc @michelemartone, would you like to add any tags? I don't think any other categories apply.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "michelemartone",
                    "date": "2022-04-14 23:23:23+00:00",
                    "text": "It seems all correct to me.\nMaybe as description you could better append \" implementing the Sparse BLAS\" so to have \"A shared memory parallel sparse matrix computations library for the Recursive Sparse Blocks format implementing the Sparse BLAS\" which is a bit more informative.\nThanks @ivan-pi !"
                },
                {
                    "user": "ivan-pi",
                    "date": "2022-04-14 23:34:21+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2022-04-14 23:35:53+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/389/"
                },
                {
                    "user": "LKedward",
                    "date": "2022-04-15 09:52:40+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2022-04-15 09:53:00+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 388,
            "user": "henilp105",
            "date": "2022-04-14 04:54:46+00:00",
            "title": "Improper Search Parameter function in fortranLang.js  ( fortranLang.findGetParameter('query')  )",
            "text": "An improper search parameter fortranLang.findGetParameter('query')  , this function lacks basic regex, it has been mentioned in pr #369\nthis function escapes all the \"+\" , \"/\"  instead of proper formatting the parameters.\nI will Be submitting a patch for the same .\nThanks and Regards,\nHenil Panchal",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "henilp105",
                    "date": "2022-04-14 04:55:14+00:00",
                    "text": "@awvwgk @LKedward"
                },
                {
                    "user": "henilp105",
                    "date": "2022-04-15 12:07:53+00:00",
                    "text": "Resolved in PR #369"
                }
            ]
        },
        {
            "number": 387,
            "user": "milancurcic",
            "date": "2022-04-02 03:48:16+00:00",
            "title": "Newsletter for April 2022",
            "text": "Here's the draft for the April newsletter.\nOutstanding are compiler updates:\n\n Flang by @AlexisPerry\n LFortran by @certik\n\nLet's aim to merge this by Wednesday, April 6.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "AlexisPerry",
                    "date": "2022-04-05 18:09:04+00:00",
                    "text": "Please see PR milancurcic#6 for Flang updates.  Thanks!"
                },
                {
                    "user": "milancurcic",
                    "date": "2022-04-06 21:27:24+00:00",
                    "text": "@certik any chance for an LFortran update today?"
                },
                {
                    "user": "milancurcic",
                    "date": "2022-04-07 15:01:06+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2022-04-07 15:03:09+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/387/"
                },
                {
                    "user": "milancurcic",
                    "date": "2022-04-07 15:07:43+00:00",
                    "text": "WIll go ahead and merge in interest of time.\n@certik please open a separate PR if you'd like to add LFortran updates."
                },
                {
                    "user": "milancurcic",
                    "date": "2022-04-07 15:08:04+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2022-04-07 15:08:32+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 386,
            "user": "Beliavsky",
            "date": "2022-03-29 17:31:38+00:00",
            "title": "Hello World for Windows",
            "text": "The Hello World page mentions how to install gfortran on Windows but is otherwise oriented towards Unix-like operating systems. If it is supposed to be equally usable for someone on Windows, here are some suggestions:\nIt says\nTo check if you have gfortran setup correctly, open a terminal and run the following command\nWindows Terminal now starts out with Powershell. I think Fortran compilers and batch files were made to be used with CMD, which you can get by typing cmd at a Powershell prompt.\nIt says to compile with\ngfortran hello.f90 -o hello\nbut on Windows there is a convention to give executable files a .exe suffix.\nIt says to use\n$> ./hello\nto run the executable, but in Windows you would run .\\hello.exe or probably just hello.exe.",
            "is_open": true,
            "labels": [
                "learn"
            ],
            "comments": []
        },
        {
            "number": 385,
            "user": "zoziha",
            "date": "2022-03-26 08:54:40+00:00",
            "title": "Should the fortran-lang website provide a download link for the fortran compiler?",
            "text": "For beginners, log on to the Fortran-lang website and click get_started to learn, but if they want to download the Fortran compiler, they will be confused, why Fortran does not provide a set of direct links to download the Fortran compiler like other languages. Such as python, julia, R, go, dotnet ...\n\n\n\nFortran\nDescription\n\n\n\n\nGet Started\nDownload\n\n\n\nI know Fortran is different from many languages. There are many manufacturers that provide compilers for Fortran.\nLinux distribution system package repository generally have gfortran, but for windows system, if I am a beginner, I can't get the gfortran compiler well through the fortran-lang website (https://fortran-lang.org/compilers/).\nIs it worth it to add some Fortran compiler download links, and what is a reasonable way to do it?  Should some latest version of fortran compiler be recommended?",
            "is_open": true,
            "labels": [],
            "comments": []
        },
        {
            "number": 384,
            "user": "ashirrwad",
            "date": "2022-03-22 21:19:04+00:00",
            "title": "Resolves typos #377",
            "text": "Fixed the already stated typos in the issues and some new ones that fall under better practices.",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 383,
            "user": "gnikit",
            "date": "2022-03-18 14:59:41+00:00",
            "title": "Updated VS Code extensions",
            "text": "Modern Fortran now supports natively Language Server support (FORTRAN Intellisense), formatting (fprettify and findent)",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2022-03-18 15:43:01+00:00",
                    "text": "Should we still keep the other links in a section like \"Other tools\", so that people can discover them?"
                },
                {
                    "user": "gnikit",
                    "date": "2022-03-18 17:52:23+00:00",
                    "text": "I think the \"Other tools\" section should be kept mostly because VSCode without GitLens for big projects is rough.\nThe  extensions that I would vouch for are:\n\nGitLens which is crucial IMO\nRemote Development for SSHing into workstations, WSL and spinning up containers\n\nI would consider adding the CMake extension from Microsoft simply because a lot of people might find it useful (I prefer the command line, but to each their own).\nI am not familiar with the TOML extension but I suspect it might be useful for fpm dev work"
                },
                {
                    "user": "certik",
                    "date": "2022-03-18 17:59:01+00:00",
                    "text": "If you want, just put the links that you removed in this PR to the \"Other Tools\" or \"Additional Tools\" section, and we can merge it."
                },
                {
                    "user": "gnikit",
                    "date": "2022-03-18 18:20:36+00:00",
                    "text": "So I think this is a good place for new VS Code users that want to code in Fortran to start. I believe it should be okay now.\nAs for the tools I completely removed, unfortunately they don't play well with the main Fortran extension anymore, so I would not recommend anyone to install them alongside Modern Fortran.\nThese extensions would attempt to do the same thing as Modern Fortran but given that they would have the same \"priority\" I don't know what would happen.\ne.g. Having installed both Modern Fortran >= 3.0.0 and FOTRAN Intellisense would lead to multiple duplicate hover messages. GoTo Definition/Implementations would lead to undefined behaviour and using any of the new fortls arguments in your settings would cause FORTRAN Intellisense to crash.\nI think the fprettify extension would also have problems with auto-formatting OnSave which some people have enabled globally (and also the behaviour would be undefined).\nthe breaking point extension I think it has become redundant for Modern Fortran since 2019 when I added full-blown debugger support.\nThere is another Fortran extension (I think called fortran) which does not have any of these features so I suspect users would need these extensions to have a IDE-like experience in VSCode, but then again that project has not been updated since 2017, so I would not recommend users to use it."
                },
                {
                    "user": "awvwgk",
                    "date": "2022-03-20 19:13:56+00:00",
                    "text": "Thanks for the discussion and feedback everybody. I think we can go ahead and merge."
                }
            ]
        },
        {
            "number": 382,
            "user": "freevryheid",
            "date": "2022-03-07 15:22:41+00:00",
            "title": "learn - string arrays",
            "text": "The quickstart tutorials have a section on arrays and strings but don't address string arrays. Googling this I found differences in approaches depending on the compiler used. I propose expanding the tutorial to indicate best practice and standard approach.",
            "is_open": true,
            "labels": [],
            "comments": [
                {
                    "user": "freevryheid",
                    "date": "2022-03-07 15:24:02+00:00",
                    "text": "PR: #381"
                },
                {
                    "user": "Beliavsky",
                    "date": "2022-03-27 20:30:39+00:00",
                    "text": "I have a tweet prepared on arrays of strings:\nAn implied do loop with TRIM is often used to print an array of\ncharacter variables, since they may be padded by blanks and TRIM is\nnot elemental. A function can join trimmed strings as shown.\nmodule join_mod\nimplicit none\ncontains\npure function join(words,sep) result(text)\n! trim and join words with separator sep\ncharacter (len=*), intent(in) :: words(:)\ncharacter (len=*), intent(in) :: sep\ncharacter (sum(len_trim(words)) + & ! len_trim is elemental\n          (size(words)-1)*len(sep)) :: text\ninteger :: i,n\nn = size(words)\nwrite (text,\"(*(a))\") (trim(words(i)),sep,i=1,n-1), &\n                       trim(words(n))\nend function join\nend module join_mod\n!\nprogram trim_loop\nuse join_mod, only: join\nimplicit none\ninteger              :: i\ninteger, parameter   :: nelem = 3, nlen = 10\ncharacter (len=nlen) :: elem(nelem) = &\n   [character (len=nlen) :: \"Hydrogen\", \"Helium\", \"Lithium\"]\nprint \"(a,i0,a,*(1x,a,:,','))\",\"The first \",nelem,\" elements by \" // &\n      \"atomic # are\",elem ! trailing spaces in elem are printed\nprint \"(a,i0,a,*(1x,a,:,','))\",\"The first \",nelem,\" elements by \" // &\n      \"atomic # are\",(trim(elem(i)),i=1,nelem)\nprint \"(a,i0,a,1x,a)\",\"The first \",nelem,\" elements by \" // &\n      \"atomic # are\",join(elem,\", \") // \".\"\n! \"atomic # are\",trim(elem) ! invalid since TRIM not elemental\nend program trim_loop\n! output:\n! The first 3 elements by atomic # are Hydrogen  , Helium    , Lithium   \n! The first 3 elements by atomic # are Hydrogen, Helium, Lithium\n! The first 3 elements by atomic # are Hydrogen, Helium, Lithium.\n\nSome past tweets about character variables are listed here. Anything can be reused."
                }
            ]
        },
        {
            "number": 381,
            "user": "freevryheid",
            "date": "2022-03-04 17:01:18+00:00",
            "title": "add string array to learn",
            "text": "None",
            "is_open": false,
            "labels": [
                "learn"
            ],
            "comments": [
                {
                    "user": "freevryheid",
                    "date": "2022-03-07 14:47:26+00:00",
                    "text": "Update the example to show how this string array is passed to another function."
                },
                {
                    "user": "freevryheid",
                    "date": "2022-03-21 18:24:00+00:00",
                    "text": "yep, noticed that too - I was wondering why the code didn't change - let me\nfix that.\n\u2026\nOn Mon, Mar 21, 2022 at 1:12 PM Milan Curcic ***@***.***> wrote:\n ***@***.**** commented on this pull request.\n ------------------------------\n\n In learn/quickstart/arrays_strings.md\n <#381 (comment)>\n :\n\n > @@ -149,3 +149,34 @@ program allocatable_string\n  end program allocatable_string\n  ```\n\n +\n +## Array of strings\n +\n +The length of all strings in the array must be the same. The length assigned is typically the length of the longest element.\n\n Good catch, thanks. I noticed that you resolved the suggestions without\n committing them. Did you mean to do that?\n\n \u2014\n Reply to this email directly, view it on GitHub\n <#381 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AACFSLSMU4CMIB5WLFSSRHLVBC3ZXANCNFSM5P6B5M4A>\n .\n You are receiving this because you authored the thread.Message ID:\n ***@***.***>\n\n\n-- \nAndre"
                },
                {
                    "user": "milancurcic",
                    "date": "2022-03-29 18:30:21+00:00",
                    "text": "Great, I'll go ahead and merge, thank you again."
                }
            ]
        },
        {
            "number": 380,
            "user": "Beliavsky",
            "date": "2022-03-02 16:53:07+00:00",
            "title": "Create an introductory Fortran101 Twitter channel that repeats tweets annually",
            "text": "Twitter FortranTip started with the basics, such as intrinsic data types and loops. Now the audience has grown, and I don't want to repeat the basics and waste the time of experienced Fortranners. Just as universities repeat introductory courses annually, it may be worthwhile to create a Fortran101 Twitter channel (the name is currently available) that starts from scratch on a periodic basis, with announced start and end dates, recycling and improving FortranTip tweets (which have the unlicense license). Fortran novices could subscribe for a while and unsubscribe when they have \"graduated\". FortranTips are listed by date here, and I would like to create another page listing them by topic, maybe using the table of contents of Metcalf/Reid/Cohen. That would enable Fortran101 to be more orderly in covering the language than FortranTip has been.\nRunning one Twitter channel is enough for me. If anyone likes the idea please run with it.",
            "is_open": true,
            "labels": [],
            "comments": []
        },
        {
            "number": 379,
            "user": "milancurcic",
            "date": "2022-03-02 04:36:03+00:00",
            "title": "Newsletter for March 2022",
            "text": "Let's plan to merge by Monday, March 7.\n\n GitHub stats data\n PR list\n Flang updates by @AlexisPerry\n LFortran updates by @certik or @czgdp1807\n\nThank you!",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "AlexisPerry",
                    "date": "2022-03-03 16:23:09+00:00",
                    "text": "Please see PR milancurcic#5 for Flang updates.  Thanks!"
                },
                {
                    "user": "milancurcic",
                    "date": "2022-03-08 15:23:17+00:00",
                    "text": "@certik and @czgdp1807 any chance we can get LFortran updates in today? Thank you!"
                },
                {
                    "user": "certik",
                    "date": "2022-03-08 17:03:04+00:00",
                    "text": "Yes, we'll get it done today."
                },
                {
                    "user": "certik",
                    "date": "2022-03-09 19:55:52+00:00",
                    "text": "I am writing it up now, I didn't get to it yesterday, sorry about that."
                },
                {
                    "user": "milancurcic",
                    "date": "2022-03-09 20:01:36+00:00",
                    "text": "No worries and thank you! Please add your name to the author list and merge when you're ready."
                },
                {
                    "user": "certik",
                    "date": "2022-03-09 20:18:16+00:00",
                    "text": "Ok, I am done!"
                },
                {
                    "user": "milancurcic",
                    "date": "2022-03-10 01:05:37+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2022-03-10 01:07:18+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/379/"
                },
                {
                    "user": "milancurcic",
                    "date": "2022-03-10 01:11:11+00:00",
                    "text": "Thank you all. Will merge."
                },
                {
                    "user": "milancurcic",
                    "date": "2022-03-10 01:11:31+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2022-03-10 01:11:51+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 378,
            "user": "Beliavsky",
            "date": "2022-02-17 14:35:46+00:00",
            "title": "Stack Overflow most-upvoted Fortran questions",
            "text": "Looking at the most-upvoted questions with the [fortran] tag on Stack Overflow can give ideas for further tutorials to add to fortran-lang.org (and also for Fortran Tips).",
            "is_open": true,
            "labels": [],
            "comments": []
        },
        {
            "number": 377,
            "user": "Beliavsky",
            "date": "2022-02-09 12:39:28+00:00",
            "title": "typos",
            "text": "Replace \"differnet\" with \"different\" at https://fortran-lang.org/learn/best_practices/arrays . The sentence should be changed from\n\"This easily allows to create more generic functions that have to deal with differnet array ranks.\"\nto\n\"This allows you to easily create more generic functions that can deal with different array ranks.\"",
            "is_open": true,
            "labels": [
                "easy",
                "learn"
            ],
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2022-02-09 12:45:15+00:00",
                    "text": "Good catch, feel free to submit a patch."
                },
                {
                    "user": "Beliavsky",
                    "date": "2022-02-14 13:50:11+00:00",
                    "text": "\"descriptor\" not \"discriptor\" at https://fortran-lang.org/learn/best_practices/arrays\nWhen I get up to 5 typos I may submit a patch."
                },
                {
                    "user": "ashirrwad",
                    "date": "2022-03-22 21:29:01+00:00",
                    "text": "Hi I found a few more typos and fixed them along with the ones stated in this issue. Refer to PR #384"
                },
                {
                    "user": "Beliavsky",
                    "date": "2022-03-27 00:17:26+00:00",
                    "text": "At https://fortran-lang.org/learn/quickstart/variables, \"order or precedence\" should be \"order of precedence\" (\"or\" should be \"of\").\nOn the same page,\narea = pi * radius**2.0\nshould be\narea = pi * radius**2"
                }
            ]
        },
        {
            "number": 376,
            "user": "Beliavsky",
            "date": "2022-02-04 15:47:59+00:00",
            "title": "Add book: How to learn Applied Mathematics through modern FORTRAN",
            "text": "I suggest that the book How to learn Applied Mathematics through modern FORTRAN be added to the In print section. It is self-published but of decent quality IMO. A pdf of the book (280 pages) and its codes are in the authors` repo. I suggested the authors replace FORTRAN with Fortran in the title. The codes are modern Fortran.\nSince Numerical Recipes abandoned Fortran for C++, I think books like this are needed.",
            "is_open": true,
            "labels": [],
            "comments": []
        },
        {
            "number": 375,
            "user": "Beliavsky",
            "date": "2022-02-04 15:22:31+00:00",
            "title": "Fortran merchandise",
            "text": "If I search Amazon books for Fortran, the first few items listed are good (books by Metcalf/Reid/Cohen, Curcic, Chapman, Chivers and Jane Sleightholme) but soon the list has items I would not have placed highly -- books on Fortran 90 and Fortran 77, earlier editions of Fortran texts, and some low-quality self-published books. The second page of books has some that are not about Fortran.\nI have no experience with selling on Amazon. Would it be possible for Fortran-lang to create an Amazon store and list the items in the In print section of the site? A link to the Amazon store could be added to the site. Maybe this could help fund the site.",
            "is_open": true,
            "labels": [],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2022-02-04 16:04:52+00:00",
                    "text": "We could sign up as an Amazon Affiliate, link it to the NumFOCUS bank account, and use revenue to cover costs of domain name, Discourse (when we upgrade to paid plan), and other resources.\nI don't think we can directly change the Amazon search results."
                },
                {
                    "user": "Beliavsky",
                    "date": "2022-02-09 14:05:26+00:00",
                    "text": "At FortranTip a few people liked the idea of Fortran merchandise such as clothing. This exists for Python and Julia. Personally I would be reluctant to wear a T-shirt promoting a programming language, but maybe others would like to."
                }
            ]
        },
        {
            "number": 374,
            "user": "milancurcic",
            "date": "2022-02-01 17:32:04+00:00",
            "title": "Fix author tag in February 2022 newsletter",
            "text": "Small fix to make authors render.",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 373,
            "user": "czgdp1807",
            "date": "2022-02-01 06:31:57+00:00",
            "title": "Added LFortran updates for newsletter of February 2022",
            "text": "cc: @certik @jvdp1 @awvwgk",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2022-02-01 17:35:30+00:00",
                    "text": "Thanks @czgdp1807!"
                }
            ]
        },
        {
            "number": 372,
            "user": "AlexisPerry",
            "date": "2022-01-31 23:08:09+00:00",
            "title": "Flang Updates for Feb. 2022",
            "text": "None",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2022-01-31 23:18:07+00:00",
                    "text": "Thanks"
                }
            ]
        },
        {
            "number": 371,
            "user": "awvwgk",
            "date": "2022-01-29 10:30:43+00:00",
            "title": "Add link to \"The 'F' Word\" video series",
            "text": "See https://fortran-lang.discourse.group/t/2679\ncc @fluidnumerics-joe",
            "is_open": false,
            "labels": [
                "learn"
            ],
            "comments": [
                {
                    "user": "fluidnumerics-joe",
                    "date": "2022-01-29 15:51:31+00:00",
                    "text": "@awvwgk , Thanks for making this suggestion!"
                },
                {
                    "user": "certik",
                    "date": "2022-01-29 19:37:03+00:00",
                    "text": "@fluidnumerics-joe is there any alternative name that we could use? How about \"The 'Fortran' Word\"?\nI personally feel this title is unfortunate as it coincides with a word that we should not be using here. If others think this title is ok, then I am fine to be outvoted on this."
                },
                {
                    "user": "awvwgk",
                    "date": "2022-01-29 19:40:19+00:00",
                    "text": "I personally feel this title is unfortunate as it coincides with a word that we should not be using here. If others think this title is ok, then I am fine to be outvoted on this.\n\nI think this coincidence is wished. In the context I think it is quite clear what is meant. However, we can certainly adjust the description to make it clearer. Suggestions are welcome, I just copied a bit from Joe's post on discourse."
                },
                {
                    "user": "milancurcic",
                    "date": "2022-01-29 19:41:29+00:00",
                    "text": "I had the same thought for a few seconds but I think it's fine. I find it cheeky and smart."
                },
                {
                    "user": "certik",
                    "date": "2022-01-29 19:52:08+00:00",
                    "text": "I bet every reader of this will have the same thought. I provided a suggestion above. I just wanted to check on this, but it looks like it's fine with others, so I am ok overall."
                },
                {
                    "user": "fluidnumerics-joe",
                    "date": "2022-01-29 20:46:48+00:00",
                    "text": "@certik, much agreed. Thanks for the suggestion to keep this a bit more palatable."
                },
                {
                    "user": "certik",
                    "date": "2022-01-29 20:57:08+00:00",
                    "text": "@fluidnumerics-joe thanks for all your videos! Fortran needs that.\nOnce LFortran gets to beta (from alpha), this year, I am hoping to collaborate with you and others who have Fortran codes. There is all kinds of cool work that we could do, from GPU support to optimizations. We are adding some excellent optimizations, we just merged this one: https://gitlab.com/lfortran/lfortran/-/merge_requests/1649, which optimizes if (modulo(int(Nd), 2) == 1) x = -x into floating point \"bit hacks\" in LLVM/assembly using shift and xor, which we needed for a very fast sin(x) function implementation. GFortran wasn't able to do that. Once we have enough of such optimizations, I think people will be very excited with the performance."
                },
                {
                    "user": "ivan-pi",
                    "date": "2022-01-29 21:06:32+00:00",
                    "text": "I also found the title smart and provocative in the given context."
                },
                {
                    "user": "awvwgk",
                    "date": "2022-01-30 11:23:54+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2022-01-30 11:25:35+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/371/"
                },
                {
                    "user": "awvwgk",
                    "date": "2022-01-30 11:27:21+00:00",
                    "text": "Thanks everybody, I'm going ahead and merge."
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2022-01-30 11:27:42+00:00",
                    "text": "The preview build for this PR has now been deleted."
                },
                {
                    "user": "fluidnumerics-joe",
                    "date": "2022-01-31 16:28:23+00:00",
                    "text": "Once LFortran gets to beta (from alpha), this year, I am hoping to collaborate with you and others who have Fortran codes. There is all kinds of cool work that we could do, from GPU support to optimizations. We are adding some excellent optimizations, we just merged this one: https://gitlab.com/lfortran/lfortran/-/merge_requests/1649, which optimizes if (modulo(int(Nd), 2) == 1) x = -x into floating point \"bit hacks\" in LLVM/assembly using shift and xor, which we needed for a very fast sin(x) function implementation. GFortran wasn't able to do that. Once we have enough of such optimizations, I think people will be very excited with the performance.\n\n@certik I'd love to dive into LFortran with you all. I recall some time ago, we had briefly discussed Focal (@LKedward ) and the possibility of supporting device subroutines and other Fortran native approaches for GPU acceleration. That being said, I'm still game for the Fortran-C interoperability approach."
                }
            ]
        },
        {
            "number": 370,
            "user": "jvdp1",
            "date": "2022-01-28 19:02:50+00:00",
            "title": "Fortran Monthly Newsletter February 2022",
            "text": "Here is a PR for the February 2022 newsletter:\n\n PRs summary\n GitHub stats data\n Flang updates by @AlexisPerry\n LFortran updates by @certik",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "jvdp1",
                    "date": "2022-01-30 18:19:50+00:00",
                    "text": "There was a lot of activity at the fpm-docs regarding translations in French, Spanish, Chinese and Dutch this month as well.\n\nShould we keep fpm-docs in the fpm section? Or would it be better to create a new section for fpm-docs?"
                },
                {
                    "user": "awvwgk",
                    "date": "2022-01-30 21:27:28+00:00",
                    "text": "I would have the docs associated with fpm, which they are afterall."
                },
                {
                    "user": "AlexisPerry",
                    "date": "2022-01-31 23:09:02+00:00",
                    "text": "Please see PR 372 for Flang updates."
                },
                {
                    "user": "certik",
                    "date": "2022-02-01 04:01:18+00:00",
                    "text": "@czgdp1807 is planning to add LFortran updates by tomorrow morning."
                },
                {
                    "user": "czgdp1807",
                    "date": "2022-02-01 06:33:34+00:00",
                    "text": "N.B. - #373"
                },
                {
                    "user": "jvdp1",
                    "date": "2022-02-01 16:50:56+00:00",
                    "text": "Thank you all for your contributions.\nI will merge it tomorrow morning if there are no other comments. Feel free to merge it if you believe it can be merged as is."
                },
                {
                    "user": "awvwgk",
                    "date": "2022-02-01 16:57:02+00:00",
                    "text": "I think it is okay as is. We try to target the 1st of each month for publishing the newsletter. Let's merge it."
                },
                {
                    "user": "jvdp1",
                    "date": "2022-02-01 17:25:36+00:00",
                    "text": "I think it is okay as is. We try to target the 1st of each month for publishing the newsletter. Let's merge it.\n\nGood. I'll merge it."
                },
                {
                    "user": "certik",
                    "date": "2022-02-01 17:36:34+00:00",
                    "text": "Thanks @czgdp1807!"
                }
            ]
        },
        {
            "number": 369,
            "user": "henilp105",
            "date": "2022-01-19 03:32:25+00:00",
            "title": "Resolves Issue #217",
            "text": "I have made changes that would handle all search package  regex and this also solves the Issue #217.\nThanks and Regards,\nHenil Panchal",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "henilp105",
                    "date": "2022-01-19 03:32:43+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2022-01-19 03:34:12+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/369/"
                },
                {
                    "user": "henilp105",
                    "date": "2022-01-19 03:39:07+00:00",
                    "text": "this works perfectly and also resolves all problems in the #217 thus I request the collaborators to merge the pull request.\nThanks and Regards,\nHenil Panchal"
                },
                {
                    "user": "henilp105",
                    "date": "2022-01-19 09:06:22+00:00",
                    "text": "@awvwgk  This code works perfectly and also resolves the issue #217.\nThanks and Regards,\nHenil Panchal"
                },
                {
                    "user": "henilp105",
                    "date": "2022-01-21 05:44:31+00:00",
                    "text": "@jme52 @certik @awvwgk @jacobwilliams @arjenmarkus This code works perfectly and also resolves the issue #217  thus, I Request to merge the above pull request, you may verify the following pr at: https://fortran-lang.org/pr/369/.\nThanks and Regards,\nHenil Panchal"
                },
                {
                    "user": "henilp105",
                    "date": "2022-01-25 10:23:04+00:00",
                    "text": "@jme52 @certik @awvwgk @jacobwilliams @arjenmarkus This code works perfectly and also resolves the issue #217 thus, I Request to merge the above pull request, you may verify the following pr at: https://fortran-lang.org/pr/369/.\nThanks and Regards,\nHenil Panchal"
                },
                {
                    "user": "awvwgk",
                    "date": "2022-01-25 10:53:24+00:00",
                    "text": "@henilp105 Thanks for sharing. Be assured we haven't overlooked or forgotten your contribution. We will have a look as soon as time permits."
                },
                {
                    "user": "henilp105",
                    "date": "2022-04-14 05:01:20+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2022-04-14 05:02:59+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/369/"
                },
                {
                    "user": "henilp105",
                    "date": "2022-04-14 05:06:53+00:00",
                    "text": "@awvwgk  @LKedward This code works perfectly and also resolves the issue #217.  all the requested changes have been implemented.\nThanks and Regards,\nHenil Panchal"
                },
                {
                    "user": "henilp105",
                    "date": "2022-04-16 05:20:41+00:00",
                    "text": "@awvwgk @LKedward   all the requested changes have been implemented. \ud83d\udc4d\nThanks and Regards,\nHenil Panchal"
                },
                {
                    "user": "LKedward",
                    "date": "2022-04-16 08:43:17+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2022-04-16 08:45:08+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/369/"
                },
                {
                    "user": "LKedward",
                    "date": "2022-04-16 08:51:49+00:00",
                    "text": "Great stuff, many thanks Henil!"
                },
                {
                    "user": "LKedward",
                    "date": "2022-04-16 08:56:04+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2022-04-16 08:56:22+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 368,
            "user": "henilp105",
            "date": "2022-01-19 03:11:43+00:00",
            "title": "Resolves Issue #217",
            "text": "I have made changes that would handle all regex and this also solves the Issue #217.\nThanks and Regards,\nHenil Panchal",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "henilp105",
                    "date": "2022-01-19 03:12:32+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2022-01-19 03:13:57+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/368/"
                },
                {
                    "user": "henilp105",
                    "date": "2022-01-19 03:27:58+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2022-01-19 03:28:19+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 367,
            "user": "henilp105",
            "date": "2022-01-19 02:56:23+00:00",
            "title": "Resolves Issue #217",
            "text": "I have made changes that would handle all regex and this also solves the Issue #217.\nThanks and Regards,\nHenil Panchal",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "henilp105",
                    "date": "2022-01-19 02:57:17+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2022-01-19 02:58:46+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/367/"
                },
                {
                    "user": "henilp105",
                    "date": "2022-01-19 03:03:50+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2022-01-19 03:04:15+00:00",
                    "text": "The preview build for this PR has now been deleted."
                },
                {
                    "user": "henilp105",
                    "date": "2022-01-19 03:07:25+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2022-01-19 03:09:03+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/367/"
                },
                {
                    "user": "henilp105",
                    "date": "2022-01-19 03:10:10+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2022-01-19 03:10:30+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 366,
            "user": "henilp105",
            "date": "2022-01-18 16:08:48+00:00",
            "title": "Resolves Issue #217 search packages",
            "text": "I have made a function that would handle all the search utilities and regex and this also solves the Issue #217.\nThanks and Regards,\nHenil Panchal",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "henilp105",
                    "date": "2022-01-18 16:09:04+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2022-01-18 16:10:52+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/366/"
                },
                {
                    "user": "henilp105",
                    "date": "2022-01-18 16:20:10+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2022-01-18 16:20:34+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 365,
            "user": "henilp105",
            "date": "2022-01-18 15:38:28+00:00",
            "title": "Resolves Issue fortran-lang#217",
            "text": "I have made a function that does the Regex and Resolves the issue for c++.\nThanks and Regards,\nHenil Panchal",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "henilp105",
                    "date": "2022-01-18 15:38:48+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2022-01-18 15:40:29+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/365/"
                },
                {
                    "user": "henilp105",
                    "date": "2022-01-18 15:45:14+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2022-01-18 15:45:40+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 364,
            "user": "henilp105",
            "date": "2022-01-18 14:23:56+00:00",
            "title": "Resolves Issue #217",
            "text": "I have made a function that does the Regex and Resolves the issue for c++.\nThanks and Regards,\nHenil Panchal",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "henilp105",
                    "date": "2022-01-18 14:24:23+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2022-01-18 14:26:12+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/364/"
                }
            ]
        },
        {
            "number": 363,
            "user": "henilp105",
            "date": "2022-01-17 16:57:16+00:00",
            "title": "Resolves spelling mistake mentioned in fortran-lang#304",
            "text": "Resolves spelling mistake mentioned in #304\n2 n 's instead of 3 in running (instead of runnning)\nthanks and regards,\nHenil Panchal",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "henilp105",
                    "date": "2022-01-17 16:58:17+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2022-01-17 17:00:00+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/363/"
                },
                {
                    "user": "henilp105",
                    "date": "2022-01-17 17:02:39+00:00",
                    "text": "the Build Preview is perfect and I request the contributers to merge them."
                },
                {
                    "user": "awvwgk",
                    "date": "2022-01-17 20:16:42+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2022-01-17 20:17:05+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 362,
            "user": "henilp105",
            "date": "2022-01-17 05:03:29+00:00",
            "title": "Resolves issue fortran-lang#361 Updates spelling-mistakes",
            "text": "Missing \"e\" in \"WG5: International Fortran Standards Committe\" to Missing \"e\" in \"WG5: International Fortran Standards committee\"\nit might seem a little odd for a spelling mistake but I wanted to contribute.\nthanks and regards,\nHenil Panchal",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "henilp105",
                    "date": "2022-01-17 15:30:49+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2022-01-17 15:32:19+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/362/"
                },
                {
                    "user": "henilp105",
                    "date": "2022-01-17 15:39:33+00:00",
                    "text": "the Build Preview is perfect and I request the contributers to merge them."
                },
                {
                    "user": "henilp105",
                    "date": "2022-01-17 15:47:22+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2022-01-17 15:49:17+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/362/"
                },
                {
                    "user": "henilp105",
                    "date": "2022-01-17 15:53:10+00:00",
                    "text": "yes sir sure."
                },
                {
                    "user": "henilp105",
                    "date": "2022-01-17 15:53:32+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2022-01-17 15:55:04+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/362/"
                },
                {
                    "user": "awvwgk",
                    "date": "2022-01-17 15:58:39+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2022-01-17 15:59:00+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 361,
            "user": "Beliavsky",
            "date": "2022-01-09 15:10:16+00:00",
            "title": "Missing \"e\" in \"WG5: International Fortran Standards Committe\"",
            "text": "At https://fortran-lang.org/learn/ there is a missing \"e\" in \"WG5: International Fortran Standards Committe\" .\nI think that for very small changes it is simpler if the repo owner fixes the typo, rather than accepting a pull request.",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 360,
            "user": "milancurcic",
            "date": "2022-01-05 17:48:26+00:00",
            "title": "Fix broken link in newsletter",
            "text": "Fixes a mistyped link to test-drive.",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 359,
            "user": "milancurcic",
            "date": "2022-01-01 17:55:52+00:00",
            "title": "Fix time calculation in the PRs script",
            "text": "While preparing #357 I found a small issue in the PRs script which manifests only in December. This PR fixes it and adds a requirements.txt file to keep track of the script dependencies.\nWe should also have a short guide on making a newsletter, which is for another PR.",
            "is_open": false,
            "labels": [
                "bug"
            ],
            "comments": [
                {
                    "user": "zmoon",
                    "date": "2022-03-21 19:11:53+00:00",
                    "text": "Maybe the requirements.txt should go inside the _scripts directory?"
                },
                {
                    "user": "milancurcic",
                    "date": "2022-03-31 01:12:22+00:00",
                    "text": "OK, done, let me know if it's good to go."
                }
            ]
        },
        {
            "number": 358,
            "user": "milancurcic",
            "date": "2022-01-01 17:51:34+00:00",
            "title": "Fix end time calculation in the PRs script",
            "text": "While preparing #357 I found a small issue in the PRs script which manifests only in December. This PR fixes it and adds a requirements.txt file to keep track of the script dependencies.\nWe should also have a short guide on making a newsletter, which is for another PR.",
            "is_open": false,
            "labels": [
                "bug"
            ],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2022-01-01 17:52:14+00:00",
                    "text": "I messed up my branch, it shouldn't include these extra commits. Hold on."
                }
            ]
        },
        {
            "number": 357,
            "user": "milancurcic",
            "date": "2021-12-31 20:25:22+00:00",
            "title": "January 2022 newsletter draft",
            "text": "Sorry for the last-minute submission. Considering people may be offline around New Year's eve, let's plan to complete and merge this by Wednesday, January 5, if possible\n\n PRs summary\n GitHub stats data\n Flang updates by @AlexisPerry\n LFortran updates by @certik",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "AlexisPerry",
                    "date": "2022-01-04 21:14:04+00:00",
                    "text": "Flang updates are available here: milancurcic#3"
                },
                {
                    "user": "milancurcic",
                    "date": "2022-01-04 21:27:07+00:00",
                    "text": "I'm confused about something here. This PR by @AlexisPerry introduced an unintended commit ( milancurcic@c6509ff), which I missed because only the newsletter file was listed under GitHub's Files changed tab. But now that that PR is merged, I see that the changes to _data/package_index.yml are included here, but they shouldn't be.\n@AlexisPerry @awvwgk do you understand why this is and how to fix it? I'm pretty sure this has to do with my not understanding git to a sufficient level."
                },
                {
                    "user": "AlexisPerry",
                    "date": "2022-01-04 21:36:14+00:00",
                    "text": "That's my fault, sorry!  I saw changes to that file showing up in my PR and undid them since I only wanted to update the newsletter file.  I don't know how to remove specific commits, but if someone does, this is the one that need removing:\n\nd292447"
                },
                {
                    "user": "jvdp1",
                    "date": "2022-01-04 21:38:46+00:00",
                    "text": "Could you try `git revert d292447`?\n\nLe mar. 4 janv. 2022 \u00e0 22:37, Milan Curcic ***@***.***> a\n\u00e9crit :\n\u2026\n Okay, it seems like it's this commit ***@***.***\n <milancurcic@d292447>.\n Is there an easy way to revert only that one commit?\n\n \u2014\n Reply to this email directly, view it on GitHub\n <#357 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AD5RO7F27IF6PO3ZDYMO2MLUUNSBNANCNFSM5LBVYVOQ>\n .\n Triage notifications on the go with GitHub Mobile for iOS\n <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675>\n or Android\n <https://play.google.com/store/apps/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>.\n\n You are receiving this because you commented.Message ID:\n ***@***.***>"
                },
                {
                    "user": "milancurcic",
                    "date": "2022-01-04 21:41:37+00:00",
                    "text": "@jvdp1 Wonderful, that seems to have worked. :)"
                },
                {
                    "user": "milancurcic",
                    "date": "2022-01-04 21:46:17+00:00",
                    "text": "Thank you all for your contributions! Let's publish tomorrow as planned."
                },
                {
                    "user": "certik",
                    "date": "2022-01-04 22:01:34+00:00",
                    "text": "Thanks Milan for pushing it!"
                }
            ]
        },
        {
            "number": 356,
            "user": "samharrison7",
            "date": "2021-12-31 17:25:14+00:00",
            "title": "Adding Fortran Error Handler to packages index",
            "text": "I've just made my Fortran error handling framework compatible with fpm, so I thought it would be a good time to add to the Fortran Lang package index! Pretty certain it meets all the requirements.\nHere is the repo: https://github.com/samharrison7/fortran-error-handler\nRequired details as follows:\n- name: fortran-error-handler\n  github: samharrison7/fortran-error-handler\n  description: Comprehensive error handling framework for Modern Fortran\n  categories: programming\n  tags: errors logging fpm\n  version: none\n  license: MIT",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 355,
            "user": "milancurcic",
            "date": "2021-12-24 01:54:32+00:00",
            "title": "2021 review article draft",
            "text": "This PR introduces the draft of the 2021 Fortran-lang review article.\nI think it's mostly complete. I will likely be making small edits over the next few days. But I may have missed something. If you notice something is missing and should be added, please add it. If you add new content, please commit directly to this PR. if you edit existing content, please submit a commit suggestion via GitHub.\nAnybody is welcome to contribute. If you review, edit, or add anything, please also add your name to the list of authors.\nIf possible and if there are no objections, let's please aim to merge and publish on Wednesday, December 29.\nThank you!",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2021-12-24 01:55:06+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-12-24 01:56:39+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/355/"
                },
                {
                    "user": "milancurcic",
                    "date": "2021-12-24 02:00:30+00:00",
                    "text": "The images don't seem to show up in the preview, but they do in my local build. I wonder if that's expected."
                },
                {
                    "user": "milancurcic",
                    "date": "2021-12-24 18:32:01+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-12-24 18:33:51+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/355/"
                },
                {
                    "user": "milancurcic",
                    "date": "2021-12-29 16:10:27+00:00",
                    "text": "Thanks a lot, @certik, these are great. I will have a few copy edits and suggestions."
                },
                {
                    "user": "certik",
                    "date": "2021-12-29 16:43:35+00:00",
                    "text": "Thanks for improving the wording. Looks good so far."
                },
                {
                    "user": "milancurcic",
                    "date": "2021-12-29 18:44:28+00:00",
                    "text": "Thank you all for the great additions and fixes--I'll go ahead and merge."
                },
                {
                    "user": "certik",
                    "date": "2021-12-29 19:47:23+00:00",
                    "text": "It looks great now, thanks @milancurcic for the improvements and thank you and everybody for writing this up!"
                },
                {
                    "user": "jvdp1",
                    "date": "2021-12-30 18:31:28+00:00",
                    "text": "I was away a few days. Thank you @milancurcic and all of you for this nice review of 2021!"
                },
                {
                    "user": "certik",
                    "date": "2021-12-30 19:06:05+00:00",
                    "text": "So this wraps up 2021. Very good year for Fortran. Thank you all!\nNow, what should be our goals for 2022? Let's write down realistic goals that we should try to achieve."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-12-30 21:21:45+00:00",
                    "text": "Now, what should be our goals for 2022? Let's write down realistic goals that we should try to achieve.\n\nLet's discuss on discourse (https://fortran-lang.discourse.group/t/2465), conversations on closed issues/prs are always hard to find."
                },
                {
                    "user": "certik",
                    "date": "2021-12-30 21:41:47+00:00",
                    "text": "Sure. I created a dedicated thread for that: https://fortran-lang.discourse.group/t/fortran-goals-for-2022/2473"
                }
            ]
        },
        {
            "number": 354,
            "user": "jvdp1",
            "date": "2021-12-18 18:33:03+00:00",
            "title": "FOSDEM 2022",
            "text": "FOSDEM 2022 will be virtual again.\nAny interest to present some fortran-lang projects there? The deadline for submitting abstracts is quite close (end Dec.).",
            "is_open": true,
            "labels": [],
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2021-12-19 18:04:06+00:00",
                    "text": "Maybe post on discourse for a broader audience. I think stdlib has been moving quite a bit since FortranCon, also I'm done for a while with presenting fpm at conferences ;)."
                },
                {
                    "user": "jvdp1",
                    "date": "2021-12-20 19:58:24+00:00",
                    "text": "Maybe post on discourse for a broader audience. I think stdlib has been moving quite a bit since FortranCon, also I'm done for a while with presenting fpm at conferences ;).\n\nUndersood ;)\nI will mention it on Discourse, at least to announce it.  Unfortunately I don't have time right now for stdlib."
                }
            ]
        },
        {
            "number": 353,
            "user": "ghost",
            "date": "2021-12-17 12:51:53+00:00",
            "title": "Add MCST LCC C, C++ and Fortran compiler",
            "text": "Hello!\nI recently started learning Fortran and I like it. In Russia we have our own proprietary processor architectures Elbrus a.k.a. e2k and SPARC a.k.a. MCST-R (licensed by Sun) developed by the MCST (Moscow Center of SPARC Technologies) company. Also, MCST has own C, C++ and Fortran proprietary compiler named LCC. I think it is worth mentioning in the list of available compilers. Unfortunately, I haven't had a chance to try it yet, since the processors are not yet available to individuals.\nThanks.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "ivan-pi",
                    "date": "2021-12-17 13:04:16+00:00",
                    "text": "Would have never known. Thanks for the contribution. Here's the auto-translated text from the homepage, in case any reviewers want to add something:\n\nThe proprietary compiler of MCST JSC, the developer of the Elbrus architecture. Supports programming languages \u200b\u200bC, C ++, Fortran. It is largely compatible with the GCC (GNU Compiler Collection) compiler, both in terms of launch parameters and GNU language extensions. It has advanced tools for optimizing the generated machine code, allowing you to choose between the speed of the program and its size, as well as the compilation time.\nProduced for computers of Elbrus and SPARC architecture (MCST-R). Supplied as part of the Elbrus Programming System - standardly together with the operating system or or separately, under a supply agreement.\nA cross-compiler is a version of the compiler that functions on computers of x86-64 architecture and at the same time outputs the machine code of the Elbrus or SPARC architecture. You can get a cross-compiler upon request to  the support service if you have a license to use a conventional compiler (programming system) - for this you need to provide the model of the computer (processor), the name and version number of the target operating system. For convenience, together with the cross-compiler, an archive of files of the preinstalled Elbrus Linux system can be provided, if it is the target system for building programs."
                }
            ]
        },
        {
            "number": 352,
            "user": "Beliavsky",
            "date": "2021-12-16 19:28:14+00:00",
            "title": "Twitter feed on the site -- watch the language",
            "text": "Looking at the tweets displayed on the site, I currently see the one below. It's ok for Twitter, but given the language, I think it makes the fortran-lang site seem less serious and professional. Is it possible to only display tweets on the site that pass a language filter? If not, the people behind @fortranlang should considering more judicious about what is retweeted.\nI hope I don't sound too stuffy. The tweet and thread were funny and harmless, but I don't they match the tone of the web site.\nFortran Retweeted\nDr. H\u00e9lo\u00efse Stevance \ud83d\udda4\u2728\n@Sydonahi\nHoly fuck Fortran is fast but I didn't know HOW fast.\nGenerated 1 million values in 4 nested for loops (do loops), thought it'd take a couple minutes.. DID IT UNDER 2 SECONDS WTF",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2021-12-17 00:49:49+00:00",
                    "text": "I agree, we shouldn't have such language on the site.\nBefore retweeting, I had a pause for the same reason. I decided that the potential pros outweighed the potential cons, so I did it. I forgot that we also show the feed on the landing page, which is problematic in a situation like this.\nGoing forward, we can agree to simply not RT any such language, even of it may be beneficial (e.g. this RT brought us ~20 new followers).\nOr, we can remove the feed from the site, and only provide a link to the Twitter feed."
                },
                {
                    "user": "certik",
                    "date": "2021-12-17 02:34:08+00:00",
                    "text": "I fixed this by retweeting some nice tweet, so now I see this:\n\nSo that should work.\nYes, I am not happy with the quality of interactions at Twitter in general, but it is the most effective social media right now, so I think it can bring us some good new users. I know it did. I don't know why this particular tweet generated such attention, but it did. So maybe next time we can retweet, and then retweet some other tweets, so that it is not the top 2 tweets, and then it does not appear at the front page."
                },
                {
                    "user": "milancurcic",
                    "date": "2021-12-17 03:06:59+00:00",
                    "text": "I don't know why this particular tweet generated such attention, but it did.\n\nI think because the account has 22.7k followers. It's powerful."
                },
                {
                    "user": "ivan-pi",
                    "date": "2021-12-17 12:52:24+00:00",
                    "text": "The person behind the tweet (@HeloiseS) is a computational astronomer.\nAmusingly, many of the responses to her tweet use the uppercase form FORTRAN, and even some examples of implicit typing. Goes to show how deeply entrenched these obsolescent forms are... Immediately after comes a backlash of responses citing equivalent or better performance with Python + Numba, or Julia.\nOverall, I agree not to retweet in case of vulgar language, but think we've learned a valuable lesson from this tweet. Personally, I like the Twitter feed on the front page. I'm not an active Twitter user but I enjoy seeing some of the tweets."
                },
                {
                    "user": "HeloiseS",
                    "date": "2021-12-17 18:12:01+00:00",
                    "text": "Hello everybody!\nSince I'm the original poster I thought I'd add my 2cent, especially regarding certain types of language on twitter and other platforms and why that tweet got so much traction on social media.\nTwitter interactions are powerful because they walk a weird line between profession and personal content. Being informal and personable in a tweet is likely to drive interactions; using emotive language to share excitement (in this case) is an unconscious queue for others to join you in something they find exciting, whether it be how fotran is really cool or how numba can be faster in certain cases. It's called social media for a reason.\nI understand some people don't use certain types of language, and what you choose to display on your cite is your prerogative (the solution of quickly RT a couple other tweets is a smart one), but I do want to bring up the fact that casual swearing is less to do with professionalism and more to do with cultural norms in terms of geography, nationality and, to some extent, generation and class. Overall, blanket rules against swearing are rarely helpful and often at the disservice of minority groups (although it may not be the intention) - besides, one can be plenty disrespectful without 4-letter words. Maybe ensuring that the message reflects a spirit of congeniality is a better focus.\nFinal point, as someone who does know a fair bit about social media, I wouldn't recommend trying to seem too formal. Fortran's image isn't exactly that of silly goofy tool - if anything the very dry and stoic image might be limiting the interest you'll get from young millennials and gen z who have a different experience of how brands represent themselves (check the duo lingo or Ryanair Tik tok accounts) and expect a more personable, less serious approach. As for the older folks? I think it's safe to say they won't stop using Fortran if you start tweeting memes some day ;)\nHope this could bring some new perspectives."
                },
                {
                    "user": "Beliavsky",
                    "date": "2021-12-17 18:13:58+00:00",
                    "text": "On the general subject of Twitter, I follow @SciPyTip , which has 131.4K Followers (including me) and which provides tips such as\n\"np.ones() returns an array of specified shape filled with 1's. np.zeros() does the same but filled with 0's.\"\nI guess falling attention spans have created demand for information in small quantities. Motivated by this, I just created @Fortrantip on Twitter and tweeted some very basic things such as Hello World program and a demonstration of a do loop."
                },
                {
                    "user": "milancurcic",
                    "date": "2021-12-17 18:33:39+00:00",
                    "text": "Thanks a lot for writing here, @HeloiseS, and good points which I agree with.\nYour tweet was obviously not meant as disrespectful (and that's why I chose to RT it), though I see how a word can be offensive to some regardless of the context. We can't possibly make everybody happy all the time, but we do our best and continuously learn and adjust course to make most people happy most of the time. Though I don't like blanket rules, they may help with nuanced situations and avoiding to spend time on discussing whether something is appropriate or not. If not the best solution, avoiding such language for us may be the easiest solution for now.\nRe: formality and dryness that is pervasive in Fortran, I actively work to change this image and to make it attractive to younger audiences. It's possible to brand something dry, formal, and standard like Fortran as something that's also fun and playful."
                },
                {
                    "user": "certik",
                    "date": "2021-12-17 22:55:19+00:00",
                    "text": "Thanks for your feedback @HeloiseS, we appreciate it. I think none of us are offended by swear words. It's more of what kind of an image we want to show, and we've been figuring it out as we go. How to best handle a tweet like yours was new to us. :)\nAnyway, thanks for tweeting about Fortran! And if you have any questions, definitely let us know."
                },
                {
                    "user": "HeloiseS",
                    "date": "2021-12-17 23:24:06+00:00",
                    "text": "I guess falling attention spans have created demand for information in small quantities. Motivated by this, I just created @Fortrantip on Twitter and tweeted some very basic things such as Hello World program and a demonstration of a do loop.\n\nThat is a great idea, and the real issue here isn't falling attention span, it's the exponential increase in content that people can choose from. People's attention is the most valuable currency on the internet and you are competing with thousands or millions of other content creators, which is why short snappy content like that scipy example work well.\nI'll follow that new Fortran account and tag you when I stumble upon tips and tricks I share on my platform :)\nEdit: @Beliavsky I recommend adding a profile picture, a banner and a slightly more extended description to make the account look legit :)"
                },
                {
                    "user": "certik",
                    "date": "2021-12-19 23:17:59+00:00",
                    "text": "Edit: @Beliavsky I recommend adding a profile picture, a banner and a slightly more extended description to make the account look legit :)\n\n@Beliavsky, I saw that you added the same logo as we use for the main Fortran account. I got confused as I mainly look at the logo and I thought it was the main Fortran account tweeting it. Do you think you could please modify the logo? You can perhaps add \"t\" to the F, or \"tip\" or some icon or something to make it distinct enough."
                },
                {
                    "user": "LKedward",
                    "date": "2021-12-20 10:08:41+00:00",
                    "text": "I got confused as I mainly look at the logo and I thought it was the main Fortran account tweeting it.\n\nThe same thing happened to me, I thought it was from the Fortran-lang account!\nI agree it would be really good if the profile pic could be changed - perhaps even just a simple recoloring of the logo background?"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-12-20 11:08:06+00:00",
                    "text": "We still need to establish some guidelines for the usage of the logo and assorted assets (see #342). I don't see an issue with using or adapting the logo or its color for Fortran related projects, but we should give some guidance on this. While I don't see a big issue with using the same logo, I think we should encourage some creative difference.\n@Beliavsky I can offer some help with designing an avatar for the FortranTip account, feel free to email or PM me via Discourse and we can create something fitting. I'm really looking forward to establish the fpm color palette around Fortran ;)."
                },
                {
                    "user": "milancurcic",
                    "date": "2021-12-20 15:22:39+00:00",
                    "text": "I agree and also recommend changing the @FortranTip logo. If your intent is to communicate that the account is related to but different from @fortranlang, then I think changing the background color as @LKedward suggested is best. I suggest some soft (pastel) color, pick any that you like best. Adding \"tip\" to the logo as @certik suggested would be great, but may be difficult in practice considering the circular shape of Twitter profile pics.\nEdit: I just noticed Sebastian's recommended colors here. I like all of them. One of them could be a good choice for @FortranTip."
                },
                {
                    "user": "Beliavsky",
                    "date": "2021-12-20 16:15:06+00:00",
                    "text": "I understand the need to avoid confusion with the fortranlang twitter and have changed the logo to what @milancurcic linked to: small Fs of various colors. Is that ok?"
                },
                {
                    "user": "milancurcic",
                    "date": "2021-12-20 16:29:03+00:00",
                    "text": "@Beliavsky, interesting. It's not what I had in mind (I thought just having a single F, but with a different color), but now that I see this, I kinda like it. Definitely distinct from the @fortranlang logo."
                }
            ]
        },
        {
            "number": 351,
            "user": "awvwgk",
            "date": "2021-12-12 18:56:49+00:00",
            "title": "Use HEAD to reference default branch",
            "text": "reference HEAD commit instead of branch name",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2021-12-24 18:24:48+00:00",
                    "text": "I just noticed this--thank you!"
                },
                {
                    "user": "mwtoews",
                    "date": "2022-04-27 11:50:28+00:00",
                    "text": "This is now causing 404: Not Found errors. I believe it was correct before."
                }
            ]
        },
        {
            "number": 350,
            "user": "p-costa",
            "date": "2021-12-07 23:18:21+00:00",
            "title": "Updated CaNS item so that it shows the version",
            "text": "None",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "p-costa",
                    "date": "2021-12-07 23:18:37+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-12-07 23:20:23+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/350/"
                },
                {
                    "user": "p-costa",
                    "date": "2021-12-07 23:22:04+00:00",
                    "text": "looks good :) #delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-12-07 23:22:45+00:00",
                    "text": "The preview build for this PR has now been deleted."
                },
                {
                    "user": "p-costa",
                    "date": "2021-12-09 15:58:12+00:00",
                    "text": "It's a pedantic change, but could anyone approve it? E.g., @certik @milancurcic @awvwgk?\nThanks! :)"
                }
            ]
        },
        {
            "number": 349,
            "user": "milancurcic",
            "date": "2021-11-27 18:20:59+00:00",
            "title": "Newsletter draft for December 2021",
            "text": "Here's the draft. Please add any events that I missed.\n\n Update PR data on Nov 30\n Update contributors data on Nov 30\n Flang update from @AlexisPerry\n LFortran update from @certik\n\nThank you!",
            "is_open": false,
            "labels": [
                "news"
            ],
            "comments": [
                {
                    "user": "AlexisPerry",
                    "date": "2021-11-29 18:13:43+00:00",
                    "text": "PR created for Flang updates: milancurcic#2"
                },
                {
                    "user": "certik",
                    "date": "2021-12-01 07:11:15+00:00",
                    "text": "I don't have the time to write it up for LFortran. If anybody has time to help, I would appreciate it. If not, then let's skip this month."
                },
                {
                    "user": "milancurcic",
                    "date": "2021-12-01 15:17:43+00:00",
                    "text": "No problem, I should be able to write it up this afternoon."
                },
                {
                    "user": "milancurcic",
                    "date": "2021-12-01 17:17:34+00:00",
                    "text": "@certik see 64e5950. I only summarized user-facing changes for brevity. I think this newsletter is ready to go."
                },
                {
                    "user": "milancurcic",
                    "date": "2021-12-01 21:12:30+00:00",
                    "text": "I'll go ahead and merge. Thank you all!"
                },
                {
                    "user": "certik",
                    "date": "2021-12-01 21:56:18+00:00",
                    "text": "@milancurcic thanks Milan! I really appreciate it. It looks great."
                }
            ]
        },
        {
            "number": 348,
            "user": "milancurcic",
            "date": "2021-11-27 17:43:09+00:00",
            "title": "Fix typo in author field",
            "text": "There was a typo in the \"author\" field which caused the authors list not to be rendered in the November newsletter, as pointed out by @certik here.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2021-11-27 17:43:29+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-11-27 17:45:09+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/348/"
                },
                {
                    "user": "milancurcic",
                    "date": "2021-11-27 17:47:17+00:00",
                    "text": "It works, I'll merge."
                },
                {
                    "user": "milancurcic",
                    "date": "2021-11-27 17:47:29+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-11-27 17:47:47+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 347,
            "user": "urbanjost",
            "date": "2021-11-24 02:00:57+00:00",
            "title": "Fortran Intrinsics",
            "text": "Fortran Intrinsics descriptions have been discussed as an addition to fortran-lang.org.  Herein is a skeleton for the descriptions as a series of MINIBOOK entries.\nPreview available at https://fortran-lang.org/pr/347/",
            "is_open": true,
            "labels": [],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2021-11-24 02:14:28+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-11-24 02:18:19+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/347/"
                },
                {
                    "user": "certik",
                    "date": "2021-11-24 02:30:09+00:00",
                    "text": "Nice! This looks awesome. Did you write all that? I am asking to ensure we don't run into copyright issues.\nI noticed sometimes the formatting needs improvements, e.g. here:\nhttps://fortran-lang.org/pr/347/learn/intrinsics/ATAN2\nthe part -PI <= atan(x) <= PI. is inconsistently bold. But we can fix that after merging."
                },
                {
                    "user": "urbanjost",
                    "date": "2021-11-24 03:22:52+00:00",
                    "text": "I started off writing my own for each intrinsic but at one point to have a starting point for each I filled it in with the pages from the Fortran Wiki, which are under the GFDL, which as I understand it allows for them to be modified and reproduced like this. Many have been changed so much \"modified\" is an understatement. Ones I know I wrote from scratch I marked at MIT. Many more are from scratch but I didn't have anything marking a lot of them as such so to be conservative I marked them as GFDL as they might have started from the Wiki versions. Since all descriptions of the intrinsics in some way depend on the standard definition of Fortran I have puzzled over exactly how anyone can produce Fortran documentation that describes Fortran without issues with the copyright of the standard. The intent here is that the community as a whole can write new ones for each GFPL-licensed minibook and generate an MIT-only based collection. Each of the vendors has produced a description of the intrinsics, often identical or nearly identical to the descriptions in the Fortran standard, which bolstered my interpretation, but I could be wrong. There is a section in the introduction that is also the second index item that I meant as explanation. Otherwise, it would have to be torn down to just an index and volunteers could be asked to write descriptions (from memory?). Perhaps a vendor has an easier time as they are describing their implementation (?). I started each one as plain text and used some simple scripts to initially make them markdown, and will go through and correct the results (have already been doing this) but learning some of the vagaries of this version of markdown partly by looking at the results (and already have been rewriting some of the results) but there are quite a few unexpected ones such as a / needing escaped and such that can be easily corrected; but already spent too much time on this if it cannot proceed so wanted to present what I have so far and see if we can all agree on going forward, or coming up with an alternate plan. Since you are working on LFortran I was thinking you might have some quick answers on exactly how you can document your results if they are based on the Fortran Standard. I thought the text in the Intro explained the pedigree, but perhaps not well enough."
                },
                {
                    "user": "urbanjost",
                    "date": "2021-11-24 03:24:00+00:00",
                    "text": "For some reason the links in the text are not working, but worked on the fork I made I was trying this with."
                },
                {
                    "user": "certik",
                    "date": "2021-11-24 03:35:30+00:00",
                    "text": "@urbanjost thanks for the feedback. I wish FortranWiki was licensed under MIT or some of the permissive Creative Commons licenses (I can't remember which one it is).\nI think the best way forward is to simply note for each part where it is taken from. If you wrote it, then it would be MIT, which is the default, so you don't have to mark it. If it comes from FortranWiki, then credit them and mark GDFL (hopefully it doesn't mean we have to license the whole website under GDFL?). And stuff that came from the standard, let's reference that it came from the standard.\nThat should allow us to move forward.\nI would love to reuse all this for LFortran eventually, so that the compiler can point to the definition, say for error messages, as well as bundle the documentation in some way so that things are available locally, so that it works without internet access. Perhaps we can integrate with VSCode somehow, I don't know yet.\nYes, it would be nice to figure out how to handle the GDFL parts as well as parts copied from the standard, so that we are legally on a solid ground. I don't have the answer right now, but I think the above approach should allow us to get moving, and we can figure out the answer as we go."
                },
                {
                    "user": "urbanjost",
                    "date": "2021-11-24 04:15:46+00:00",
                    "text": "It was written as part of fpm, and later as the fpm-man plugin. The original intent was to make it available from the command line.\nSo that part might be easy. I can try converting back to text and then to Fortran statements and see how it looks. I just installed pandoc, which it says reads github markdown and can output ASCII text.  If that works it would take a minor rework to make it automated to turn this into a fpm-man replacement.\nThe Fortran standard says you can reproduce parts of it by permission, with a possible fee. That might be the ultimate permission or the ultimate roadblock.\nI used to use a nice error message utility called explain. Every code included a message routine that took a product name and an error code.  If you hit an error an external library was called and given the two codes. It then produced the message using a message catalog.  This allowed for easy multi-lingual capabilities as you could have a message catalog for any supported language, or even add local info to the messages, which were kept in ASCII. It had a terse and verbose mode. When called from programs the default was terse, when called manually the default was verbose.  So if you got a message like\nf90 #554 - improper something-or-other\nyou could then enter \"explain f90 544\" and get a full description of the error.  You could also turn off warnings or change their severity level, so if you turned on all the warnings the compiler (or other product) generated, and then realized every line was telling you  \"f90 #300 FORTRAN Statements must be all uppercase\" or \"f90 #200 Variable names are limited to six characters\" you could turn those off with an environment variable.  Except for occasional problems with the environment variable that was used to give a list of directories to search for the catalogs it was great.\nFor security reasons some programs cleared the environment table on startup, which caused the programs to not find the catalogs, and once one of the developers accidently let his personal message catalog get sent to a customer and during a demo in front of the corporate executives of the customer an error produced a barage of profanity; which made quite a few people laugh but outraged some other rather important ones.  Other than that it was great."
                },
                {
                    "user": "certik",
                    "date": "2021-11-24 04:24:44+00:00",
                    "text": "Haha, great story. Yes, indeed we need translations and explanations for each error in LFortran, along the lines you wrote. Rust does something similar."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-11-24 09:41:50+00:00",
                    "text": "Thanks, great work. I have one stylistic remark, could we get away from the all caps keywords and headers?"
                },
                {
                    "user": "urbanjost",
                    "date": "2021-11-24 11:08:11+00:00",
                    "text": "Went to #|### to de-emphasize the headers, but the man-style is being used (which requires the all-cap headers) not only because it is a good style many are familiar with but because I am hoping these pages can be automatically rendered into flat text for use in providing data for a simple in-line tool that can be written in Fortran (ie. that the data can be used for fpm-man) and to create actual manpages.  Experimenting with pandoc(1) for that and it looks very feasible. Perhaps getting triple use out of the descriptions via an automated process is asking for too much, as it limits you to the ASCII character set for the most part, making representing more complex mathematics and probably some other things too much;  but hoping to get this in place not just for the intrinsics but for the stdlib procedures too, where part of the process of providing a routine in stdlib would be to create a description here as well.  At least on my screen going to a smaller size helped, I think.   Maybe should have stuck with HTML but the Markdown seemed like the write way to go, as it has a lower entry barrier so a lot more people would feel comfortable generating the documention, I think."
                },
                {
                    "user": "urbanjost",
                    "date": "2021-11-24 13:57:28+00:00",
                    "text": "pandoc worked reasonably well considering I do not know what all the switches do yet.\nIf you change the name of the directory where the source markdown is on a Linux or Cygwin or WSL\nenvironment and have pandoc installed it makes reasonable man-pages automatically, maybe (text needs a little tweeking, perhaps). I find that enticing, but a program like fman/fpm-man could provide similar functionality and not require following the man-page syntax nor the existence of man(1) for that matter.\n#!/bin/bash\n#@(#) use pandoc(1) to create man-pages.\nheader(){\ncat <<EOF\n.\" Text automatically generated by panman.sh\n.TH \"$SHORTNAME\" \"3\" \"$(date +'%B %d, %Y')\" \"\" \"\" \" \"\n.\" -----------------------------------------------------------------\n.\" * set default formatting\n.\" disable hyphenation\n.nh\n.\" disable justification (adjust text to left margin only)\n.ad l\n.\" -----------------------------------------------------------------\nEOF\n}\ncd $HOME/github/FORK/fortran-lang.org/learn/intrinsics\nmkdir -p /tmp/man/man3\nfor NAME in *.md\ndo\n   SHORTNAME=$(basename $NAME .md)\n   SHORTNAME=${SHORTNAME,,}\n   echo \"NAME: $NAME to $SHORTNAME\"\n   (\n      header\n      sed -n -e '\\%^### NAME%,${ p }'  $NAME|\n         pandoc -f gfm -t man --columns=72 \n   )>/tmp/man/man3/$SHORTNAME.3fortran\n   gzip --force /tmp/man/man3/$SHORTNAME.3fortran\ndone\ncd /tmp/man\nmandb -c .\nenv MANWIDTH=256 man --manpath=/tmp/man -k .|col -b\nenv MANWIDTH=80  man --manpath=/tmp/man --regex '.*'|col -b\nexit"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-11-26 22:49:57+00:00",
                    "text": "Thanks, let's update the #build_preview."
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-11-26 22:54:15+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/347/"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-11-26 22:58:49+00:00",
                    "text": "Ugh, our static side generator doesn't seem to scale well, 1m 11s for the current default build, with the new minibook we are at  3m 43s. We can still stand this build time, but that might not stay sustainable in the long run for more learning resources. Not relevant for this PR but something to keep in mind for the future."
                },
                {
                    "user": "certik",
                    "date": "2021-11-27 04:33:04+00:00",
                    "text": "I have good experience with Hugo. Very fast builds."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-12-01 21:44:54+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-12-01 21:49:47+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/347/"
                },
                {
                    "user": "urbanjost",
                    "date": "2021-12-02 00:09:14+00:00",
                    "text": "Unfortunately a long ways to go, and I want to add basic statements as well  (EXIT, STOP, ALLOCATE ....) and link to other resources. Did not seem to get much interest on Fortran Discourse either.  Waiting for a response from ISO committee on permission to use excerpts from the standard. Hope that does not backfire."
                },
                {
                    "user": "certik",
                    "date": "2021-12-02 00:30:00+00:00",
                    "text": "@urbanjost I thought you got great response. We all want this!"
                },
                {
                    "user": "urbanjost",
                    "date": "2021-12-02 02:12:28+00:00",
                    "text": "I was looking more for feedback from others that might want to contribute and was looking to use that to make an easier way (probably allowing for plain text contributions) as there are quite a few requirements for contributing directly to the PR that I thought might be off-putting.    As a lot of Fortran developers are largely self-taught and there are less freely available resources available (at least historically, it is getting better) I think starting with expanded descriptions of the intrinsics will be useful, but is going to be slow going if only a few people contribute; and I honestly have yet to use the atomic procedures although I am familiar with them. Coming up with some good examples for some of the routines like that is going to be time-consuming.\nWhen I build this on my machine all the links work, but when using the build on the pull request the automatically built alphabetical links work, but the ones in the body of the index do not.  Do those work for anyone?"
                },
                {
                    "user": "milancurcic",
                    "date": "2021-12-02 03:01:39+00:00",
                    "text": "When I build this on my machine all the links work, but when using the build on the pull request the automatically built alphabetical links work, but the ones in the body of the index do not. Do those work for anyone?\n\nSame here, they work in my local build."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2021-12-02 10:44:21+00:00",
                    "text": "I'd love to help out with this, but I am not sure how I can contribute ;).\n\nI just checked the built tutorial and found that you can nicely scroll in\nthe list and view the various items, but when you do click on one, the list\nimmediately scrolls to the beginning. Not enitirely what I expected.\n\nOp do 2 dec. 2021 om 03:12 schreef urbanjost ***@***.***>:\n\u2026\n I was looking more for feedback from others that might want to contribute\n and was looking to use that to make an easier way (probably allowing for\n plain text contributions) as there are quite a few requirements for\n contributing directly to the PR that I thought might be off-putting. As a\n lot of Fortran developers are largely self-taught and there are less freely\n available resources available (at least historically, it is getting better)\n I think starting with expanded descriptions of the intrinsics will be\n useful, but is going to be slow going if only a few people contribute; and\n I honestly have yet to use the atomic procedures although I am familiar\n with them. Coming up with some good examples for some of the routines like\n that is going to be time-consuming.\n\n When I build this on my machine all the links work, but when using the\n build on the pull request the automatically built alphabetical links work,\n but the ones in the body of the index do not. Do those work for anyone?\n\n \u2014\n You are receiving this because you are subscribed to this thread.\n Reply to this email directly, view it on GitHub\n <#347 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YR6QWV74FHOEYISQB63UO3IZPANCNFSM5IU5ASOA>\n .\n Triage notifications on the go with GitHub Mobile for iOS\n <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675>\n or Android\n <https://play.google.com/store/apps/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2021-12-02 10:54:45+00:00",
                    "text": "Also note: a number of entries are doubled - acosh, co_min, get_command,\nibclr, log_gamma, (after not an empty entry), rank, selected_int_kind\n\nOp do 2 dec. 2021 om 11:44 schreef Arjen Markus ***@***.***>:\n\u2026\n I'd love to help out with this, but I am not sure how I can contribute ;).\n\n I just checked the built tutorial and found that you can nicely scroll in\n the list and view the various items, but when you do click on one, the list\n immediately scrolls to the beginning. Not enitirely what I expected.\n\n Op do 2 dec. 2021 om 03:12 schreef urbanjost ***@***.***>:\n\n> I was looking more for feedback from others that might want to contribute\n> and was looking to use that to make an easier way (probably allowing for\n> plain text contributions) as there are quite a few requirements for\n> contributing directly to the PR that I thought might be off-putting. As a\n> lot of Fortran developers are largely self-taught and there are less freely\n> available resources available (at least historically, it is getting better)\n> I think starting with expanded descriptions of the intrinsics will be\n> useful, but is going to be slow going if only a few people contribute; and\n> I honestly have yet to use the atomic procedures although I am familiar\n> with them. Coming up with some good examples for some of the routines like\n> that is going to be time-consuming.\n>\n> When I build this on my machine all the links work, but when using the\n> build on the pull request the automatically built alphabetical links work,\n> but the ones in the body of the index do not. Do those work for anyone?\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <#347 (comment)>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAN6YR6QWV74FHOEYISQB63UO3IZPANCNFSM5IU5ASOA>\n> .\n> Triage notifications on the go with GitHub Mobile for iOS\n> <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675>\n> or Android\n> <https://play.google.com/store/apps/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>.\n>\n>"
                },
                {
                    "user": "urbanjost",
                    "date": "2021-12-02 14:44:41+00:00",
                    "text": "Ends up if you make any typo at all the index repeats the last value it did get, I guess. And apparently the title \"null\" is a reserved word.  It has not been rebuilt and tried but I think the duplicates are all gone now; but had to stick a space in \"null\" for the time being; tried decimal codes and that did not help. So that already helped.\nSo the index is automatically built so I do not have a lot of control over it that I know of; the RHS index is written by hand but the links seem to work fine on my local machine but do not work on fortran lang; so I stuck several variants of the URL for the MERGE function in so the next time it gets built I can see if any of them work.\nNew to the MINIBOOK format and how to build it locally myself; basically just followed the site download directions on the github site so not sure what the optimal way is for everyone to contribute that way;  but just plain-text or markdown versions of any of the intrinsics, especially foir the ones marked with the GNU license in the index; hoping to rewrite those and make MIT-licensed versions.\nNeed to come up with some better process but so far just struggling with getting the skeleton laid out myself. Ideas welcome."
                },
                {
                    "user": "urbanjost",
                    "date": "2021-12-02 23:46:59+00:00",
                    "text": "Thought I tried the quotes (I tried Unicode decimal and hex, ... too) but it works. I might quote all the titles.\nThanks!   Still have odd things like the links on the RHS of the index.html page not working when on fortran-lang.org but working on my local server, and not being able to scroll to the bottom of the LHS index in Firefox but the basic structure looks to be coming together OK."
                },
                {
                    "user": "urbanjost",
                    "date": "2021-12-04 14:24:10+00:00",
                    "text": "If I could ask for a build, I need a trail build to see what links work on a build on fortran-lang.org; I have asked for permission and\nclarification on use of the ISO standard,  but I think based on this document that the ISO standard can be used as a reference\nin this context so this can go forward, albeit this a lot to go this will create a complete skeleton for the standard generic intrinsics\nthat hopefully everyone can help complete.\nhttps://www.iso.org/files/live/sites/isoorg/files/store/en/PUB100206.pdf\n\nCopy parts of a standard for your book or software\nCiting standards or including extracts of standards is encouraged as\nlong as there is the correct acknowledgement and the conditions of your\nlicence are respected. Please contact IEC or ISO for authorization."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-12-04 23:56:56+00:00",
                    "text": "If I could ask for a build\n\nYou can just add a comment with the phrase #build_preview and you will get a new preview. Give it a try."
                },
                {
                    "user": "urbanjost",
                    "date": "2021-12-05 02:09:19+00:00",
                    "text": "#build preview"
                },
                {
                    "user": "urbanjost",
                    "date": "2021-12-05 17:43:53+00:00",
                    "text": "#178"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-12-05 17:53:03+00:00",
                    "text": "#build preview\n      ^\n\nYou are missing an underscore, try with #build_preview."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-12-05 18:02:31+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-12-05 18:06:09+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/347/"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-12-05 18:25:53+00:00",
                    "text": "There is a workflow running scanning all comments posted for the string #build_preview, if it occurs in any context it will trigger a new preview build. Note that this comment and my previous ones did not trigger the preview build because I put a non-printing character in via #</space>build_preview.\nThe difference between your previous comments and mine above is the underscore in #build_preview. Using # as character to signal a special command is a rather suboptimal design choice, since the GitHub UI will try to expand it to a reference. Also, I'm not sure if the preview build workflow is actually documented anywhere.\nAnother thing about the current mechanism is that it is kind of hard to explain without either triggering a new preview build or causing confusion..."
                },
                {
                    "user": "urbanjost",
                    "date": "2021-12-06 15:24:04+00:00",
                    "text": "#build_preview\nThe basic layout is working including the links and a general style has emerged that I think works; except for an oddity where I have to reduce my zoom level for the entire auto-built index to appear. There is still a large amount of work on the descriptions themselves to be done, which I would encourage everyone to help with; with good example programs needed and/or links to additional resources but this is at the point of being usable in my opinion, and still can be converted to plain text and actual man-pages via some basic GNU scripting and the use of pandoc(1); so in this form it can still be used to generate ULS documentation and be used as input to create an fpm-man(1) utility for access via a CLI tool; although the addition of mathematical expressions and links and graphics would complicate that. Have not tried it, but pandoc(1) can generate HTML and Adobe PDF as well, but even if not can use groff(1) on the man-pages and/or JavaScript as is done on the M_intrinsics repository to create a single document as well, hopefully. So how far to go beyond ASCII documentation at the risk of loosing the ASCII interface alternative is a big question.  It will be an extended effort to go significantly further than this so I am looking for feedback on how well the MINIBOOK format appears to work to everyone, etc."
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-12-06 15:29:15+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/347/"
                },
                {
                    "user": "milancurcic",
                    "date": "2021-12-06 15:32:41+00:00",
                    "text": "The top-level table in the latest preview looks very nice, great work @urbanjost!"
                },
                {
                    "user": "urbanjost",
                    "date": "2021-12-06 16:51:21+00:00",
                    "text": "#build_preview\nThanks. Well, if you build it will they come?"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-12-06 16:56:22+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/347/"
                },
                {
                    "user": "urbanjost",
                    "date": "2021-12-06 21:15:20+00:00",
                    "text": "#build_preview\nToo fast, or should not put comment on same line? Try again"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-12-06 21:20:06+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/347/"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-12-06 21:20:08+00:00",
                    "text": "Too fast, or should not put comment on same line? Try again\n\nI think the complete build takes at least 3 to 4 min at the moment. For quick checks building locally might be an option as the rebuild is incremental, but at least for me that stopped working after I upgraded to Ruby 3 on my system."
                },
                {
                    "user": "urbanjost",
                    "date": "2021-12-06 21:42:31+00:00",
                    "text": "Ahhh. I went back to ruby 2.7 and I can do local builds again; plus I was not waiting long enough. As soon as I got a response I was looking, but if I just wait a few minutes after it shows up. Have to take a break on this but wanted to get some of the smaller things out of the way so this was at a presentable state. It is at a point where everything works and the response has been mild so I will work on this locally again and experiment a bit more with mathematical expressions and graphics unless something changes (never used kramdown before, etc...). Thanks again!\n#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-12-06 21:47:19+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/347/"
                },
                {
                    "user": "urbanjost",
                    "date": "2021-12-07 03:06:48+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-12-07 03:11:42+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/347/"
                },
                {
                    "user": "urbanjost",
                    "date": "2021-12-07 05:02:46+00:00",
                    "text": "#build_preview\nfor EXP"
                },
                {
                    "user": "urbanjost",
                    "date": "2021-12-07 05:05:36+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-12-07 05:07:38+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/347/"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-12-07 05:09:40+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/347/"
                },
                {
                    "user": "urbanjost",
                    "date": "2021-12-09 02:30:05+00:00",
                    "text": "#build_preview\nLEN"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-12-09 02:34:02+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/347/"
                },
                {
                    "user": "urbanjost",
                    "date": "2021-12-09 02:55:46+00:00",
                    "text": "#build_preview\nAdd an example of specifying the length of a character variable at run time even if not allocatable."
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-12-09 03:00:29+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/347/"
                },
                {
                    "user": "urbanjost",
                    "date": "2021-12-09 03:09:21+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-12-09 03:13:02+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/347/"
                },
                {
                    "user": "urbanjost",
                    "date": "2021-12-09 14:13:03+00:00",
                    "text": "#build_preview\nerrata and formatting corrections"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-12-09 14:18:08+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/347/"
                },
                {
                    "user": "urbanjost",
                    "date": "2021-12-09 16:41:23+00:00",
                    "text": "#build-refresh"
                },
                {
                    "user": "urbanjost",
                    "date": "2021-12-09 22:37:13+00:00",
                    "text": "#build-rebuild\nAdd copies of preliminary man-pages and fman(1) program"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-12-09 22:44:47+00:00",
                    "text": "I'm not sure if we can properly host Fortran source on the webpage. In any case a separate repository with the source and a release tag holding any generated artifacts, which are linked from the webpage seem preferable."
                },
                {
                    "user": "urbanjost",
                    "date": "2021-12-10 01:00:36+00:00",
                    "text": "#build-preview\nmoved supplemental files to AlterVista"
                },
                {
                    "user": "urbanjost",
                    "date": "2021-12-10 01:19:54+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-12-10 01:23:55+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/347/"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-12-10 09:54:54+00:00",
                    "text": "moved supplemental files to AlterVista\n\nIf you like we could maintain them in a repository in the @fortran-lang namespace.\ncc @fortran-lang/admins"
                },
                {
                    "user": "urbanjost",
                    "date": "2021-12-10 12:06:49+00:00",
                    "text": "If they cannot be allowed in the directories themselves I am fine with them being on an ID of mine; it is experimental at this time.\nNot quite sure what it would take to have them under fortran-lang.org but right now they change so frequently it is actually convenient with them on AlterVista, at least for me.\n#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-12-10 12:11:55+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/347/"
                },
                {
                    "user": "urbanjost",
                    "date": "2021-12-12 00:59:44+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-12-12 01:03:33+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/347/"
                },
                {
                    "user": "urbanjost",
                    "date": "2021-12-12 21:36:47+00:00",
                    "text": "I was hoping this would be accessible from at least GNU/Linux and Unix via programs like lynx/links/w3m; but the index shows on each page, which makes it awkward:\n    lynx https://fortran-lang.org/pr/347/learn/intrinsics/ACHAR\nperhaps I can directly insert HTML to mask that, but I do not think that is supported by the CLI browsers.  Any thoughts appreciated. I have not found a way to turn off the index on the individual pages as they are built automatically, so I do not see an easy way to insert directives into the index, other than perhaps creating everything as HTML instead of as markdown.\n#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-12-12 21:40:59+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/347/"
                },
                {
                    "user": "urbanjost",
                    "date": "2021-12-13 05:31:55+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-12-13 05:35:35+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/347/"
                },
                {
                    "user": "urbanjost",
                    "date": "2021-12-13 15:46:57+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-12-13 15:51:37+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/347/"
                },
                {
                    "user": "urbanjost",
                    "date": "2021-12-14 01:32:42+00:00",
                    "text": "#build_preview\nVERIFY and slidy view of procedures. I think I am becoming a slidy fan."
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-12-14 01:37:47+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/347/"
                },
                {
                    "user": "urbanjost",
                    "date": "2021-12-14 19:35:38+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-12-14 19:40:03+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/347/"
                },
                {
                    "user": "urbanjost",
                    "date": "2021-12-26 02:20:56+00:00",
                    "text": "#build preview"
                },
                {
                    "user": "urbanjost",
                    "date": "2021-12-30 07:46:09+00:00",
                    "text": "#build preview\nThe master files are the kramdown files, so anyone else that wants to contribute can just change the files. A particular style that is basically a man-page format is being followed, with a simple set of rules being followed to allow for simple parsing and to maintain compatibility with pandoc(1) for conversions. As an alternate way of contributing, particularly example programs, see\nhttps://urbanjost.github.io/fortran-intrinsic-descriptions/;  or we can move this to the Fortran Wiki, which has a much lower bar for contributing and less issues with potential copyright issues.  I have not gotten the type of definitive answer from the ISO standard support yet, although there is a page saying that as long as you properly acknowledge the standard as a referenence that reasonable use is permitted. Anyone published a Fortran manual that has some feedback on how to navigate properly using the standard without infringing on it?\nPS:  I have yet to get a LaTex formula to work with kramdown on this page. Anyone have an example?"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-12-30 16:04:46+00:00",
                    "text": "I have yet to get a LaTex formula to work with kramdown on this page. Anyone have an example?\n\nI remember using MathJax with jekyll / kramdown in the past. There was an issue with TeX and markdown sharing a lot of control characters, something hacky was needed to get those working together like passthroughs or similar. I could look it up, but maybe there is a better solution than TeX? I recall @certik commented on the usage of SymPy for rendering formulas instead of TeX."
                }
            ]
        },
        {
            "number": 346,
            "user": "Beliavsky",
            "date": "2021-10-28 13:02:55+00:00",
            "title": "Programming Made Easy -- series of posts by Michael Wirth",
            "text": "Michael Wirth, computer science professor at the University of Guelph, has been writing a series of short posts introducing Fortran, the latest being Programming Made Easy (VIII) -- Carbon Dating. Someone looking for more material at the level of the Quickstart tutorial could be directed to them.",
            "is_open": true,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2021-10-28 13:25:49+00:00",
                    "text": "Quoting from https://craftofcoding.wordpress.com/about/:\n\nThe Craft of Coding discusses aspects of programming \u2013 coding, testing, style, algorithms, problem solving. It focuses predominantly on coding in C, Python, Julia, Processing, Ada, and the legacy languages Fortran and Cobol.\n\nFortran definitely has the perception of Cobol, something that you only use for legacy codes and not for new things and you generally try to move away from. We need to change that perception."
                }
            ]
        },
        {
            "number": 345,
            "user": "awvwgk",
            "date": "2021-10-25 08:30:37+00:00",
            "title": "Fix title in learning resources",
            "text": "Closes #344\n#build_preview",
            "is_open": false,
            "labels": [
                "bug"
            ],
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2021-10-25 08:32:21+00:00",
                    "text": "Seems like the #build_preview doesn't run from the main comment..."
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-10-25 08:34:08+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/345/"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-10-25 08:34:50+00:00",
                    "text": "Seems to work again, I'm going to merge to get the site building again. Also, #delete_preview."
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-10-25 08:35:12+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 344,
            "user": "awvwgk",
            "date": "2021-10-25 08:28:23+00:00",
            "title": "Site fails to build",
            "text": "The webpage currently fails to build due to an error in the learning resources:\n/home/runner/work/fortran-lang.org/fortran-lang.org/src/.bundle/ruby/2.7.0/gems/safe_yaml-1.0.5/lib/safe_yaml/load.rb:143:in `parse': (/home/runner/work/fortran-lang.org/fortran-lang.org/src/_data/learning.yml): mapping values are not allowed in this context at line 249 column 81 (Psych::SyntaxError)\n\tfrom /home/runner/work/fortran-lang.org/fortran-lang.org/src/.bundle/ruby/2.7.0/gems/safe_yaml-1.0.5/lib/safe_yaml/load.rb:143:in `load'\n\tfrom /home/runner/work/fortran-lang.org/fortran-lang.org/src/.bundle/ruby/2.7.0/gems/safe_yaml-1.0.5/lib/safe_yaml/load.rb:157:in `block in load_file'\n\tfrom /home/runner/work/fortran-lang.org/fortran-lang.org/src/.bundle/ruby/2.7.0/gems/safe_yaml-1.0.5/lib/safe_yaml/load.rb:157:in `open'\n\tfrom /home/runner/work/fortran-lang.org/fortran-lang.org/src/.bundle/ruby/2.7.0/gems/safe_yaml-1.0.5/lib/safe_yaml/load.rb:157:in `load_file'\n\tfrom /home/runner/work/fortran-lang.org/fortran-lang.org/src/.bundle/ruby/2.7.0/gems/jekyll-3.8.6/lib/jekyll/readers/data_reader.rb:68:in `read_data_file'\n\tfrom /home/runner/work/fortran-lang.org/fortran-lang.org/src/.bundle/ruby/2.7.0/gems/jekyll-3.8.6/lib/jekyll/readers/data_reader.rb:46:in `block in read_data_to'\n\tfrom /home/runner/work/fortran-lang.org/fortran-lang.org/src/.bundle/ruby/2.7.0/gems/jekyll-3.8.6/lib/jekyll/readers/data_reader.rb:38:in `each'\n\tfrom /home/runner/work/fortran-lang.org/fortran-lang.org/src/.bundle/ruby/2.7.0/gems/jekyll-3.8.6/lib/jekyll/readers/data_reader.rb:38:in `read_data_to'\n\tfrom /home/runner/work/fortran-lang.org/fortran-lang.org/src/.bundle/ruby/2.7.0/gems/jekyll-3.8.6/lib/jekyll/readers/data_reader.rb:20:in `read'\n\tfrom /home/runner/work/fortran-lang.org/fortran-lang.org/src/.bundle/ruby/2.7.0/gems/jekyll-3.8.6/lib/jekyll/reader.rb:18:in `read'\n\tfrom /home/runner/work/fortran-lang.org/fortran-lang.org/src/.bundle/ruby/2.7.0/gems/jekyll-3.8.6/lib/jekyll/site.rb:164:in `read'\n\tfrom /home/runner/work/fortran-lang.org/fortran-lang.org/src/.bundle/ruby/2.7.0/gems/jekyll-3.8.6/lib/jekyll/site.rb:69:in `process'\n\tfrom /home/runner/work/fortran-lang.org/fortran-lang.org/src/.bundle/ruby/2.7.0/gems/jekyll-3.8.6/lib/jekyll/command.rb:28:in `process_site'\n\tfrom /home/runner/work/fortran-lang.org/fortran-lang.org/src/.bundle/ruby/2.7.0/gems/jekyll-3.8.6/lib/jekyll/commands/build.rb:65:in `build'\n\tfrom /home/runner/work/fortran-lang.org/fortran-lang.org/src/.bundle/ruby/2.7.0/gems/jekyll-3.8.6/lib/jekyll/commands/build.rb:36:in `process'\n\tfrom /home/runner/work/fortran-lang.org/fortran-lang.org/src/.bundle/ruby/2.7.0/gems/jekyll-3.8.6/lib/jekyll/commands/build.rb:18:in `block (2 levels) in init_with_program'\n\tfrom /home/runner/work/fortran-lang.org/fortran-lang.org/src/.bundle/ruby/2.7.0/gems/mercenary-0.3.6/lib/mercenary/command.rb:220:in `block in execute'\n\tfrom /home/runner/work/fortran-lang.org/fortran-lang.org/src/.bundle/ruby/2.7.0/gems/mercenary-0.3.6/lib/mercenary/command.rb:220:in `each'\n\tfrom /home/runner/work/fortran-lang.org/fortran-lang.org/src/.bundle/ruby/2.7.0/gems/mercenary-0.3.6/lib/mercenary/command.rb:220:in `execute'\n\tfrom /home/runner/work/fortran-lang.org/fortran-lang.org/src/.bundle/ruby/2.7.0/gems/mercenary-0.3.6/lib/mercenary/program.rb:42:in `go'\n\tfrom /home/runner/work/fortran-lang.org/fortran-lang.org/src/.bundle/ruby/2.7.0/gems/mercenary-0.3.6/lib/mercenary.rb:19:in `program'\n\tfrom /home/runner/work/fortran-lang.org/fortran-lang.org/src/.bundle/ruby/2.7.0/gems/jekyll-3.8.6/exe/jekyll:15:in `<top (required)>'\n\tfrom /home/runner/work/fortran-lang.org/fortran-lang.org/src/.bundle/ruby/2.7.0/bin/jekyll:23:in `load'\n\tfrom /home/runner/work/fortran-lang.org/fortran-lang.org/src/.bundle/ruby/2.7.0/bin/jekyll:23:in `<top (required)>'\n\tfrom /opt/hostedtoolcache/Ruby/2.7.4/x64/lib/ruby/2.7.0/bundler/cli/exec.rb:63:in `load'\n\tfrom /opt/hostedtoolcache/Ruby/2.7.4/x64/lib/ruby/2.7.0/bundler/cli/exec.rb:63:in `kernel_load'\n\tfrom /opt/hostedtoolcache/Ruby/2.7.4/x64/lib/ruby/2.7.0/bundler/cli/exec.rb:28:in `run'\n\tfrom /opt/hostedtoolcache/Ruby/2.7.4/x64/lib/ruby/2.7.0/bundler/cli.rb:476:in `exec'\n\tfrom /opt/hostedtoolcache/Ruby/2.7.4/x64/lib/ruby/2.7.0/bundler/vendor/thor/lib/thor/command.rb:27:in `run'\n\tfrom /opt/hostedtoolcache/Ruby/2.7.4/x64/lib/ruby/2.7.0/bundler/vendor/thor/lib/thor/invocation.rb:127:in `invoke_command'\n\tfrom /opt/hostedtoolcache/Ruby/2.7.4/x64/lib/ruby/2.7.0/bundler/vendor/thor/lib/thor.rb:399:in `dispatch'\n\tfrom /opt/hostedtoolcache/Ruby/2.7.4/x64/lib/ruby/2.7.0/bundler/cli.rb:30:in `dispatch'\n\tfrom /opt/hostedtoolcache/Ruby/2.7.4/x64/lib/ruby/2.7.0/bundler/vendor/thor/lib/thor/base.rb:476:in `start'\n\tfrom /opt/hostedtoolcache/Ruby/2.7.4/x64/lib/ruby/2.7.0/bundler/cli.rb:24:in `start'\n\tfrom /opt/hostedtoolcache/Ruby/2.7.4/x64/lib/ruby/gems/2.7.0/gems/bundler-2.1.4/libexec/bundle:46:in `block in <top (required)>'\n\tfrom /opt/hostedtoolcache/Ruby/2.7.4/x64/lib/ruby/2.7.0/bundler/friendly_errors.rb:123:in `with_friendly_errors'\n\tfrom /opt/hostedtoolcache/Ruby/2.7.4/x64/lib/ruby/gems/2.7.0/gems/bundler-2.1.4/libexec/bundle:34:in `<top (required)>'\n\tfrom /opt/hostedtoolcache/Ruby/2.7.4/x64/bin/bundle:23:in `load'\n\tfrom /opt/hostedtoolcache/Ruby/2.7.4/x64/bin/bundle:23:in `<main>'\njekyll 3.8.6 | Error:  (/home/runner/work/fortran-lang.org/fortran-lang.org/src/_data/learning.yml): mapping values are not allowed in this context at line 249 column 81",
            "is_open": false,
            "labels": [
                "bug"
            ],
            "comments": []
        },
        {
            "number": 343,
            "user": "awvwgk",
            "date": "2021-10-25 08:21:23+00:00",
            "title": "Monthly newsletter for November 2021",
            "text": "It is again time to organize our monthly newsletter.\n\n updates for repositories (fpm, stdlib, webpage)\n link to monthly call\n updates for contributor data (@LKedward)\n Flang updates (@AlexisPerry)\n LFortran updates (@certik)\n\nPlease comment here, leave suggestions via code review or open a PR against my fork. All contributions are welcome.\n\nNote: updated scripts for contributor data are available here: https://gitlab.com/certik/github_stats/-/merge_requests/1",
            "is_open": false,
            "labels": [
                "news"
            ],
            "comments": [
                {
                    "user": "AlexisPerry",
                    "date": "2021-10-27 17:20:34+00:00",
                    "text": "Flang updates are available here: awvwgk#85"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-10-31 10:58:25+00:00",
                    "text": "@certik Do you have time to add the LFortran updates to the newsletter."
                },
                {
                    "user": "certik",
                    "date": "2021-10-31 14:07:58+00:00",
                    "text": "I'll try to get it done today."
                },
                {
                    "user": "certik",
                    "date": "2021-11-01 03:39:00+00:00",
                    "text": "I just added LFortran's updates above."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-11-01 10:53:03+00:00",
                    "text": "Thanks everybody, I'm going ahead and merge."
                },
                {
                    "user": "certik",
                    "date": "2021-11-01 18:53:00+00:00",
                    "text": "Thanks for merging. Not sure what is going on, but the \"authors\" part does not show here:\nhttps://fortran-lang.org/newsletter/2021/11/01/Fortran-Newsletter-November-2021/\nI wonder if we mistyped something, but I don't see anything wrong with the Markdown."
                }
            ]
        },
        {
            "number": 342,
            "user": "vmagnin",
            "date": "2021-10-18 17:05:14+00:00",
            "title": "Choosing a license for logo and other artistic assets",
            "text": "Following that Discourse discussion, it seems necessary to reflect upon the license used for \"artistic\" assets, like the Fortran Logo.\nAt the moment, the whole content of Fortran-lang.org is under MIT license:\nhttps://github.com/fortran-lang/fortran-lang.org/blob/master/LICENSE\nwhich is focused on software and documentation.\nA license such as Creative Commons would be more appropriate for artistic assets. For example, in Wikimedia files are often under a CC license: CC-0 (~public domain), CC-BY or CC-BY-SA.",
            "is_open": true,
            "labels": [],
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2021-10-18 17:22:22+00:00",
                    "text": "Many projects also have a dedicated page to explain the licensing and usage terms of a logo. See here for the Python logo."
                },
                {
                    "user": "vmagnin",
                    "date": "2021-10-18 18:26:08+00:00",
                    "text": "See here for the Python logo.\n\nSo Python and its logo are trademarks from the Python Software Fondation:\nhttps://www.python.org/psf/trademarks/"
                },
                {
                    "user": "vmagnin",
                    "date": "2021-10-18 18:44:04+00:00",
                    "text": "The Rust logo is CC-BY licensed by Mozilla:\nhttps://www.rust-lang.org/policies/media-guide\nThe Julia logos are CC-BY-NC-SA 4.0:\nhttps://github.com/JuliaLang/julia-logo-graphics"
                },
                {
                    "user": "aslozada",
                    "date": "2021-10-22 21:46:19+00:00",
                    "text": "GNU License Logos: https://www.gnu.org/graphics/license-logos.en.html\nOfficial logos:  GFDL\nAlternative Logos: CC BY 3.0"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-12-20 11:14:54+00:00",
                    "text": "While not official yet, I've have been using the \u201cfpm color palette\u201d for several Fortran related projects now.\n\nSo far it appears at:\n\nFrench Wikipedia\nFortranCon/PackagingCon presentation of fpm\nfpm docs\nTOML-Fortran logo"
                }
            ]
        },
        {
            "number": 341,
            "user": "mefuller",
            "date": "2021-10-09 08:21:36+00:00",
            "title": "add Cantera",
            "text": "Add Cantera to index (chemical kinetics, thermodynamics, and transport tool suite)",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 340,
            "user": "zoziha",
            "date": "2021-10-04 09:18:17+00:00",
            "title": "Minor fixes in Best Practices.",
            "text": "Minor fixes in Best Practices: Syntax highlighting and pointer usage (target).\n\nSorry\nI'm so sorry! I cloned fortran-lang.org by mistake using github software and submitted this branch.\nWhen I realized it, I found that it had been submitted, and I hope to get your forgiveness.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2021-10-04 13:37:20+00:00",
                    "text": "+1"
                }
            ]
        },
        {
            "number": 339,
            "user": "LKedward",
            "date": "2021-09-28 11:15:42+00:00",
            "title": "Initial draft of october newsletter.",
            "text": "Make sure PRs are up-to-date on Thursday (@LKedward)\n Update contributor data on Thursday (@LKedward)\n Add news from Flang (@AlexisPerry)\n Add news from lfortran (@certik\n Add monthly meeting recording link (@milancurcic)",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2021-09-28 14:43:05+00:00",
                    "text": "@AlexisPerry & @certik, apologies for the late start this month - are you both able to provide the usual compiler updates in the next couple of days?"
                },
                {
                    "user": "AlexisPerry",
                    "date": "2021-09-28 19:41:01+00:00",
                    "text": "Yes, I'm planning to tackle it after the Flang biweekly meeting tomorrow so I can provide the most up to date information,"
                },
                {
                    "user": "AlexisPerry",
                    "date": "2021-09-29 17:36:48+00:00",
                    "text": "@LKedward  Check out the PR here: LKedward#5"
                },
                {
                    "user": "LKedward",
                    "date": "2021-09-30 14:33:25+00:00",
                    "text": "Ondrej @certik are you able to push some updates today for LFortran including the MVP news?"
                },
                {
                    "user": "LKedward",
                    "date": "2021-09-30 14:37:37+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-09-30 14:40:14+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/339/"
                },
                {
                    "user": "certik",
                    "date": "2021-09-30 15:05:25+00:00",
                    "text": "Yes, I plan to do it this afternoon."
                },
                {
                    "user": "certik",
                    "date": "2021-09-30 22:04:33+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-09-30 22:06:02+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/339/"
                },
                {
                    "user": "certik",
                    "date": "2021-09-30 22:08:03+00:00",
                    "text": "@LKedward I am done. Thanks!"
                },
                {
                    "user": "LKedward",
                    "date": "2021-10-01 08:47:35+00:00",
                    "text": "Many thanks everyone - I'll merge this later today"
                },
                {
                    "user": "LKedward",
                    "date": "2021-10-01 14:45:36+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-10-01 14:45:57+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 338,
            "user": "tclune",
            "date": "2021-09-24 17:29:22+00:00",
            "title": "Consider renaming default branch to `main`",
            "text": "Just a socially conscious recommendation.\nhttps://github.com/github/renaming",
            "is_open": true,
            "labels": [
                "duplicate"
            ],
            "comments": [
                {
                    "user": "certik",
                    "date": "2021-09-24 17:38:34+00:00",
                    "text": "Thanks. We considered that and renamed other repositories. But with this one we need to do quite a few fixes:\nhttps://github.com/fortran-lang/fortran-lang.org/search?q=master\nHowever if you send us PRs, it can happen faster. :)"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-09-24 18:48:54+00:00",
                    "text": "Duplicate of #325"
                }
            ]
        },
        {
            "number": 337,
            "user": "milancurcic",
            "date": "2021-09-24 17:15:16+00:00",
            "title": "Site build fails ",
            "text": "Build for PR #334 fails: https://github.com/fortran-lang/fortran-lang.org/runs/3702605456. I think the offending line is https://github.com/fortran-lang/fortran-lang.org/runs/3702605456#step:7:103, which perhaps means that there is a required field in the package index that's missing?\nWhat's more confusing to me, we only have some (inactive?) Twitter action running on open PRs. I thought we used to build the site in CI on every PR.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2021-09-24 17:17:30+00:00",
                    "text": "At least the issue #298 now seems fixed. ;) Never mind, just got the email."
                },
                {
                    "user": "milancurcic",
                    "date": "2021-09-24 17:23:28+00:00",
                    "text": "From the Action log, the Ruby parser complains about the gFTL entry : \n  \n    \n      fortran-lang.org/_data/package_index.yml\n    \n    \n         Line 1386\n      in\n      a8dfa97\n    \n  \n  \n    \n\n        \n          \n           - name: gFTL \n        \n    \n  \n\n.\nThe error message is\n/home/runner/work/fortran-lang.org/fortran-lang.org/src/.bundle/ruby/2.7.0/gems/safe_yaml-1.0.5/lib/safe_yaml/load.rb:143:in `parse': (/home/runner/work/fortran-lang.org/fortran-lang.org/src/_data/package_index.yml): did not find expected key while parsing a block mapping at line 1386 column 3 (Psych::SyntaxError)\n\nBut from looking at that block, it seems to me all needed keys are there. @awvwgk @LKedward do you have an idea?"
                },
                {
                    "user": "milancurcic",
                    "date": "2021-09-24 17:28:32+00:00",
                    "text": "Fixed by #336."
                },
                {
                    "user": "certik",
                    "date": "2021-09-24 17:48:05+00:00",
                    "text": "I guess there was an extra space at the beginning of the line, so the yaml syntax was broken?"
                }
            ]
        },
        {
            "number": 336,
            "user": "tclune",
            "date": "2021-09-24 17:11:16+00:00",
            "title": "One more package",
            "text": "Also corrected categories on previous submissions.  Did not notice that there was a short-list.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2021-09-24 17:26:03+00:00",
                    "text": "Thanks!"
                }
            ]
        },
        {
            "number": 335,
            "user": "tclune",
            "date": "2021-09-24 16:04:54+00:00",
            "title": "Adding two more packages to the index",
            "text": "None",
            "is_open": false,
            "labels": [
                "packages"
            ],
            "comments": [
                {
                    "user": "tclune",
                    "date": "2021-09-24 17:05:34+00:00",
                    "text": "I just remembered that I should add in the gFTL-shared project which instantiates the templates for common containers with intrinsic elements.     As a project it is uninteresting, but for users, it might be all they need.  Kept separate because the templates don't require any specific compiler and can be installed in a compile-independent location."
                }
            ]
        },
        {
            "number": 334,
            "user": "awvwgk",
            "date": "2021-09-24 15:51:30+00:00",
            "title": "Add pFlogger to package index",
            "text": "source: https://github.com/Goddard-Fortran-Ecosystem/pFlogger\nThanks, @tclune for the link.",
            "is_open": false,
            "labels": [
                "packages"
            ],
            "comments": []
        },
        {
            "number": 333,
            "user": "awvwgk",
            "date": "2021-09-24 12:42:31+00:00",
            "title": "Add fparser to package index",
            "text": "Source: stfc/fparser",
            "is_open": false,
            "labels": [
                "packages"
            ],
            "comments": []
        },
        {
            "number": 332,
            "user": "Beliavsky",
            "date": "2021-09-22 00:10:56+00:00",
            "title": "Formatting of Derived Types page",
            "text": "At https://fortran-lang.org/learn/quickstart/derived_types , using Chrome on Windows, if I magnify the page enough with Cntrl+ , and I use the scroll bar on the right, the words at the bottom, Learn, Compilers, Community, Packages, News are sometimes on top of the the text under Quickstart Fortran Tutorial.",
            "is_open": true,
            "labels": [],
            "comments": []
        },
        {
            "number": 331,
            "user": "Beliavsky",
            "date": "2021-09-14 15:59:09+00:00",
            "title": "Mention conference",
            "text": "The site should mention the upcoming FortranCon conference and link to the 2020 conference. Maybe at the top of the site, in the list\nLearn\nCompilers\nCommunity\nPackages\nNews\nadd Conference with an appropriate link? Links to the 2020 and/or 2021 conferences could also be added to Other Resources section.",
            "is_open": true,
            "labels": [],
            "comments": []
        },
        {
            "number": 330,
            "user": "Beliavsky",
            "date": "2021-09-14 15:29:08+00:00",
            "title": "Why is the book \"The Practice of Programming\" listed?",
            "text": "Why is the book Kernighan, B. and Pike, R.. 1999. The Practice of Programming listed? It's a well-regarded book, but I don't think it covers Fortran.",
            "is_open": true,
            "labels": [],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2021-09-14 16:31:00+00:00",
                    "text": "I vaguely recall the rationale (if there was any) was that the book is useful for Fortran programmers, even if it doesn't cover Fortran. I may be making that up. I'm fine with this book being listed or not."
                },
                {
                    "user": "certik",
                    "date": "2021-09-14 17:18:33+00:00",
                    "text": "I would either not list it, or create a section \"general programming books\" and list it there."
                },
                {
                    "user": "gklimowicz",
                    "date": "2021-09-17 20:49:35+00:00",
                    "text": "I wonder if someone was thinking of Kernighan and Plauger's book Software Tools, which used a structured version of Fortran called Ratfor. (This is a really old book, though, from 1976.)"
                }
            ]
        },
        {
            "number": 329,
            "user": "Beliavsky",
            "date": "2021-09-14 15:14:23+00:00",
            "title": "Quantum Information book, WSL GUI, and typos",
            "text": "None",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2021-09-14 17:31:05+00:00",
                    "text": "One can obtain a preview of the book here: https://www.taylorfrancis.com/books/mono/10.1201/9781003164678/numerical-recipes-quantum-information-theory-quantum-computing-ramkarthik-payal-solanki\nThe preview looks quite good. But a few things stand out:\n\nThey use FORTRAN instead of Fortran.\nThey recommend real*8 and complex*8 for double precision real and complex numbers, and to use .d0 for double precision numbers, instead of real(dp), complex(dp) and ._dp.\n\nI am hoping that more \"opinionated\" guides at fortran-lang.org will help with this, as well as opinionated \"pedantic\" mode in LFortran (https://gitlab.com/lfortran/lfortran/-/issues/450)."
                },
                {
                    "user": "Beliavsky",
                    "date": "2021-09-14 19:20:13+00:00",
                    "text": "One can obtain a preview of the book here: https://www.taylorfrancis.com/books/mono/10.1201/9781003164678/numerical-recipes-quantum-information-theory-quantum-computing-ramkarthik-payal-solanki\nThe preview looks quite good. But a few things stand out:\n\nThey use FORTRAN instead of Fortran.\nThey recommend real*8 and complex*8 for double precision real and complex numbers, and to use .d0 for double precision numbers, instead of real(dp), complex(dp) and ._dp.\n\nI am hoping that more \"opinionated\" guides at fortran-lang.org will help with this, as well as opinionated \"pedantic\" mode in LFortran (https://gitlab.com/lfortran/lfortran/-/issues/450).\n\n@certik I announced the book on Fortran Discourse. More people would see your comments if posted there."
                }
            ]
        },
        {
            "number": 328,
            "user": "awvwgk",
            "date": "2021-09-13 21:08:37+00:00",
            "title": "Add incompact3d to package index",
            "text": "See https://github.com/xcompact3d/Incompact3d",
            "is_open": false,
            "labels": [
                "packages"
            ],
            "comments": [
                {
                    "user": "certik",
                    "date": "2021-09-14 17:03:50+00:00",
                    "text": "Looks good. I am happy to see codes like these in Fortran."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-09-14 17:17:51+00:00",
                    "text": "Found this one by following @fschuch from the recent stars at test-drive ;)."
                },
                {
                    "user": "certik",
                    "date": "2021-09-14 17:20:33+00:00",
                    "text": "Awesome. @fschuch, if you have any feedback on our efforts, please let us know!"
                }
            ]
        },
        {
            "number": 327,
            "user": "Beliavsky",
            "date": "2021-09-13 20:48:21+00:00",
            "title": "Mention Windows Subsystem for Linux (WSL) GUI in \"Unix-like development on Windows\" section",
            "text": "As I mentioned on Fortran Discourse, Microsoft has recently upgraded WSL 2 so that you can run Linux GUI programs, including text editors. Currently fortran-lang says \"All of the above approaches provide access to common shells such as bash and development tools including GNU coreutils, Make, CMake, autotools, git, grep, sed, awk, ssh, etc.\"\nIn the description of WSL I suggest adding the text \"With Windows Subsystem for Linux GUI one can run text editors and other graphical programs.\"\nI could submit a PR but my last trivial one is still pending ...",
            "is_open": true,
            "labels": [],
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2021-09-13 21:15:56+00:00",
                    "text": "I could submit a PR but my last trivial one is still pending ...\n\nJust took care of that one.\nYou can submit multiple PRs from your fork, by creating feature branches for each of your contributions. Just click on the branch dropdown menu and create a new one there:\n\nThis will also make it easier to sync your fork again, if someone (probably me) squashes small PRs on merge, which are done from the default branch of a fork."
                }
            ]
        },
        {
            "number": 326,
            "user": "Beliavsky",
            "date": "2021-09-13 16:29:43+00:00",
            "title": "Make Fortran Better -- comments",
            "text": "The Develop tools section says \"You can also help make Fortran better by contributing to its suite of tools, such as Standard Library, Package Manager, or this website.\" The gfortran, lfortran and I think flang compilers are open-source projects that accept the contributions of volunteers. Why not mention them?\nThe Write Fortran Software section says \"Or just write Fortran software for your research, business, or schoolwork. You can learn how to get started here.\" Writing code for your own use is fine but does not by itself benefit the Fortran community. Maybe add \"and share your code on sites such as GitHub\" to the end of the first sentence?\nParticipants in Fortran-related GSoC projects have not only improved Fortran but earned some money and gained experience that they can put on their resumes. Mention this when GSoC next has openings?",
            "is_open": true,
            "labels": [],
            "comments": []
        },
        {
            "number": 325,
            "user": "awvwgk",
            "date": "2021-09-08 16:06:52+00:00",
            "title": "Renaming default branch",
            "text": "See fortran-lang/fpm#421 for details.\nPlease collect references in @fortran-lang projects to files inside this repository such that we can fix those links after renaming.",
            "is_open": true,
            "labels": [],
            "comments": []
        },
        {
            "number": 324,
            "user": "Beliavsky",
            "date": "2021-09-08 02:46:39+00:00",
            "title": "replaced \"be found be found\" with \"be found\"",
            "text": "I am submitting a PR for a single typo, noted by someone else on Fortran Discourse. In the future would you prefer that I wait until I have several suggested changes to make a pull request?",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 323,
            "user": "Beliavsky",
            "date": "2021-09-07 12:25:06+00:00",
            "title": "Fortran Best Practices -- add section on error handling",
            "text": "I suggest that a chapter on error handling be added. In a Fortran Discourse thread a few approaches were listed and evaluated.",
            "is_open": true,
            "labels": [],
            "comments": []
        },
        {
            "number": 322,
            "user": "Beliavsky",
            "date": "2021-09-07 12:17:36+00:00",
            "title": "Add search capability to site",
            "text": "It would be nice if fortran-lang.org had a search bar. Python.org and isocpp.org do.",
            "is_open": true,
            "labels": [],
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2021-09-07 12:33:11+00:00",
                    "text": "We might be able to do this easily when switching our static side generator to sphinx + MyST (see #89), which would also allow having translations of the webpage. But I haven't got around to follow up on this issue yet, too much other stuff to do.\nNot sure how simple / difficult this is to implement in jekyll."
                },
                {
                    "user": "vmagnin",
                    "date": "2021-10-19 13:29:15+00:00",
                    "text": "MyST may also be useful to port the Rosetta Stone part of Fortran90.org, see issue #79"
                },
                {
                    "user": "certik",
                    "date": "2021-10-19 16:38:28+00:00",
                    "text": "Yes, I've been using MyST as a format for Jupyter notebooks for a few weeks now and it is very robust. So we can then convert the tutorials to Jupyter notebooks (literally powered by LFortran), and they will be rendered correctly.\nSo Sphinx+MyST is really good."
                },
                {
                    "user": "vmagnin",
                    "date": "2021-10-19 17:04:37+00:00",
                    "text": "So we can then convert the tutorials to Jupyter notebooks (literally powered by LFortran), and they will be rendered correctly.\n\nPandoc does not seem to handle MyST format yet. But I have found those converters that maybe useful:\n\nhttps://github.com/executablebooks/rst-to-myst\nhttps://github.com/executablebooks/rst2myst"
                },
                {
                    "user": "certik",
                    "date": "2021-10-19 17:08:32+00:00",
                    "text": "Yes. And when I was talking about tutorials, I meant these: https://github.com/fortran-lang/fortran-lang.org/tree/master/learn/quickstart which are already in Markdown, so converting to MyST will be super easy.\nThe last big things to convert from fortran90.org is: https://www.fortran90.org/src/rosetta.html, and we can do it by hand, it's not that big of a deal."
                }
            ]
        },
        {
            "number": 321,
            "user": "arjenmarkus",
            "date": "2021-09-07 11:49:10+00:00",
            "title": "Inconsistent text in page on style guide",
            "text": "I read the page on the style guide and found this curious text:\nIndentation\nUse a consistent indentation to make your code readable. The amount of indentation is a matter of preference, the most common choices are two, three or four spaces.\nComparison to Other Languages\nOn the other hand, in most of the rest of the programming world, ...\nThe first sentence of \"Comparison to Other Languages\" feels to me as if it refers to preceding text that has disappeared. What is the first hand? Whatever it is, the short text on the indentation is not related to it. This requires some editing.",
            "is_open": true,
            "labels": [],
            "comments": []
        },
        {
            "number": 320,
            "user": "gareth-nx",
            "date": "2021-09-07 10:44:07+00:00",
            "title": "Alternative approach to avoiding integer division",
            "text": "The tutorial suggests bypassing integer division by type-casting one variable to real, i.e. to avoid 3/4 == 0, you can do real(3, dp) / 4.\nWhile that's fine, it is often nicer to simply write 3 * 1.0_dp / 4. This pull request updates the tutorial to note that.\nIn addition, the documentation now notes Fortran's default left-to-right operator precedence -- which affects one of the examples on the page about integers.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "Beliavsky",
                    "date": "2021-09-07 13:14:16+00:00",
                    "text": "Why would you write 3 * 1.0_dp / 4 instead of just 3.0_dp/4 ?"
                },
                {
                    "user": "gareth-nx",
                    "date": "2021-09-07 13:44:08+00:00",
                    "text": "@Beliavsky Indeed you would not!\nHowever, if the 3 and 4 were actually variables (say i and j), then the approach presented in the edits generalises correctly (i * 1.0_dp / j).\nYour comment also applies to the other example -- we wouldn't write real(3, dp) / 4 in preference to 3.0_dp / 4. But the former version generalises.\nThat was my thinking. But it's tricky to have just the right amount of complexity without confusing people. Suggestions for making it clearer are most welcome."
                },
                {
                    "user": "gareth-nx",
                    "date": "2021-09-07 13:53:10+00:00",
                    "text": "One approach -- we could change the example to define i = 3; j = 4, so that the use of variables is clear. But I don't know whether the extra complexity is worth the benefit."
                },
                {
                    "user": "gareth-nx",
                    "date": "2021-09-09 11:34:33+00:00",
                    "text": "I looked at this again, and could not see a clean way to introduce integer variables i, j without adding too much complexity (noting the style of the tutorial).\nSo in my opinion this is ready to merge."
                }
            ]
        },
        {
            "number": 319,
            "user": "Beliavsky",
            "date": "2021-09-07 00:46:08+00:00",
            "title": "Listing Fortran codes",
            "text": "I mentioned my Fortran code on GitHub repo (call it FCoG) on Fortran Discourse in June, which now has 800+ entries, and @awvwgk asked, \"How do you feel about contributing this list to the package index or have a separate package page at fortran-lang.org to host this information?\" I am happy to collaborate but am unsure in what form. The readme.md page does link to the fortran-lang package index, and FCoG has the unlicense license, so it can be copied. A place where FCoG could use help is classification. The \"physics\" category is too broad, and some codes in it could be moved to categories such as condensed matter or plasma physics. The \"earth science\" category is also large and heterogeneous.\nI think the emphasis of the flang package list is high-quality open source code that people can use in their own projects. Listed GitHub projects should have 5 stars. Although FCoG has numerical methods categories listing many of the same codes, it also has lots of specialized codes for astrophysics, earth science, and quantum chemistry and electronic structure. I will list a repo on FCoG even if it has few stars, if it looks like a \"production code\". I created FCoG partly to document what Fortran is being used for.\nPossibly the section \"What is Fortran used for?\" section could link to FCoG. Or at the bottom of the packages page, after \"See  here for how to get your project listed\", the sentence \"Another categorized list is Fortran Code on GitHub\" could be added.",
            "is_open": true,
            "labels": [
                "packages"
            ],
            "comments": []
        },
        {
            "number": 318,
            "user": "awvwgk",
            "date": "2021-09-06 18:34:06+00:00",
            "title": "Building site with Ruby 3 fails",
            "text": "Using the instructions in the Readme fails to setup the development environment for Jekyll when using Ruby 3:\n\u276f bundle config set path '.bundle'\n\u276f bundle install\nFetching gem metadata from https://rubygems.org/.........\nlisten-3.2.1 requires ruby version >= 2.2.7, ~> 2.2, which is incompatible with\nthe current version, ruby 3.0.2p107",
            "is_open": true,
            "labels": [
                "bug"
            ],
            "comments": []
        },
        {
            "number": 317,
            "user": "Beliavsky",
            "date": "2021-09-06 11:52:26+00:00",
            "title": "more grammar, spelling, and rewording for Fortran Best Practices",
            "text": "None",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "Beliavsky",
                    "date": "2021-09-06 11:55:32+00:00",
                    "text": "Closes #316"
                },
                {
                    "user": "milancurcic",
                    "date": "2021-09-06 18:34:08+00:00",
                    "text": "Lovely, thank you for these fixes."
                }
            ]
        },
        {
            "number": 316,
            "user": "Beliavsky",
            "date": "2021-09-06 01:51:13+00:00",
            "title": "Fortran Best Practices -- typos and grammar",
            "text": "I'll create a PR eventually. Since the PR in my previous fork has been incorporated, can I delete that fork and fork the current repo?\n\"purpose\" not \"purse\" in \"every procedure starts with a comment briefly describing its purse and the intent of the dummy arguments\" at https://fortran-lang.org/learn/best_practices/modules_programs\n\"on\" not \"one\" in \"Similarly, exports are made explicitly by adding a private statement one a single line and explicitly listing all exported symbols in public statements.\" (same page)\nFor \"Variables inside a module are static (implicitly saved), it is highly recommended to limit the usage of module variables to constant expressions, like parameters or enumerators only or export them as protected rather than public.\" start a second sentence at \"it\".\nChange \"Reusing implementations from modules allows to write reusable code and focus in the program unit only on translating user input to the respective library functions and objects.\" to \"Reusing implementations from modules allows you to write reusable code and focus the program unit on conveying user input to the respective library functions and objects.\"\nIn \"In the following example the inverse distance between two sets of points is evaluated, note that the points are stored contiguously in the arrays xyz1/xyz2, while the inner-most loop is advancing the left-most index of the matrix a.\" start a new sentence at \"note\" . Page is https://fortran-lang.org/learn/best_practices/multidim_arrays.\n\"then\" not \"than\" in \"The function can than be used with a callback by importing the module as shown in the following example\" at https://fortran-lang.org/learn/best_practices/callbacks",
            "is_open": false,
            "labels": [
                "learn"
            ],
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2021-09-06 06:42:17+00:00",
                    "text": "I'll create a PR eventually. Since the PR in my previous fork has been incorporated, can I delete that fork and fork the current repo?\n\nIf you go to your fork there is a Fetch upstream button to sync your repo again:"
                }
            ]
        },
        {
            "number": 315,
            "user": "Beliavsky",
            "date": "2021-09-06 00:36:42+00:00",
            "title": "Fortran Best Practices -- suggestions",
            "text": "In (#313) I made suggestions about grammar and spelling and later made a pull request, which was accepted. I also made suggestions about content, which I will repeat here, since that issue was closed:\nFor naming conventions, I suggest that short, especially one-letter variable names for integers and reals follow Fortran's implicit typing rules, although one should use implicit none. A variable i should be an integer and x should be a real, for example.\nA naming convention I would suggest is to use consistent names for integer variables in a do loop. For example, to loop over days of data,\ndo iday=1,ndays\n   ...\nend do\n\nAlso, it is common for an integer variable starting with n to denote a loop bound or array dimension and for a variable starting with i to be a loop variable. So one would not write\ndo nday=1,idays\n   ...\nend do\n\nAt https://fortran-lang.org/learn/best_practices/modules_programs use, only is done for imports, which I agree with, but it should be explained that this reduces name clashes and helps the reader understand where imported entities are coming from.\nThe code examples use argument intent, but is there a place where that is explicitly suggested and justified?\nWhy use Roman numerals instead of the usual Arabic digits in https://fortran-lang.org/learn/best_practices/type_casting ?\nA naming convention I suggest is that local variables that shadow optional variables have similar names, possibly appending \"_\". For example,\nsubroutine sub(a,b)\nreal, intent(in) :: a\nreal, intent(in), optional :: b\nreal :: b_\nif (present(b)) then\n   b_ = b\nelse\n   b_ = default_value\nend if\n! remaining code uses b_, not b\nend subroutine sub\n\nIt may not hurt to state the obvious -- a \"best practice\" is to use free source form. Free source form code should use the .f90 suffix, not .f95 or .f03 etc., because .f90 stands for free source form, not for compliance to the Fortran 90 standard. I believe @certik supports .f for free source form, but since 99% of .f Fortran code uses fixed source form, I think that causes confusion.",
            "is_open": true,
            "labels": [
                "learn"
            ],
            "comments": []
        },
        {
            "number": 314,
            "user": "Beliavsky",
            "date": "2021-09-05 18:16:08+00:00",
            "title": "grammar and spelling from issue #313",
            "text": "None",
            "is_open": false,
            "labels": [
                "learn"
            ],
            "comments": []
        },
        {
            "number": 313,
            "user": "Beliavsky",
            "date": "2021-09-05 12:06:56+00:00",
            "title": "Fortran Best Practices -- comments",
            "text": "I think the suggested best practices are sound and thank the authors for writing this. Here are my comments.\n\"canonical\" not \"cononical\" at https://fortran-lang.org/learn/best_practices\nAdd comma before \"and\" to get \"Here is a style guide that we like and that seems to be prevalent in most scientific codes (as well as the Fortran standard library), and you are welcome to follow it.\" at https://fortran-lang.org/learn/best_practices/style_guide\nFor naming conventions, I suggest that short, especially one-letter variable names for integers and reals follow Fortran's implicit typing rules, although one should use implicit none. A variable i should be an integer and x should be a real, for example.\nA naming convention I would suggest is to use consistent names for integer variables in a do loop. For example, to loop over days of data,\ndo iday=1,ndays\n   ...\nend do\n\nAlso, it is common for an integer variable starting with n to denote a loop bound or array dimension and for a variable starting with i to be a loop variable. So one would not write\ndo nday=1,idays\n   ...\nend do\n\nAt https://fortran-lang.org/learn/best_practices/floating_point I would write\na = real(1, dp) / 2  ! 'a' is equal to 0.5_dp\nmore concisely as\na = 1.0_dp / 2  ! 'a' is equal to 0.5_dp\n\"distinguishes\" not \"distinguishs\" at https://fortran-lang.org/learn/best_practices/integer_division\n\"name clashes\" not \"nameclashes\" at https://fortran-lang.org/learn/best_practices/modules_programs\nAt https://fortran-lang.org/learn/best_practices/modules_programs use, only is done for imports, which I agree with, but it should be explained that this reduces name clashes and helps the reader understand where imported entities are coming from.\nAt https://fortran-lang.org/learn/best_practices/arrays include a colon in \"To pass arrays to procedures four ways are available:\" and a hyphen in \"higher-dimensional\".\nI think \"with\" should be \"which\" in \"Note that the shape is not checked, therefore the following would be valid code with will potentially yield incorrect results:\" at https://fortran-lang.org/learn/best_practices/arrays .\nReplace \"Finally, there are assumed-size arrays, which provide the least compile and runtime checking and can be found be found frequently in legacy code, they should be avoided in favour of assumed-shape or assumed-rank arrays.\" with \"Finally, there are assumed-size arrays, which provide the least compile-time and run-time checking and can be found be found frequently in legacy code. They should be avoided in favour of assumed-shape or assumed-rank arrays.\"\nReplace the first comma in \"Note that size returns the total size of all dimensions, to obtain the shape of a specific dimension add it as second argument to the function.\" with \"--\" to avoid a run-on sentence.\n\"annotated\" not \"annoted\" at https://fortran-lang.org/learn/best_practices/arrays .\nThe code examples use argument intent, but is there a place where that is explicitly suggested and justified?\nFor \"Allocatable arrays can be passed to optional dummy arguments, if they are unallocated the argument will not be present.\" replace the comma with -- or break into two sentences to avoid a run-on at https://fortran-lang.org/learn/best_practices/allocatable_arrays . Same comment for the comma after \"array\" in \"Finally, allocations do not initialize the array, the content of the uninitialized array is most likely just the bytes of whatever was previously at the respective address.\"\nFor \"Alternatively, status=\"replace\" can be used to overwrite an existing file, it is highly recommended to first check for the existence of a file before deciding on the status to use. \" a new sentence should start with \"it\" to avoid a run-on at https://fortran-lang.org/learn/best_practices/file_io .\nReplace \"are\" with \"is\" in \"A useful IO feature are scratch files.\"\nReplace \"integratable_function\" with \"integrable_function\" at https://fortran-lang.org/learn/best_practices/callbacks .\nReplace \"Exporting the abstract interface allows to create procedure pointers with the correct signature and also to extend the callback further like shown here\" with \"Exporting the abstract interface allows you to create procedure pointers with the correct signature and also to extend the callback further as shown here\"\nWhy use Roman numerals instead of the usual Arabic digits in https://fortran-lang.org/learn/best_practices/type_casting ?",
            "is_open": false,
            "labels": [
                "learn"
            ],
            "comments": [
                {
                    "user": "certik",
                    "date": "2021-09-05 13:07:08+00:00",
                    "text": "Thanks! Do you want to send a PR to fix many of these typos? That would be the most effective."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-09-05 13:53:40+00:00",
                    "text": "Thanks for the feedback. I agree that it will be most effective to get those fixed by sending a PR or even just post a patch here."
                },
                {
                    "user": "Beliavsky",
                    "date": "2021-09-05 16:17:58+00:00",
                    "text": "A naming convention I suggest is that local variables that shadow optional variables have similar names, possibly appending \"_\". For example,\nsubroutine sub(a,b)\nreal, intent(in) :: a\nreal, intent(in), optional :: b\nreal :: b_\nif (present(b)) then\n   b_ = b\nelse\n   b_ = default_value\nend if\n! remaining code uses b_, not b\nend subroutine sub"
                },
                {
                    "user": "Beliavsky",
                    "date": "2021-09-05 18:17:32+00:00",
                    "text": "I submitted my first ever pull request to address the spelling and grammar issues."
                },
                {
                    "user": "Beliavsky",
                    "date": "2021-09-05 20:34:23+00:00",
                    "text": "It may not hurt to state the obvious -- a \"best practice\" is to use free source form. Free source form code should use the .f90 suffix, not .f95 or .f03 etc., because .f90 stands for free source form, not for compliance to the Fortran 90 standard. I believe @certik supports .f for free source form, but since 99% of .f Fortran code uses fixed source form, I think that causes confusion."
                },
                {
                    "user": "Beliavsky",
                    "date": "2021-09-05 20:45:24+00:00",
                    "text": "Discovered another typo: in the sentence \"The creation of dynamic sized arrays is discussed in the allocatable arrays arrays.\" the last word should be something like \"section\" at https://fortran-lang.org/learn/best_practices/arrays . I made this change in my forked repo. Should I submit another PR, or will the current PR automatically have the latest forked repo?"
                }
            ]
        },
        {
            "number": 312,
            "user": "awvwgk",
            "date": "2021-09-05 09:53:48+00:00",
            "title": "Fortran Best Practice: Element-wise Operations",
            "text": "The chapter Element-wise Operations needs some work.\n\nmore explanation between code examples\nbetter examples for usage of elemental\ndrawbacks of elemental procedures",
            "is_open": true,
            "labels": [
                "learn"
            ],
            "comments": []
        },
        {
            "number": 311,
            "user": "awvwgk",
            "date": "2021-09-05 09:50:57+00:00",
            "title": "Fortran Best Practice: Multidimensional Arrays",
            "text": "The chapter Multidimensional Arrays should explain performance implications by the choice of indexing.",
            "is_open": true,
            "labels": [
                "learn"
            ],
            "comments": []
        },
        {
            "number": 310,
            "user": "awvwgk",
            "date": "2021-09-05 09:49:24+00:00",
            "title": "Fortran Best Practice: File Input/Output",
            "text": "The chapter about File Input/Output needs some work.\n\nclearer recommendation on best practice\nbetter explanation of the modifiers used with open, close, ...\nseparate discussion of inquire",
            "is_open": true,
            "labels": [
                "learn"
            ],
            "comments": []
        },
        {
            "number": 309,
            "user": "awvwgk",
            "date": "2021-09-05 09:47:36+00:00",
            "title": "Fortran Best Practice: Type Casting in Callbacks",
            "text": "The chapter Type Casting in Callbacks needs some work.\n\nNo links to external gists or pastebin entries, the document must be self-contained\nGenerally more text actually explaining what is going on in the sections\nBetter flow of explanation rather than multiple example",
            "is_open": true,
            "labels": [
                "learn"
            ],
            "comments": [
                {
                    "user": "Beliavsky",
                    "date": "2021-09-06 21:05:31+00:00",
                    "text": "The chapter starts by saying\n\"There are essentially five different ways to do type casting, each with its own advantages and disadvantages.\nThe methods I, II and V can be used both in C and Fortran. The methods III and IV are only available in Fortran. The method VI is obsolete and should not be used.\"\nIf you are going to refer to items by number, you should provide a numbered list. What are the 6 methods? Looking at the headings, I see 7:\n\nWork Arrays\nGeneral Structure\nPrivate Module Variables\nNested functions\nUsing type(c_ptr) Pointer\ntransfer() Intrinsic Function\nObject Oriented Approach"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-09-07 06:17:17+00:00",
                    "text": "Best is to rewrite the whole chapter and focus on a few of the available approaches which we find are best practice. At least we should remove the obsolete methods from this chapter."
                }
            ]
        },
        {
            "number": 308,
            "user": "scivision",
            "date": "2021-08-30 17:39:16+00:00",
            "title": "remove excess 'mpi' tag from fortran2018-examples",
            "text": "The MPI examples were moved to another repo:\nhttps://github.com/scivision/fortran-coarray-mpi-examples",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 307,
            "user": "paniash",
            "date": "2021-08-30 17:36:52+00:00",
            "title": "Fixed typo",
            "text": "None",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 306,
            "user": "jacobwilliams",
            "date": "2021-08-29 23:14:11+00:00",
            "title": "added 2 interpolation and 4 ode packages",
            "text": "None",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 305,
            "user": "milancurcic",
            "date": "2021-08-23 21:45:18+00:00",
            "title": "September newsletter draft",
            "text": "I will run the PRs script on August 31.\nI will study how to run the contributors script, and if I get stuck will ask for help from @LKedward.\nAnd as usual, looking forward to compiler updates from @AlexisPerry and @certik.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2021-08-28 10:56:52+00:00",
                    "text": "Maybe we can also mention that fftpack is now maintained under @fortran-lang. Just a short section mentioning the team working on this project now or we can also include fftpack in the regular updates. What do you think?\ncc @fortran-lang/fftpack"
                },
                {
                    "user": "certik",
                    "date": "2021-08-28 14:34:19+00:00",
                    "text": "Yes, thanks for mentioning fftpack."
                },
                {
                    "user": "milancurcic",
                    "date": "2021-08-31 15:34:22+00:00",
                    "text": "Hi @AlexisPerry, will you be able to contribute Flang updates by tomorrow (9/1)?"
                },
                {
                    "user": "AlexisPerry",
                    "date": "2021-08-31 15:37:21+00:00",
                    "text": "Hi @AlexisPerry, will you be able to contribute Flang updates by tomorrow (9/1)?\n\nYes, I have created a PR here: milancurcic#1"
                },
                {
                    "user": "milancurcic",
                    "date": "2021-08-31 15:39:33+00:00",
                    "text": "@AlexisPerry perfect, thanks, I didn't see the notification for the PR."
                },
                {
                    "user": "milancurcic",
                    "date": "2021-08-31 23:52:19+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-08-31 23:53:57+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/305/"
                },
                {
                    "user": "certik",
                    "date": "2021-09-01 00:06:40+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-09-01 00:08:36+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/305/"
                },
                {
                    "user": "certik",
                    "date": "2021-09-01 00:10:49+00:00",
                    "text": "Ok, it looks good to me now!"
                },
                {
                    "user": "certik",
                    "date": "2021-09-01 00:12:34+00:00",
                    "text": "@AlexisPerry thank you for submitting the Flang updates."
                },
                {
                    "user": "AlexisPerry",
                    "date": "2021-09-01 15:05:51+00:00",
                    "text": "@AlexisPerry thank you for submitting the Flang updates.\n\nMy pleasure :-)"
                },
                {
                    "user": "milancurcic",
                    "date": "2021-09-01 15:15:53+00:00",
                    "text": "Thank you all, I'll go ahead and merge."
                },
                {
                    "user": "milancurcic",
                    "date": "2021-09-01 15:34:38+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-09-01 15:34:57+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 304,
            "user": "Beliavsky",
            "date": "2021-08-17 19:57:09+00:00",
            "title": "Show how to declare multiple variables of the same type in one line",
            "text": "The tutorial says\nThe syntax for declaring variables is:\n<variable_type> :: <variable_name>\nwhere <variable_type> is one of the built-in variable types listed above and <variable_name> is the name that you would like to call your variable.\n\nIn even the smallest programs one may have several variables of the same type, so I think it is worth introducing the syntax for this at the beginning. So the above could be changed to\nThe syntax for declaring variables is:\n<variable_type> :: <variable_name_1>, <variable_name_2>\nwhere <variable_type> is one of the built-in variable types listed above and <variable_name_1> and <variable_name_2> are the names that you would like to call your variables.\n\nThen in the illustrative program\nprogram arithmetic\n  implicit none\n\n  real :: pi\n  real :: radius\n  real :: height\n  real :: area\n  real :: volume\n\nthe declarations can be consolidated to one line. Modern Fortran has been criticized as verbose -- I think concise syntax should be used when it does not sacrifice clarity.\nA nitpick about the code is that the line\narea = pi * radius**2.0\nshould be\narea = pi * radius**2\nWhen you want to raise a value to an exact integer power, you should not write the exponent as a float.\nTypo -- \"running\" not \"runnning\" (2 not 3 n's) at https://fortran-lang.org/learn/quickstart/arrays_strings .",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "arjenmarkus",
                    "date": "2021-08-18 06:25:34+00:00",
                    "text": "I agree with these observations (should we add a comment about the difference between integer and real exponents?)"
                }
            ]
        },
        {
            "number": 303,
            "user": "certik",
            "date": "2021-08-14 03:59:03+00:00",
            "title": "Add NJOY",
            "text": "https://github.com/njoy/NJOY2016",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2021-08-15 03:22:53+00:00",
                    "text": "Thanks for the review @awvwgk and @brocolis!"
                }
            ]
        },
        {
            "number": 302,
            "user": "ghost",
            "date": "2021-08-14 00:37:53+00:00",
            "title": "Update Silverfrost compiler description.",
            "text": "Author: Beliavsky; Closes #301.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "ghost",
                    "date": "2021-08-14 19:19:53+00:00",
                    "text": "Thank you for reviewing it."
                }
            ]
        },
        {
            "number": 301,
            "user": "Beliavsky",
            "date": "2021-08-13 19:12:15+00:00",
            "title": "Update Silverfrost compiler description",
            "text": "Based on the discussion here, I suggest editing the Silverfrost compiler description by appending the sentences,\nSome features of Fortran 2003 and 2008 have been added. There is a free personal edition.",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 300,
            "user": "awvwgk",
            "date": "2021-08-06 21:58:53+00:00",
            "title": "Add QCxMS to package index",
            "text": "source at qcxms/qcxms\nbuilds with meson, supports Intel Fortran\ndocumentation\n\ncc @JayTheDog",
            "is_open": false,
            "labels": [
                "packages"
            ],
            "comments": []
        },
        {
            "number": 299,
            "user": "jacobwilliams",
            "date": "2021-08-02 02:22:43+00:00",
            "title": "Compiler platform listings",
            "text": "The compiler listings should be more specific about which platforms are supported by which compilers. Some are listed, but some are not clear.",
            "is_open": true,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2021-08-02 05:35:52+00:00",
                    "text": "This is something that we will have to have establish communication with the compiler vendors. Which we should."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-08-08 19:19:59+00:00",
                    "text": "I originally added the supported platforms for all commercial compilers that offer free community versions. This way it was easy enough to verify whether the compiler is actually usable for the respective platform / architecture combination.\nThis leaves the open source compilers:\n\nGFortran, as part of GCC it is available on pretty much every major platform / architecture:\n\nLinux / x86_64, ppc64le, aarch64, ia64, s390, sparc, ...\nFreeBSD / x86_64\nOpenBSD / x86_64\nOSX / ppc64le, x86_64, aarch64\nWindows (MinGW) / x86_64\nWindows (Cygwin) / x86_64\nSolaris / sparc, x86_64\nAIX / ppc64le\nprobably more...\n\n\nLFortran:\n\nLinux / x86_64\nOSX / x86_64, aarch64\nWindows / x86_64\n\n\n\nNo idea about flang and f18. I know that at least (classic) flang is available for Linux / x86_64 and conda-forge's fork also provides support for Windows / x86_64. It is also difficult to track down on repology and similar because some projects package the (classic) flang, usually by release date, and some package f18 under the name flang, usually by LLVM version number, but I have already seen packaged versions of (classic) flang under the LLVM version number.\nHere is what I could find out about the other commercial compilers by checking their webpage\n\nNAG:\n\nLinux / x86_64\nOSX / x86_64, aarch64\nWindows / x86_64\n\n\nAbsoft\n\nLinux / x86_64\nOSX / x86_64\nWindows / x86_64\n\n\n\nFor other commercial compilers it is not that clear."
                },
                {
                    "user": "Beliavsky",
                    "date": "2021-08-13 19:06:49+00:00",
                    "text": "This issue should be consolidated with #240 , \"List compilers by platform\"."
                }
            ]
        },
        {
            "number": 298,
            "user": "certik",
            "date": "2021-08-01 09:29:45+00:00",
            "title": "Run failed: Comment on the pull request and push the PR preview to the gh-pages branch - master",
            "text": "Every time I comment on a pull request such as: #295, I get an email with the above title and a link to:\nhttps://github.com/fortran-lang/fortran-lang.org/actions/runs/1086966949\nIt seems something in the CI is broken.",
            "is_open": true,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2021-09-06 00:27:05+00:00",
                    "text": "I keep getting these emails after every (?) comment I post in this repository. Here is an example:\n\nFirst such email is from July 31, 2021. Last one is from a couple minutes ago. So far I got 14 of them.\nCC @milancurcic, @awvwgk, @LKedward. Do any of you also get these emails?"
                },
                {
                    "user": "milancurcic",
                    "date": "2021-09-06 00:33:54+00:00",
                    "text": "So far I believe I got only 2, but I may have only written 2 comments. Let's see if I get one for this comment."
                },
                {
                    "user": "milancurcic",
                    "date": "2021-09-06 00:35:00+00:00",
                    "text": "Yes, I just got another one. This started with the merging of #297."
                },
                {
                    "user": "certik",
                    "date": "2021-09-06 04:11:45+00:00",
                    "text": "I dread to post another comment, as I will get another email. Thanks @milancurcic for confirming. Yes, it looks like #297 caused it, so that should help in figuring out a fix."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-09-06 18:27:19+00:00",
                    "text": "Do any of you also get these emails?\n\nNo, I reduced my GitHub notification emails to the absolute minimum and I'm still getting like ~50 a day. Failing job emails are like 100% noise in my inbox.\nThe issue is that the two-stage workflow for building the build preview will trigger on every comment event in this repository. The first stage will skip if the required phrase is not part of the comment body. But apparently the second stage will always trigger regardless. It either has to check the comment body as well and skip, only get triggered on successful first stage or be able to fail gracefully.\nThis check stops workflows from running in the first stage:\n\n  \n    \n      fortran-lang.org/.github/workflows/buildPRPreview.yml\n    \n    \n         Line 22\n      in\n      66ed1d4\n    \n  \n  \n    \n\n        \n          \n           if: github.event.issue.pull_request && contains(github.event.comment.body,'#build_preview') \n        \n    \n  \n\n\nWhile the event used here seems to always evaluate to a true value\n\n  \n    \n      fortran-lang.org/.github/workflows/commentAndPushPRPreview.yml\n    \n    \n        Lines 24 to 26\n      in\n      66ed1d4\n    \n  \n  \n    \n\n        \n          \n               if: > \n        \n\n        \n          \n                 ${{ github.event.workflow_run.event == 'issue_comment' && \n        \n\n        \n          \n                 github.event.workflow_run.conclusion == 'success' }}"
                }
            ]
        },
        {
            "number": 297,
            "user": "intrigus-lgtm",
            "date": "2021-07-27 20:02:13+00:00",
            "title": "Fix insecure workflow.",
            "text": "Actions triggered on \"issue_comment\" have access to\nwrite permissions and repository secrets by default.\nIf we checkout and build untrusted code an attacker\ncan get access to the secrets as well. They can exe-\ncute code by adding a jekyll ruby plugin in\n\"_plugins/malicious.rb\".\nTo prevent this, we split the building of the site\nand pushing the site to gh-pages and commenting on\nthe PR.\nThe site building is done with only read\npermissions, so running untrusted code is not a\nproblem. If the site building finished successfully\na privileged action is triggered that then pushed\nthe site to the gh-pages branch and comments on the\nPR.\nI also added a check that prevents pushing\n\".github/workflows/\" files to the gh-pages branch, because\nthis would allow secret extraction and repository modification as well.\n(If you can add new workflows files you do what every you want inside them)",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2021-07-27 20:05:23+00:00",
                    "text": "@intrigus-lgtm thank you so much for this. We all really appreciate it! I'll let @LKedward review it."
                }
            ]
        },
        {
            "number": 296,
            "user": "MarDiehl",
            "date": "2021-07-26 13:40:44+00:00",
            "title": "my software with at least 5 stars",
            "text": "I still plan to put os into stdlib, but currently don't have time.",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 295,
            "user": "milancurcic",
            "date": "2021-07-23 14:51:42+00:00",
            "title": "Initial draft of the August newsletter",
            "text": "Update contributors data (@LKedward)\n Flang updates (@AlexisPerry)\n LFortran updates (@certik)\n Ensure PRs are up to date at the end of the month (@milancurcic)",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2021-07-31 01:48:33+00:00",
                    "text": "Just a friendly reminder that we aim to merge this on August 1. Thank you!"
                },
                {
                    "user": "LKedward",
                    "date": "2021-07-31 05:32:53+00:00",
                    "text": "Thanks for starting Milan! Looks good pending updates to the PRs."
                },
                {
                    "user": "certik",
                    "date": "2021-07-31 06:33:41+00:00",
                    "text": "I will submit LFortran later today."
                },
                {
                    "user": "certik",
                    "date": "2021-07-31 16:10:24+00:00",
                    "text": "I am still working on it."
                },
                {
                    "user": "certik",
                    "date": "2021-07-31 16:55:46+00:00",
                    "text": "@LKedward is there some documentation how you update the automatic contributor list? I know I wrote some initial scripts, but I think you might have some changes to those that you use, and I would like to learn and document how to do this."
                },
                {
                    "user": "LKedward",
                    "date": "2021-08-01 07:19:00+00:00",
                    "text": "I don't think I've made any changes to the original scripts, so I'm just following the README as documentation. I can add something to our Newsletter wiki page, however the process needs to be moved into our CI - unfortunately I haven't had the time to do this quite yet."
                },
                {
                    "user": "certik",
                    "date": "2021-08-01 07:38:02+00:00",
                    "text": "I'm just following the README as documentation\n\nThis README: https://gitlab.com/fortran-lang/github_stats/-/blob/master/README.md or some other README?"
                },
                {
                    "user": "LKedward",
                    "date": "2021-08-01 07:42:28+00:00",
                    "text": "Yes that README. I just updated the Wiki page with some basic instructions."
                },
                {
                    "user": "certik",
                    "date": "2021-08-01 09:00:45+00:00",
                    "text": "I see it now, awesome. We should improve the scripts more. For example, it seems we do not need to store the actual text of the comments. I stored initially everything, as I didn't know if we will need it, but it seems we don't (unless we wanted to count words, or something like that)."
                },
                {
                    "user": "milancurcic",
                    "date": "2021-08-02 01:58:50+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-08-02 02:00:26+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/295/"
                },
                {
                    "user": "milancurcic",
                    "date": "2021-08-02 02:03:23+00:00",
                    "text": "Thank you all, the newsletter looks good, I'll merge."
                },
                {
                    "user": "milancurcic",
                    "date": "2021-08-02 02:06:12+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-08-02 02:06:33+00:00",
                    "text": "The preview build for this PR has now been deleted."
                },
                {
                    "user": "AlexisPerry",
                    "date": "2021-08-02 19:34:33+00:00",
                    "text": "Sorry I missed the last couple newsletters; I was out on maternity leave.  Will catch up on the Flang updates in the next one."
                },
                {
                    "user": "certik",
                    "date": "2021-08-04 02:14:39+00:00",
                    "text": "@AlexisPerry no problem, thanks for letting us know and looking forward for the next month's update."
                }
            ]
        },
        {
            "number": 294,
            "user": "scivision",
            "date": "2021-07-21 02:56:51+00:00",
            "title": "compilers: use more objective tone",
            "text": "The current verbiage for a couple compliers sounds like an advertisement vs. a reference article",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2021-07-21 08:55:36+00:00",
                    "text": "Yeah --- we took it from their advertising materials. Ultimately I want this to be left to them to provide a text under 100 (?) words to put on the webpage. How to ensure it is less advertising and more information? I don't know. Until then, we can modify it along the lines of this PR. I think that will help show what we are looking for.\nOne idea is that any changes simply have to pass review, as they do now. So if reviewers think it is too much advertising, we can ask them to rework it."
                }
            ]
        },
        {
            "number": 293,
            "user": "scivision",
            "date": "2021-07-21 02:47:55+00:00",
            "title": "add Apogee and Edinburgh compilers",
            "text": "",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 292,
            "user": "milancurcic",
            "date": "2021-07-18 15:42:53+00:00",
            "title": "Should fortran-lang.org provide reference to intrinsic modules?",
            "text": "See PR #344 in ford, and specifically this comment by @ZedThree:\n\nThe Fortran wiki is probably still the best place for the intrinsic\nmodules. fortran-lang.org looks shinier, but it doesn't seem to have\nall the info the wiki does.\n\nIt seems that there is a visual appeal to fortran-lang.org, and it has higher search ranking than any other Fortran website. Though FortranWiki provides nice references, they're outdated. at least iso_fortran_env and iso_c_binding that I looked at are.\nShould we provide references to these modules under https://fortran-lang.org/learn?\nCC @certik @LKedward @awvwgk @jrblevin",
            "is_open": true,
            "labels": [
                "question"
            ],
            "comments": [
                {
                    "user": "ivan-pi",
                    "date": "2021-07-18 17:01:18+00:00",
                    "text": "Perhaps a new section Reference would be more suitable than Learn?\nI've always missed something similar to https://en.cppreference.com/w/ or https://docs.python.org/3/. I've looked at their pages and setup before but unfortunately I lack the time or webpage skills to get something started.\nStarting with the intrinsic modules would be a great way to get the ball rolling."
                },
                {
                    "user": "milancurcic",
                    "date": "2021-07-18 17:02:27+00:00",
                    "text": "I imagined Reference would be a mini-book under Learn, but a separate page would work as well."
                },
                {
                    "user": "certik",
                    "date": "2021-07-18 20:49:43+00:00",
                    "text": "Yes, fortran-lang.org/reference would be perfect. An \"official\" (=community approved) reference to all intrinsic functions and language constructs in a searchable form. We definitely need that."
                },
                {
                    "user": "ZedThree",
                    "date": "2021-07-19 09:46:46+00:00",
                    "text": "Fortran badly needs an equivalent to cppreference, including their compiler support page. There's something similar on Fortranwiki, but it uses data from the Fortran Forum which is \"does the latest version of compiler support feature\", as opposed to cppref's \"in what version did compiler first support feature\".\nIt might be useful to note that cppref is a wiki, but with a curated/managed structure."
                },
                {
                    "user": "milancurcic",
                    "date": "2021-07-20 20:57:18+00:00",
                    "text": "@urbanjost has the full reference as man pages:\n\nDiscourse thread\nRepository\nExample reference website\nfpm plugin"
                },
                {
                    "user": "urbanjost",
                    "date": "2021-07-21 01:16:37+00:00",
                    "text": "Actually, I moved the fpm plugin to plugins.  The link above still works, but I deleted that repository a while ago, and last I remember that means it will actually vanish at some point. I had several things including the platform-independent plugin I wanted to try (particularly useful on MSWIndows which does not typically have the man(1) command unless installed via Cygwin or some form of Linux) and wanted to make a Fortran version of txt2man and so on, and was thinking that putting a group of the man-pages by category out each month on Fortran Discourse or Learn (or ...?) for  group comment/editing might be useful; have been planning on some time of migration to fortran-lang for something like a year and never quite had the time.  If what I have is a useful seed I am open to ideas on how to leverage it for this purpose. The way I have it now lets me just edit plain text and automatically convert it to the M_intrinsics module for use by the plugin and actual man-pages via txt2man(1) which are things I want and have set up (in a very singular way) as a push-button operation, including extracting and building all the example programs in the man pages and I did not want to loose that, but I think having at least the intrinsic descriptions sans vendor extensions (or explicitly marking them as such) is worth pursing and some of this shouldl be usable for that purpose."
                },
                {
                    "user": "jacobwilliams",
                    "date": "2021-09-05 21:45:41+00:00",
                    "text": "Is this something I could help with? We need all this information online in a nice modern-looking format with syntax highlighting, links, maybe even diagrams if necessary. So, for that we'd have to abandon the man format. I could take a crack at converting it to markdown.\nNote: FortranWiki and also the Gfortran docs are both GPL (GFDL) I believe. Is that something we want to avoid? Otherwise, we could incorporate some of that as well."
                },
                {
                    "user": "jacobwilliams",
                    "date": "2021-09-05 21:49:43+00:00",
                    "text": "Oh I see now that @urbanjost's content is already GFDL since it is already based on those pages."
                },
                {
                    "user": "certik",
                    "date": "2021-09-06 00:17:50+00:00",
                    "text": "This is absolutely worth pursuing.\nRegarding the license, I strongly recommend using BSD or MIT for the documentation also. The GFDL has number of issues:\n\nhttps://en.wikipedia.org/wiki/GNU_Free_Documentation_License#Criticism.\nhttps://wiki.debian.org/DFSGLicenses#GNU_Free_Documentation_License_.28GFDL.29\n\nI would like to be able to include such documentation either with LFortran, or (even better) with our (future) VSCode extension where you point your cursor at an intrinsic, hit a button, and it will load documentation for it (locally, so that it can work offline)."
                },
                {
                    "user": "urbanjost",
                    "date": "2021-09-07 04:46:44+00:00",
                    "text": "The two main approaches would appear to be to make the documentation as nice as possible on the fortran-lang site and then see how to use it from a CLI environment, or to make it useable in a CLI environment and then place it as best as you can on fortran-lang.\nIn this case the approach was primarily the second.  The man-page format is a good one regardless for describing intrinsics, but not the best for providing a description of Fortran in general. But the structure of a man-page is good for describing procedures so\nthis was treated as a special case. Some of the considerations were\nEach vendor supplies a browser-based www description of their intrinsics, but with the descriptions often conflated with their own extensions and/or not including functions they have not implemented yet. So there is room for a complete standard-based description of intrinsics on the web, but there are the mentioned alternatives, and they do include descriptions of extensions, which can be valuable even at the cost of portability.\nThe standard itself is the ultimate description, but is not easily available in a CLI environment and is written to be definitive at the cost of being clear and concise and it is a bit unclear on whether even the last draft can be reused without licensing issues.\nAll of the above rarely contain completely functioning example code.\nmanpages are still in extensive use and still heavily used by C developers, as well as by many other languages.\nSo since the route I took making M_intrinsics and the associated files deserves some explanation, here is some background:\nmanpages are already integrated into a good number of CLI tools; such as vim(1). For example, if editing Fortran code you can place your cursor on a word and hit a capital K and you will be taken to a man-page for that word.\n*roff is still the language used to create a man-page (why on earth the man(1) command does not also support HTML is beyond me).\nAn ideal description could be included as block text in program comments, produce readable output for Ford and Doxygen, be used to generate a man page, be easily converted to HTML, be a simple flat-text or simple markup language that virtually anyone can write without learning *roff or LaTex and be accessible in any Fortran environment, and require little or no additional software installed to be used, and support whatever documentation standard emerges for describing fpm packages and stdlib.\nThe closest to flat text of any markup language is that provided by txt2man, so that man-pages literally look like flat text.  That format is relatively compatible with Ford/Doxygen just be adding a few comments.  So the prep(1) preprocessor allows you to create plain blocks of text that can be written to a file for processing via txt2man(1). Simultaneously it can convert the text to Fortran comments to document the code, and the comments can be massaged to work with Ford/Doxygen (prep(1) still needs some work along those lines).  Although not of the best quality, man-pages can be converted easily to HTML (and many other formats) and served on web servers via several commonly available packages. man-pages can be used on all GNU/Linux and Unix platforms as well as CygWIn.  Since info(1) can read man-pages and automatically produce cross-links to references like sin(1), and the HTML pages generated from man-pages can be used lynx/links/w3m in other CLI environments or by any browser\nthat covers a lot of group.\nThe intrinsic man-pages can then be written as txt2man input files for easy maintenance and then converted to manpages and bundled.  For environments without man(1) or info(1) (note mingw64 contains info(1) but not man(1). Not sure if info(1) can read man-pages if man(1) is not on the platform, but that was the original hope).\nIn addition, since txt2man(1) markup is a matter of context and indenting and whitespace and not special characters it can be used as flat text for a simple utility to display the text on any platform. Along those lines, to create such a utility that requires no other files the markdown files are converted to a format accessible from a Fortran program automatically -- (see the M_intrinsics module, available as an fpm(1) module).  An fpm(1) plugin utility (originally designed to be called directly by fpm(1), actually)  called fpm-man(1) can then be used to easily access the man-pages from ANY Fortran environment, albeit not (currently) with hyperlinks or color).  As long as a certain convention is followed that program can also extract the demo programs in the man-pages.\nSo:\n\nthe documents can be written in a nearly flat-text style.\nThis style can easily be learned and  included in Fortran code using a preprocessor. prep(1) already supports this, and it seems it would be easy to add to fypp(1) as well.\nthe documents can automatically be converted to man-pages; which is still the closest to a standard procedure and command description utility GNU/Linux and Unix has, and the current runner-up is info(1) which can display man-pages\ntools such as vim(1) hook into man-pages\nalmost any GNU/Linux box or Unix box can automatically convert man-pages to HTML or PDF, albeit not of create quality; and HTML is the closest to a lingua-franca that I know of.\na program has been created to allow for displaying the flat-text versions in any Fortran environment, and incorporates an a plug-in to fpm(1).\n\n\nSo the main goals decided on where\nThere is a stronger need for documentation being available on a per-intrinsic basis in CLI environments than as a web document, but there is room for both.\nThere should be a basic CLI interface available in any environment that depends on little or no infrastructure that hooks into fpm(1) as a plug-in.\nThe man-page format is a good one for intrinsics that many people are familiar with even outside of the context of the man(1) command itself.\nAnd of course, this format was already built into my own build process as a way to document my code (essentially everything I write has text blocks in them for documentation purposes (sometimes HTML or LaTex, but mostly txt2man input) that is run through prep(1) or it's big brothers, and I wanted to minimize the effort it would take me!"
                },
                {
                    "user": "urbanjost",
                    "date": "2021-09-07 05:23:22+00:00",
                    "text": "So I have my own programming environment, but this would let you roughly simulate it on a GNU/Linux box.\nAssuming you have a directory called  \"github\" off your home directory and that the default directory $HOME/.local/ for your fpm(1) prefix is OK and that you have the directory $HOME/.local/pdq in your path, you can create a file anywhere with a Fortran\ncode in it that optionally goes through the prep(1) pre-processor if ending in the \".ff\" suffix that has a manpage in it and uses your favorite fpm(1) packages  (as arbitrarily listed in the script, which would need customized) you can just say \"ff filename.ff\" and you\nhave comments in your code, and a txt2man(1) input file in $HOME/github/man that a simple script processes and creates a manpage and HTML document from.  So your code is documented, you have a manpage for the code, and an HTML version of the manpage built, and your code is built and installed in the test directory in your search path using your favorite fpm(1) dependencies.\nThis was the shortest I could find quickly. So I can write a program with a simple manpage in it as a plain text block, make calls to most POSIX routines via ISO_C_BINDING interfaces, and call a command-line argument parser and build and install my program in my path using fpm(1) like all of that was a standard part of Fortran with a single command. At some point I would like\nus to add something like that via an fpm(1) plugin where stdlib supplies a lot of functions like that, but we need to standardize on how to call different preprocessors,  use fpm(1) as a package that has an API to the backend engine, and so on.  The \"ff\" script shown here is a kluge that needs customized by each user but is just for demonstration purposes. I know it is all possible because I have something similiar (ccall(1)) that I have used for years like it; and I can write a little utility in Fortran faster than I can in python or bash using it.\nprogram demo_system_gethostname\nuse  M_kracken, only : kracken, lget\nuse M_system, only : system_gethostname\nimplicit none\ncharacter(len=:),allocatable :: name\ninteger                      :: ierr\n   call kracken('hostname','-help .F. -version .F.')\n   call help_usage(lget('hostname_help'))\n   call help_version(lget('hostname_version'))\n   call system_gethostname(name,ierr)\n   write(*,'(a)')name\ncontains\n$BLOCK HELP -file _hostname.1.man\nNAME\n    _hostname(1f) - [FUNIX] display hostname\n    (LICENSE:PD)\nSYNTAX\n    _hostname [ -help|-version]\nDESCRIPTION\n    Calls system_gethostname(3f), which calls get_hostname(3c) to determine\n    the current host name.\nOPTIONS\n       --help     display this help and exit\n       --version  output version information and exit\nEXAMPLE\n   Sample execution:\n\n    >_hostname\n    >buzz\n$BLOCK END\n$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n$BLOCK VERSION\nPRODUCT:        GPF (General Purpose Fortran) utilities and examples\nPROGRAM:        _hostname(1f)\nDESCRIPTION:    print hostname\nVERSION:        1.0, 2016-12-01\nAUTHOR:         John S. Urban\nREPORTING BUGS: http://www.urbanjost.altervista.org/\nHOME PAGE:      http://www.urbanjost.altervista.org/index.html\nLICENSE:        Public Domain. This is free software: you are free to change and redistribute it.\n                There is NO WARRANTY, to the extent permitted by law.\n$BLOCK END\nend program demo_system_gethostname\n#!/bin/bash \n#@(#) given a source file for a program build it with preprocessing via prep(1) default list of packages and install\n\n###############################################################################\nexport FF_DIR=$HOME/github/ff_cache\nexport PREFIX=$HOME/.local\nexport BINDIR=pdq\nexport PREP_DOCUMENT_DIR=${PREP_DOCUMENT_DIR:-$HOME/github}\n#export PREP_COMMENT_STYLE=ford\n###############################################################################\nSHORT(){\ncase \"${1}\" in\n *.f90) SHORTNAME=$(basename $1 .f90) ;;\n *.ff)  SHORTNAME=$(basename $1 .ff)  ;;\n *.FF)  SHORTNAME=$(basename $1 .FF)  ;;\n *.F90) SHORTNAME=$(basename $1 .F90) ;;\n *.c)   SHORTNAME=$(basename $1 .c)   ;;\n *)     SHORTNAME=$(basename $1) ;;\nesac\n}\n###############################################################################\nNEWTOML(){\ncat >$FF_DIR/fpm.toml <<EOF\n# TOML file for fpm as described at https://github.com/fortran-lang/fpm/blob/master/manifest-reference.md\nname = \"fpm_cache\"\nversion = \"0.1.0\"\nlicense = \"MIT\"\nauthor = \"John S. Urban\"\nmaintainer = \"urbanjost@comcast.net\"\ncopyright = \"2020 John S. Urban\"\ndescription = \"compiled by fpm(1)\"\ncategories = [\"General Purpose Fortran\"]\nkeywords = [\"fortran\", \"fpm\" ]\nhomepage = \"https://github.com/urbanjost\"\n\n[install]\n#library=\"false\"\nlibrary=false\n\n# this is used because changing the package name causes a rebuild of dependencies\n# and editing or replacement of the build/cache.toml file\n[[executable]]\nname=\"$SHORTNAME\"\nsource-dir=\"app\"\nmain=\"$MAIN\"\n\n[dependencies]\nM_args        =  {  git  =  \"https://github.com/urbanjost/M_args.git\"        }\nM_CLI2        =  {  git  =  \"https://github.com/urbanjost/M_CLI2.git\"        }\nM_CLI         =  {  git  =  \"https://github.com/urbanjost/M_CLI.git\"         }\nM_kracken95   =  {  git  =  \"https://github.com/urbanjost/M_kracken95.git\"   }\nM_kracken     =  {  git  =  \"https://github.com/urbanjost/M_kracken.git\"     }\n\nM_draw        =  {  git  =  \"https://github.com/urbanjost/M_draw.git\"        }\nM_history     =  {  git  =  \"https://github.com/urbanjost/M_history.git\"     }\n#M_intrinsics  =  {  git  =  \"https://github.com/urbanjost/M_intrinsics.git\"  }\nM_io          =  {  git  =  \"https://github.com/urbanjost/M_io.git\"          }\nM_LA          =  {  git  =  \"https://github.com/urbanjost/M_LA.git\"          }\nM_list        =  {  git  =  \"https://github.com/urbanjost/M_list.git\"        }\nM_msg         =  {  git  =  \"https://github.com/urbanjost/M_msg.git\"         }\nM_process     =  {  git  =  \"https://github.com/urbanjost/M_process.git\"     }\nM_sort        =  {  git  =  \"https://github.com/urbanjost/M_sort.git\"        }\nM_strings     =  {  git  =  \"https://github.com/urbanjost/M_strings.git\"     }\nM_system      =  {  git  =  \"https://github.com/urbanjost/M_system.git\"      }\nM_time        =  {  git  =  \"https://github.com/urbanjost/M_time.git\"        }\n\n#M_messages    =  {  git  =  \"https://github.com/urbanjost/M_messages.git\"    }\n#M_stopwatch   =  {  git  =  \"https://github.com/urbanjost/M_stopwatch.git\"   }\n#M_random      =  {  git  =  \"https://github.com/urbanjost/M_random.git\"      }\n#M_math        =  {  git  =  \"https://github.com/urbanjost/M_math.git\"        }\n#M_regex       =  {  git  =  \"https://github.com/urbanjost/M_regex.git\"       }\nEOF\n}\n################################################################################\nDISPLAY(){\ncat <<EOF\n================================================================================\n   NAME       $NAME\n   SHORTNAME  $SHORTNAME\n   MAIN       $MAIN\n   TOML       $(grep $SHORTNAME $FF_DIR/fpm.toml|xargs)\n   INSTALL    fpm install $OPTS --prefix $PREFIX --bindir $BINDIR --verbose\n   OPTS       $OPTS\n================================================================================\ntree $FF_DIR\n#read PAWS\nEOF\n}\n################################################################################\nDISPLAY(){\ncat <<EOF\n================================================================================\n   NAME       $NAME\n   INSTALL    fpm install $OPTS --prefix $PREFIX --bindir $BINDIR --verbose\n================================================================================\ntree $FF_DIR\n#read PAWS\nEOF\n}\n################################################################################\nNAMES=''\nOPTS=''\nfor NAME in $*\ndo\nif [ -e $NAME ] \nthen\n   NAMES=\"$NAME $NAMES\"\nelse\n   OPTS=\"$OPTS $NAME\"\nfi\n################################################################################\ndone\ncase \"$OPTS\" in\n*-profile*);;\n*) OPTS=\"$OPTS --profile release\" ;;\nesac\n################################################################################\nfor NAME in $NAMES\ndo\n   SHORT $NAME\n   if [ ! -d $FF_DIR ]\n   then\n      fpm new -app $FF_DIR\n      rm $FF_DIR/app/main.f90\n   fi\n   case \"$NAME\" in\n   *.ff)  MAIN=$SHORTNAME.f90;prep -D TESTPRG90 -i $NAME -o $FF_DIR/app/$MAIN;;\n   *.FF)  MAIN=$SHORTNAME.F90;prep -D TESTPRG90 -i $NAME -o $FF_DIR/app/$MAIN -system;;\n   *.F90) MAIN=$SHORTNAME.F90;cp $NAME $FF_DIR/app/$MAIN;;\n   *.f90) MAIN=$SHORTNAME.f90;cp $NAME $FF_DIR/app/$MAIN;;\n   *.c)   MAIN=$SHORTNAME.c;cp $NAME $FF_DIR/app/$MAIN;;\n   esac\n   if  test ! -f \"$FF_DIR/app/$MAIN\"\n   then\n      echo file \"<ERROR> $FF_DIR/app/$MAIN is not a file\"\n   fi\n   if  test ! -s \"$FF_DIR/app/$MAIN\"\n   then\n      echo file \"<ERROR> $FF_DIR/app/$MAIN has no length\"\n   fi\n   NEWTOML\n   DISPLAY\n   (\n      cd $FF_DIR\n      fpm install $OPTS --prefix $PREFIX --bindir $BINDIR --verbose\n      rm $FF_DIR/app/$MAIN\n      rm -f $FF_DIR/app/*\n   )\ndone\n################################################################################\nexit\n################################################################################"
                }
            ]
        },
        {
            "number": 291,
            "user": "dependabot[bot]",
            "date": "2021-07-13 09:28:47+00:00",
            "title": "Bump addressable from 2.7.0 to 2.8.0",
            "text": "Bumps addressable from 2.7.0 to 2.8.0.\n\nChangelog\nSourced from addressable's changelog.\n\nAddressable 2.8.0\n\nfixes ReDoS vulnerability in Addressable::Template#match\nno longer replaces + with spaces in queries for non-http(s) schemes\nfixed encoding ipv6 literals\nthe :compacted flag for normalized_query now dedupes parameters\nfix broken escape_component alias\ndropping support for Ruby 2.0 and 2.1\nadding Ruby 3.0 compatibility for development tasks\ndrop support for rack-mount and remove Addressable::Template#generate\nperformance improvements\nswitch CI/CD to GitHub Actions\n\n\n\n\nCommits\n\n6469a23 Updating gemspec again\n2433638 Merge branch 'main' of github.com:sporkmonger/addressable into main\ne9c76b8 Merge pull request #378 from ashmaroli/flat-map\n56c5cf7 Update the gemspec\nc1fed1c Require a non-vulnerable rake\n0d8a312 Adding note about ReDoS vulnerability\n89c7613 Merge branch 'template-regexp' into main\ncf8884f Note about alias fix\nbb03f71 Merge pull request #371 from charleystran/add_missing_encode_component_doc_entry\n6d1d809 Adding note about :compacted normalization\nAdditional commits viewable in compare view\n\n\n\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting @dependabot rebase.\n\n\nDependabot commands and options\n\nYou can trigger Dependabot actions by commenting on this PR:\n\n@dependabot rebase will rebase this PR\n@dependabot recreate will recreate this PR, overwriting any edits that have been made to it\n@dependabot merge will merge this PR after your CI passes on it\n@dependabot squash and merge will squash and merge this PR after your CI passes on it\n@dependabot cancel merge will cancel a previously requested merge and block automerging\n@dependabot reopen will reopen this PR if it is closed\n@dependabot close will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n@dependabot ignore this major version will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n@dependabot ignore this minor version will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n@dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n@dependabot use these labels will set the current labels as the default for future PRs for this repo and language\n@dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language\n@dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language\n@dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language\n\nYou can disable automated security fix PRs for this repo from the Security Alerts page.",
            "is_open": false,
            "labels": [
                "dependencies"
            ],
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2021-07-13 13:09:10+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-07-13 13:10:15+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/291/"
                },
                {
                    "user": "LKedward",
                    "date": "2021-07-13 13:11:27+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-07-13 13:11:49+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 290,
            "user": "awvwgk",
            "date": "2021-07-10 09:17:19+00:00",
            "title": "Add arrayfire-fortran to package index",
            "text": "Repository: https://github.com/arrayfire/arrayfire-fortran\nSee also https://fortran-lang.discourse.group/t/questions-from-a-fortran-hpc-webinar/1516/20",
            "is_open": false,
            "labels": [
                "packages"
            ],
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2021-07-10 09:38:02+00:00",
                    "text": "Looks like arrayfire has binding to almost every language (I see Haskell, Ruby, R, Lisp, ...). With that many bindings it is probably difficult to keep them all up to date, maybe if we express interest in the Fortran binding they will consider updating it again."
                },
                {
                    "user": "milancurcic",
                    "date": "2021-07-21 13:20:17+00:00",
                    "text": "Thank you!"
                }
            ]
        },
        {
            "number": 289,
            "user": "interkosmos",
            "date": "2021-07-09 12:56:36+00:00",
            "title": "Small fix in packages index",
            "text": "Changed url to github, added licence.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2021-07-09 13:43:11+00:00",
                    "text": "Thank you!"
                }
            ]
        },
        {
            "number": 288,
            "user": "milancurcic",
            "date": "2021-07-08 16:52:33+00:00",
            "title": "Add Flatiron institute multipole libraries to the package index",
            "text": "Thanks @Beliavsky for finding them.\n\nFMM3D\nfmm2d",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 287,
            "user": "Beliavsky",
            "date": "2021-07-08 11:45:13+00:00",
            "title": "Videos to add to Online Courses section",
            "text": "EU Regional School 2021 Part 1 with Steve Lionel. Modern Fortran: Features for High-Performance Computing\nRecommended Videos from iRASPA Molecular Simulations",
            "is_open": true,
            "labels": [],
            "comments": []
        },
        {
            "number": 286,
            "user": "ghost",
            "date": "2021-07-02 04:31:06+00:00",
            "title": "Installation process for GFortran on OpenBSD",
            "text": "Installation process for GFortran on OpenBSD.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "ghost",
                    "date": "2021-07-03 03:09:37+00:00",
                    "text": "Thanks for reviewing it, @LKedward. I have one day of experience with OpenBSD \ud83d\ude38. Today I discovered that we can install GFortran with pkg_add g95, no need to include full version number. I'll update the PR."
                },
                {
                    "user": "milancurcic",
                    "date": "2021-07-08 13:33:54+00:00",
                    "text": "Very nice, thanks @brocolis!"
                }
            ]
        },
        {
            "number": 285,
            "user": "Beliavsky",
            "date": "2021-06-29 01:36:21+00:00",
            "title": "Modern Fortran in Science and Technology by Lindemann and Dahlblom",
            "text": "Modern Fortran in Science and Technology could be added to the Online Courses section. I skimmed it, and it seems pretty thorough.",
            "is_open": true,
            "labels": [
                "easy",
                "learn"
            ],
            "comments": [
                {
                    "user": "certik",
                    "date": "2021-06-29 02:24:30+00:00",
                    "text": "Yes, we should. Although the first place I randomly clicked: https://modern-fortran-in-science-and-technology.readthedocs.io/en/latest/chapter_fortran.html#arrays-and-matrices and it has a mistake, they assign 5.0 to a double precision number, which will only assign the first 7 digits or so instead of 15."
                },
                {
                    "user": "Beliavsky",
                    "date": "2021-06-29 02:44:23+00:00",
                    "text": "They are aware of this and illustrate this issue with a sample program\nprogram constants\n    implicit none\n    integer, parameter :: dp = selected_real_kind(15,300)\n    real(dp) :: pi1, pi2\n    pi1 = 3.141592653589793\n    pi2 = 3.141592653589793_dp\n    write(*,*) 'pi1 = ', pi1\n    write(*,*) 'pi2 = ', pi2\n    stop\nend program constants\n\nbut maybe some of the code they present could be improved -- the book is on GitHub"
                },
                {
                    "user": "certik",
                    "date": "2021-06-29 02:55:02+00:00",
                    "text": "Ok, I submitted a PR: jonaslindemann/modern_fortran_book#1"
                },
                {
                    "user": "jonaslindemann",
                    "date": "2021-06-29 08:07:21+00:00",
                    "text": "I will look into the issues."
                },
                {
                    "user": "jonaslindemann",
                    "date": "2021-06-29 11:33:42+00:00",
                    "text": "I hope I have fixed it in most places.\nThanks for the input."
                },
                {
                    "user": "certik",
                    "date": "2021-06-29 13:48:09+00:00",
                    "text": "Thanks @jonaslindemann!\nYes, we should link it.\nBtw, currently when I open the page: https://modern-fortran-in-science-and-technology.readthedocs.io/, I am getting \"Warning: Potential Security Risk Ahead\" in Firefox and Chrome and it does not open for me. It could be an issue on my end."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2021-06-29 13:50:29+00:00",
                    "text": "I just tried with FireFox myself and had no such problem.\n\nOp di 29 jun. 2021 om 15:48 schreef Ond\u0159ej \u010cert\u00edk ***@***.***\n\u2026\n:\n Thanks @jonaslindemann <https://github.com/jonaslindemann>!\n\n Yes, we should link it.\n\n Btw, currently when I open the page:\n https://modern-fortran-in-science-and-technology.readthedocs.io/, I am\n getting \"Warning: Potential Security Risk Ahead\" in Firefox and Chrome and\n it does not open for me. It could be an issue on my end.\n\n \u2014\n You are receiving this because you are subscribed to this thread.\n Reply to this email directly, view it on GitHub\n <#285 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YR4A3SI3OA55X5675VLTVHFKFANCNFSM47PCT32A>\n ."
                },
                {
                    "user": "jonaslindemann",
                    "date": "2021-06-29 13:51:23+00:00",
                    "text": "I don't have any problems myself. It is built and hosted automatically by readthedocs using Sphinx. Thanks for linking it by the way!\nJonas"
                },
                {
                    "user": "arjenmarkus",
                    "date": "2021-06-29 13:52:05+00:00",
                    "text": "No problem with MS Edge either, so it seems indeed to be on your side (or\nit is a temporary thing)\n\nOp di 29 jun. 2021 om 15:50 schreef Arjen Markus ***@***.***\n\u2026\n:\n I just tried with FireFox myself and had no such problem.\n\n Op di 29 jun. 2021 om 15:48 schreef Ond\u0159ej \u010cert\u00edk <\n ***@***.***>:\n\n> Thanks @jonaslindemann <https://github.com/jonaslindemann>!\n>\n> Yes, we should link it.\n>\n> Btw, currently when I open the page:\n> https://modern-fortran-in-science-and-technology.readthedocs.io/, I am\n> getting \"Warning: Potential Security Risk Ahead\" in Firefox and Chrome and\n> it does not open for me. It could be an issue on my end.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <#285 (comment)>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAN6YR4A3SI3OA55X5675VLTVHFKFANCNFSM47PCT32A>\n> .\n>"
                },
                {
                    "user": "certik",
                    "date": "2021-06-29 14:29:53+00:00",
                    "text": "Perfect, I am glad it is only on my end. I'll try again in a few days. I also tried from my phone and that worked."
                },
                {
                    "user": "Beliavsky",
                    "date": "2021-10-26 20:14:22+00:00",
                    "text": "Lindemann has uploaded to YouTube a series of videos on Scientific Programming in Python and Fortran that could be listed in the Online courses section."
                }
            ]
        },
        {
            "number": 284,
            "user": "zmoon",
            "date": "2021-06-29 00:57:28+00:00",
            "title": "PRs script updates",
            "text": "Fixes #283\n\nremoved attempted optimization that was causing merged PRs to be missed when a previously merged PR had another \"update\" after being merged\n\nunfortunately, it doesn't seem to currently be possible to sort by merge date in the API request\n\n\nfor now, the whole list of merged PRs is searched, which takes a few minutes\n\nwith progress bars if tqdm installed\n\n\nPR titles on new line in the generated Markdown\nsort merged PRs by merge date (earliest merged -> first in the output list)",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2021-07-08 13:33:03+00:00",
                    "text": "Thanks, @zmoon!"
                }
            ]
        },
        {
            "number": 283,
            "user": "LKedward",
            "date": "2021-06-28 10:22:16+00:00",
            "title": "PRs script issue",
            "text": "@zmoon, for #281 I had a small issue with the prs.py script where it didn't seem to pick up all the PRs for the fortran-lang website repo from this month. It works fine for stdlib and fpm though, so I'm not sure if I'm using it wrong.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "zmoon",
                    "date": "2021-06-28 12:46:26+00:00",
                    "text": "Sorry about that; I'll check it out"
                }
            ]
        },
        {
            "number": 282,
            "user": "Beliavsky",
            "date": "2021-06-24 19:01:55+00:00",
            "title": "How are packages sorted?",
            "text": "Looking for example at quantum-chemistry packages, I don't see how they are sorted. If the ordering is by stars, that should be mentioned somewhere.",
            "is_open": true,
            "labels": [],
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2021-06-25 05:23:52+00:00",
                    "text": "In the package index they should be sorted alphabetically, in the search there is an internal match score which might be used to sort them.\nThe output is generated here:\n\n  \n    \n      fortran-lang.org/assets/js/package_search.js\n    \n    \n        Lines 118 to 120\n      in\n      c77bf4b\n    \n  \n  \n    \n\n        \n          \n           for (i=0;i<results.length;i++){ \n        \n\n        \n          \n            \n        \n\n        \n          \n               if (results[i].score > 0){ \n        \n    \n  \n\n\nBut this doesn't necessarily looks like there is any ordering applied. @LKedward can you comment on this?"
                },
                {
                    "user": "LKedward",
                    "date": "2021-06-25 07:32:24+00:00",
                    "text": "When you click a keyword tag, it just performs a search of the index using that tag. The search results are crudely ranked by how well the query string matches the meta data from each package and in which field the match occurred. Highest weighting goes to matches in the name field, followed by matches in description, tags and then all other fields. Longer matches are ranked higher than shorter ones, e.g. matching 'user interface' ranks higher than 'interface'.\nIt would perhaps be a good idea to add an additional sort so that search results with the same score (such as when searching for a keyword tag) are presented alphabetically."
                }
            ]
        },
        {
            "number": 281,
            "user": "LKedward",
            "date": "2021-06-24 14:50:30+00:00",
            "title": "July newsletter",
            "text": "Hi all - I've started the initial draft for this Month's newletter.\n\n add stdlib updates\n add fpm updates\n add fortran-lang.org updates\n add monthly call link\n add LLVM / classic flang updates (@AlexisPerry)\n add LFortran updates (@certik)\n update contributor data (@LKedward)\n\nAs usual, please add your name to the authors list if you add, edit, or review content.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "github-actions[bot]",
                    "date": "2021-06-25 22:15:19+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/281/"
                },
                {
                    "user": "LKedward",
                    "date": "2021-06-30 07:29:39+00:00",
                    "text": "@certik & @AlexisPerry do you have any updates you want to add to the newsletter?"
                },
                {
                    "user": "certik",
                    "date": "2021-07-01 02:38:00+00:00",
                    "text": "Yes, I am working on it now."
                },
                {
                    "user": "LKedward",
                    "date": "2021-07-01 08:49:00+00:00",
                    "text": "Thanks everyone!"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-12-17 14:53:17+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-12-17 14:53:42+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 280,
            "user": "milancurcic",
            "date": "2021-06-23 16:58:03+00:00",
            "title": "Document a quickstart for fpm and GFortran using Conda on all platforms",
            "text": "Originally from proposed by @certik here.\nDocument on fortran-lang.org how to get started on each platform using Conda in 5 minutes. Conda is nice because it does not require root access and installs locally, in a non-invasive manner. And the usage from the user perspective is almost identical on all platforms.",
            "is_open": true,
            "labels": [
                "learn"
            ],
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2021-06-24 09:06:06+00:00",
                    "text": "And the usage from the user perspective is almost identical on all platforms.\n\nNote that fpm isn't yet available on Windows via Conda"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-06-24 09:11:22+00:00",
                    "text": "I have a quite complete setup for Ubuntu, MacOS and Windows here. It's not a complete conda setup because I prefer to use the system compilers, but it's close.\nFor (native) Windows I made good experience with MSYS2, a few students chose this over the WSL approach and were quite successful."
                }
            ]
        },
        {
            "number": 279,
            "user": "Beliavsky",
            "date": "2021-06-20 01:24:33+00:00",
            "title": "multi-word tags",
            "text": "Looking at\n\n\n\nqContainers\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n\n\n\n\nStore any intrinsic or derived data type to a container\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n\n\nTags:\u00a0qlibc tree table hash table linked list vector dynamic array unique set\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n\n\n\nI think there are still many multi-word tags that need to be hyphenated. I assume\u00a0hash-table,\u00a0linked-list, and\u00a0dynamic-array\u00a0are multi-word tags.",
            "is_open": true,
            "labels": [],
            "comments": []
        },
        {
            "number": 278,
            "user": "awvwgk",
            "date": "2021-06-16 19:32:02+00:00",
            "title": "Mission statement",
            "text": "Following up on Ond\u0159ej's suggestion from June's monthly call (see https://fortran-lang.discourse.group/t/fortran-monthly-call-june-2021/1334/14) we want put together a long-term mission statement for Fortran and where we want to be in three years from now.\nThe actual mission statement can be created collectively in the fortran-lang.org wiki here.",
            "is_open": true,
            "labels": [
                "help wanted"
            ],
            "comments": [
                {
                    "user": "certik",
                    "date": "2021-06-16 19:42:12+00:00",
                    "text": "I would like to brainstorm and write down goals that if achieved, would \"fix\" Fortran, from a practical perspective. I intuitively feel that can be achieved in 3 years, so that's why I chose that time frame."
                }
            ]
        },
        {
            "number": 277,
            "user": "awvwgk",
            "date": "2021-06-10 12:50:52+00:00",
            "title": "Add projects for Fortran-lua interfacing to package index",
            "text": "flook\n\nDocumentation: http://electronicstructurelibrary.github.io/flook/doxygen/index.html\nSource: https://github.com/ElectronicStructureLibrary/flook\nBuilds with make\n\nLuaF\n\nSource: https://chiselapp.com/user/vadimz/repository/luaf (fossil)\n\naotus\n\nDocumentation: https://geb.sts.nt.uni-siegen.de/doxy/aotus/\nSource: https://osdn.net/projects/apes/scm/hg/aotus/ (mercurial)\nBuilds with waf\n\nfortran-lua53\n\nSource: https://github.com/interkosmos/fortran-lua53\nBuilds with xmake",
            "is_open": false,
            "labels": [
                "packages"
            ],
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2021-06-10 14:27:26+00:00",
                    "text": "The Fortran-Lua binding projects hanging around at interesting places, the software choices seem non-mainstream from our git centered bubble here:\n\nLuaF, using fossil, hosted at https://chiselapp.com\naotus, using mercurial, hosted at https://osdn.net/, builds with waf\n\nBoth projects are alive and active, but somewhat hard to find."
                },
                {
                    "user": "milancurcic",
                    "date": "2021-07-08 13:32:22+00:00",
                    "text": "Great additions, thanks!"
                }
            ]
        },
        {
            "number": 276,
            "user": "awvwgk",
            "date": "2021-06-10 07:42:40+00:00",
            "title": "Add LATTE tight-binding molecular dynamics code to package index",
            "text": "source at https://github.com/lanl/LATTE\nGPL-2.0 licensed\nsupport CMake and make as build system",
            "is_open": false,
            "labels": [
                "packages"
            ],
            "comments": []
        },
        {
            "number": 275,
            "user": "awvwgk",
            "date": "2021-06-08 21:42:50+00:00",
            "title": "Add crest program to package index",
            "text": "This patch adds the conformer-rotamer ensemble search tool (crest) to the package index.\n\nOpenMP based task scheduler and automation tool for exploring potential energy surfaces written in Fortran\nthe package supports meson, CMake and plain make as build systems\ncompiles with Intel Fortran and GFortran, requires MKL\ndocumentation can be found here: https://xtb-docs.readthedocs.io/en/latest/crest.html\n\ncc @pprcht",
            "is_open": false,
            "labels": [
                "packages"
            ],
            "comments": []
        },
        {
            "number": 274,
            "user": "dav05",
            "date": "2021-06-07 22:05:14+00:00",
            "title": "Add convert_FORTRAN_case formatter to package index",
            "text": "Dear friends, I wrote this utility :\npython3 scrip for case conversion of source code files written in fixed form FORTRAN. Ignores comments, strings, escape, sequences within strings and some special words.\nI created it essentially to use in my company, but during my personal time, so it's fully tested and I'm releasing as open source. I know it does not have the 3 git starts, as I just released the code, however is really easy to verify that works very well. So I hope you can embrace this contribution to the community.\nMany thanks.\nDavid",
            "is_open": false,
            "labels": [
                "packages"
            ],
            "comments": [
                {
                    "user": "certik",
                    "date": "2021-06-08 00:22:04+00:00",
                    "text": "It has 3 stars now. ;)\nAre there other tools that can convert fixed form to free form? Such a tool is something that I would like to have, well maintained, that can handle comments, empty lines, etc.\nCC @milancurcic, @LKedward, @awvwgk and others."
                },
                {
                    "user": "milancurcic",
                    "date": "2021-07-08 13:31:29+00:00",
                    "text": "Thank you!"
                }
            ]
        },
        {
            "number": 273,
            "user": "p-costa",
            "date": "2021-06-04 22:45:00+00:00",
            "title": "add the SNaC package ?",
            "text": "Hello everyone,\nI wrote SNaC, a multi-block finite-difference solver for massively parallel simulations of fluid flows. Despite being young and the low number of stars, I hope you find it interesting and suitable for integrating the list of scientific codes.\nThanks in advance!\nPedro",
            "is_open": false,
            "labels": [
                "packages"
            ],
            "comments": [
                {
                    "user": "certik",
                    "date": "2021-06-04 22:58:23+00:00",
                    "text": "Thanks @p-costa for submitting it! Is the \"the primary functionality of the package\" implemented? If so, then I think it should be included as far as I am concerned."
                },
                {
                    "user": "p-costa",
                    "date": "2021-06-04 23:05:16+00:00",
                    "text": "Thanks, Ond\u0159ej @certik! Yes, it is definitely mature regarding the funtionality."
                }
            ]
        },
        {
            "number": 272,
            "user": "certik",
            "date": "2021-06-03 18:15:59+00:00",
            "title": "Add QUICK to packages",
            "text": "I just discovered this application, written in Fortran:\nhttps://github.com/merzlab/QUICK\nI think it should be added.",
            "is_open": false,
            "labels": [
                "packages"
            ],
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2021-06-03 18:30:02+00:00",
                    "text": "Seems more like a C project than an actual Fortran project (the Fortran part stems from a vendored BLAS/LAPACK version).\nWell, it is indeed Fortran with a large C part because of vendored C libraries..."
                },
                {
                    "user": "certik",
                    "date": "2021-06-03 18:53:09+00:00",
                    "text": "Yes, the main program is in this directory: https://github.com/merzlab/QUICK/tree/master/src, which is indeed in (pure) Fortran. They have several dependencies that are in C and C++."
                }
            ]
        },
        {
            "number": 271,
            "user": "Beliavsky",
            "date": "2021-05-25 12:19:18+00:00",
            "title": "Describe infinite loop in Operators and Control Flow section",
            "text": "The Operators and Control Flow section presents the do while loop with the example\n  integer :: i\n  i = 1\n  do while (i < 11)\n    print *, i\n    i = i + 1\n  end do\n  ! Here i = 11\n\nbut the infinite do loop can emulate this behavior and is more general, since you can test the condition anywhere in the loop. In my codes I use do loops with indices and infinite do loops with exits, but not do while (although there is nothing wrong with it). So I suggest that the infinite do loop be presented in addition to or instead of do while. The equivalent to the code above would be\n  integer :: i\n  i = 1\n  do\n    if (i > 10) exit\n    print *, i\n    i = i + 1\n  end do\n  ! Here i = 11\n  print*,i\n  end\n\nThe code uses the one-line-if, which I suggested mentioning in another issue.\nThe sentence \"The do loop has an integer counter variable which is used to track which iteration of the loop is currently executing.\" should be qualified by putting \"usually\" or \"typically\" before \"has\", since infinite do loops do not have integer counters.",
            "is_open": true,
            "labels": [],
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2021-05-25 12:38:40+00:00",
                    "text": "Yes we should present the option of an 'infinite' do loop with a conditional exit in addition to the existing loop examples. Rather than replacing the existing do while example, I suggest we simply adapt the first excerpt in the Loop control statements section to be an 'infinite' loop and add text to explain the lack of counter variable as a valid construct.\nAs you allude to, the choice of an 'infinite' do loop versus a do while loop is merely a personal choice and so we should objectively present both options. (I personally prefer do while loops when there is only one terminating condition since it makes the exit condition clear upfront without needing to inspect the body of the loop.)"
                },
                {
                    "user": "arjenmarkus",
                    "date": "2021-05-25 13:09:35+00:00",
                    "text": "Would it be an idea to gather typical constructions (the \"Fortran idiom\")?\nMind you, I have not looked in detail at the tutorial, just something I\nrealised might be useful.\n\nOp di 25 mei 2021 om 14:39 schreef Laurence Kedward <\n***@***.***>:\n\u2026\n Yes we should present the option of an 'infinite' do loop with a\n conditional exit *in addition* to the existing loop examples. Rather than\n replacing the existing do while example, I suggest we simply adapt the\n first excerpt in the Loop control statements\n <https://github.com/fortran-lang/fortran-lang.org/blob/master/learn/quickstart/operators_control_flow.md#loop-control-statements-exit-and-cycle>\n section to be an 'infinite' loop and add text to explain the lack of\n counter variable as a valid construct.\n\n As you allude to, the choice of an 'infinite' do loop versus a do while\n loop is merely a personal choice and so we should objectively present both\n options. (I personally prefer do while loops when there is only one\n terminating condition since it makes the exit condition clear upfront\n without needing to inspect the body of the loop.)\n\n \u2014\n You are receiving this because you are subscribed to this thread.\n Reply to this email directly, view it on GitHub\n <#271 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YR4WWEMLO2ZBTTMRYJLTPOK6JANCNFSM45PHTEFA>\n ."
                }
            ]
        },
        {
            "number": 270,
            "user": "Beliavsky",
            "date": "2021-05-25 00:54:24+00:00",
            "title": "Derived types section -- have more discussion of F95-level concepts",
            "text": "I understand that the Fortran-lang tutorial is short and selective in what it covers. However, reading the Derived types section, I think there is a jump in level starting with \"Derived types in detail\", which covers features from Fortran 2003+ (bind, extends, abstract) that I consider advanced. I would first discuss basic usage of derived types that existed in Fortran 95, such as\n(1) printing a derived type\n(2) using derived types as procedure arguments and function results\n(3) using arrays of derived types. In particular, the simple way that you can refer to the components of an array of derived types is a strength of Fortran. For example, given\ntype, public :: date_mdy \n   integer :: month, day, year\nend type date_mdy\ntype(date_mdy) :: dates(100)\n\nyou can refer to all the months, days, and years with dates%month, dates%day, dates%year.\nAfter this basic usage of derived types one could discuss operator overloading. Given a date derived type it is natural to define operators such as == and >. Examples could be given of how to do this.\nIf desired, I could write a section with a module defining a date derived type and a program using it.",
            "is_open": true,
            "labels": [
                "learn"
            ],
            "comments": []
        },
        {
            "number": 269,
            "user": "awvwgk",
            "date": "2021-05-24 15:15:55+00:00",
            "title": "Grammar and typo fixes in main page and quickstart minibook",
            "text": "Thanks to @Beliavsky for pointing those out.\nCloses #268\nCloses #267\nCloses #266\nCloses #264",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 268,
            "user": "Beliavsky",
            "date": "2021-05-24 14:44:56+00:00",
            "title": "Grammar for main page",
            "text": "At https://fortran-lang.org/ there should not be a hyphen in \"Fortran has been designed from the ground-up for computationally intensive applications\". You can google the phrase \"from the ground up\".\nFor the sentence \"Fortran allows you to write code in a style that best fits your problem: Imperative, procedural, array-oriented, object-oriented, or functional.\" \"imperative\" should not be capitalized.\nThe sentence \"Fortran is the dominant language of High Performance Computing, and is used to benchmark the fastest supercomputers in the world.\" is a run-on, which can be fixed by removing the comma after \"Computing\".",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 267,
            "user": "Beliavsky",
            "date": "2021-05-24 13:00:11+00:00",
            "title": "Grammar for Arrays and strings",
            "text": "At https://fortran-lang.org/learn/quickstart/arrays_strings in\n\"Quite often, we do not know how big our array needs to be until we run our program. For example, if we are reading data from a file of unknown size.\"\nthe second sentence is a fragment. The text above can be replaced with\n\"Quite often, we do not know how big our array needs to be until we run our program, for example if we are reading data from a file of unknown size.\"\nThe sentence\n\"For this problem, we need allocatable arrays, these are allocated while the program is runnning once we know how big the array needs to be.\"\nis a run-on. The comma after \"arrays\" can be replaced by a semicolon, or two sentences can be created. Also, \"runnning\" should be \"running\".",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 266,
            "user": "Beliavsky",
            "date": "2021-05-24 12:24:47+00:00",
            "title": "Typos in Operators and Control Flow",
            "text": "https://fortran-lang.org/learn/quickstart/operators_control_flow#logical-operators\n\"There two main forms of controlling program flow:\" should be \"There are two main forms of controlling program flow:\"\n\"The do loop has an integer counter variable which is used to track which iteration of the loop is currently executing, in this example we use a common name for this counter variable: i.\" is a run-on sentence. The comma after \"executing\" should be a semicolon, or the text should be broken up into two sentences.",
            "is_open": false,
            "labels": [
                "easy",
                "learn"
            ],
            "comments": []
        },
        {
            "number": 265,
            "user": "Beliavsky",
            "date": "2021-05-24 10:46:26+00:00",
            "title": "Use one-line-if when possible in \"Operators and Control Flow\"",
            "text": "Fortran's one-line-if is convenient and concise, and I think it should be used when possible in the tutorial.\nAt https://fortran-lang.org/learn/quickstart/operators_control_flow , after showing\n  if (angle < 90.0) then\n    print *, 'Angle is acute'\n  end if\n\nI think it should be added that the following is equivalent:\n  if (angle < 90.0) print *, 'Angle is acute'\nThen the one-line-if should be used in later examples:\n  integer :: i\n  do i=1, 100\n    if (i > 10) then\n      exit ! Stop printing numbers\n    end if\n    print *, i\n  end do\n\n  integer :: i\n  do i=1,10\n    if (mod(i,2) == 0) then\n       cycle  ! Don't print even numbers\n    end if\n    print *, i\n  end do\n\n  integer :: i,j\n  outer_loop: do i=1,10\n    inner_loop: do j=1,10\n      if ((j+i) > 10) then  ! Print only pairs of i and j that add up to 10\n         cycle outer_loop  ! Go to the next iteration of the outer loop\n      end if\n      print *, 'I=', i, ' J=', j, ' Sum=', j+i\n    end do inner_loop\n  end do outer_loop",
            "is_open": true,
            "labels": [
                "learn"
            ],
            "comments": []
        },
        {
            "number": 264,
            "user": "Beliavsky",
            "date": "2021-05-24 10:13:42+00:00",
            "title": "Typo in \"Operators and Control Flow\" -- \"angle\" not \"age\"",
            "text": "At https://fortran-lang.org/learn/quickstart/operators_control_flow\n  if (age < 90.0) then\n    print *, 'Angle is acute'\n  else if (angle < 180.0) then\n    print *, 'Angle is obtuse'\n  else\n    print *, 'Angle is reflex'\n  end if\n\n\"age\" should be \"angle\"?",
            "is_open": false,
            "labels": [
                "easy",
                "learn"
            ],
            "comments": []
        },
        {
            "number": 263,
            "user": "awvwgk",
            "date": "2021-05-22 09:31:18+00:00",
            "title": "Monthly newsletter: June",
            "text": "It's again time to prepare our monthly newsletter. Going forward we want to start earlier to give everybody enough time to contribute and also be able to publish on time.\n\n add stdlib updates\n add fpm updates\n add fortran-lang.org updates\n add monthly call link\n add LLVM / classic flang updates (@AlexisPerry)\n add LFortran updates (@certik)\n update contributor data (@LKedward)\n\nAs usual, please add your name to the authors list if you add, edit, or review content.\n\n@zmoon I used your script from #261 to prepare this post. Worked great to collect the relevant links, I'll add some feedback soon.",
            "is_open": false,
            "labels": [
                "news"
            ],
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2021-05-30 08:57:17+00:00",
                    "text": "@certik @AlexisPerry Do you have updates for the compiler sections we can include?\n@LKedward @milancurcic @certik Could any of you check the settings tab of this repo whether we can enable GitHub's new automerge feature for this repository? I would like to test creating an automerge for the 1st June."
                },
                {
                    "user": "LKedward",
                    "date": "2021-05-30 11:05:21+00:00",
                    "text": "Sure, but just to check, if we enable auto-merge will this PR not merge immediately because it already has two reviews and checks passed?"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-05-30 11:07:59+00:00",
                    "text": "That's what I wanted to check, maybe we can set a delay for merging. Also, this repo has no requirements for merges and no CI that has to pass, everyone with push access can merge right away."
                },
                {
                    "user": "LKedward",
                    "date": "2021-05-30 11:13:59+00:00",
                    "text": "I've enabled it for you to try, but I'm not sure what you have in mind is possible currently"
                },
                {
                    "user": "certik",
                    "date": "2021-05-31 15:36:28+00:00",
                    "text": "Yes, I have updates that I will send later today."
                }
            ]
        },
        {
            "number": 262,
            "user": "milancurcic",
            "date": "2021-05-18 15:47:51+00:00",
            "title": "GSoC welcome post",
            "text": "First draft. Please review.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2021-05-18 15:48:45+00:00",
                    "text": "Authors ordered by Milan first, others sorted alphabetically by last name."
                },
                {
                    "user": "milancurcic",
                    "date": "2021-05-18 15:49:17+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-05-18 15:50:24+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/262/"
                },
                {
                    "user": "milancurcic",
                    "date": "2021-05-18 18:22:57+00:00",
                    "text": "With 4 approvals and trust that @arjenmarkus would approve it as well, I'll merge in interest of time. Thank you all!"
                },
                {
                    "user": "certik",
                    "date": "2021-05-18 18:25:58+00:00",
                    "text": "Thanks! Can you please tweet from fortran-lang about it?"
                },
                {
                    "user": "milancurcic",
                    "date": "2021-05-18 18:48:11+00:00",
                    "text": "Yes, here's the tweet:\nhttps://twitter.com/fortranlang/status/1394722375976067072\n\nand here's the Discourse post:\nhttps://fortran-lang.discourse.group/t/fortran-lang-welcomes-new-students-to-google-summer-of-code-2021/1255\n\n\u2026\nOn Tue, May 18, 2021 at 2:26 PM Ond\u0159ej \u010cert\u00edk ***@***.***> wrote:\n Thanks! Can you please tweet from fortran-lang about it?\n\n \u2014\n You are receiving this because you modified the open/close state.\n Reply to this email directly, view it on GitHub\n <#262 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AA7RDPXXETKZMNIQZCJ5KZ3TOKWMXANCNFSM45CZQHCQ>\n ."
                },
                {
                    "user": "certik",
                    "date": "2021-05-18 19:56:50+00:00",
                    "text": "Awesome, thanks! It got very good response so far."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-05-18 21:16:59+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-05-18 21:17:21+00:00",
                    "text": "The preview build for this PR has now been deleted."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2021-05-19 11:40:26+00:00",
                    "text": "Sure, just read the announcement and it looks good to me :).\n\nOp di 18 mei 2021 om 20:23 schreef Milan Curcic ***@***.***>:\n\u2026\n With 4 approvals and trust that @arjenmarkus\n <https://github.com/arjenmarkus> would approve it as well, I'll merge in\n interest of time. Thank you all!\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#262 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YRZU4JBGLNMNUBDVLFLTOKWBLANCNFSM45CZQHCQ>\n ."
                }
            ]
        },
        {
            "number": 261,
            "user": "zmoon",
            "date": "2021-05-15 19:57:21+00:00",
            "title": "Script for summarizing PRs",
            "text": "Regarding #258.\nCurrently a script with a few command-line options; it prints markdown to stdout.\n\nIs this a good place to put it? (_scripts/)\nIt would be easy to add more data about the PRs, such as author or date",
            "is_open": false,
            "labels": [
                "news"
            ],
            "comments": [
                {
                    "user": "certik",
                    "date": "2021-05-16 03:15:23+00:00",
                    "text": "I think that's a good start. Thanks!"
                },
                {
                    "user": "zmoon",
                    "date": "2021-05-18 01:45:48+00:00",
                    "text": "@certik anything else you want to see it do at this time?"
                },
                {
                    "user": "certik",
                    "date": "2021-05-23 01:25:22+00:00",
                    "text": "Can you show an example how the output looks like from this script?"
                },
                {
                    "user": "zmoon",
                    "date": "2021-05-23 01:30:13+00:00",
                    "text": "Yeah, here for 2021-03:\n# fortran-lang.org\n\n## merged\n\n* [#236](https://github.com/fortran-lang/fortran-lang.org/pull/236): add dl_poly_4 to packages\n* [#229](https://github.com/fortran-lang/fortran-lang.org/pull/229): Correct value of pi in quickstart mini-book\n* [#226](https://github.com/fortran-lang/fortran-lang.org/pull/226): Added DelaunaySparse to package list\n* [#225](https://github.com/fortran-lang/fortran-lang.org/pull/225): Update Authors in GSoC post\n* [#223](https://github.com/fortran-lang/fortran-lang.org/pull/223): GSoC announcement draft\n* [#222](https://github.com/fortran-lang/fortran-lang.org/pull/222): Avoid unclear formulation in contributing guide\n* [#221](https://github.com/fortran-lang/fortran-lang.org/pull/221): Add information about free compiler versions\n* [#207](https://github.com/fortran-lang/fortran-lang.org/pull/207): Correct subtitle of setting up your os\n* [#216](https://github.com/fortran-lang/fortran-lang.org/pull/216): Improve tags\n* [#215](https://github.com/fortran-lang/fortran-lang.org/pull/215): Newsletter for March 2021\n\n## WIP\n\n* [#201](https://github.com/fortran-lang/fortran-lang.org/pull/201) (WIP): Draft: Internationalization for fortran-lang\n\n# stdlib\n\n## merged\n\n* [#346](https://github.com/fortran-lang/stdlib/pull/346): Added to_lower, to_upper, reverse and to_title function to stdlib_string_type.f90 file\n* [#362](https://github.com/fortran-lang/stdlib/pull/362): Fix wording in style guide for dimension attribute\n* [#356](https://github.com/fortran-lang/stdlib/pull/356): Add test_string_functions to CMakeLists and fix to_title test\n* [#352](https://github.com/fortran-lang/stdlib/pull/352): Added TOC to README\n* [#350](https://github.com/fortran-lang/stdlib/pull/350): Style: Remove tabs from code base\n* [#320](https://github.com/fortran-lang/stdlib/pull/320): Implement non-fancy functional string type\n\n## WIP\n\n* [#363](https://github.com/fortran-lang/stdlib/pull/363) (WIP): Added sort to stdlib_string_type.f90 file\n* [#353](https://github.com/fortran-lang/stdlib/pull/353) (WIP): Initial checkin for a module for tolerant comparison of reals\n* [#333](https://github.com/fortran-lang/stdlib/pull/333) (WIP): Provide abstract base class for a string object\n* [#313](https://github.com/fortran-lang/stdlib/pull/313) (WIP): legendre polynomials and gaussian quadrature\n* [#311](https://github.com/fortran-lang/stdlib/pull/311) (WIP): String list new\n* [#286](https://github.com/fortran-lang/stdlib/pull/286) (WIP): Probability Distribution and Statistical Functions -- Beta Distribution Module\n* [#278](https://github.com/fortran-lang/stdlib/pull/278) (WIP): Probability Distribution and Statistical Functions -- Gamma Distribution Module\n* [#276](https://github.com/fortran-lang/stdlib/pull/276) (WIP): Probability Distribution and Statistical Functions -- Exponential Distribution Module\n* [#273](https://github.com/fortran-lang/stdlib/pull/273) (WIP): Probability Distribution and Statistical Functions -- Normal Distribution Module\n* [#272](https://github.com/fortran-lang/stdlib/pull/272) (WIP): Probability Distribution and Statistical Functions -- Uniform Distribution Module\n* [#189](https://github.com/fortran-lang/stdlib/pull/189) (WIP): Initial implementation of COO / CSR sparse format\n* [#157](https://github.com/fortran-lang/stdlib/pull/157) (WIP): Update CMAKE files\n\n# fpm\n\n## merged\n\n* [#420](https://github.com/fortran-lang/fpm/pull/420): Phase out Haskell fpm\n* [#412](https://github.com/fortran-lang/fpm/pull/412): Fix for Issue #396 - Duplicate module definitions\n* [#419](https://github.com/fortran-lang/fpm/pull/419): Split workflow for Haskell and Fortran fpm\n* [#417](https://github.com/fortran-lang/fpm/pull/417): Bump version for new release\n* [#413](https://github.com/fortran-lang/fpm/pull/413): Add: omp_lib to intrinsic modules list\n* [#409](https://github.com/fortran-lang/fpm/pull/409): Give Programs Access to Code in Subdirectories\n* [#404](https://github.com/fortran-lang/fpm/pull/404): correct join for null input\n* [#414](https://github.com/fortran-lang/fpm/pull/414): Add few important links\n* [#377](https://github.com/fortran-lang/fpm/pull/377): Add explicit include-dir key to manifest\n* [#407](https://github.com/fortran-lang/fpm/pull/407): Fix typo in fpm-build synopsis\n* [#390](https://github.com/fortran-lang/fpm/pull/390): Implement --flag option for Fortran fpm\n* [#402](https://github.com/fortran-lang/fpm/pull/402): Add fpm description and reorganize the README intro\n* [#397](https://github.com/fortran-lang/fpm/pull/397): Add Conda install instructions to the README\n* [#386](https://github.com/fortran-lang/fpm/pull/386): Replace deprecated flags in debug_fortran option\n* [#398](https://github.com/fortran-lang/fpm/pull/398): Minor fix: for setting executable link libraries.\n* [#5](https://github.com/fortran-lang/setup-fpm/pull/5) (`setup-fpm`): Correctly document option to use Haskell fpm version\n* [#1](https://github.com/fortran-lang/fpm-haskell/pull/1) (`fpm-haskell`): Prune repository for Haskell only\n\n## WIP\n\n* [#364](https://github.com/fortran-lang/fpm/pull/364) (WIP): plugin alpha version"
                },
                {
                    "user": "certik",
                    "date": "2021-05-23 01:52:11+00:00",
                    "text": "Thanks! I think this looks very good. Thank you for creating a script for this. I need to create a similar script for GitLab for LFortran. Last month we had 98 merge requests and I it was too much work to do it by hand. :)"
                }
            ]
        },
        {
            "number": 260,
            "user": "certik",
            "date": "2021-05-13 18:47:45+00:00",
            "title": "Community packages: have two sections, open source (OSI approved) and other",
            "text": "Currently all the packages in https://fortran-lang.org/packages/ have OSI approved open source licenses. See also https://github.com/fortran-lang/fortran-lang.org/blob/master/PACKAGES.md#package-criteria which has the same criterion (OSI approved license).\nWe should add a new section \"other\", or \"commercial\" or \"not open source\" that would list packages that have non OSI approved license. Some examples:\n\nMUMPS (#259)\nVASP\nthe NAG Fortran Library\nNumerical Recipes (in Fortran)\nperhaps packages like ANSYS, NASTRAN, ...\nOriginal Matlab: https://fortran-lang.discourse.group/t/compiling-the-original-matlab/1074\n...\n\nI believe there are quite a few codes out there where you have to request permission to access, but are written in Fortran. We can list all those.",
            "is_open": true,
            "labels": [],
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2021-05-13 19:45:19+00:00",
                    "text": "How do we evaluate proprietary or closed-source software?\nSay somebody wants to add Turbomole, Crystal or AMS to the list. Do we reach out to the development team and inquire if their software is indeed Fortran and if they want to be listed here? I don't think we can rely on community members that by chance have seen the source code or happen to be associated with those projects to help us review such request, due to potential conflicts of interest."
                },
                {
                    "user": "certik",
                    "date": "2021-05-13 21:21:28+00:00",
                    "text": "@awvwgk I don't know. Say for Crystal, you can see at https://www.crystal.unito.it/platforms.php that they require Compilers | Intel Fortran Compiler XE 14.0.1.106 / Intel C/C++ Compiler XE 14.0.1.106, so that suggests that at least part of the code is in Fortran. For Vasp you can use https://www.vasp.at/wiki/index.php/Installing_VASP.6.X.X which says Fortran (at least F2008 compliant), and for Turbomole you can use the manual https://www.turbomole.org/downloads/doc/Turbomole_Manual_7-5.pdf which mentions Fortran several times.\nSo we can use the public \"knowledge\" of such codes to determine candidates and then we can reach out to the company with a draft entry and see if they can confirm if it is indeed in Fortran and if they want it listed here and to approve or improve the entry (decription, tags, category, ...).\nWhat should be the criteria? \"Substantial parts of the core functionality written in Fortran\"? Given the commercial nature, obviously we cannot independently verify that, but we can simply trust the claims, and if it turns out later that something does not really satisfy the criteria, we can always remove it."
                },
                {
                    "user": "certik",
                    "date": "2021-05-13 21:26:16+00:00",
                    "text": "The longer term idea is that just like we list commercial compiler vendors at https://fortran-lang.org/compilers/ and several of them participate on our Discourse, we should foster similar collaboration with commercial software built using Fortran."
                }
            ]
        },
        {
            "number": 259,
            "user": "scivision",
            "date": "2021-05-13 13:12:45+00:00",
            "title": "Adding packages",
            "text": "Ondrej requested I add Gemini3D. I added / updated a few more packages.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2021-05-13 17:18:06+00:00",
                    "text": "This precedent:\n\ncea-hpc/clustershell@d895458\ncea-hpc/clustershell#321\n\nseems to suggest that the CeCILL-C license might not be OSI approved... Here is another similar issue: pypa/pypi-legacy#679"
                },
                {
                    "user": "certik",
                    "date": "2021-05-13 17:26:19+00:00",
                    "text": "Ok, so according to this:\n\nhttps://spdx.org/licenses/\n\nThe CECILL-C license is not OSI approved.\nHere is what I suggest we do:\n\nRemove MUMPS from this PR, then there is no problem with this PR, let's get it merged\nCreate a new PR for MUMPS to discuss what to do next\n\nI suggest to only allow OSI (https://opensource.org/licenses/alphabetical) approved licenses to be allowed in the main section.\nShould we have another section that allows non OSI approved software written in Fortran? In this section we could list all kinds of commercial codes also, such as VASP. We could put MUMPS there."
                },
                {
                    "user": "scivision",
                    "date": "2021-05-13 18:18:23+00:00",
                    "text": "Yes I think it will be necessary to have a second list for non-OSI software. Given a few factors such as the long lifetime of Fortran, and the nature of the aerospace and other such government and research organizations that make Fortran code. To protect (perhaps misguidedly) their IP and commercial relicensing ability they have what are open source but not necessarily free licenses. Some recently released software has some of the most restrictive licenses I've seen on open source packages. But the software is essential for a range of geospace research."
                },
                {
                    "user": "certik",
                    "date": "2021-05-13 18:48:18+00:00",
                    "text": "Thanks!\nYes, there will be quite a few packages that we could list there. I created #260 to discuss that."
                }
            ]
        },
        {
            "number": 258,
            "user": "zmoon",
            "date": "2021-05-13 00:11:36+00:00",
            "title": "PR lists for newsletter using GitHub API",
            "text": "Maybe you guys already do something like this, but I wanted to figure out how it could be done, so I wrote a little Python script. Thought I would share, in case it would be helpful for the newsletter.\n\nCode and output\nCode:\n\"\"\"\nSummarize PRs for fortran-lang within a certain month.\n\"\"\"\nimport datetime\nfrom calendar import monthrange\n\nfrom github import Github\n\n# Set month\nmonth = 4  # April\n\n# Token (set so that the GitHub API doesn't complain)\ntoken = \"???\"\n\n# Determine time bounds to check\nnow = datetime.datetime.now()\n_, d_b = monthrange(now.year, month)\nt_a = datetime.datetime(now.year, month, 1, 0, 0)\nt_b = datetime.datetime(now.year, month, d_b, 23, 59)\n\ng = Github(token, per_page=100)\n\norg = g.get_organization(\"fortran-lang\")\n\n\ndef get_prs(repo=\"stdlib\"):\n    repo = org.get_repo(repo)\n    \n    merged = []  # PRs merged during the month\n    for pr in repo.get_pulls(\"closed\", sort=\"updated\", direction=\"desc\"):  # most recently merged first\n        if pr.merged:\n            if t_a <= pr.merged_at <= t_b:\n                merged.append(pr)\n            if pr.merged_at < t_a:\n                break\n            \n    wip = []  # WIP PRs (not merged, still open at this time)\n    for pr in repo.get_pulls(\"open\"):\n        if pr.created_at <= t_b:\n            wip.append(pr)\n    \n    return merged, wip\n\n\n# %% Print markdown\n\nmerged, wip = get_prs()  # takes a while...\n\nprint(\"## Fortran Standard Library\\n\")\nprint(\"Here's what's new in `stdlib`:\\n\")\nfor pr in merged:\n    print(f\"* [#{pr.number}]({pr.html_url}): {pr.title}\")\n\nprint(\"\\nWork in progress:\\n\")\nfor pr in wip:\n    print(f\"* [#{pr.number}]({pr.html_url}) (WIP): {pr.title}\")\nOutput:\n## Fortran Standard Library\n\nHere's what's new in `stdlib`:\n\n* [#391](https://github.com/fortran-lang/stdlib/pull/391): Add issue templates\n* [#367](https://github.com/fortran-lang/stdlib/pull/367): Add Intel compiler workflow for OSX\n* [#360](https://github.com/fortran-lang/stdlib/pull/360): Summarize build toolchain workflow and implied rules\n* [#388](https://github.com/fortran-lang/stdlib/pull/388): Changed filenames\n* [#384](https://github.com/fortran-lang/stdlib/pull/384): Implement starts_with and ends_with functions\n* [#336](https://github.com/fortran-lang/stdlib/pull/336): Add functions to convert integer/logical values to character values\n* [#343](https://github.com/fortran-lang/stdlib/pull/343): Implement strip and chomp as supplement to trim\n* [#349](https://github.com/fortran-lang/stdlib/pull/349): Simplify test makefile\n\nWork in progress:\n\n* [#386](https://github.com/fortran-lang/stdlib/pull/386) (WIP): Start the addition of the module stdlib_sorting\n* [#372](https://github.com/fortran-lang/stdlib/pull/372) (WIP): To_Title is corrected\n* [#363](https://github.com/fortran-lang/stdlib/pull/363) (WIP): Added sort to stdlib_string_type.f90 file\n* [#353](https://github.com/fortran-lang/stdlib/pull/353) (WIP): Initial checkin for a module for tolerant comparison of reals\n* [#333](https://github.com/fortran-lang/stdlib/pull/333) (WIP): Provide abstract base class for a string object\n* [#313](https://github.com/fortran-lang/stdlib/pull/313) (WIP): legendre polynomials and gaussian quadrature\n* [#311](https://github.com/fortran-lang/stdlib/pull/311) (WIP): String list new\n* [#286](https://github.com/fortran-lang/stdlib/pull/286) (WIP): Probability Distribution and Statistical Functions -- Beta Distribution Module\n* [#278](https://github.com/fortran-lang/stdlib/pull/278) (WIP): Probability Distribution and Statistical Functions -- Gamma Distribution Module\n* [#276](https://github.com/fortran-lang/stdlib/pull/276) (WIP): Probability Distribution and Statistical Functions -- Exponential Distribution Module\n* [#273](https://github.com/fortran-lang/stdlib/pull/273) (WIP): Probability Distribution and Statistical Functions -- Normal Distribution Module \n* [#272](https://github.com/fortran-lang/stdlib/pull/272) (WIP): Probability Distribution and Statistical Functions -- Uniform Distribution Module\n* [#189](https://github.com/fortran-lang/stdlib/pull/189) (WIP): Initial implementation of COO / CSR sparse format\n* [#157](https://github.com/fortran-lang/stdlib/pull/157) (WIP): Update CMAKE files",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2021-05-13 00:37:38+00:00",
                    "text": "Thanks @zmoon, I've been writing these by hand, but perhaps others (@jvdp1 @awvwgk) had it scripted. Either way, it be very useful to have a script that works and have it part of the repo. Perhaps it could be even be put into CI as a GH Action that runs on a set day of the month and opens a new PR with a draft newsletter?"
                },
                {
                    "user": "certik",
                    "date": "2021-05-13 02:06:07+00:00",
                    "text": "Nice! That's the way to do it."
                },
                {
                    "user": "zmoon",
                    "date": "2021-05-13 14:02:00+00:00",
                    "text": "Either way, it be very useful to have a script that works and have it part of the repo. Perhaps it could be even be put into CI as a GH Action that runs on a set day of the month and opens a new PR with a draft newsletter?\n\nThe latter would certainly be cool. I would be happy to start with the former if there is interest. Where in the repo should such a script go? Also would probably want to have the template as a separate file OR the script could create YAML data files would could be used in the newsletter with Liquid."
                },
                {
                    "user": "zmoon",
                    "date": "2021-05-24 18:23:43+00:00",
                    "text": "Closed by #261"
                }
            ]
        },
        {
            "number": 257,
            "user": "Mr-codehunter",
            "date": "2021-05-11 04:15:46+00:00",
            "title": "update",
            "text": "",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2021-05-11 06:20:38+00:00",
                    "text": "Duplicate of #228?"
                }
            ]
        },
        {
            "number": 256,
            "user": "zmoon",
            "date": "2021-05-09 17:05:27+00:00",
            "title": "Content using `book` layout sometimes not visible",
            "text": "Between the mobile breakpoint and ~ 900 px, the content is not all visible on the screen without scrolling horizontally.\n900: https://screenfly.org/#u=https%3A//fortran-lang.org/learn/quickstart/arrays_strings&w=900&h=900\n600: https://screenfly.org/#u=https%3A//fortran-lang.org/learn/quickstart/arrays_strings&w=600&h=900",
            "is_open": true,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2021-05-10 00:54:35+00:00",
                    "text": "We should move the left navigation panel to the top, then the horizontal area can be used more effectively."
                }
            ]
        },
        {
            "number": 255,
            "user": "zmoon",
            "date": "2021-05-08 22:25:53+00:00",
            "title": "Quickstart edits",
            "text": "I'm doing a bit of an audit of the Quickstart Fortran Tutorial. So far I mostly corrected some English stuff and tried to make the code style consistent within each page (but not across all pages).\nI would like to make style consistent across the whole tutorial though, but that requires deciding on some things that are currently not consistent among all pages:\n\ncode style\n\nindentation (2 or 4 spaces? or 3 or other?)\nwhether to indent module contains rt. module, similarly for type contains\nwhen to put a space after , (do loop, arguments, indexing, etc.)\nvertical aligning of :: and inline comments. Important?\nshould the base indentation level in a given markdown code block always be 0 (perhaps making it easier to copy), or should it be > 0 if the code would be normally indented if put into context (as done in some of the examples)?\nalways capitalize first word in comments?\n\n\ntext style\n\nwhen to use strong vs emphasis vs code\ntitle case vs sentence case for the titles of the pages\n\n\n\nI also have some content questions:\n\nwhat is meant by \"do concurrent is not a basic feature of Fortran\" in Operators and Control Flow?\nwould a page on formatted printing and such fit here?",
            "is_open": false,
            "labels": [
                "learn"
            ],
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2021-05-08 22:44:39+00:00",
                    "text": "I'm personally in the 3 space indentation fraction, but we usually consider using 2 or 4 spaces here. Most important is readability w.r.t. horizontal space IMO, the code block shouldn't get clamped on the right side due to over-indented code. The code blocks on the homepage can have a width of 80 to 90 characters before horizontal scrolling is necessary in our current page layout. This shouldn't be an issue in the quickstart guide but could be an issue for other minibooks which require more complex examples.\nI think either two spaces and indentation of every unit (something, end something), like used now in the quickstart guide:\nmodule m\n  implicit none\n  private\n  public :: a_t\n\n  type :: a_t\n    integer :: val\n  contains\n    procedure :: func\n  end type a_t\n\ncontains\n\n  subroutine func(self)\n    class(a_t), intent(in) :: self\n    if (val > 0) then\n      print *, val\n    end if\n  end function func\n\nend module m\nOr four space indentation only for non-procedure / module units (I think this is @certik's preferred style, I usually find this hard to read):\nmodule m\nimplicit none\nprivate\npublic :: a_t\n\ntype :: a_t\n    integer :: val\ncontains\n    procedure :: func\nend type a_t\n\ncontains\n\nsubroutine func(self)\nclass(a_t), intent(in) :: self\nif (val > 0) then\n    print *, val\nend if\nend function func\n\nend module m"
                },
                {
                    "user": "zmoon",
                    "date": "2021-05-08 23:11:05+00:00",
                    "text": "Most important is readability w.r.t. horizontal space IMO, the code block shouldn't get clamped on the right side due to over-indented code. The code blocks on the homepage can have a width of 80 to 90 characters before horizontal scrolling is necessary in our current page layout. This shouldn't be an issue in the quickstart guide but could be an issue for other minibooks which require more complex examples.\n\nOn mobile in portrait mode, the number of viewable columns can be even less. I am seeing that longer lines get soft-wrapped, which can be a bit confusing since the rendered blocks don't currently have line numbers. Perhaps optional code block line numbers or horizontal scroll bars could be added. I think 90 is a reasonable max and inline comments shouldn't go too far over it."
                },
                {
                    "user": "LKedward",
                    "date": "2021-05-09 09:44:21+00:00",
                    "text": "Many thanks for looking into this Zachary @zmoon . For most of your points, as long as the style is consistent across the tutorials then the particular choice doesn't matter too much. Re indentation, I think we should go with 2 spaces with zero base indentation for reasons already discussed, and my preference would be to indent module procedures for readability as suggested by Sebastian. I would also like to avoid vertical aligning of :: and comments since this adds maintenance burden and pushes the line length in most cases. Once you settle on a set of rules for style, would you mind documenting them as a new section in the Style Guide? This will help others keep future edits consistent.\n\n\nwhat is meant by \"do concurrent is not a basic feature of Fortran\" in Operators and Control Flow?\n\n\nI'm not sure what is meant by this, please remove or reword as you see fit.\n\n\nwould a page on formatted printing and such fit here?\n\n\nYes absolutely, this would make a good addition to the quickstart tutorial."
                },
                {
                    "user": "zmoon",
                    "date": "2021-05-09 17:37:17+00:00",
                    "text": "Thanks @awvwgk, @LKedward, @milancurcic for the comments so far. I will draw up tutorial style guidelines for the Style Guide and then wait for feedback on that before enforcing it across the Quickstart pages.\nI will do a separate PR for page on formatted print."
                },
                {
                    "user": "certik",
                    "date": "2021-05-09 19:40:35+00:00",
                    "text": "Yes for tutorials let's use zero based indentation and 2 spaces, essentially spare as much as we can, so that it's reasonable on mobile also. (For my codes I prefer 4 spaces, but I think the tutorial use case is different.)"
                },
                {
                    "user": "zmoon",
                    "date": "2021-05-10 15:57:07+00:00",
                    "text": "Ok, I started the style guidelines (here). Feel free to comment.\nWhat about spaces after ,? I don't think anyone commented on that yet. Currently there are many cases in the tutorial where no spaces are used after ,, e.g. for do loops, array init, printing, etc. My personal preference is to add a space after , except in indexing (a(:,:), a(1,2), do i = 1, n, b = [1, 2, 3]). I feel that this usually improves readability."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-05-10 16:02:15+00:00",
                    "text": "My personal preference is to add a space after , except in indexing (a(:,:), a(1,2), do i = 1, n, b = [1, 2, 3]). I feel that this usually improves readability.\n\nQuite similar to the @dftbplus style guide here, which we could use as inspiration for examples on white space usage."
                },
                {
                    "user": "ivan-pi",
                    "date": "2021-05-11 17:40:38+00:00",
                    "text": "My preference is to omit whitespace in procedure calls, e.g. call proc(a,b,c) instead of call proc(a, b, c), but I see now this is against both PEP 8 and Google C++ style guides."
                },
                {
                    "user": "LKedward",
                    "date": "2021-05-16 08:42:54+00:00",
                    "text": "Style guide additions look good to me, thanks! I think your suggestion for spacing around commas seems reasonable to me.\nThis PR is still in draft status - do let us know when you're ready for review. Great work!"
                },
                {
                    "user": "zmoon",
                    "date": "2021-05-17 14:21:31+00:00",
                    "text": "@LKedward I still have a few things I want to do first but I will be sure to mark ready after that, thanks."
                },
                {
                    "user": "zmoon",
                    "date": "2021-05-30 03:10:20+00:00",
                    "text": "@milancurcic could you (or someone else) explain what is meant by \"do concurrent is not a basic feature of Fortran\" in Operators and Control Flow?"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-05-30 08:25:35+00:00",
                    "text": "I think the comment on do concurrent refers the difference between expectation and actual implementations in compilers. I'll try to summarize what I picked up from the threads in discourse:\n\nconcurrent doesn't mean parallel, yet most users mean parallel when they are using do concurrent\nfrom a strict viewpoint, there is no guarantee that a do concurrent can actually be run in parallel\n\nthe compiler must ensure that the loop is correctly run sequentially if no parallelization due to data dependencies is possible\npractically this kind of compile time checks are difficult, if not impossible to implement (calling a pure procedure)\n\n\nsome compiler implement the do concurrent as a parallel do loop regardless, even if there is a data dependency which could prevent parallelization\nsome of those short-comings have been fixed in the Fortran 2018 variant of do concurrent which allows to declare the data dependencies explicitly"
                },
                {
                    "user": "zmoon",
                    "date": "2021-05-30 12:09:50+00:00",
                    "text": "I think the comment on do concurrent refers the difference between expectation and actual implementations in compilers.\n\nSo maybe the first sentence in the note, \"do concurrent is not a basic feature of Fortran.\", could be replaced by something like \"Don't expect a loop to be parallelized simply by changing from do to do concurrent\". And I think also could mention compiler flags are needed, yes?\nIs there a resource comparing what the different major compilers can/will do with it?"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-05-30 12:23:41+00:00",
                    "text": "Maybe we can just put a general statement there that concurrency does not imply parallel execution. Not sure what GFortran does, but ifort will parallelize do concurrent if the -qopenmp flag is set, nvfortran will parallelize with -stdpar=multicore and generate device offloading code with -stdpar=gpu."
                },
                {
                    "user": "zmoon",
                    "date": "2021-05-30 13:01:58+00:00",
                    "text": "Cool. Yeah I just feel since it's for the Quickstart we should mention that compiler flags are necessary to get parallelization, and maybe mention a few (maybe should be gfortran (I guess would be -ftree-parallelize-loops=n + an -O flag \u2265 1; not sure if it does anything with -fopenmp) since it is used elsewhere in the minibook) / link to an external resource with more details, to give people what they need to get started with it quickly."
                },
                {
                    "user": "zmoon",
                    "date": "2021-06-03 23:03:01+00:00",
                    "text": "@awvwgk I made some changes to the do concurrent note but feel free to suggest others"
                },
                {
                    "user": "zmoon",
                    "date": "2021-06-10 22:08:40+00:00",
                    "text": "@LKedward do you want to review?"
                },
                {
                    "user": "LKedward",
                    "date": "2021-06-11 13:09:36+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-06-11 13:10:52+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/255/"
                },
                {
                    "user": "zmoon",
                    "date": "2021-06-11 19:29:09+00:00",
                    "text": "@LKedward were you able to look at those small CSS changes and their impact? It adds horizontal scroll bars for the code blocks e.g. for mobile. And I was trying to fiddle with the container width a bit, in regards to #256."
                },
                {
                    "user": "LKedward",
                    "date": "2021-06-17 08:52:01+00:00",
                    "text": "Sorry @zmoon, yes those CSS updates look fine to me and the rendering seems to work better now for narrow screens \ud83d\udc4d"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-06-17 20:24:49+00:00",
                    "text": "With three approvals I will go ahead and merge this patch."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-12-17 14:52:57+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-12-17 14:53:21+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 254,
            "user": "zmoon",
            "date": "2021-05-08 15:33:44+00:00",
            "title": "Fix some links in May 2021 newsletter",
            "text": "I noticed the first of these when reading the newsletter. I did a brief pass looking for others though and found the other two.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2021-05-08 15:35:59+00:00",
                    "text": "I think these were obvious mistakes. Thanks for spotting it and fixing it!"
                }
            ]
        },
        {
            "number": 253,
            "user": "ghost",
            "date": "2021-05-04 11:22:25+00:00",
            "title": "Closes #242; Author: @Beliavsky",
            "text": "Closes #242; Author: @Beliavsky.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2021-05-06 02:19:47+00:00",
                    "text": "Thank you!"
                }
            ]
        },
        {
            "number": 252,
            "user": "ivan-pi",
            "date": "2021-05-02 11:24:28+00:00",
            "title": "Fortran projects on SourceForge",
            "text": "@vmagnin brought my attention to the fact there are numerous Fortran projects still hosted on SourceForge: https://sourceforge.net/directory/language:fortran/?q=fortran\nSome might still be useful and could be added to the package index, or we could try and notify their owners.",
            "is_open": true,
            "labels": [
                "packages"
            ],
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2021-05-03 17:57:48+00:00",
                    "text": "I wonder if we can extract meta data from sourceforge in a similar way like we do with github and gitlab projects right now."
                },
                {
                    "user": "vmagnin",
                    "date": "2021-05-05 08:02:34+00:00",
                    "text": "@vmagnin brought my attention to the fact there are numerous Fortran projects still hosted on SourceForge\n\nIt reminds me of that once popular (early 2000's) repository:\nhttps://savannah.gnu.org/search/?words=fortran&type_of_search=soft\nBut there is only 4 Fortran projects, and two of them seem to have disappeared (no website anymore)."
                }
            ]
        },
        {
            "number": 251,
            "user": "awvwgk",
            "date": "2021-05-01 08:54:52+00:00",
            "title": "Monthly newsletter for May",
            "text": "It is again time for a monthly newsletter. I put together a draft with the repository activities for May.\n\n add stdlib updates\n add fpm updates\n add fortran-lang.org updates\n add monthly call link\n add LLVM / classic flang updates (@AlexisPerry)\n add LFortran updates (@certik)\n update contributor data (@LKedward)\n\nAs usual, please add your name to the authors list if you add, edit, or review content.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2021-05-01 15:02:21+00:00",
                    "text": "Thank you, @awvwgk!"
                },
                {
                    "user": "milancurcic",
                    "date": "2021-05-05 02:05:01+00:00",
                    "text": "@certik Can we have LFortran updates in tomorrow or can this newsletter go without? Thank you!"
                },
                {
                    "user": "certik",
                    "date": "2021-05-05 16:46:43+00:00",
                    "text": "I'll submit the LFortran updates this afternoon."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-05-06 05:50:04+00:00",
                    "text": "Thanks a lot everybody. I'm going ahead and merge this."
                }
            ]
        },
        {
            "number": 250,
            "user": "certik",
            "date": "2021-04-29 16:15:17+00:00",
            "title": "Add gemini3d",
            "text": "We should add\nhttps://github.com/gemini3d/gemini3d\ninto our packages list.",
            "is_open": false,
            "labels": [
                "packages"
            ],
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2021-05-03 17:49:20+00:00",
                    "text": "Sounds good to me, do you want to go ahead and send a patch?"
                },
                {
                    "user": "certik",
                    "date": "2021-05-03 18:00:26+00:00",
                    "text": "@scivision would you have time to send a patch? I am busy right now."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-06-16 20:22:36+00:00",
                    "text": "Done with #259"
                }
            ]
        },
        {
            "number": 249,
            "user": "Beliavsky",
            "date": "2021-04-29 01:29:20+00:00",
            "title": "Video on the uses of Fortran",
            "text": "SIAM (Society for Industrial and Applied Mathematics) has a 1.5-minute video Math in Our Lives mentioning mathematical models of climate change, motors (automotives and aeronautics), and cancer treatment. The code shown at the end is not Fortran (is it C++?). SIAM has a YouTube channel.\nVideos of Fortran programmers discussing their work could be of interest.",
            "is_open": true,
            "labels": [],
            "comments": []
        },
        {
            "number": 248,
            "user": "ivan-pi",
            "date": "2021-04-27 15:07:18+00:00",
            "title": "Typo in fortyxima",
            "text": "fortran-lang.org/_data/package_index.yml\n    \n    \n         Line 153\n      in\n      cd7baa0\n    \n  \n  \n    \n\n        \n          \n           - name: foryxima \n        \n    \n  \n\n\nShould read \"fortyxima\"",
            "is_open": false,
            "labels": [
                "easy",
                "packages"
            ],
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2021-05-03 17:48:35+00:00",
                    "text": "Thanks, do you mind submitting a patch?"
                },
                {
                    "user": "henilp105",
                    "date": "2022-01-17 14:45:53+00:00",
                    "text": "I have made the necessary changes please check and  merge pull request.\nthanks and Regards,\nHenil Panchal"
                }
            ]
        },
        {
            "number": 247,
            "user": "awvwgk",
            "date": "2021-04-27 14:41:32+00:00",
            "title": "Minibook: Interfacing Fortran with Python",
            "text": "Tracking issue for creating a minibook on language intercompatibility of Fortran with Python.\nThis is a non-comprehensive list of method to interface Fortran and Python, feel free to edit this list:\n\nctypes: dynamic loader for C libraries\ncffi: Python wrapper generator for C\nSWIG: Python wrapper generator for C\nnumpy.f2py: wrapper generator for Fortran\ncython: compiler for Python C-extensions\nfwrap: wrapper generator for Fortran\nforpy: bindings to CPython\nf90wrap: wrapper generator for Fortran\nfmodpy: wrapper generator for Fortran\nF2x: template-based wrapper\nForthon: wrapper generator for Fortran\ngfort2py\n\nAspects to cover:\n\nease of use, constraints (bind(C) requirement, derived type support, finalization, ...)\nmemory management, function callbacks\nbuild system integration (compiling of extension modules, distribution, ...)\nstability (frequent tool chain changes), portability (platforms, Python implementations), runtime overhead\nintegration with OpenMP, MPI, CAF (mpi4py, ...)",
            "is_open": true,
            "labels": [
                "learn"
            ],
            "comments": [
                {
                    "user": "Beliavsky",
                    "date": "2021-04-29 01:02:34+00:00",
                    "text": "The Fortran Wiki has a Python page listing many of the packages above and few others.\nFortran should subsume other languages, not merely interoperate with them :).\nBut seriously, one way to speed up Python with Fortran is to translate it to Fortran with Pyccel, an active project."
                },
                {
                    "user": "ivan-pi",
                    "date": "2021-04-29 11:58:00+00:00",
                    "text": "I've added a few from the Python wiki. It would be interesting to learn what the standards committee thinks of this. There seems to be huge interest in using Fortran from Python (I suppose either for reasons of calling legacy code, or speeding up critical parts).\nPersonally, I've only ever used the Cython route. On Linux it worked very well, but on Windows I struggled with binary compatibility issues. It's not fully clear to me how the people who support numpy and SciPy manage to pull it off. I know I've read some interesting blog posts about it, but couldn't find them anymore."
                },
                {
                    "user": "ivan-pi",
                    "date": "2021-05-02 09:55:19+00:00",
                    "text": "Another route is to use pybind11 and follow the path Fortran --> C --> C++ --> Python. It was demonstrated by @hsnyder on Discourse: https://fortran-lang.discourse.group/t/iso-c-binding-pass-an-array-from-c-to-fortran-edit-python-interop-content/514/8"
                },
                {
                    "user": "kjelljorner",
                    "date": "2021-05-24 22:04:42+00:00",
                    "text": "Following from the discussion here, I would be interested in contributing to this. As I noted in the last post there, I think it would be useful to work on this in a real-time collaborative markdown environment (e.g. GitBook) at first and then transfer to fork/pull request route once its more finalised.\nI see different levels of complexity and different use cases which could be covered here. For something on Fortran-lang.org I argue that focusing on established and well-maintained tools is the way to go. There are many packages out there that are either abandoned or have rapidly changing APIs. As I see it, there are two practical approaches to accessing Fortran code from Python:\n\nExplicitly write explicit C interface, build shared library and access via ctypes, cffi, Cython etc.\nUse interface generators which take care of everything under the hood and directly produces importable Python objects. Here the most mature would be f2py which is used in production-grade code like numpy and scipy.\n\nCode generators like Pyccel, Numba, Cython are in my view a bit of a different topic as their main goal is to enable users to write Python-like code that runs faster and not to actually generate Fortran code that could be used for something else. The user would be fairly agnostic whether it is Fortran, C or something else that is generated under the hood."
                },
                {
                    "user": "hsnyder",
                    "date": "2021-05-24 22:23:08+00:00",
                    "text": "I\u2019m actively working on mixed Python-Fortran projects with work right now.. I\u2019ll keep this thread in mind and share anything I produce that I think might be useful. At the moment what I\u2019m doing involves fortran calling python, rather than the opposite way around. It will be a few days before it\u2019s useable outside my immediate application though."
                },
                {
                    "user": "kjelljorner",
                    "date": "2021-05-24 22:25:51+00:00",
                    "text": "I made some prototype page on HackMD. If this way of working looks attractive to people I could create a \"team\" and we could create the minibook there."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-05-25 08:00:13+00:00",
                    "text": "Sure, I would be happy to contribute an example with intermediate complexity involving (polymorphic) derived types."
                },
                {
                    "user": "LKedward",
                    "date": "2021-05-25 08:26:59+00:00",
                    "text": "Thanks @kjelljorner! That looks like a nice way of working on the minibook"
                },
                {
                    "user": "kjelljorner",
                    "date": "2021-05-25 11:03:26+00:00",
                    "text": "I created a space on HackMD to work on this. It can be accessed only if you login, while the individual notes themselves can be shared to anyone. @awvwgk and others, If you create an account and let me know the username I can add you to the team as admins. There's a quite nice comments function that we can use to discuss different parts of the text."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-05-25 11:44:07+00:00",
                    "text": "If you create an account and let me know the username I can add you to the team as admins.\n\nThanks, I'm going under @awvwgk there as well."
                },
                {
                    "user": "kjelljorner",
                    "date": "2021-12-06 15:43:44+00:00",
                    "text": "I'm currently working on a Python interface to a legacy Fortran code, involving sending Python callback functions to Fortran. Also considering the options for multi-platform packaging on PyPi using scikit-build + cmake and cibuildwheel. Maybe would be a good time to try to revive this effort @awvwgk?"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-12-06 15:50:20+00:00",
                    "text": "I currently have shifted my priorities from the Fortran-lang webpage to the fpm documentation (see https://awvwgk.github.io/fpm-docs). Hopefully, the framework explored there will find adoption for other Fortran-lang resources in the future (stdlib? minibooks?), especially since we now actually have first class internationalization support there."
                },
                {
                    "user": "kjelljorner",
                    "date": "2021-12-06 16:00:31+00:00",
                    "text": "I've seen that - it looks really good! I might add some of the work on callbacks and error handling that I have been investigating over the next few weeks and then see if there is anyone on the Discourse that wants to join in."
                }
            ]
        },
        {
            "number": 246,
            "user": "vmagnin",
            "date": "2021-04-23 19:42:51+00:00",
            "title": "Transferring fortran90.org \"Fortran Best Practices\" into a mini-book",
            "text": "Transferring the https://www.fortran90.org/src/best-practices.html page, into a mini-book named Fortran Best Practices.\nSee discussion in issue #79\nA preview of the minibook can be found at https://fortran-lang.org/pr/246/learn/best_practices",
            "is_open": false,
            "labels": [
                "learn"
            ],
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2021-04-23 19:48:32+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-04-23 19:49:36+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/246/"
                },
                {
                    "user": "jvdp1",
                    "date": "2021-04-23 20:07:12+00:00",
                    "text": "Great and valuable content. Thanky you. Is it ready for review?"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-04-23 20:12:44+00:00",
                    "text": "The overall structuring looks quite good, but some chapters like integer division and the parallel programming seem very short. For other chapters I'm not sure if they are really suited in a best practice minibook, like interfacing with Python probably deserves its own minibook at some point.\nI haven't looked over the content in detail yet but already spotted a few issues like broken links, typos, inconsistencies. If I find some time I can give it an editing pass. If this is what we want to do next here."
                },
                {
                    "user": "certik",
                    "date": "2021-04-23 20:20:56+00:00",
                    "text": "This looks great, thank you @vmagnin! Let us know what your plan is. If it is ready for review, we can go over and clean it up. Also let's think about the wording, I already have some ideas for making it more polished and less opinionated, but still pretty clear recommendation how to program in modern Fortran."
                },
                {
                    "user": "vmagnin",
                    "date": "2021-04-24 12:49:56+00:00",
                    "text": "My personal objective was to work on the transfer of the code from fortran90.org to Fortran-lang.org (RST => Markdown mini-book).\nThe community can now review and edit the content in order to integrate it better with the rest of the site.\nFor example, concerning parallel programming, probably it should have its own mini-book, developing OpenMP and MPI, and adding Coarrays.\nBut I guess we should now define what must be done now before accepting the PR and putting the content online, and what could be done later."
                },
                {
                    "user": "vmagnin",
                    "date": "2021-04-25 19:15:28+00:00",
                    "text": "some chapters like integer division and the parallel programming seem very short.\n\nThe \"Integer division\" chapter could be easily enriched into a more general \"Integer numbers\" and talk about:\n\nthe different kinds of integers (and kinds defined in iso_fortran_env),\nand their ranges and the problems when you go out of range: beginners knowing only Python may not be aware of those problems, as in Python the number of bytes is automatically adapted as needed... No limit!\ninquiry functions like huge(),\nthe fact that there is no unsigned integers (perhaps in Fortran 202x?) in Fortran, a big difference for people knowing C,\n..."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-06-02 13:31:17+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-06-02 13:34:11+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/246/"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-06-02 13:49:25+00:00",
                    "text": "I extended and rewrote a couple of chapters. There is still a lot to do and I haven't gotten around to check every chapter. I would also suggest to remove at least three of the currently added chapters in favor of separate minibooks.\n\n Introduction 5cf80cc\n Fortran Style Guide (sync with updated style guide from #255)\n Floating Point Numbers b885654\n Integer Division c358ace\n Modules and Programs a8da64c\n Arrays 976fd62\n Multidimensional Arrays f146342\n Element-wise Operations on Arrays Using Subroutines/Functions\n Allocatable Arrays 3383039\n File Input/Output 158a970\n Interfacing with C (removed in favor of separate minibook) f5978fb\n Interfacing with Python (removed in favor of #247) 7a9fcbc\n Callbacks c1e492a\n Type Casting in Callbacks\n Parallel programming (removed in favor of separate minibook) 1fb3b44"
                },
                {
                    "user": "arjenmarkus",
                    "date": "2021-06-02 13:57:00+00:00",
                    "text": "I merely scanned the booklet, but I noticed a \"gotcha\" regarding\nfloating-point numbers: it looked like a link but it does not lead\nanywhere.\n\nAnd in the chapter on parallel computing I missed a section on coarrays.\n\nBut it is taking shape and that is an important thing :)\n\nOp wo 2 jun. 2021 om 15:49 schreef Sebastian Ehlert <\n***@***.***>:\n\u2026\n I extended and rewrote a couple of chapters. There is still a lot to do\n and I haven't gotten around to check every chapter. I would also suggest to\n remove at least three of the currently added chapters in favor of separate\n minibooks.\n\n    - Introduction\n    - Fortran Style Guide (sync with updated style guide from #255\n    <#255>)\n    - Floating Point Numbers\n    - Integer Division\n    - Modules and Programs\n    - Arrays\n    - Multidimensional Arrays\n    - Element-wise Operations on Arrays Using Subroutines/Functions\n    - Allocatable Arrays\n    - File Input/Output\n    - Interfacing with C (remove in favor of separate minibook?)\n    - Interfacing with Python (remove in favor of #247\n    <#247>?)\n    - Callbacks\n    - Type Casting in Callbacks\n    - Parallel programming (remove in favor of separate minibook?)\n\n \u2014\n You are receiving this because you are subscribed to this thread.\n Reply to this email directly, view it on GitHub\n <#246 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YR4SGOASYO66UY6BYQLTQYZHJANCNFSM43PHAVYA>\n ."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-06-02 14:39:22+00:00",
                    "text": "Thanks for the tip, Arjen. Linking against the internet archive version is probably safer for external links."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-06-02 17:28:07+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-06-02 17:30:45+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/246/"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-06-03 10:06:14+00:00",
                    "text": "I'm done for now with editing, the remaining chapters still need some work, though.\nThe typecasting in callbacks chapter is quite a mess and I didn't really grasp what message should be conveyed there, but the external links against gists and blogs are unacceptable IMO, if we can't explain it in the minibook we shouldn't mention it at all. Also, the elemental procedure chapter is really fuzzy and I didn't really got the overall message there, probably requires rewriting from scratch."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-06-08 21:03:12+00:00",
                    "text": "Updating the #build_preview again."
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-06-08 21:05:51+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/246/"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-06-17 20:34:56+00:00",
                    "text": "How do want to move forward here?\nThere are two chapters remaining that require an editing pass. It doesn't have to be a full rewrite, but at least some cleanup should be done. The rest of the minibook should be fine for review now. I see @LKedward and @milancurcic have volunteered for reviewing already."
                },
                {
                    "user": "certik",
                    "date": "2021-06-17 20:55:31+00:00",
                    "text": "Thanks for going over and polishing it @awvwgk. Overall I think the changes make it \"less opinionated\" which is I think better.\nI have two comments:\n\n\nin https://fortran-lang.org/pr/246/learn/best_practices/multidim_arrays it has been lost that you really want to loop over indices from the left for performance: https://www.fortran90.org/src/best-practices.html#multidimensional-arrays, so this information should be added there. The original has examples of this. We can perhaps add a subsection Performance and put this there.\n\n\nThe IO section seems more confusing: https://fortran-lang.org/pr/246/learn/best_practices/file_io than the original: https://www.fortran90.org/src/best-practices.html#file-input-output. Is the original wrong? I noticed the action keyword argument was added --- is that required by the standard or is it automatic? The three basic and most frequent operations are reading, writing and appending, so we can add such 3 subsections, and then we can add \"other\" and put the rest of the info there.\n\n\nOtherwise the changes are fine with me."
                },
                {
                    "user": "brianconcannon2",
                    "date": "2021-06-27 11:27:35+00:00",
                    "text": "I would like to join your review if you need me.  I have used Fortran since the year 1966 and am especially familiar with old Fortran code.  Do you have any use for that expertise?"
                },
                {
                    "user": "certik",
                    "date": "2021-06-27 20:16:56+00:00",
                    "text": "@brianconcannon2 yes, we definitely do! Thank you. If you find any improvements in the tutorial, please let us know. (Or if you have any other questions.)"
                },
                {
                    "user": "milancurcic",
                    "date": "2021-06-28 22:39:18+00:00",
                    "text": "Thank you @brianconcannon2, I just added you as a reviewer."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-09-04 13:13:18+00:00",
                    "text": "This patch has become stale for quite some time now. Since we already put quite some effort into it I would like to move it forward.\nPicking this project up again requires quite some time and energy and I only see two minor comments to address so far. Generally I think for a huge patch like this it would be useful to provide comments in Files Changed preferably together with a suggestion. Also, we don't need a complete review of the whole minibook, reviewing a chapter at a time should be sufficient to get this project moving again."
                },
                {
                    "user": "certik",
                    "date": "2021-09-04 15:46:23+00:00",
                    "text": "If we are all more or less ok with how it looks, then I suggest we simply merge it and be done with it.\nThen we can start sending many subsequent PRs to fix up little things that we find."
                },
                {
                    "user": "milancurcic",
                    "date": "2021-09-04 16:01:43+00:00",
                    "text": "I agree, it would take a long time to review and edit such a large PR. Case in point, I still haven't reviewed it. Let's just merge it and improve with smaller PRs, as @certik suggested."
                },
                {
                    "user": "vmagnin",
                    "date": "2021-09-04 17:16:49+00:00",
                    "text": "I agree with @certik and @milancurcic ,\nonce online, it will be easier to review it (and by more people once announced on the Discourse), and I think we will gain a new motivation for that task, knowing it's online!"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-09-05 09:34:22+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-09-05 09:34:43+00:00",
                    "text": "The preview build for this PR has now been deleted."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-09-05 09:34:53+00:00",
                    "text": "Alright, than I'll go ahead and merge this PR. Thanks everybody for the effort put into this project."
                }
            ]
        },
        {
            "number": 245,
            "user": "milancurcic",
            "date": "2021-04-20 14:54:53+00:00",
            "title": "Writing articles / blog posts on fortran-lang.org",
            "text": "So far we've only posted newsletters. However, it'd be of great value to establish a process for members of the community to publish Fortran-related blog posts. This would be good case for people who don't have their own blog, or people who want a wider audience than their own blog, or for any article that is especially relevant for readers of fortran-lang.org.\nOndrej and I discussed this via email some time ago, and came up with a first stab of criteria and process. Here they are:\nCriteria:\n\nRelevant: The article should be about Fortran, or at least interesting to Fortran programmers.\nOriginal: The article should not have been published elsewhere, but adaptation from GitHub, Discourse, or Twitter threads is fine.\nHigh quality: The article provides meaningful and useful information, does not advertise a product or service, and is generally aligned with the Fortran-lang community.\n\nPoint 3 is especially subjective and difficult to quantify, so review will be important.\nProcess:\n\nThe Author opens an issue to propose an article, with a tentative title and short description.\nIf there are thumbs ups / go aheads at step 1, open a PR with the article, and request 3 reviewers.\nReviewers review and approve the article. Once published, it's distributed on usual channels (Discourse, mailing list, Twitter)\n\nWe'll discuss this on the call this week.",
            "is_open": true,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2021-04-20 15:13:50+00:00",
                    "text": "I think this would be great. The other thing we discussed is conflict of interest (say somebody submits an article about compiler comparison and I would like them to mention LFortran which I am also the main developer of), which we can resolve by the person (e.g. me) being able to participate / provide feedback, but would not count as a reviewer."
                },
                {
                    "user": "HaoZeke",
                    "date": "2021-04-22 18:03:36+00:00",
                    "text": "As discussed in the monthly meeting, it might be a good idea to have a sort of \"time bound\" which will trigger a re-review / update of each of the tutorials / articles.\nFleshing this out a little, I'd propose having a sort of archive and current set:\n\nArticle is written and reviewed --> current\nNot updated / re-reviewed --> moved to the archive"
                },
                {
                    "user": "arjenmarkus",
                    "date": "2021-04-22 18:07:03+00:00",
                    "text": "Having the blogs on Fortran-lang instead of only providing links will give\nus more control:\n\n   - Like @rohit Goswami ***@***.***> says, an opportunity to re-review\n   them or update them\n   - They will not disappear without notice, as so often happens to links\n\n\n\n\nOp do 22 apr. 2021 om 20:03 schreef Rohit Goswami ***@***.***\n\u2026\n:\n As discussed in the monthly meeting, it might be a good idea to have a\n sort of \"time bound\" which will trigger a re-review / update of each of the\n tutorials / articles.\n\n \u2014\n You are receiving this because you are subscribed to this thread.\n Reply to this email directly, view it on GitHub\n <#245 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YR3TTR6IMULMMMO3QHLTKBQIZANCNFSM43IKYZQQ>\n ."
                },
                {
                    "user": "certik",
                    "date": "2021-04-22 19:19:12+00:00",
                    "text": "Also for long standing up-to-date material, we should simply write it as a tutorial elsewhere at the website."
                }
            ]
        },
        {
            "number": 244,
            "user": "certik",
            "date": "2021-04-19 02:10:46+00:00",
            "title": "Add a first year announcement",
            "text": "Should we do an anniversary post?",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2021-04-19 15:09:16+00:00",
                    "text": "I was thinking a smaller post, thanking everybody and encouraging people to join, and giving pointers how to join, and include a short but up-to-date summary of our goals."
                },
                {
                    "user": "certik",
                    "date": "2021-04-19 19:25:21+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-04-19 19:26:41+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/244/"
                },
                {
                    "user": "certik",
                    "date": "2021-04-19 19:30:39+00:00",
                    "text": "Everything seems to work, I updated things based on the comments, thank you everybody!\nI will merge it tomorrow morning and announce on Twitter. What should be the Twitter text?\nFirst year of the Fortran website\nhttps://fortran-lang.org/newsletter/2021/04/20/First-Year/"
                },
                {
                    "user": "everythingfunctional",
                    "date": "2021-04-19 21:41:24+00:00",
                    "text": "Everything seems to work, I updated things based on the comments, thank you everybody!\nI will merge it tomorrow morning and announce on Twitter. What should be the Twitter text?\nFirst year of the Fortran website\nhttps://fortran-lang.org/newsletter/2021/04/20/First-Year/\n\n\nThe new Fortran website celebrates one year: https://fortran-lang.org/newsletter/2021/04/20/First-Year/\nor\nfortran-lang.org celebrates it's first year: https://fortran-lang.org/newsletter/2021/04/20/First-Year/\nJust my 2 cents."
                },
                {
                    "user": "milancurcic",
                    "date": "2021-04-19 21:48:45+00:00",
                    "text": "I like Brad's second one, but written like this (no apostrophe)\n\nfortran-lang.org celebrates its first year: https://fortran-lang.org/newsletter/2021/04/20/First-Year/"
                },
                {
                    "user": "certik",
                    "date": "2021-04-19 23:39:32+00:00",
                    "text": "Thanks Brad and Milan, yes, I'll post your version."
                },
                {
                    "user": "certik",
                    "date": "2021-04-20 15:14:59+00:00",
                    "text": "I am going ahead and merging."
                },
                {
                    "user": "certik",
                    "date": "2021-04-20 15:23:03+00:00",
                    "text": "Here is the Tweet, I copied & pasted from Milan's post: https://twitter.com/fortranlang/status/1384527637737971718"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-12-17 14:51:50+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-12-17 14:52:18+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 243,
            "user": "Beliavsky",
            "date": "2021-04-19 01:46:59+00:00",
            "title": "grammar in \"Easy to learn and use\" section",
            "text": "The sentence\n\nExpressing most mathematical and arithmetic operations over large arrays is as simple as you'd write them as equations on a whiteboard.\n\nshould be\n\nExpressing most mathematical and arithmetic operations over large arrays is as simple as writing them as equations on a whiteboard.\n\nsince \"expressing\" and \"writing\" match but \"expressing\" and \"you'd write\" do not.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "Beliavsky",
                    "date": "2021-04-19 01:51:18+00:00",
                    "text": "duplicate"
                }
            ]
        },
        {
            "number": 242,
            "user": "Beliavsky",
            "date": "2021-04-19 01:45:20+00:00",
            "title": "grammar in \"Easy to learn and use\" section",
            "text": "The sentence\n\nExpressing most mathematical and arithmetic operations over large arrays is as simple as you'd write them as equations on a whiteboard.\n\nshould be\n\nExpressing most mathematical and arithmetic operations over large arrays is as simple as writing them as equations on a whiteboard.\n\nsince \"expressing\" and \"writing\" match but \"expressing\" and \"you'd write\" do not.",
            "is_open": false,
            "labels": [
                "easy",
                "learn"
            ],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2021-04-19 02:06:58+00:00",
                    "text": "Good catch, will be an easy fix, thanks."
                }
            ]
        },
        {
            "number": 241,
            "user": "Beliavsky",
            "date": "2021-04-15 20:28:49+00:00",
            "title": "In tutorial, using x = foo or x(:,:) = foo?",
            "text": "In the tutorial there are lines of code such as\n  print *,A(i,1:m)\n  mat(:,:) = 0.0\n\nthat could be written\n  print *,A(i,:)\n  mat = 0.0\n\nI would either show the shorter syntax or show both versions and explain that they are equivalent. I would not want new Fortran programmers to get in the habit of using array sections when they can use refer to the whole array. I have read in the past about compilers that do not optimize x(:,:) as well as x. Maybe that has been fixed.",
            "is_open": true,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2021-04-15 20:33:53+00:00",
                    "text": "Even simpler:\n  print *, A(i,:)\n  mat = 0"
                },
                {
                    "user": "arjenmarkus",
                    "date": "2021-04-16 07:11:15+00:00",
                    "text": "There is a difference:\n\nmat(:,:) = another_matrix\n\nwould only work correctly if the other matrix has the same dimensions,\nwhereas:\n\nmat = another_matrix\n\ncould cause an automatic reallocation if mat is an allocatable and\nanother_matrix has a different shape or mat is not allocated.\n\n Such subtleties would complicate the tutorial, of course, so perhaps this\nshould be discussed in a separate section in the tutorial.\n\nOp do 15 apr. 2021 om 22:34 schreef Ond\u0159ej \u010cert\u00edk ***@***.***\n\u2026\n:\n Even simpler:\n\n   print *, A(i,:)\n   mat = 0\n\n \u2014\n You are receiving this because you are subscribed to this thread.\n Reply to this email directly, view it on GitHub\n <#241 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YR766MG4DR43FZLU7G3TI5ET7ANCNFSM43AGKLTQ>\n ."
                },
                {
                    "user": "LKedward",
                    "date": "2021-04-16 08:24:38+00:00",
                    "text": "Yes, as Arjen points out, there is an important difference and I recall a discussion where it was mentioned that the slice notation is preferred for two main reasons:\n\nIt is more explicit/expressive in showing the array operation and ensuring that array dimensions match\nIt avoids a possible automatic reallocation (which can really catch you out!)\n\nIt is probably a good idea to describe both notations and describe the differences. I would be interested to hear more about the possible optimisation problems with slice notation if you're able to recall a particular example."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-04-16 08:30:54+00:00",
                    "text": "There is a somewhat relevant post of @sblionel on this topic here from 2008: https://stevelionel.com/drfortran/2008/03/31/doctor-it-hurts-when-i-do-this/"
                },
                {
                    "user": "Beliavsky",
                    "date": "2021-04-16 10:49:00+00:00",
                    "text": "Thanks @awvwgk, it was the vague recollection of such posts that prompted my issue. Below is an excerpt. The fortran-lang tutorial should not have code that would make a compiler writer \"cringe\". People have mentioned the benefit of x(:)= foo to prevent unintended allocation upon assignment, but in the tutorial examples, the arrays were not ALLOCATABLE.\n'A(:) = func(B(:), C(:))\nwith the (:) alerting the reader that the variable is an array (sort of like the Dave Barry joke that an apostrophe serves to warn you that the letter \u201cs\u201d is coming up in grocery store signs.) In Fortran syntax, (:) indicates an array section that starts at the first element and ends at the last element \u2013 the whole array, in other words.\nWhenever I see this usage, I cringe, because I know that the compiler has to work extra hard to recognize that the programmer really meant \u201cthe whole array\u201d and not a piece of it. In the past, unnecessary use of (:) would often prevent optimizations. Nowadays this is less often the case, thanks to hard work by the compiler developers, but sometimes it still happens.'"
                },
                {
                    "user": "certik",
                    "date": "2021-04-16 13:53:04+00:00",
                    "text": "I personally think the extra syntax (:) should not be used, because it's extra noise to read and worry about, exactly as @sblionel wrote. Unfortunately, I also personally think the automatic re-allocation of the LHS was not a good decision in Fortran, because as @arjenmarkus correctly said, it will re-allocate the LHS unless you prevent it by using (:). For performance code, I don't want any kinds of shape checking code introduced by the compiler, citing Steve:\n\nThe downside, though, is that the checking required to support this is a lot of extra code, and applications where it is known that the array is already allocated to the correct shape don\u2019t need this check which would just slow them down.\n\nI agree.\nPerhaps equally bad, it will re-allocate the array if I made a mistake -- rather I want a nice compiler error message telling me (in Debug mode) that the shape does not match, or that my LHS was not allocated, but in Release mode I want things to run very fast an no checks.\nEven worse, imagine code that has no allocatable arrays, as in this tutorial. I strongly believe the syntax v(:) = 9 should not be used, just use v = 9. It looks much better and natural.\nExcept when then someone changes the array to be allocatable (I do that very often when developing), then the statement A = func(B) becomes problematic, because it might slow things down (due to the compiler now having to check shapes at runtime), and it will hide a bug, instead of giving an error right away that shapes do not match, it will silently re-allocate LHS and continue...\nSo for my codes, I never depend on automatic reallocation of LHS, and as such I could simply use the -fno-realloc-lhs option and check it at the CI, that way if somebody sends a PR that relies on automatic reallocation, the CI will not pass; So as long as the CI passes, the code itself will run correctly no matter if you use -fno-realloc-lhs or not, so that is nice. And so A(:) = func(B) is exactly the same as A = func(B), which is also nice and so the shorter version without (:) should be used.\nHowever, unfortunately because there is code now written by many people out there that does depend on automatic reallocation of LHS, that code will not work in my project, and would need fixing.\nI don't have a good solution..."
                },
                {
                    "user": "sblionel",
                    "date": "2021-04-16 14:06:45+00:00",
                    "text": "We (Intel compiler team) were seeing customers increasingly dependent on the reallocation feature. It definitely has its uses, especially in cases where you want to append to the end of an array using syntax such as A = [A,newval]. I don't think the feature was a mistake, and like all new features, compilers can learn how to optimize the check. (I coded the routine that the Intel compiler is currently using for this check, and it is reasonably quick, exiting early if appropriate.)\nAs noted, you can disable this feature by using A(:) - if you do, please add comments explaining this!"
                }
            ]
        },
        {
            "number": 240,
            "user": "Beliavsky",
            "date": "2021-04-08 12:50:58+00:00",
            "title": "List compilers by platform",
            "text": "It would be nice to have a chart with a list of platforms (operating system and hardware) and which compilers run in them. Some common platforms are\n(1) Windows x86\n(2) Windows Subsystem for Linux\n(3) Linux x86\n(4) Apple on Intel\n(5) Apple Silicon\nand others could list more.\nFor (1) I know from personal experience that gfortran, Intel, and g95, Lahey/Fujitsu Fortran 95, and Salford work, and there are other compilers. For (2) I have used gfortran and flang/clang 7.0.1. (This flang is not mature. I've read that there is a distinct \"classic flang\".)\nIn another issue the question of providing objective information about compilers was discussed. At least the existence of compilers for platforms can be summarized objectively.",
            "is_open": true,
            "labels": [
                "compiler"
            ],
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2021-04-08 13:05:23+00:00",
                    "text": "Better distinguish by platform (Windows, MacOS, Linux, FreeBSD, AIX, ...) and architecture (x86_64, i868, aarch64, ppc64le, ...). For the commercial compilers with free community versions this information is already present."
                }
            ]
        },
        {
            "number": 239,
            "user": "vmagnin",
            "date": "2021-04-06 17:31:50+00:00",
            "title": "Duplicates of M_CLI and M_CLI2 in the fpm registry page",
            "text": "In the fpm registry page (https://fortran-lang.org/packages/fpm), I have found that there is duplicates of :\n\nM_CLI\nM_CLI2\n\nIt seems to be due to the fact that in the links there is one M_CLI and one M_cli (lowercase). Same for M_CLI2 and  M_cli2.\nSuggestion: with an alphabetical sort those problems could be more visible.",
            "is_open": true,
            "labels": [
                "packages"
            ],
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2021-04-06 18:19:00+00:00",
                    "text": "Duplicate of fortran-lang/fpm-registry#31"
                }
            ]
        },
        {
            "number": 238,
            "user": "Beliavsky",
            "date": "2021-04-06 12:55:10+00:00",
            "title": "Make the compiler descriptions more objective and less promotional",
            "text": "Some of the compiler descriptions read like advertising copy, because they were taken from advertising. For example,\n\"Absoft\nOur compilers build faster code more efficiently than ever before.\"\nThe \"our\" should be reworded since the fortran-lang site is not owned by a vendor.\nThe Lahey description has two exclamation points that don't below in a vendor-neutral site.\n\"The Cray Compiling Environment (CCE) is the cornerstone innovation of Cray\u2019s adaptive computing paradigm.\" This is MBA-speak that conveys nothing to me.\nIn general, vendors will try to summarize the special features of their compilers in a few sentences, and such descriptions can be informative, but I think fortran-lang should tone them down a little.",
            "is_open": true,
            "labels": [
                "compiler"
            ],
            "comments": [
                {
                    "user": "vmagnin",
                    "date": "2021-04-06 17:33:58+00:00",
                    "text": "I agree with @Beliavsky and the commercial style was one of the reason it was difficult to translate that page in French."
                },
                {
                    "user": "certik",
                    "date": "2021-04-06 18:00:17+00:00",
                    "text": "In order to make this section fair, I still like this idea the most: give each vendor a space of 100 words or less to put anything they want for their compilers. That way they can advertise as they wish. We can perhaps put a paragraph at the very top explaining this.\nThe alternative is to start editing the paragraph for each compiler, but I don't have access to all of them, and I don't want to be in a position either to be the \"editor\" for how compilers are described and advertised.\nBy offloading this responsibility to the compiler vendors themselves, and just providing a venue and \"rules\" (100 words or less), and making those rules clear (currently it is not clear) seems better and ultimately fair I think.\nUpdate: to explain why I don't want to be the \"editor\": first, I am in a conflict of interest, as I am the primary developer of the LFortran compiler. Second, even if I wasn't, I don't feel we should be \"judging\" or \"comparing\" commercial compilers (or even open source compilers). Rather, let the users decide. The only judging we made was to roughly order the compilers based on our perceived usage in the community of them. If there was some more objective measure, we could use that instead. But other than that, my vision was to provide the platform, so that at least all the compilers are now sitting at the same table. But other than that, let each compiler speak for themselves. To more objectively compare compilers, we created this benchmark repository: https://github.com/fortran-lang/benchmarks/, we haven't had time to actually populate it, but we will. Benchmarking objectively is very hard, see the discussion here: fortran-lang/benchmarks#2 and at the other issues there. I think there is a way to do it, to simply show the numbers and let users decide. Another idea is an automated results of \"Fortran features support\", where we run each compiler with a test suite and report how well it is supported. But even if we had all that infrastructure for more objective comparisons (we currently don't), I still don't want to be writing the final \"summary\", but rather I just want users to try the compilers out (or not) and decide themselves.\nCC @milancurcic."
                }
            ]
        },
        {
            "number": 237,
            "user": "certik",
            "date": "2021-04-01 11:42:17+00:00",
            "title": "Make the link clickable",
            "text": "It looks differently online than in the GitHub markdown, so the link worked when previewing on github, but does not work online... This fixes it.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2021-04-01 14:34:46+00:00",
                    "text": "Thanks!"
                }
            ]
        },
        {
            "number": 236,
            "user": "alinelena",
            "date": "2021-03-30 10:16:51+00:00",
            "title": "add dl_poly_4 to packages",
            "text": "",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "alinelena",
                    "date": "2021-03-30 18:57:18+00:00",
                    "text": "thanks!"
                }
            ]
        },
        {
            "number": 235,
            "user": "awvwgk",
            "date": "2021-03-27 22:14:29+00:00",
            "title": "Monthly newletter for April 2021",
            "text": "I put together a draft for the April monthly newsletter and populated it from the repository activities. There has been a lot of activity at stdlib and fpm \ud83c\udf89.\n\n add stdlib updates\n add fpm updates\n add fortran-lang.org updates\n add monthly call link\n add new repository fortran-forum-article-template\n add LLVM / classic flang updates (@AlexisPerry)\n add LFortran updates (@certik)\n update contributor data (@LKedward)\n\nAs usual, please add your name to the authors list if you add, edit, or review content.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2021-03-29 21:23:26+00:00",
                    "text": "Thanks a lot, @AlexisPerry."
                },
                {
                    "user": "certik",
                    "date": "2021-03-31 14:41:47+00:00",
                    "text": "I'll write LFortran updates today."
                }
            ]
        },
        {
            "number": 234,
            "user": "Beliavsky",
            "date": "2021-03-24 18:38:20+00:00",
            "title": "Have an image from a Fortran simulation",
            "text": "Looking at the images at the bottom of a course \"High Performance Computing in the Physical Sciences\" page https://home.chpc.utah.edu/~thorne/computing.html suggests to me that such images and movies could be a nice addition to the main fortran-lang page. Maybe Milan Curcic can provide an image or movie from a weather simulation?",
            "is_open": true,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2021-03-24 20:29:19+00:00",
                    "text": "Ideally the images would even be reproducible with open source codes with the scripts that can generate them. That would not be feasible if non-open source code is used, which is the majority of non-trivial applications in Fortran."
                },
                {
                    "user": "Beliavsky",
                    "date": "2021-10-11 11:42:32+00:00",
                    "text": "Message from @vmagnin at Fortran Discourse on this topic: https://fortran-lang.discourse.group/t/reviewing-all-fortran-wikipedia-pages-improving-fortran-imagery/785/17?u=beliavsky"
                },
                {
                    "user": "vmagnin",
                    "date": "2021-10-11 12:01:12+00:00",
                    "text": "The two images (black hole & ocean) cited in my Discourse post are under CC license and the code sources of those models are open."
                },
                {
                    "user": "Beliavsky",
                    "date": "2021-11-10 13:33:16+00:00",
                    "text": "tweet with animation by J\u00e9r\u00f4me Boudet\n\"Lattice-Boltzmann method is a rewarding flow simulation approach. You can create a solver in a few hundreds of #Fortran lines, play with the numerical methods, and do some nice looking animations. Here, the 2D flow past a square cylinder at Re=1000, with pitchwise periodicity.\""
                }
            ]
        },
        {
            "number": 233,
            "user": "alinelena",
            "date": "2021-03-24 15:55:16+00:00",
            "title": "Adding dl_poly_4 to the list of packages",
            "text": "adding dl_poly_4 to the list of packages.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "alinelena",
                    "date": "2021-03-24 22:32:40+00:00",
                    "text": "@certik I can fix almost all the things you suggest... but the star stuff sorry I do not like to entertain that, it is really teenage stuff."
                },
                {
                    "user": "certik",
                    "date": "2021-03-25 00:02:48+00:00",
                    "text": "@alinelena if you fix what I suggested, we will be happy to include your package. As I suggested, you do not have to worry about the number of stars. If you have a better idea how we could formulate the criteria, please let us know, we are open to suggestions. (We chose stars because it is one metric available at github/gitlab, as imperfect as it is.)\nP.S. Here is the MR to fix your README: https://gitlab.com/ccp5/dl-poly/-/merge_requests/4."
                },
                {
                    "user": "certik",
                    "date": "2021-03-25 21:03:32+00:00",
                    "text": "The README now gives an overview about the project:\nhttps://gitlab.com/ccp5/dl-poly/-/blob/88a0c62d1cda8f50703c3d088396aba9e2c0a1e2/README.md\nMoreover, it lists publications in CPC which describe details about the original code as well as recent publications."
                },
                {
                    "user": "certik",
                    "date": "2021-03-25 21:04:24+00:00",
                    "text": "@alinelena would you mind please reopening this PR so that we can merge it?"
                },
                {
                    "user": "certik",
                    "date": "2021-03-30 11:52:41+00:00",
                    "text": "New PR was sent at #236."
                }
            ]
        },
        {
            "number": 232,
            "user": "ivan-pi",
            "date": "2021-03-18 15:19:58+00:00",
            "title": "More Fortran packages",
            "text": "I've found a few more Fortran packages I will try to add one by one:\n\n Fortran processing library: http://www.biosfera.dea.ufv.br/fpl/index.html\n 2DECOMP & FFT: http://www.2decomp.org/decomp_api.html\n SLICOT: http://slicot.org/\n FORTRAN Routines for Spectral methods: https://cdm.unimore.it/home/matematica/funaro.daniele/rout.htm\n NUFFT: https://cims.nyu.edu/cmcl/nufft/nufft.html.bak\n FFTLog: https://jila.colorado.edu/~ajsh/FFTLog/\n P3DFFT: https://www.p3dfft.net/\n Parallel FFT Package: https://cs.sandia.gov/~sjplimp/docs/fft/README.html\n fftMPI: https://fftmpi.sandia.gov/\n CSLib: https://github.com/lammps/cslib\n Quadratures for elastostatic Green's functions on flat triangles: https://cims.nyu.edu/cmcl/quadratures/quadratures.html\n Quadratures for smooth functions in two and three dimensions: https://cims.nyu.edu/cmcl/quadratures/quadratures.html\n FMMLIB2D: https://cims.nyu.edu/cmcl/fmm2dlib/fmm2dlib.html\n OpenFFT: http://www.openmx-square.org/openfft/\n libcerf: https://jugit.fz-juelich.de/mlz/libcerf\n PROPACK: http://sun.stanford.edu/~rmunk/PROPACK/\n FATODE: https://github.com/ComputationalScienceLaboratory/FATODE\n HEALPix: https://healpix.jpl.nasa.gov/\n auto-07p: https://github.com/auto-07p/auto-07p\n AxiSEM: http://seis.earth.ox.ac.uk/axisem/\n SeisSol: https://github.com/SeisSol/SeisSol\n APES: https://apes.osdn.io/ (has 5 independent? sub-components)\n codelib: http://elib.zib.de/pub/elib/codelib/en/\n NewtonLib: http://elib.zib.de/pub/elib/codelib/NewtonLib/index.html\n Expokit: https://www.maths.uq.edu.au/expokit/\n pencil-code: https://github.com/pencil-code/pencil-code\n SALMON2: https://github.com/SALMON-TDDFT/SALMON2",
            "is_open": true,
            "labels": [
                "packages"
            ],
            "comments": [
                {
                    "user": "certik",
                    "date": "2021-03-18 16:07:23+00:00",
                    "text": "Very good, great job finding them."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-03-18 16:21:39+00:00",
                    "text": "Should those go in the package index at fortran-lang.org or be ported to fpm packages and registered here (requires upstream adoption)?"
                },
                {
                    "user": "ivan-pi",
                    "date": "2021-03-18 16:57:31+00:00",
                    "text": "My current plan was only to put them in the package index. \ud83d\udc4d"
                },
                {
                    "user": "vmagnin",
                    "date": "2021-04-22 12:33:25+00:00",
                    "text": "Maybe some yet unlisted packages could be found in the Curlie directory (the historical DMOZ reborn), especially here:\n\nhttps://www.curlie.org/en/Computers/Programming/Languages/Fortran/Libraries\nhttps://www.curlie.org/en/Computers/Programming/Languages/Fortran/Source_Code"
                },
                {
                    "user": "ivan-pi",
                    "date": "2021-04-22 20:09:34+00:00",
                    "text": "Indeed, there are a few interesting ones.\nOn my PC I found the manual for AxiSEM - a parallel spectal-element solver for 3D wave propagation (http://seis.earth.ox.ac.uk/axisem/)."
                },
                {
                    "user": "ivan-pi",
                    "date": "2021-04-25 20:19:44+00:00",
                    "text": "This other seismological code (https://github.com/SeisSol/SeisSol) also contains a fair share of Fortran code."
                },
                {
                    "user": "ivan-pi",
                    "date": "2021-05-02 11:20:09+00:00",
                    "text": "On top of the already long list, I've found pencil-code: https://github.com/pencil-code/pencil-code"
                },
                {
                    "user": "certik",
                    "date": "2021-05-03 15:49:25+00:00",
                    "text": "There is also Elk (I communicated with the author long time ago):\n\n https://elk.sourceforge.io/"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-05-03 17:56:20+00:00",
                    "text": "I recommend to send a patch rather than posting the links here, because this makes it easier to discuss the proposed project and allows to actually add them to the package index. Also, it helps to avoid piling up collections of links like the \u201cList of popular Fortran projects,\u201d which are difficult to work on because the relevant context gets lost over time."
                },
                {
                    "user": "ivan-pi",
                    "date": "2022-04-14 23:58:20+00:00",
                    "text": "@krenzland, @ravil-mobile - Given that SeisSol is on track to remove Fortran, I am guessing you don't want SeisSol to be part of the Fortran Package Index (https://fortran-lang.org/packages/)?\nBtw, is there any relationship between SeisSol and AxiSEM?"
                },
                {
                    "user": "krenzland",
                    "date": "2022-04-25 08:38:11+00:00",
                    "text": "Yes, SeisSol isn't really a Fortran code. Nearly everything is written in C++/generated code, some \"physics\" is still in Fortran. Resulting from this, we have a lot of glue code (which inflates the line count a lot). We probably have around 2k lines of Fortran code that's really relevant.\nAnd no, there isn't any relationship between SeisSol and AxiSEM."
                },
                {
                    "user": "gklimowicz",
                    "date": "2022-04-27 17:02:41+00:00",
                    "text": "Out of curiosity, is anyone creating a Git project with as many of these projects as possible as submodules? I will find myself in need of as large a corpus of Fortran codes as I can lay my hands on, and these are all silos of grain for my mill."
                }
            ]
        },
        {
            "number": 231,
            "user": "SiegristJ",
            "date": "2021-03-15 03:59:38+00:00",
            "title": "Showcase section on the website for published papers using fortran code/packages",
            "text": "Because of how central publishing is to the progress in science and academia, the website should include a section where it highlights new publications that build upon the good work of this fortran community. Whether for papers that specifically cite usage of packages from the package repository or papers that build upon fortran code, showcasing such work would be good both for authors and good for the fortran community.",
            "is_open": true,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2021-03-15 04:49:12+00:00",
                    "text": "@SiegristJ thank you for opening up an issue for this. I personally think this is a great idea. We just have to setup criteria how to get a publication listed. One candidate could be #226.\nCC @LKedward, @milancurcic, @awvwgk."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-03-15 08:39:10+00:00",
                    "text": "For electronic structure theory this would probably lead to having the papers for Vasp, Turbomole, CP2K, ADF, DFTB+, Molpro, Molcas, BigDFT, ABINIT, Dalton, NWChem, QE, Siesta, ... listed on the homepage and I'm certainly overlooking more than half of the relevant projects here for sure (I tried getting all open source ones in the package index already, but surely there are more)."
                },
                {
                    "user": "certik",
                    "date": "2021-03-15 13:46:56+00:00",
                    "text": "@awvwgk indeed, I don't know if it would show what we want to show and it would be a lot of papers, as Vasp alone is cited a lot."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-03-15 13:51:56+00:00",
                    "text": "Also, keep in mind that if we start to select a few software papers, we must have really good reasons to do so and prepare for the critique of the other active developer communities we might be \u201cignoring\u201d with such a choice. Not a decision we can take lightly."
                },
                {
                    "user": "certik",
                    "date": "2021-03-15 13:57:46+00:00",
                    "text": "We should also include all papers that use Python, because SciPy contains Fortran... I believe Julia and R also depend on Fortran, so we should include those papers also that use Julia or R.\nAlso, because Lapack's reference implementation is in Fortran, we should probably include all computational papers.\nIt's not clear to me where to draw the line."
                },
                {
                    "user": "smeskos",
                    "date": "2021-03-15 14:26:57+00:00",
                    "text": "This is a great idea and feasible as long as we stick to papers that have verifiable citations to Fortran public and open-source codes and not those written primarily in other languages. Otherwise, and considering both @awvwgk's and @certik's valid concerns we should include, probably, half the computational papers ever published...  A good starting point would be to include only papers citing libraries from the fpm registry, which would also serve another purpose, to gradually push developers to make their libraries fpm-ready."
                },
                {
                    "user": "SiegristJ",
                    "date": "2021-03-17 07:22:54+00:00",
                    "text": "One way that could make it easier to sort papers is if you put up on the website how to properly cite a fortran package in a publication. Then only include those papers that follow the guidelines. Would that not solve the problem of otherwise having to pick and choose who to include or to boil the ocean? @awvwgk @certik"
                },
                {
                    "user": "vmagnin",
                    "date": "2021-03-28 19:12:27+00:00",
                    "text": "One way that could make it easier to sort papers is if you put up on the website how to properly cite a fortran package in a publication.\n\nNote that packages on GitHub can obtain a DOI using a tool like Zenodo:\nhttps://zenodo.org/record/2649855\nIf the software was not published in a paper, such a DOI it can be useful to cite the package."
                }
            ]
        },
        {
            "number": 230,
            "user": "certik",
            "date": "2021-03-14 14:46:04+00:00",
            "title": "Fix the pi number in tutorial",
            "text": "Reported by the zoomablemind Hacker News user:\nhttps://news.ycombinator.com/item?id=26452715",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2021-03-14 14:53:12+00:00",
                    "text": "Thanks both. I've merged #229 now."
                }
            ]
        },
        {
            "number": 229,
            "user": "awvwgk",
            "date": "2021-03-14 10:18:16+00:00",
            "title": "Correct value of pi in quickstart mini-book",
            "text": "Pointed out at https://news.ycombinator.com/item?id=26452715",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 228,
            "user": "Mr-codehunter",
            "date": "2021-03-14 09:15:26+00:00",
            "title": "Update news.xml",
            "text": "",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2021-03-14 10:40:08+00:00",
                    "text": "Thanks for the patch @Mr-codehunter, however for the reasons specified here I do not believe this change is necessary or even correct. Please let me know your reasons if you disagree, and I'll reopen if needed."
                }
            ]
        },
        {
            "number": 227,
            "user": "Beliavsky",
            "date": "2021-03-11 19:49:28+00:00",
            "title": "Add MSYS2 as a way of installing gfortran on Windows",
            "text": "At https://fortran-lang.org/learn/os_setup/install_gfortran , I think it's fine to keep equation.com as the 1st method to install gfortran on Windows, since it is simple and fast to install. I suggest adding MSYS2 as method #4. I just tried it on Windows 10, and it works fine after following the instructions. Once installed, gfortran --version says GNU Fortran (Rev9, Built by MSYS2 project) 10.2.0 . It takes longer to install than the equation.com compiler binary but comes with more stuff, such as python. A list of MSYS2 packages is here.",
            "is_open": true,
            "labels": [
                "compiler"
            ],
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2021-03-11 19:59:37+00:00",
                    "text": "I'll certainly let my students try to use MSY2 in my Fortran programming course next month, so we'll get some data points on how well this setup strategy works. I have already written a short introduction here which I could contribute."
                },
                {
                    "user": "vmagnin",
                    "date": "2021-03-28 19:18:28+00:00",
                    "text": "I am using gfortran on MSYS2 for many years, to test gtk-fortran under Windows. It includes CMake, pkg-config, and all the classical tools you need in a UNIX-like environment.\nIt is slower than on a native Linux environment because many things must be \"translated\" to make programs work under Windows, but it is very usable."
                }
            ]
        },
        {
            "number": 226,
            "user": "thchang",
            "date": "2021-03-11 01:06:54+00:00",
            "title": "Added DelaunaySparse to package list",
            "text": "DelaunaySparse is an open source Fortran 2003 package, recently published in ACM TOMS (Algorithm 1012) for performing piecewise linear interpolation via a sparse subset of the Delaunay mesh in high-dimensional spaces.  The publication process was subject to peer-review, not only of the paper, but also the source code, which is also published in the collected algorithms of ACM TOMS.  The code itself is open source (MIT license).  This code has been in development for almost 4 years and tested on thousands of real-world and synthetic data sets.  It is in a stable condition and in usage at several national labs and universities.  Features robust error-handling and C + Python interfaces.  Unfortunately, we do not have \"5 stars\" yet on Github.  Please consider including anyway.",
            "is_open": false,
            "labels": [
                "packages"
            ],
            "comments": [
                {
                    "user": "certik",
                    "date": "2021-03-11 03:37:36+00:00",
                    "text": "I just gave you a star. @milancurcic, @everythingfunctional, @LKedward can one of you star it also? ;)\nhttps://github.com/vtopt/DelaunaySparse\n@thchang thanks for the submission! We would like to see more codes like these, peer reviewed with a publication. Fortran is a great language precisely for applications like this one."
                },
                {
                    "user": "thchang",
                    "date": "2021-03-11 16:48:19+00:00",
                    "text": "Thanks all for the stars --- happy to see you guys addressing some of the issues in Fortran (lack of package manager, std libs, and performance portability), which will help keep old Fortran alive and relevant!  Also congrats on approval for GSoC!  I have other Fortran software under review for publication, so you'll probably hear from me again in the future -- will also recommend this to all other Fortran programmers I know"
                },
                {
                    "user": "thchang",
                    "date": "2021-03-11 16:50:39+00:00",
                    "text": "sorry for close and reopen, I'm still learning how to github web interface..."
                },
                {
                    "user": "certik",
                    "date": "2021-03-11 17:14:43+00:00",
                    "text": "@thchang thank you for submitting and for recommending us to your colleagues. Your code is now available at:\nhttps://fortran-lang.org/packages/numerical\nIf there is any issue that you do not see addressed by some effort at Fortran-lang, please let us know! Looking forward to seeing you around."
                }
            ]
        },
        {
            "number": 225,
            "user": "milancurcic",
            "date": "2021-03-10 02:50:47+00:00",
            "title": "Update Authors in GSoC post",
            "text": "I forgot to include @marshallward. I apologize.",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 224,
            "user": "awvwgk",
            "date": "2021-03-09 20:37:08+00:00",
            "title": "Build preview committer",
            "text": "I wonder how the #build_preview action is picking up the commit author for the preview build? It seems to just take the identity from the latest committer to the default branch for creating the commit instead of the actor triggering the  #build_preview in the pull request or the pull request author.",
            "is_open": true,
            "labels": [],
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2021-04-16 10:42:31+00:00",
                    "text": "It looks like this is the default behaviour for the EndBug/add-and-commit action that we're currently using. We could probably follow these instructions to change the committer to the github actions bot or just not use this action for pushing the preview."
                }
            ]
        },
        {
            "number": 223,
            "user": "milancurcic",
            "date": "2021-03-09 20:23:26+00:00",
            "title": "GSoC announcement draft",
            "text": "",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2021-03-09 20:26:05+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-03-09 20:27:08+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/223/"
                },
                {
                    "user": "certik",
                    "date": "2021-03-09 20:46:14+00:00",
                    "text": "Looks great, thanks!"
                },
                {
                    "user": "milancurcic",
                    "date": "2021-03-09 20:47:58+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-03-09 20:48:22+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 222,
            "user": "awvwgk",
            "date": "2021-03-05 20:39:33+00:00",
            "title": "Avoid unclear formulation in contributing guide",
            "text": "Closes #209",
            "is_open": false,
            "labels": [
                "documentation"
            ],
            "comments": []
        },
        {
            "number": 221,
            "user": "awvwgk",
            "date": "2021-03-05 20:03:40+00:00",
            "title": "Add information about free compiler versions",
            "text": "Closes #213\nCloses #214",
            "is_open": false,
            "labels": [
                "compiler"
            ],
            "comments": []
        },
        {
            "number": 220,
            "user": "awvwgk",
            "date": "2021-03-05 19:47:44+00:00",
            "title": "Include learn resources to online courses",
            "text": "Just the awesome list collected by @ivan-pi in #200 (comment) for now.\nCloses #200",
            "is_open": false,
            "labels": [
                "learn"
            ],
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2021-03-06 10:09:12+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-03-06 10:10:04+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/220/"
                },
                {
                    "user": "milancurcic",
                    "date": "2021-04-07 16:37:16+00:00",
                    "text": "Thank you, this has been open for a while without complaints, so I will merge."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-04-07 16:49:13+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-04-07 16:49:35+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 219,
            "user": "awvwgk",
            "date": "2021-03-05 19:09:45+00:00",
            "title": "Add links to other related Fortran communities",
            "text": "r/fortran\ncomp.lang.fortran\nStack Overflow\n\nCloses #204",
            "is_open": false,
            "labels": [
                "wontfix",
                "learn"
            ],
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2021-03-06 10:06:57+00:00",
                    "text": "Thanks @awvwgk and @Beliavsky for suggesting \u2014 I think adding stack overflow is a good idea since it is a natural place for people to go for help and the Fortran tag could do with more people answering questions.\nFor the reasons I mention here I am hesitant to add links to the CLF and Reddit forums but I am not completely opposed as long as it is clear that the Discourse is the recommended community for seeking help.\nEdited: following my later comment."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-03-13 12:16:49+00:00",
                    "text": "I don't really understand this concern. While @fortran-lang has the more active community, we don't have a reason to discourage participating in other communities which are not our own, do we? (putting the argument purposely to an extreme)"
                },
                {
                    "user": "LKedward",
                    "date": "2021-03-13 13:11:26+00:00",
                    "text": "... we don't have a reason to discourage participating in other communities which are not our own, do we?\n\nTo expand on my Discourse comment, my main concern regards beginners and those who are new to Fortran. Consider such a beginner who, looking for help, goes to CLF with their query but is met with curt unaccommodating responses, as is common there, and thus leaves with a negative impression of the Fortran community and motivation to not continue pursuing Fortran.\nWith Reddit, which is more likely to attract young people, the Fortran community is not so active and so answers can vary in helpfulness, accuracy and accommodation. This again influences initial experiences for Fortran beginners.\nBy placing links on our site there is an implicit endorsement, which IMHO isn't deserved by either CLF or Reddit as recommended Fortran communities.\nWith this reflection I'd revise my previous comment to say that I am opposed to CLF and Reddit being listed."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-03-13 13:48:51+00:00",
                    "text": "Thanks for taking a clear point here, @LKedward. I haven't participated in either r/fortran or CLF up to now, so I can't judge those communities in any meaningful way. I fully agree that we cannot promote communities that are unaccommodating or hostile to any group of users or do not meet our community standards.\nWhile I agree that the perception of Fortran for beginners is important, I want to highlight that the tagline of the learn page reads Learning resources for beginners and experts alike and we include in the same section expert literature like the 2018 standard interpretation document which could also scare off beginners. So the scope of the learn resources is broader than the perception generated for Fortran beginners."
                },
                {
                    "user": "milancurcic",
                    "date": "2021-03-13 16:30:00+00:00",
                    "text": "I don't support linking to CLF. I have posted there a few times and have had some positive interactions, but otherwise it's not moderated and toxic discussions and spam are not uncommon. That was one of the motivators for starting Fortran Discourse and mailing list.\nI haven't been active on Stack Overflow for several years now. I've had negative experience there and have read toxic interactions. But it is moderated. I don't know how it is now so I can't recommend either way.\nr/fortran I know almost nothing about.\nSo, in summary, I'm against linking to CLF and undecided about Stack Overflow and Reddit. But I trust @LKedward's opinion on this."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-03-13 17:01:21+00:00",
                    "text": "Thanks everybody for the advice on this, in conclusion I'll withdraw this patch."
                },
                {
                    "user": "certik",
                    "date": "2021-03-13 17:13:40+00:00",
                    "text": "I agree with @milancurcic and @LKedward. I think I speak for others when I say that we are all for linking to other communities and resources, e.g. at https://fortran-lang.org/learn/, but it is important to be welcoming and nice to new users and contributors, as well as to old contributors.\nI think the Stack Overflow might be pretty nice, I had pretty good experience there, so I would be fine with linking it. I didn't have a good experience at c.l.f, and know several people (in person) who got so discouraged that they won't post there again. So that is unacceptable and I want to endorse communities where this does not happen, or very rarely."
                }
            ]
        },
        {
            "number": 218,
            "user": "Beliavsky",
            "date": "2021-03-03 23:01:33+00:00",
            "title": "Add a History page?",
            "text": "Fortran-lang.org promotes Fortran as a modern language, which it is. But it's also an old language with a rich history that some site visitors may be interested in. At the top, along with the sections\nLearn\nCompilers\nCommunity\nPackages\nNews\nshould there be a link to a History page with relevant information? There is a history from IBM. Other links are at the Fortran Wiki history page, but I would excise the gloomy introduction!",
            "is_open": true,
            "labels": [
                "enhancement"
            ],
            "comments": [
                {
                    "user": "arjenmarkus",
                    "date": "2021-03-04 08:58:51+00:00",
                    "text": "I definitely like the idea. It might the place to show the dichotomy\nbetween \"ancient\" FORTRAN and modern Fortran.\n\nOp do 4 mrt. 2021 om 00:01 schreef Beliavsky <notifications@github.com>:\n\u2026\n Fortran-lang.org promotes Fortran as a modern language, which it is. But\n it's also an old language with a rich history that some site visitors may\n be interested in. At the top, along with the sections\n\n Learn\n Compilers\n Community\n Packages\n News\n\n should there be a link to a History page with relevant information?\n\n \u2014\n You are receiving this because you are subscribed to this thread.\n Reply to this email directly, view it on GitHub\n <#218>, or\n unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YR2U4YBB3E4MEQIBNNTTB25VXANCNFSM4YSEETNQ>\n ."
                },
                {
                    "user": "certik",
                    "date": "2021-03-04 09:29:24+00:00",
                    "text": "Yes I like the idea. We should have a History section."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-03-05 19:54:19+00:00",
                    "text": "I like the idea as well. Having a good organized knowledge base over the history of Fortran would be a useful addition. Creating such a new section with meaningful content can be more difficult and requires expertise and input from long practitioners and pioneers of Fortran.\nInput and patches are very welcome on this. I'm happy to help where ever I can with this, but I'm out for doing the first steps on this (I started programming Fortran in 2017, not the best qualifications for writing a history section)."
                },
                {
                    "user": "vmagnin",
                    "date": "2021-03-28 19:04:51+00:00",
                    "text": "My feeling is that a Fortran history page in Fortran-lang.org should be designed with clear and assumed goals. There is already a lot of pages with a Fortran history (for example https://en.wikipedia.org/wiki/Fortran).\nOur history should not be another old dusty museum but concentrate on events and information that could be useful for Fortran beginners to understand the present state of Fortran:\n\nwhy Fortran was created, why it was successful (easy to learn, a compiler designed to achieve good optimizations since the first version, oriented for array computing, etc.),\nwhy it was standardized, how standardization is functioning since Fortran 90 (major/minor versions, many years between the standard and the implementation in compilers...) It's very different from younger languages where you would have Fortran 3.0, Fortran 3.1, Fortran 3.1.5...\nWhy most modern Fortran files have a .f90 extension,\ninsist on the perenniality of Fortran codes,\nEtc.\n\nAnd we have already many posts in the Discourse that could bring materials to build such a story."
                },
                {
                    "user": "milancurcic",
                    "date": "2021-04-07 16:39:10+00:00",
                    "text": "I agree, this would be a good addition to the website. I think a mini-book would be a good format."
                },
                {
                    "user": "vmagnin",
                    "date": "2021-04-22 12:40:10+00:00",
                    "text": "This Curlie directory (the historical DMOZ reborn) list a few pages with stuff related to Fortran history:\nhttps://www.curlie.org/en/Computers/Programming/Languages/Fortran/History\nAnd especially this page:\nhttp://www.softwarepreservation.org/projects/FORTRAN/"
                },
                {
                    "user": "Beliavsky",
                    "date": "2021-09-29 11:47:35+00:00",
                    "text": "Related discussion at Fortran Discourse: History of Fortran (Fortran II source code)"
                },
                {
                    "user": "vmagnin",
                    "date": "2021-09-29 16:43:36+00:00",
                    "text": "Another discussion:\nhttps://fortran-lang.discourse.group/t/john-backus-1924-2007-fortrans-father/873\nAnd there could be historical things in https://fortran-lang.discourse.group/t/anecdotal-fortran/704\nand https://fortran-lang.discourse.group/t/boz-constants-but-why-z/981"
                }
            ]
        },
        {
            "number": 217,
            "user": "jme52",
            "date": "2021-03-03 14:41:31+00:00",
            "title": "Search for c++ packages does not work correctly",
            "text": "One of the \"Featured topics\" on https://fortran-lang.org/packages/ is c++.  However, the search page https://fortran-lang.org/packages/search/?query=c++ seems to list many packages that don't have c++ in their list of tags or descriptions.  Is it possible that the search inputs are not properly escaped?",
            "is_open": false,
            "labels": [
                "bug"
            ],
            "comments": [
                {
                    "user": "henilp105",
                    "date": "2022-01-17 15:07:45+00:00",
                    "text": "The Featured topics has changed it to cpp as that '+' in c++ was being termed as a space replacer and to join a line of words\nby the script thus only rendering the results for \"c  \" that is c with 2 spaces. that has been fixed by replacing c++ by cpp.\nrequest to close this issue as it has been resolved.\nThanks and Regards,\nHenil Panchal"
                },
                {
                    "user": "henilp105",
                    "date": "2022-01-18 12:36:50+00:00",
                    "text": "@awvwgk  @jme52  This issue has been resolved thus request to close this issue #217.\nThanks and Regards,\nHenil Panchal"
                },
                {
                    "user": "awvwgk",
                    "date": "2022-01-18 12:39:53+00:00",
                    "text": "I think this issue is still present, since we do not properly escape a search like c++ at the moment."
                },
                {
                    "user": "henilp105",
                    "date": "2022-01-18 12:57:58+00:00",
                    "text": "sir I can make the search code so should i contribute it.\nThanks and Regards,\nHenil Panchal"
                },
                {
                    "user": "awvwgk",
                    "date": "2022-01-18 13:23:13+00:00",
                    "text": "The package search is implemented here: https://github.com/fortran-lang/fortran-lang.org/blob/master/assets/js/package_search.js\nPatches are welcome."
                }
            ]
        },
        {
            "number": 216,
            "user": "jme52",
            "date": "2021-03-02 13:36:58+00:00",
            "title": "Improve tags",
            "text": "Assorted changes related to tags: ensure some multi-word tags are joined by hyphens, unify equivalent tags, fix typos in a couple of tags, add missing tags.\nThis PR partially addresses #176.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2021-03-03 13:39:39+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-03-03 13:40:40+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/216/"
                },
                {
                    "user": "jme52",
                    "date": "2021-03-03 15:06:10+00:00",
                    "text": "Thank you.  Based on the updated tag cloud, I added a few more hyphens (and found a typo in the process).  I won't be making any further changes - you probably want to check the updated PR build, but unless something is broken there, as far as I am concerned this PR is ready to be merged."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-03-03 15:07:27+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-03-03 15:07:52+00:00",
                    "text": "The preview build for this PR has now been deleted."
                },
                {
                    "user": "Beliavsky",
                    "date": "2021-06-20 01:19:26+00:00",
                    "text": "Looking at\n\n\n\n\nqContainers\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n\n\n\n\nStore any intrinsic or derived data type to a container\n\n\n\n\n\n\n\n\nTags:\u00a0qlibc tree table hash table linked list vector dynamic array unique set\n\n\n\n\n\n\n\n\n\n\nI think there are still many multi-word tags that need to be hyphenated. I assume hash-table, linked-list, and dynamic-array are multi-word tags."
                },
                {
                    "user": "ivan-pi",
                    "date": "2022-04-14 23:40:29+00:00",
                    "text": "@Beliavsky, mind opening a new issue for the multi-word tags?"
                }
            ]
        },
        {
            "number": 215,
            "user": "milancurcic",
            "date": "2021-02-25 16:47:25+00:00",
            "title": "Newsletter for March 2021",
            "text": "Outstanding items:\n\n @LKedward contributors data + add yourself to authors\n @certik LFortran news + add yourself to authors\n @milancurcic update Youtube URL for the monthly meeting, once uploaded\n\nWe won't have Flang news this month (@AlexisPerry on vacation), but we'll continue next month.\nAnybody else, please review, edit or add anything I missed, and add yourself to authors please.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2021-03-01 00:15:30+00:00",
                    "text": "Ok, I am finished with my updates. I updated LFortran and J3 sections."
                },
                {
                    "user": "milancurcic",
                    "date": "2021-03-01 15:38:22+00:00",
                    "text": "Thank you all, I will merge."
                }
            ]
        },
        {
            "number": 214,
            "user": "zmoon",
            "date": "2021-02-22 14:58:52+00:00",
            "title": "Other commercial compilers with free community versions",
            "text": "Maybe the compilers page could mention that the NVIDIA offering is currently available for free, like it does for Intel.",
            "is_open": false,
            "labels": [
                "compiler"
            ],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2021-02-22 15:18:41+00:00",
                    "text": "I agree--mind filing a PR?\nShould we say the same thing about the AMD compiler? It looks like it's free to download but I haven't tried it."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-02-22 15:23:39+00:00",
                    "text": "Most of the commercial compilers are offering free community versions.\nI think we should include this information for the commercial compilers, maybe together with known platform and architecture constraints:\n\nIntel oneAPI, x86_64, Linux / Windows / MacOS\nNVHPC, x86_64 / PowerPC / ARM, Linux\nIBM XL, PowerPC, Linux / AIX\nAOCC, x86_64, Linux\n\nEdit: I did use the community versions of Intel oneAPI, NVHPC and AOCC already, hadn't got a chance to spin up a VM or setup QEMU to try IBM XL yet."
                }
            ]
        },
        {
            "number": 213,
            "user": "awvwgk",
            "date": "2021-02-21 23:15:06+00:00",
            "title": "Link to vendor community platforms for compiler support",
            "text": "Should the compiler page include links to community platforms provided by the compiler vendors?\nIntel has a forum for community support:\nhttps://community.intel.com/t5/Intel-Fortran-Compiler/bd-p/fortran-compiler\nNVIDIA offers a discourse instance for their NVHPC compilers:\nhttps://forums.developer.nvidia.com/c/accelerated-computing/hpc-compilers/nvc-nvc-and-nvfortran/313\nI have used those two sites only to drop off bug reports and hope for an employee to file those as legitimate bug reports, which worked quite well with NVIDIA so far.",
            "is_open": false,
            "labels": [
                "compiler"
            ],
            "comments": []
        },
        {
            "number": 212,
            "user": "awvwgk",
            "date": "2021-02-21 18:05:49+00:00",
            "title": "Localize javascript components in `assets/js`",
            "text": "The javascript in assets/js contains a few keywords that should be localized as well after #201 is merged.\n\n  \n    \n      fortran-lang.org/assets/js/gh-contributors.js\n    \n    \n         Line 329\n      in\n      8ca4ed7\n    \n  \n  \n    \n\n        \n          \n                       <i><b> {{nContrib}} contributions </b></i> \n        \n    \n  \n\n\n\n  \n    \n      fortran-lang.org/assets/js/gh-contributors.js\n    \n    \n         Line 423\n      in\n      8ca4ed7\n    \n  \n  \n    \n\n        \n          \n                   <b>Repository: </b> \n        \n    \n  \n\n\n\n  \n    \n      fortran-lang.org/assets/js/gh-contributors.js\n    \n    \n         Line 425\n      in\n      8ca4ed7\n    \n  \n  \n    \n\n        \n          \n                   <option value=\"all\">All</option> \n        \n    \n  \n\n\n\n  \n    \n      fortran-lang.org/assets/js/gh-contributors.js\n    \n    \n         Line 431\n      in\n      8ca4ed7\n    \n  \n  \n    \n\n        \n          \n                   <b>User plots: </b>",
            "is_open": true,
            "labels": [
                "i18n"
            ],
            "comments": []
        },
        {
            "number": 211,
            "user": "awvwgk",
            "date": "2021-02-21 16:08:17+00:00",
            "title": "Displaying localized information from _data/ entries",
            "text": "One open issue for the localization are the entries in _data, some of those are automatically generated, like the fpm registry and therefore hard to translate. Other entries like the in press part of the learning resources might be a suitable candidate for localized information, i.e. displaying French books only on the French subtree.\nNote that the default language, English, has only access to the English translation file, while all other languages have at least access to the English translation file and their own translation file, in case we want to pull off some tricks with liquid for this.\nLocalizing _data entries in the translation file would lead to a significant bloat, but we might be able to add additional localized _data directories in the language subtrees in the _i18n directory. A possible solution would be to use subtrees in the _data dir to store localized versions of data and global versions on the toplevel.\n_data\n|-- en/\n|-- es/\n|-- fr/",
            "is_open": true,
            "labels": [
                "i18n"
            ],
            "comments": []
        },
        {
            "number": 210,
            "user": "awvwgk",
            "date": "2021-02-21 15:45:52+00:00",
            "title": "Add package guide to webpage",
            "text": "The package guide is currently just a markdown file in this repository, but would be very well suited for the webpage as well. Since the markdown file contains some technicalities specific to the jekyll setup as well, those could be separated and added to the wiki in the repository.\nRelated #183",
            "is_open": true,
            "labels": [
                "easy"
            ],
            "comments": [
                {
                    "user": "zmoon",
                    "date": "2021-03-23 22:21:11+00:00",
                    "text": "@awvwgk how would you suggest doing this while keeping a single source? GH Action to update the wiki page based on the Jekyll version (skipping the YAML FM) could work? Or not all would be duplicated?"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-03-23 22:24:46+00:00",
                    "text": "I was thinking about splitting the guidelines from the technical workflow, no need for a single source in this setup."
                },
                {
                    "user": "zmoon",
                    "date": "2021-03-23 22:31:10+00:00",
                    "text": "Ah ok gotcha. Would that be everything under \"Package index requests\"?"
                }
            ]
        },
        {
            "number": 209,
            "user": "vmagnin",
            "date": "2021-02-19 18:12:36+00:00",
            "title": "Small error in CONTRIBUTING.md",
            "text": "In the workflow section, I read:\n\n\nPush your modified branch to your local fork\ne.g. git push --set-upstream origin fix-spelling-homepage\n\n\nI guess it should be \"to your distant fork\" (or remote fork?)",
            "is_open": false,
            "labels": [
                "documentation",
                "easy"
            ],
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2021-02-21 15:53:01+00:00",
                    "text": "Not sure what the best formulation here would be, but local is not optimal, maybe one could drop the local without problems here. Feel free to send a patch with an improved formulation on this part."
                }
            ]
        },
        {
            "number": 208,
            "user": "awvwgk",
            "date": "2021-02-17 19:14:40+00:00",
            "title": "Fix package information",
            "text": "update eT, libmbd, siesta, illustrate",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 207,
            "user": "smeskos",
            "date": "2021-02-16 18:55:46+00:00",
            "title": "Correct subtitle of setting up your os",
            "text": "Minor improvements:\n\nat the subtitle\nINTEL->Intel\nupdate info about Visual Studio and Intel oneAPI",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 206,
            "user": "awvwgk",
            "date": "2021-02-14 09:07:18+00:00",
            "title": "Add books to learning section",
            "text": "Suggested by @Beliavsky in #202\n\nIntroduction to Computational Economics Using Fortran\nFortran 2018 with Parallel Programming\n\nCloses #202",
            "is_open": false,
            "labels": [
                "learn"
            ],
            "comments": []
        },
        {
            "number": 205,
            "user": "awvwgk",
            "date": "2021-02-14 08:23:57+00:00",
            "title": "Add more electronic structure and atomistic simulation packages",
            "text": "Add packages suggested in https://fortran-lang.discourse.group/t/some-fortran-related-sites-and-packages/712\n\nIllustrate\nTinker (no open-source license)\neT\nSiesta\nDalton\nLSDalton\nBigDFT (no open-source license)\n\nOnly merge after #196",
            "is_open": false,
            "labels": [
                "packages"
            ],
            "comments": []
        },
        {
            "number": 204,
            "user": "Beliavsky",
            "date": "2021-02-10 00:52:19+00:00",
            "title": "Mention comp.lang.fortran and Stack Overflow under \"looking for help\"",
            "text": "I suggest that links to comp.lang.fortran, Stack Overflow: Fortran, and Reddit: Fortran be added at https://fortran-lang.org/learn/ .",
            "is_open": true,
            "labels": [
                "wontfix",
                "learn"
            ],
            "comments": []
        },
        {
            "number": 203,
            "user": "Beliavsky",
            "date": "2021-02-10 00:28:29+00:00",
            "title": "Change title for \"Setting up your OS\" to \"Setting up your Fortran compiler\"",
            "text": "I think \"Setting up your OS\" should be renamed \"Setting up your Fortran compiler\", since it does not discuss something like installing Linux. Also, \"developement\" should be \"development\".",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2021-02-14 09:09:25+00:00",
                    "text": "@Beliavsky, feel free to send a patch for these changes."
                },
                {
                    "user": "smeskos",
                    "date": "2021-02-14 11:12:29+00:00",
                    "text": "I would leave the title as is _\"Setting up your OS\", since to set something up has the meaning to prepare something for use or to be used with something else and not necessarily just to install it, and, of course, in the current context I think by \"something\" Fortran is implied, at least this is what I had in mind when I wrote it. However, in the explanation below the title, the word \"setup\" is definitely a mistake since when it is a single word it is a noun and not a verb, I think it can be replaced with \"How to install a Fortran compiler and set up a development environment in Windows, Linux and macOS\".\nAnyway, I am going to wait a couple of days in case there are more opinions/suggestions on the matter and I will submit a new PR with whatever we decide."
                },
                {
                    "user": "milancurcic",
                    "date": "2021-02-15 19:16:19+00:00",
                    "text": "I agree to leave the title as is. Although \"Setting up your OS\" is a tad too general, the subtitle, visible from the Learn page, is exact and to the point. This mini-book explains more than just setting up the Fortran compiler."
                }
            ]
        },
        {
            "number": 202,
            "user": "Beliavsky",
            "date": "2021-02-10 00:15:58+00:00",
            "title": "books to add",
            "text": "Fortran 2018 with Parallel Programming (2019) by Subrata Ray\nIntroduction to Computational Economics Using Fortran (2018) by Hans Fehr and Fabian Kindermann",
            "is_open": false,
            "labels": [
                "learn"
            ],
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2021-02-14 09:07:46+00:00",
                    "text": "Books can be added at https://github.com/fortran-lang/fortran-lang.org/blob/master/_data/learning.yml, I opened #206 to add the two books."
                }
            ]
        },
        {
            "number": 201,
            "user": "awvwgk",
            "date": "2021-02-09 23:29:02+00:00",
            "title": "Draft: Internationalization for fortran-lang",
            "text": "This patch introduces the infrastructure for localization support of the webpage using the jekyll-multiple-languages-plugin. You can checkout my i18n branch locally and add a new language as described in #197 (comment) to play around with the feature. Feedback is more than welcome on this patch.\n\n allow to replace page body with localized version\n have markup only in main tree while translations provide content for page bodies\n localize webpage title\n localize all keywords in the main tree\n localize all keywords in _include\n localize all keywords in _layouts\nlocalize permalinks\n localize page names\n avoid copying assets in every language subtree\n include language navigation in footer\n add documentation for translators\n\nThis PR does not add localization to any language yet, a build preview will only show if nothing is broken.\nThis pull request includes the Spanish translation provided by @aslozada and the French translation provided by @vmagnin, the side can be previewed at https://fortran-lang.org/pr/201/.",
            "is_open": false,
            "labels": [
                "wontfix",
                "i18n"
            ],
            "comments": [
                {
                    "user": "certik",
                    "date": "2021-02-09 23:52:57+00:00",
                    "text": "How does the translation work? I couldn't figure it out ---- do you just translate the text, or do you need to copy the html for each language, which becomes redundant?"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-02-10 08:04:22+00:00",
                    "text": "@certik I added a brief guide here describing the basic process, it still needs a bit of polishing though.\nThe html body, including the markup, is currently just copied to have something to start working and try the plugin. I'll look into separating the markup from the translation later today."
                },
                {
                    "user": "certik",
                    "date": "2021-02-10 17:42:55+00:00",
                    "text": "In the SymPy webpage, only the text itself is translated, all the markup is reused from the parent. So that way you are free to change the layout and all translations will still work. Furthermore, if you change a text in the English version, the translated version will simply show the English text until it is translated. So translations are always up to date in both layout and text (although parts of the text might not always be translated until somebody updates it).\nUnless we can figure out something similar, it will become a nightmare to make any changes to the English page, as it will not be reflected in the translations, neither in layout nor text."
                },
                {
                    "user": "vmagnin",
                    "date": "2021-02-11 10:23:27+00:00",
                    "text": "I have translated the keywords in my _i18n/fr.yml file.\nAs far as I can test, everything is OK except:\n\nthe packages: section has no effect on the \"Packages\" page.\nThe sentence \"RSS clients can follow the RSS feed\" (homepage) can not be translated neither in the fr.yml file nor in the fr/index.html file."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-02-11 11:06:29+00:00",
                    "text": "@vmagnin Thanks for testing, I noticed a few missing keywords while skimming through the code yesterday, but found no time to push another patch before midnight.\nThere was one RSS client sentence that was difficult to localize as it was using liquid templating inside to generate some links, so the general setup of this sentence + link generation needs reconsideration first. Might have been this one."
                },
                {
                    "user": "vmagnin",
                    "date": "2021-02-12 08:55:18+00:00",
                    "text": "@awvwgk ,\nThe \"Localize leftover keywords\" commit fixed the RSS problem.\nConcerning the \"Packages\" page, the section packages: is working with the subpages (for example packages/fpm), but not with the main packages page."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-02-12 09:11:53+00:00",
                    "text": "This might be partly due to the page titles, which are not localized yet but taken directly from the front matter of the main tree. They have to be handled differently for some reason."
                },
                {
                    "user": "vmagnin",
                    "date": "2021-02-14 11:40:21+00:00",
                    "text": "Hi Sebastian @awvwgk\nmy translations of the homepage _i18n/fr/index.hmtl and of the keywords _i18n/fr.yml are ready. I have not yet committed them to my fork. Before doing it, let me know:\n\nShould I commit them directly in my _i18n branch or create a _i18n_fr branch?\nShould I make a Pull Request? Or should I wait?\nIn the first case, should I make a Pull Request to your fork, or to the original project https://github.com/fortran-lang/fortran-lang.org ?\n\nI will now begin translating the other main sub-pages, at a slower pace."
                },
                {
                    "user": "LKedward",
                    "date": "2021-02-14 12:12:53+00:00",
                    "text": "Thanks for spearheading this @awvwgk and @vmagnin, this is a big project and is looking promising! However I want to second Ond\u0159ej's concerns about layout duplication and the subsequently increased workload for future changes \u2014 have you worked out a way to avoid this at all?"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-02-14 12:13:41+00:00",
                    "text": "@vmagnin First, that's really amazing. It also means I better hurry up here ;).\nLet's try to keep things simple. git can handle feature branches built on non-merged feature branches sufficiently well, the GitHub UI is not that great for reviewing such kind of PRs. But since your French translation lives in a separate subtree this might work out just fine.\nIf you are fine with rebasing your changes on my i18n branch as I proceed building this branch up, I see no problem to create a separate (draft) PR on the fortran-lang repo, which is probably more visible than my fork to the community. This would allow to gather feedback on the translation and the infrastructure separately if we coordinate correctly here."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-02-14 12:14:51+00:00",
                    "text": "However I want to second Ond\u0159ej's concerns about layout duplication and the subsequently increased workload for future changes \u2014 have you worked out a way to avoid this at all?\n\nYes, I have found a way to separate the content from the markup, just have to push the patch here."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-02-14 12:48:10+00:00",
                    "text": "Patch is in, basically we can exploit that no document in the _i18n tree will generate a page, and scatter the content in separate files which are included with the translate_file function at the correct places."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-02-14 15:54:32+00:00",
                    "text": "I think I got everything now, but more eyes will help to catch oversights and mistakes. Let's have a #build_preview for this PR."
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-02-14 15:55:32+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/201/"
                },
                {
                    "user": "vmagnin",
                    "date": "2021-02-14 17:52:32+00:00",
                    "text": "Thanks @awvwgk\nit seems you did a great job in your last commits! I will git rebase tomorrow and take my time to carefully merge my work with yours. And complete the translations of keywords in the .yml file.\nThe \"preview\" feature is very interesting!"
                },
                {
                    "user": "aslozada",
                    "date": "2021-02-14 22:41:12+00:00",
                    "text": "I think I got everything now, but more eyes will help to catch oversights and mistakes. Let's have a #build_preview for this PR.\n\nI hope to help with these eyes. I think it's great that information about Fortran can be released in other languages.\nThe discourse tag in the global section seems to be broken. The tags mailing_list, rss_feed and the others on the right side of the webpage work correctly."
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-02-14 22:42:05+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/201/"
                },
                {
                    "user": "LKedward",
                    "date": "2021-02-15 08:53:44+00:00",
                    "text": "Great stuff! I'll hopefully have time to review in detail later this week. Only noticed one thing so far which is that the package category descriptions seem to be missing, e.g. https://fortran-lang.org/pr/201/packages/, https://fortran-lang.org/pr/201/packages/data-types.\nEDIT: I can see the definitions in the yml file, but not sure why they're not rendering :-/"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-02-15 10:10:52+00:00",
                    "text": "EDIT: I can see the definitions in the yml file, but not sure why they're not rendering :-/\n\nI just noticed that I used the yml entry in the description but not passed it to the translate / t function in the layout later."
                },
                {
                    "user": "vmagnin",
                    "date": "2021-02-15 11:11:25+00:00",
                    "text": "I have successfully git rebase, dispatched the content of my fr/index.html into the new files and translated the new keywords in the fr.yml file.\nConcerning the homepage I have noted only two small problems:\n\nOn the right margin, the \"News\" title is not translated and the translation of \"More\" does not appear, but they do in the compilers and news sub-pages.\nThere is no keyword in the .yml file to translate the \"FAQ\" title."
                },
                {
                    "user": "aslozada",
                    "date": "2021-02-15 20:52:58+00:00",
                    "text": "I added a Spanish version to my fork, containing the file es.yml and the directory es.\nFor the translation, I followed the recommendations of the Royal Spanish Academy (dictionary of the Spanish language and pan-Hispanic dictionary of doubts). As already mentioned in the Discourse, some words and expressions do not have a direct equivalent. So I await your suggestions.\nAs already commented by @vmagnin, there is no keyword in the .yml to FAQ title.\nI have also noticed that in the section Getting started, the title and its content, are not in the i81n directory."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-02-15 21:06:39+00:00",
                    "text": "@aslozada Cool, thanks a lot for your effort and the feedback.\nYou probably mean this \u201cGetting started\u201d here?\n\nThis part is generated from the _data/learning.yml file, which is not yet localized, similar to the package index and other items under _data except for the navigation. I have no good idea yet how to localize those without duplicating the data (like I did for the navigation), might be something I will save for the second pass."
                },
                {
                    "user": "vmagnin",
                    "date": "2021-02-15 21:23:42+00:00",
                    "text": "Concerning the langs: section in the .yml files, what should we do?\nIn the en.yml file, the names of languages are in English.\nAnd @aslozada has translated them in Spanish:\nlangs:\n  en: Ingl\u00e9s\n  fr: Franc\u00e9s\n  de: Alem\u00e1n\n  es: Espa\u00f1ol\n\nI think they should be written as in the language itself:\nlangs:\n  en: English\n  fr: Fran\u00e7ais\n  de: Deutsch\n  es: Espa\u00f1ol\n\nThe user will identify it faster, even more if there is languages using other characters (Asiatic, Arabic, Russian...)\nNote also that each time a new language will be added, we will have to update that section in all languages."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-02-15 21:47:10+00:00",
                    "text": "With 22097f3 the language keys in the footer should be shown in the respective language. The language name will be taken from the _i18n/<lang>.yml from\nlangs:\n  <lang>: <name>\nSo no language file has to provide translations for all other available language but itself."
                },
                {
                    "user": "vmagnin",
                    "date": "2021-02-16 08:43:52+00:00",
                    "text": "Following a git rebase with the two last commits, I have got some problems on my local version:\n\nThe faq keyword has disappeared from both English and French homepages.\nConcerning the footer, on the French version both English and French (Fran\u00e7ais) languages appear. But in the English version, only English appears."
                },
                {
                    "user": "vmagnin",
                    "date": "2021-02-16 08:49:58+00:00",
                    "text": "I suggest that when the three of us feel ready, @aslozada and myself make a pull request with our Spanish and French versions at about the same time. In order that @awvwgk can add them to the site preview and announce that we have a preliminary trilingual version of Fortran-lang.org."
                },
                {
                    "user": "vmagnin",
                    "date": "2021-02-18 09:45:04+00:00",
                    "text": "I have pushed to my fork the French translation of the site, including the homepage, and learn, community, packages subpages:\nhttps://github.com/vmagnin/fortran-lang.org/tree/i18n/_i18n\nI have not yet worked on the compilers.md file."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-02-18 22:07:29+00:00",
                    "text": "@aslozada @vmagnin Excellent work on the translations, I cherry-picked your commits on my branch i18n and included them here.\nThe footer should be fixed now, also I symlinked all the posts from the main tree to the French and Spanish _posts directory, since posts are strictly limited to the respective subtree.\nLet's have a look at another #build_preview, feedback is always welcome."
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-02-18 22:08:37+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/201/"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-02-18 22:22:07+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-02-18 22:23:04+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/201/"
                },
                {
                    "user": "aslozada",
                    "date": "2021-02-19 00:14:11+00:00",
                    "text": "\u00a1Qu\u00e9 ch\u00e9vere!\nI'm still translating the compilers.md page. I will update this soon.\nI noticed that a tag for the search-box, in the packages section, is missing.\nIn my local account, I did some tests to translate the text in the search-box.\nThese are the changes:\n\nin the file _i18n / *. yml :\n\nfor the section package  add the tag placeholder\nplaceholder: Search for a package (in the English version)\nplaceholder: Buscar un paquete (in the Spanish version)\n\nin packages/index.html, modify the Front Matter with placeholder: page.packages.placeholder,\nand in the col-center section with\n<input type = \"text\" name = \"query\" class = \"search-box\" placeholder = {% t page.placeholder%}>\n\nthe change works \"well\", however, only the first word of the text is used, even with the text in quotes.\nEnglish version\n\nSpanish version"
                },
                {
                    "user": "vmagnin",
                    "date": "2021-02-19 08:37:39+00:00",
                    "text": "Great work, buddies! @awvwgk  @aslozada\nThe only remaining problem I see in both translations is that we have no keyword in the .yml files for \"Get Involved\" on the Community page.\nAnd just by curiosity, is there any particular reason for the \"Compilers\" page to be an .md file?\nIn any case, that file will not be the easier to translate, with so many technical terms..."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-02-19 08:55:46+00:00",
                    "text": "Got the search placeholder fixed and also localized the getting involved header. I put in some DeepL stubs in the translation files, let me know if there is a better translation."
                },
                {
                    "user": "aslozada",
                    "date": "2021-02-19 19:52:29+00:00",
                    "text": "Giving an extra look:\nthe js function makeContributorInterface,   in assets/js/gh-contributors.js,  contains the values\nRepository and  User plots\nEnglish version\n\nSpanish version"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-02-19 20:06:08+00:00",
                    "text": "@aslozada Have you found a way to localize this part?"
                },
                {
                    "user": "aslozada",
                    "date": "2021-02-19 21:15:01+00:00",
                    "text": "@aslozada Have you found a way to localize this part?\n\nI'm trying to pass tags, from  the file *. yml, as arguments to js function in directory assets/js. This part works, but some errors are generated in the image list that is more below."
                },
                {
                    "user": "LKedward",
                    "date": "2021-02-20 11:03:22+00:00",
                    "text": "Regarding templating javascript, I setup fortranlang.js as a kind of module that is included on all pages and that exports a fortranlang object/namespace. The intention is that  fortranlang.js is the only javascript file that is templated with Jekyll and all other javascript files are pure javascript. You can define new fields in fortranlang.js (like the existing baseurl field) that represents the text to be translated which will be accessible in the other javascript files via the fortranlang namespace.\nEdit: I'm happy to provide assistance updating the javascript files."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-02-20 11:56:42+00:00",
                    "text": "I would suggest to keep the javascript changes for separate patch."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-02-21 15:32:28+00:00",
                    "text": "Finally, what are the guidelines for future PRs that change existing content or add new pages?\n\nIf localized content is changed this has to be documented somehow. In case one of the content blocks of the main page is changed all localized versions should be updated. I suggest to open an issue under the i18n label, showing the previous version and the new version and asking for updates of the translated content (maybe with a checklist for all available languages to keep track of the progress).\nAdded content is less problematic, because in the translate_file / tf case it is filled in from the English version by default, it only requires some attention when new keywords are added to the language file (translate / t case) to fill in English version or automatic translated stubs in the other language files (together with a FIXME or TODO note maybe)."
                },
                {
                    "user": "aslozada",
                    "date": "2021-02-21 17:13:07+00:00",
                    "text": "@awvwgk Would the changes be added by pull request or by a procedure like that used for the French and Spanish preliminary versions?\n\nI suggest add to checklist, in the patch of infrastructure for localization, the js components (labels),  and the data in the directory _data."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-02-21 18:06:58+00:00",
                    "text": "@awvwgk Would the changes be added by pull request or by a procedure like that used for the French and Spanish preliminary versions?\n\nEither way would work, can't tell which will be best in practice.\n\nI suggest add to checklist, in the patch of infrastructure for localization, the js components (labels), and the data in the directory _data.\n\nI opened #211 for the _data entries, and #212 for the javascript localization."
                },
                {
                    "user": "aslozada",
                    "date": "2021-02-21 20:38:44+00:00",
                    "text": "... maybe with a checklist for all available languages to keep track of the progress ...\n\nmaybe,\nChecklist to keep track of translation to name_language language\nEvery section corresponds to an item of navigation menu\n\nMain page\n\n\n Features\n FAQ\n Make a Fortran Better\n Join Us!\n\n\nLearn\n\n\n Getting Started\n Mini-book Tutorials\n Other Resources\n\n\nFortran Compilers\n\n\n Open Source Compilers\n Commercial Compilers\n Discontinued\n Note\n\n\nCommunity\n\n\n Fortran-lang Community Projects\n Get Involved\n Fortran-lang Contributors\n\n\nPackages\n\n\n Find a Package\n Browser Package by category"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-02-22 16:16:05+00:00",
                    "text": "How do we want to proceed with this patch? I would love to see it merged sooner than later since it basically touches every file in the repository and will therefore be very likely to collide with most other patches and PRs."
                },
                {
                    "user": "certik",
                    "date": "2021-02-22 16:22:12+00:00",
                    "text": "I think we might be able to use this work to get to the state where I think we should get. However, I am afraid we are not there. For example, I can see a file like this in this PR:\n<h3> <i data-feather=\"edit\"></i>\n  Gu\u00eda del colaborador</h3>\n<p>\n\u00bfDesea contribuir con c\u00f3digo y contenido?\nConsulte las gu\u00edas para colaboradores en cada reposit\u00f3rio para \nobtener informaci\u00f3n sobre el flujo del trabajo y de las\npr\u00e1cticas recomendadas.\n</p>\n<ul>\n  <li> <a href=\"https://github.com/fortran-lang/stdlib/blob/master/WORKFLOW.md\" target=\"_blank\" rel=\"noopener\">Gu\u00eda del colaborador para stdlib</a> </li>\n  <li> <a href=\"https://github.com/fortran-lang/fpm/blob/master/CONTRIBUTING.md\" target=\"_blank\" rel=\"noopener\">Gu\u00eda del colaborador para fpm</a> </li>\n  <li> <a href=\"https://github.com/fortran-lang/fortran-lang.org/blob/master/CONTRIBUTING.md\" target=\"_blank\" rel=\"noopener\">Gu\u00eda del colaborador para fortran-lang.org</a> </li>\n</ul>\n\nAnd that I strongly believe is not the way to do it, because it is replicating the markup in every translation. So the minute we change the layout in the English version, all the translations will be wrong. It should not be the job of translators to fiddle with markup and trying to reproduce the English one. Neither should it be the job of contributors who improve the layout to do so in 30+ languages.\nI strongly believe the way to do it is to translate just the sentences / paragraphs / words and use automated system to show immediately in each translation what sentences got updated and must be translated. Markup should be correct right away.\nNote: You can look at the SymPy webpage where we do exactly what I described."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-02-22 16:59:19+00:00",
                    "text": "SymPy is using a gettext based solution, which I would prefer as well. There are two discontinued jekyll plugins (https://github.com/Stonelinks/jekyll-gettext-plugin and https://github.com/ruby-gettext/jekyll-task-i18n) which can use po-files, but I'm not too keen to use discontinued software here."
                },
                {
                    "user": "LKedward",
                    "date": "2021-02-22 17:38:36+00:00",
                    "text": "And that I strongly believe is not the way to do it, because it is replicating the markup in every translation.\n\nI agree; it looks to me that the duplicated markup here is isolated to a few tf translation files \u2014 presumably we can eliminate duplicated markup from this PR simply by removing markup from the tf files or by replacing them with translation expression as used everywhere else. Is this not correct @awvwgk, or am I missing something? I'd like to understand before we write-off this PR to search for other solutions."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-02-22 18:00:34+00:00",
                    "text": "The main issue with the plugin used here is that we don't get safe fallbacks in case we use the t command but get a silent failure. The tf option is safer as it is falling back safely to the default language, yet it requires separate files, the currently chosen structure is the smallest acceptable chunk size in my opinion, because the default language, English, is handled like any other translated language. Moving all the content to the translation file is also inacceptable in my opinion, because we would end up with a single yml file for the complete content of the English main tree.\ngettext has the great advantage that we are actually replacing strings with a safe fallback, it allows to write the page in the default language as usual and add a translation on top afterwards with a po-file in an automatic and safe way. But we don't have actively maintained gettext support for jekyll."
                },
                {
                    "user": "LKedward",
                    "date": "2021-02-22 18:23:21+00:00",
                    "text": "Thanks for explaining and I see why the gettext approach would be much more preferable. It is a shame that those plugins have been discontinued."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-02-22 18:41:51+00:00",
                    "text": "I would claim this patch is how far we can get with jekyll, unless we want to start maintaining a plugin ourselves for this purpose or switch to a different static page generator with better internationalization support.\nI checked hugo already as a simple replacement for jekyll with built-in internationalization, but it basically offers the same solution we have in the patch here. Check gohugoio/hugo#1744 (comment) why hugo is not using gettext and their reasoning behind this decision."
                },
                {
                    "user": "certik",
                    "date": "2021-02-22 22:54:38+00:00",
                    "text": "Does Jekyll allow to translate a sentence by sentence? It will be really tough for translators to try to figure out which parts of the English versions got updated."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-03-05 18:37:33+00:00",
                    "text": "I think this PR is stuck at the moment. I won't pursue this particular approach further, which doesn't mean I will stop searching for a solution for the localization of the webpage. The translations of @aslozada and @vmagnin won't be lost with this PR, merely delayed until I figured out a better solution.\nAnyone participating in the discussion here is invited to join the search for a suitable static side generator with better localization support at #89."
                },
                {
                    "user": "vmagnin",
                    "date": "2021-03-22 09:17:12+00:00",
                    "text": "I have just committed the French translation of the compilers.md page in my fork, corresponding to the latest 2021-03-06 English version:\nhttps://github.com/vmagnin/fortran-lang.org/commits/i18n/_i18n/fr/compilers.md\nIt was quite difficult to translate, not only because there is a lot of technical details but also because most paragraphs are written in a commercial style."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-12-01 21:43:56+00:00",
                    "text": "I guess it is time to close this topic, we can revive this branch from 1fb9900 to get the wonderful translations already contributed here. For now I'll focus on building the fpm documentation to explore how far we can get with sphinx. Maybe we can transfer some of the knowledge and experience from there to rebuilt our webpage with support for translations in the future. Having a multilingual Fortran homepage is still high on my wish list."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-12-17 14:52:38+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-12-17 14:53:00+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 200,
            "user": "awvwgk",
            "date": "2021-02-09 09:31:35+00:00",
            "title": "Link teaching resources and course material?",
            "text": "Is it on scope for the webpage to link external course material or teaching resources from the learn page? I'm mainly thinking about pure Fortran programming courses and also more domain-specific specific courses that include Fortran introductions to teach other more specific concepts.\nIf we agree that it is on scope, what would be criteria to list a course on the learn page?",
            "is_open": false,
            "labels": [
                "learn"
            ],
            "comments": [
                {
                    "user": "ivan-pi",
                    "date": "2021-02-09 18:10:45+00:00",
                    "text": "I'm aware of several great resources including:\n\nProgramming in Fortran (course offered at the Leibniz-Rechenzentrum)\nPRACE Course: Advanced Fortran Topics\nKursmaterial f\u00fcr Wissenschaftliches Programmieren (Modern Fortran, 2017) from B\u00e1lint @aradi at Bremen Center for Computational Materials Science\nModern Fortran Programming for Chemists and Physicists, course by Pekka Manninen from University of Helsinki (includes coarrays)\nExpressing Object-Oriented Concepts in Fortran90 \nParallel Programming Workshop (materials from the High-Performance Computing Center in Stuttgart)\nProgramming in Modern Fortran (I believe this is a tutorial written by @interkosmos)\n2018 Workshop on Fortran Modernization for Scientific Applications (with lectures by @arjenmarkus and @aradi)\nIntroduction to Programming using Fortran 95/2003/2008\nScientific Programing and Numerical Computation (course by Wu-ting Tsai from National Taiwan University; the explanation of FFT is great!)\nIntroduction to Modern Fortran (course given by Nick Maclaren from the University of Cambridge Computing Service, derived from a course by Steve Morgan from the University of Liverpool; I think this course offers some good arguments why Fortran is more suitable for domain scientists than C++)\nUser Notes on Fortran Programming (UNFP)\nDesigning and Building Parallel Programs , by Ian Foster (contains descriptions of several non-standard Fortran dialects like Fortran M and High Performance Fortran)\nParallel programming with Fortran 2008 and 2018 coarrays, course by Anton Shterenlikht from the University of Bristol\nProfessional Programmer's Guide to Fortran77, by Clive G. Page, University of Leicester, UK\nFortran90 for Fortran77 Programmers by Clive G. Page\nIntroduction to Computer Programming Using  Fortran 95 (training materials from ARCHER, the UK National Supercomputing Service)\nCombining Object-Oriented Techniques with Co-arrays in Fortran 2008, by Robert W. Numrich (this report covers roughly the same material)\nParallel programming in Fortran with Coarrays, by John Reid: ftp://ftp.numerical.rl.ac.uk/pub/talks/jkr.reading.5XI08.pdf\nIntroduction to Co-Array Fortran, by Robert W. Numrich\nFortran 90 for the Fortran 77 Programmer, by Bo Einarsson and Yurij Shokin\nFortran Tutorial, older tutorial by Erik Boman, Stanford University\nFortran 90 Tutorial, older tutorial by Paul Hargrove and Sarah Whitlock, both at Stanford University\nFortran 90 Tutorial by C.-K. Shene, Michigan Technologial University\n\nPersonally, I find these resources very helpful. I've got several more links hidden in my browser bookmarks \ud83e\udd2f .\nAs a temporary solution, I would feel okay to put these in the \"Other Resources\" section on the Learn page. But it might be a good idea to introduce some further subcategories (e.g. links related to the standards committee, Fortran blogs, third-party lectures, ...).\nI also think we should ask the authors for permission to link their lectures. Some of them might be available openly only for convenience of access for the students taking their courses, and not really meant for the general public.\nEdit: concerning criteria, I think it would be good to only consider materials >= F2003. The older F90/95 targeted courses, while technically still valid, can be misleading with respect to solutions available in the latest standard."
                },
                {
                    "user": "milancurcic",
                    "date": "2021-02-09 18:25:14+00:00",
                    "text": "I agree it's in scope. About criteria, I don't know, good question. I agree with @ivan-pi on recent material. Otherwise I think it will be difficult to come up with hard criteria, especially for say, quality. I'd say let's list everything we can find that we collectively and subjectively agree is high enough quality to be useful. I think most finished tutorials out there will meet this \"criterion\".\nI think we should also link paid courses like that of @everythingfunctional. But we need to clearly mark is as non-free.\nI suggest not including courses that happened in the past and don't provide course notes for download (e.g. I couldn't find any from the 2018 Workshop on Fortran Modernization for Scientific Applications)."
                },
                {
                    "user": "ivan-pi",
                    "date": "2021-02-09 18:36:06+00:00",
                    "text": "I suggest not including courses that happened in the past and don't provide course notes for download (e.g. I couldn't find any from the 2018 Workshop on Fortran Modernization for Scientific Applications).\n\nThey are linked in the timetable (similar to FortranCon2020). Perhaps ease of access is another criterion."
                },
                {
                    "user": "certik",
                    "date": "2021-02-09 18:37:58+00:00",
                    "text": "I think this is definitely in scope. Thanks @ivan-pi for the list. I think we can be inclusive and link pretty much anything, as long as we neatly organize it so that people reading the page can find what they want."
                },
                {
                    "user": "milancurcic",
                    "date": "2021-02-09 19:01:53+00:00",
                    "text": "They are linked in the timetable (similar to FortranCon2020). Perhaps ease of access is another criterion.\n\nAlternatively we can obtain permission from authors and organizers and host the material on our website."
                },
                {
                    "user": "aradi",
                    "date": "2021-02-09 19:40:57+00:00",
                    "text": "As for me, you are very welcome to link my Scientific programming course (I'll probably record a new version with youtube videos this spring). You have also definitely my permission to link or host the material I used on the 2018 workshop."
                },
                {
                    "user": "ivan-pi",
                    "date": "2021-02-10 11:16:38+00:00",
                    "text": "Thanks @aradi.\nIn the meantime I updated the list with a few more courses. Perhaps some categorization would be beneficial, like courses which cover co-arrays, object-oriented features, F77 to F90 conversion...\nEdit: of course the Fortran wiki already maintains a comprehensive list - http://fortranwiki.org/fortran/show/Tutorials"
                },
                {
                    "user": "vmagnin",
                    "date": "2021-02-15 08:30:37+00:00",
                    "text": "I propose that we include a few non-english courses, like the german one proposed by @ivan-pi .\nConcerning the French language, I therefore propose that link:\nhttp://www.idris.fr/formations/fortran/\nThose very complete courses include Fortran 2003 and 2008 stuff. Not yet Fortran 2018, although there is some slides on obsolete features in the 2018 standard. But they seem to be regularly updated (two from 2020, one from 2019). Note that IDRIS is the computing science department of the CNRS, the big french national scientific research center.\nThe three basic, advanced and expert courses add up to 872 slides. The program sources are available. And there is exercises with solutions."
                },
                {
                    "user": "vmagnin",
                    "date": "2021-03-31 13:24:20+00:00",
                    "text": "Following that discussion https://fortran-lang.discourse.group/t/ref-card-for-fortran90/935/ , I propose to add on the Learn page a Fortran refcard, like that one:\nhttps://michaelgoerz.net/refcards/fortran_refcard_a4.pdf\nI could contact the author on https://github.com/goerz/Refcards to ask if it is the latest PDF version, the LaTeX source available on GitHub having a last commit in Dec. 2018 (CC-BY-NC-SA license)."
                }
            ]
        },
        {
            "number": 199,
            "user": "awvwgk",
            "date": "2021-02-08 17:55:13+00:00",
            "title": "Fix broken link for LLVM flang",
            "text": "LLVM renamed their default branch from master to main\n\nFixes #198",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 198,
            "user": "arunningcroc",
            "date": "2021-02-08 17:47:18+00:00",
            "title": "Flang link on the compiler page",
            "text": "The \"LLVM Flang\" link on the compilers page seems to be broken.\nhttps://fortran-lang.org/compilers/\nThe link leads to: https://github.com/llvm/llvm-project/tree/master/flang which is now a 404.\nIt seems that the LLVM flang project has now been merged to https://github.com/flang-compiler/flang which is listed on the compilers page as \"Current Flang\".",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2021-02-08 17:53:07+00:00",
                    "text": "LLVM renamed their default branch from master to main, the link should now point to https://github.com/llvm/llvm-project/tree/main/flang"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-02-08 18:02:39+00:00",
                    "text": "It seems that the LLVM flang project has now been merged to https://github.com/flang-compiler/flang which is listed on the compilers page as \"Current Flang\".\n\nNote that LLVM flang (former f18) is the successor of what is known as current flang, which in turn is based on the pgfortran frontend (now known as nvfortran). As announced inoffically on the NVIDIA forum nvfortran will at some point be using the LLVM flang frontend (see https://forums.developer.nvidia.com/t/fortran-2008-2018-support/164306)."
                },
                {
                    "user": "milancurcic",
                    "date": "2021-02-08 18:10:34+00:00",
                    "text": "The PGI/NVIDIA/Flang compiler evolution/branding has been the most confusing of any compiler I've seen."
                }
            ]
        },
        {
            "number": 197,
            "user": "awvwgk",
            "date": "2021-02-07 20:21:59+00:00",
            "title": "Localization of the webpage",
            "text": "Is there a way we can offer localization with the current website design? What would we have to do from a technical point of view to be able to put up a localized version of fortran-lang.org?\nInspired by @vmagnin's post at https://fortran-lang.discourse.group/t/promoting-fortran-in-non-english-languages/678",
            "is_open": true,
            "labels": [
                "i18n"
            ],
            "comments": [
                {
                    "user": "certik",
                    "date": "2021-02-08 01:16:28+00:00",
                    "text": "Yes I think that is a good idea, as long as people are willing to maintain the translations. Here is how we do it in for the SymPy's webpage:\nhttps://github.com/sympy/sympy.github.com#translations"
                },
                {
                    "user": "vmagnin",
                    "date": "2021-02-08 10:19:15+00:00",
                    "text": "As written in the Discourse, if translating pages is decided, I of course agree to work on the french translation. And of course, it could be a collaborative work if there is other people interested here."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-02-08 10:25:00+00:00",
                    "text": "@vmagnin Definitely, I consider it more a matter of figuring out the technicalities to get this running with jekyll. I already found plenty of ugly solutions when searching for jekyll i18n, but nothing that strikes me as elegant and simple yet.\nOn this topic, I would contribute to German translations."
                },
                {
                    "user": "vmagnin",
                    "date": "2021-02-08 10:35:20+00:00",
                    "text": "Definitely, I consider it more a matter of figuring out the technicalities to get this running with jekyll.\n\nYes, the main problem is probably a technical one. How to transform the site into a multi-language site... It seems not trivial... And would probably need a lot of work."
                },
                {
                    "user": "vmagnin",
                    "date": "2021-02-08 13:14:03+00:00",
                    "text": "Maybe we could, at least as a first step, just translate the homepage. Perhaps it would be sufficient to make the site appears in Google with a good pagerank. I don't know if the number of pages available in the national language is taken into account in the Google algorithm... We could even make an experiment: we translate the homepage just in one language, and we wait some days (or weeks ?) to see if it has an effect on search engines.\nAnd I guess that once people have found the website, most will be able to understand something in the english pages."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-02-08 22:23:06+00:00",
                    "text": "I found jekyll-multiple-languages-plugin which allows side localization with jekyll in an elegant way. First, I already created a branch i18n, where you can give it a try.\n\nadd your language in the _config.yml under languages (the first language is the default)\n\n\n  \n    \n      fortran-lang.org/_config.yml\n    \n    \n         Line 7\n      in\n      f14c12f\n    \n  \n  \n    \n\n        \n          \n           languages: [\"en\"] \n        \n    \n  \n\n\n\ncreate the file _i18n/<lang>.yml and the directory _i18n/<lang> (now you can visit http://127.0.0.1:4000/<lang>/ already, untranslated pages are taken from the default language branch)\nmirror the content of _i18n/en in your _i18n/<lang> directory, i.e. create _i18n/<lang>/index.html to translate the main page\n\nThere are a lot of small details I still have to figure out, but this basically looks like a suitable solution for the webpage."
                },
                {
                    "user": "vmagnin",
                    "date": "2021-02-09 08:50:19+00:00",
                    "text": "3. mirror the content of `_i18n/en` in your `_i18n/<lang>` directory, _i.e._ create `_i18n/<lang>/index.html` to translate the main page\n\n\n@awvwgk , I have forked your repository. I will try these days to translate just the homepage to begin. Just a question concerning your third point: should I mirror all the content of _i18n/en ? or just the files I want to translate ? (it's what I understand, but I am not sure...)\nAnother newbie question: I guess that to access to http://127.0.0.1:4000/<lang>/ I need to install jekyll on my machine? (seems to be available in Ubuntu)"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-02-09 09:10:21+00:00",
                    "text": "@vmagnin Just adding the files you translate is sufficient, the rest will be filled in automatically from the _i18n/en tree. Let me know if this works as expected. Note, currently my setup only allows to translate the body but not the keywords in the header and footer and so on, but I will look into this soon.\nTo setup the webpage locally follow the guide in the README at https://github.com/fortran-lang/fortran-lang.org#setup. After you have setup everything run bundle exec jekyll serve --watch in another terminal and open http://127.0.0.1:4000 in your webbrowser to get a live preview while you edit the content."
                },
                {
                    "user": "aslozada",
                    "date": "2021-02-09 12:08:07+00:00",
                    "text": "This procedure works correctly. Jekyll server returns some warnings about deprecated arguments.\nfortran-lang.org/.bundle/ruby/2.7.0/gems/jekyll-3.8.6/lib/jekyll/tags/include.rb:194: warning: Using the last argument as keyword parameters is deprecated\nI am trying with a Spanish translation"
                },
                {
                    "user": "vmagnin",
                    "date": "2021-02-09 17:16:54+00:00",
                    "text": "I have done everything, including _i18n/fr.yml and _i18n/fr/index.html\nI can access to my local english version, but not the french version with http://127.0.0.1:4000/fr/ in my web browser:\nNot Found\n`/fr/' not found.\nWEBrick/1.6.0 (Ruby/2.7.1/2020-03-31) at 127.0.0.1:4000\nShould I install  jekyll-multiple-languages-plugin  with bundle ? I don't see it when I type \"bundle install\" (but I see Installing i18n 0.9.5)"
                },
                {
                    "user": "vmagnin",
                    "date": "2021-02-09 17:27:08+00:00",
                    "text": "Sorry, my second terminal (the jekyll one) was not opened in the i18n but the master branch...\nNow bundle install successfully installed the  jekyll-multiple-languages-plugin\nIt's OK, I have translated one sentence and I see it in http://127.0.0.1:4000/fr/\n:-)"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-02-10 07:59:39+00:00",
                    "text": "I put together a first draft patch for the localized homepage at #201, if you want to give it a try, there is now support for localizing (most of the) keywords in the navigation and footer and adding translated pages. The process is outlined here.\nIt has still a few plenty rough edges, so feedback is much appreciated. Stay tuned."
                },
                {
                    "user": "aslozada",
                    "date": "2021-02-10 12:47:36+00:00",
                    "text": "Would it appropriate build a branch to each language during translation process?\ne.g.\ni81n\n|\n| -- Default language\n| -- English\n| -- Spanish\n| -- French\n| -- German\n| -- Czech\n..."
                },
                {
                    "user": "aslozada",
                    "date": "2021-02-10 17:35:22+00:00",
                    "text": "I put together a first draft patch for the localized homepage at #201, if you want to give it a try, there is now support for localizing (most of the) keywords in the navigation and footer and adding translated pages. The process is outlined here.\nIt has still a few plenty rough edges, so feedback is much appreciated. Stay tuned.\n\n@awvwgk. If the general layout (_i18n /_layouts) is kept fixed, the final aspect of the footer is modified by adding words with a greater number of characters.  Some \"line breaks\" are introduced."
                },
                {
                    "user": "vmagnin",
                    "date": "2021-02-11 08:42:28+00:00",
                    "text": "Would it appropriate build a branch to each language during translation process?\n\nIn my opinion, it is not necessary, each language having its own directory. And it would multiply the number of branches in the project."
                },
                {
                    "user": "aslozada",
                    "date": "2021-02-11 10:45:24+00:00",
                    "text": "I put together a first draft patch for the localized homepage at #201, if you want to give it a try, there is now support for localizing (most of the) keywords in the navigation and footer and adding translated pages. The process is outlined here.\nIt has still a few plenty rough edges, so feedback is much appreciated. Stay tuned.\n\n@awvwgk. If the general layout (_i18n /_layouts) is kept fixed, the final aspect of the footer is modified by adding words with a greater number of characters. Some \"line breaks\" are introduced.\n\nThanks, @vmagnin. Yes, my comment is a bit confusing.\nPerhaps the following images describe better,\nFooter in the English version\n\nFooter in the Spanish version"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-02-11 10:48:54+00:00",
                    "text": "I see, yes they are currently just 33% of the column wide. If we will have many languages there might be even problems with the language keys. I will probably try two rows in the footer instead."
                },
                {
                    "user": "vmagnin",
                    "date": "2021-02-11 11:05:48+00:00",
                    "text": "@aslozada , no, not confusing. My emoji was just meaning I have the same annoying (minor) problem. In my case, even for the GitHub message on the right."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-02-11 20:48:19+00:00",
                    "text": "I made a second line for the languages, if we get many translations and small screens (mobile) line breaks can't be avoided, but this is something to worry about once we have that much translations:"
                }
            ]
        },
        {
            "number": 196,
            "user": "awvwgk",
            "date": "2021-02-06 15:12:05+00:00",
            "title": "Update package index",
            "text": "new packages:\n\nfortran-curl\nFKB\nhipfort\nfpm\nflibcpp\ncamfort\nfindent\nfprettify\nshroud\nswig-fortran\nf90wrap\n\nupdates packages:\n\nsqliteff, elsi, vegetables, erloff, tapenade, strff, iso_varying_string, fortjson, fortran-csv-module, openmolcas, octopus, WHIZARD, MESA, Truchas, quaff, psblas3, ElmerFEM, ogpf, jsonff, parff\n\nnew features:\n\nuse https://badgen.net/ for gitlab badges",
            "is_open": false,
            "labels": [
                "packages"
            ],
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2021-02-07 09:52:32+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-02-07 09:53:46+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/196/"
                },
                {
                    "user": "LKedward",
                    "date": "2021-02-07 09:59:44+00:00",
                    "text": "Hi @awvwgk, are you able to check the effect of these changes on the package search functionality? I think the Gitlab projects now need special attention in the Javascript search.\n\n  \n    \n      fortran-lang.org/assets/js/package_search.js\n    \n    \n        Lines 112 to 162\n      in\n      f3ea348\n    \n  \n  \n    \n\n        \n          \n           function resultsToHTML(results){ \n        \n\n        \n          \n               // Return HTML representation of search results \n        \n\n        \n          \n               // \n        \n\n        \n          \n            \n        \n\n        \n          \n               var out = \"\"; \n        \n\n        \n          \n               var i; \n        \n\n        \n          \n               for (i=0;i<results.length;i++){ \n        \n\n        \n          \n                \n        \n\n        \n          \n                   if (results[i].score > 0){ \n        \n\n        \n          \n                \n        \n\n        \n          \n                       project = results[i]; \n        \n\n        \n          \n                \n        \n\n        \n          \n                       if (results[i].github != \"\" && !project.fpm){ \n        \n\n        \n          \n                           out += '<h3><a href=\"https://github.com/'+project.github+'\" target=\"_blank\">'; \n        \n\n        \n          \n                           out += '<i class=\"devicon-github-plain colored\"></i> '+project.name+'</a></h3>'; \n        \n\n        \n          \n                       } else { \n        \n\n        \n          \n                           out += '<h3><a href=\"'+project.url+'\" target=\"_blank\">'; \n        \n\n        \n          \n                           if (project.fpm){ \n        \n\n        \n          \n                               out += '<i class=\"fas fa-cubes\"></i> '; \n        \n\n        \n          \n                           } else if (project.url.includes('gitlab.com')) { \n        \n\n        \n          \n                               out += '<i class=\"devicon-gitlab-plain colored\"></i> '; \n        \n\n        \n          \n                           } else if (project.url.includes('bitbucket.org')){ \n        \n\n        \n          \n                               out += '<i class=\"devicon-bitbucket-plain colored\"></i> '; \n        \n\n        \n          \n                           } \n        \n\n        \n          \n                           out += project.name+'</a></h3>'; \n        \n\n        \n          \n                       } \n        \n\n        \n          \n                        \n        \n\n        \n          \n                       out += '<p> '+project.description; \n        \n\n        \n          \n            \n        \n\n        \n          \n                       var cats = project.categories.split(\" \"); \n        \n\n        \n          \n                       out += ' (' \n        \n\n        \n          \n                       var j; \n        \n\n        \n          \n                       for (j=0;j<cats.length;j++){ \n        \n\n        \n          \n                           out += '<a href=\"'+fortranLang.baseurl+'/packages/'+cats[j]+'\">'+cats[j]+'</a>'; \n        \n\n        \n          \n                           if (j<cats.length-1){ \n        \n\n        \n          \n                               out += ', '; \n        \n\n        \n          \n                           } \n        \n\n        \n          \n                       } \n        \n\n        \n          \n                       out += ') </p>' \n        \n\n        \n          \n                        \n        \n\n        \n          \n                        \n        \n\n        \n          \n            \n        \n\n        \n          \n                       out += '<p class=\"light small\"><b>Tags: </b>'+project.tags+'</p>'; \n        \n\n        \n          \n                \n        \n\n        \n          \n                   } \n        \n\n        \n          \n                \n        \n\n        \n          \n               } \n        \n\n        \n          \n                \n        \n\n        \n          \n               return out; \n        \n\n        \n          \n            \n        \n\n        \n          \n           }"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-02-07 10:16:39+00:00",
                    "text": "Seems the search is still finding results, see https://fortran-lang.org/pr/196/packages/search/?query=strff, but not generating the correct links."
                },
                {
                    "user": "LKedward",
                    "date": "2021-02-07 10:18:03+00:00",
                    "text": "Seems the search is still finding results, see https://fortran-lang.org/pr/196/packages/search/?query=strff, but not generating the correct links.\n\nYep, and it would be nice to retain the Gitlab icons as well \ud83d\udc4d"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-02-07 10:43:21+00:00",
                    "text": "I got the search working with 8623b32, somewhat tricky to find all the right places to add a new field, but now it seems fine."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-02-07 10:44:31+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-02-07 10:45:31+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/196/"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-02-13 09:27:11+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-02-13 09:27:28+00:00",
                    "text": "The preview build for this PR has now been deleted."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-02-13 09:53:37+00:00",
                    "text": "I added a bunch more of packages, mainly formatters I have recommended recently to colleagues and the interface generators discussed on the discourse."
                }
            ]
        },
        {
            "number": 195,
            "user": "aslozada",
            "date": "2021-02-05 17:13:56+00:00",
            "title": "XML file without style",
            "text": "Hi,\nThe link news, in navbar class, returns a XML file without style.\n\nThis XML file does not appear to have any style information associated with it. The document tree is shown below.\n\n<title type=\"text\" xml:lang=\"en\">Fortran Newsletter</title>\n\n\n2021-02-02T22:08:53+00:00\n/news",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2021-02-05 17:26:07+00:00",
                    "text": "Hi @aslozada, is there any part of the website that doesn't seem to work correctly? I can't find it. How do I reproduce the issue?"
                },
                {
                    "user": "aslozada",
                    "date": "2021-02-05 17:31:26+00:00",
                    "text": "In the navbar, the link news, https://fortran-lang.org/news.xml, returns a XML file without style."
                },
                {
                    "user": "LKedward",
                    "date": "2021-02-05 17:33:43+00:00",
                    "text": "Hi @aslozada, are you referring to the RSS feed link?"
                },
                {
                    "user": "aslozada",
                    "date": "2021-02-05 17:35:02+00:00",
                    "text": "Yes. In the \"button\" of RSS."
                },
                {
                    "user": "LKedward",
                    "date": "2021-02-05 17:37:39+00:00",
                    "text": "Ah okay, the xml file that it links to is intended to be read by an RSS reader and hence it will not display properly in a Web browser."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-02-21 15:55:48+00:00",
                    "text": "I'll close this issue as resolved."
                }
            ]
        },
        {
            "number": 194,
            "user": "awvwgk",
            "date": "2021-02-02 22:52:49+00:00",
            "title": "Rename all instances of fortran-lang.github.io to fortran-lang.org",
            "text": "I noticed recently that all links to the repo at fortran-lang.org actually reference fortran-lang.github.io the default name of a GitHub pages hosted side. The link https://github.com/fortran-lang/fortran-lang.github.io still redirects correctly to this project, yet the documentation and guides seemed a bit inconsistent too me.\nAlso renames three instances of master branch to default branch.",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 193,
            "user": "awvwgk",
            "date": "2021-01-30 13:58:26+00:00",
            "title": "Monthly newsletter for February 2021",
            "text": "I put together a draft for the February monthly newsletter and populated it from the repository activities.\n\n collect PRs from stdlib\n collect PRs from fpm, setup-fpm and fpm-registry\n collect PRs from fortran-lang.org\n add link to Fortran monthly call recording\n update contributor data (@LKedward)\n add call info for next GSoC discussion meeting (@milancurcic)\n add updates on classic flang\n add updates on LLVM flang\nadd updates on LFortran (@certik)\n\nPlease review and edit if needed. As usual, please add your name to the authors list if you add, edit, or review content.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2021-01-30 14:40:39+00:00",
                    "text": "Thanks for starting! I'll update contributor data tomorrow."
                },
                {
                    "user": "milancurcic",
                    "date": "2021-01-30 16:38:50+00:00",
                    "text": "Thanks for starting it. Do you think we should mention GSoC to try gather early interest from prospective students? Something like:\n\nThis year fortran-lang will be applying as an Org for Google Summer of Code. We started working on the application and the project ideas. If you'd like to help us flesh them out, please join our video call on (Milan TODO). If you're a student and you'd like to help build the Fortran ecosystem, or have a project idea you'd like to work on, please reach out and let us know (how exactly? Milan TODO).\n\nI think this would go in the Events section."
                },
                {
                    "user": "milancurcic",
                    "date": "2021-01-30 16:45:41+00:00",
                    "text": "Regarding news from Classic Flang and LLVM Flang: @AlexisPerry, would you like to provide updates from both Flang projects for the monthly newsletter? We distribute these on the mailing list (131 subscribers), Discourse, and Twitter (604 followers). Flang updates in the newsletter may bring new users, and who knows, maybe even new contributors.\nHere's a sample newsletter from last month and what Flang updates look like: https://fortran-lang.org/newsletter/2021/01/01/Fortran-Newsletter-January-2021/#compilers\nPreviously @gklimowicz has been helping with these, but he stepped back and mentioned your name. It would be very helpful if you agreed to do it! :)"
                },
                {
                    "user": "milancurcic",
                    "date": "2021-02-02 17:20:12+00:00",
                    "text": "@certik Are there any updates from LFortran? It'd be great if this newsletter can go out today.\nI suggest we drop the Flang updates this month, and continue next month if we find a contributor."
                },
                {
                    "user": "certik",
                    "date": "2021-02-02 20:08:52+00:00",
                    "text": "Let's drop LFortran also for this month."
                },
                {
                    "user": "AlexisPerry",
                    "date": "2021-02-02 21:46:46+00:00",
                    "text": "Sorry for the delay in response.  I did not realize this was due today.  Since I'm new to this project, haven't learned the workflow yet, and we're on a short deadline, I'll just put my Flang updates here for now and would appreciate it if someone could integrate them into the document for me just this once.  If that's not a workable solution, please let me know how best to contribute and I will do so ASAP. Thanks!\n### Classic Flang\n\nThere are a number of pull requests out for evaluation.\n\nA total of 12 pull requests were merged in January.\n\n* [PR#932 Do not assume unempty derived types](https://github.com/flang-compiler/flang/pull/932)\n* [PR#957 Support Prefetch Directive](https://github.com/flang-compiler/flang/pull/957)\n* [PR#947 Fix gcc-10 compilaton issues](https://github.com/flang-compiler/flang/pull/947)\n* [PR#948 Expand CI to run with GCC-9/10 and LLVM-9/10/11](https://github.com/flang-compiler/flang/pull/948)\n* [PR#949 USE rename should check if renamed sptr is available in the scope](https://github.com/flang-compiler/flang/pull/949)\n* [PR#971 Remove dwarfdump_prolog.f90 test since it is dependent on codegen](https://github.com/flang-compiler/flang/pull/971)\n* [PR#940 Flang should generate debug location for limited instructions in prolog](https://github.com/flang-compiler/flang/pull/940)\n* [PR#977 Update apt data before installing sphinx](https://github.com/flang-compiler/flang/pull/977)\n* [PR#751 Fix for len intrinsic returning int*8 in some cases](https://github.com/flang-compiler/flang/pull/751)\n* [PR#956 Minor FileCheck pattern fixes](https://github.com/flang-compiler/flang/pull/956)\n* [PR#978 Fix the readme to point to the correct flang-dev list](https://github.com/flang-compiler/flang/pull/978)\n* [PR#979 Rename direct header to avoid windows conflict](https://github.com/flang-compiler/flang/pull/979)\n\n\n### LLVM Flang\n\nRecent development updates:\n\n* OpenMP semantic checks: private, firstprivate, lastprivate, Workshare Construct, `DO` loop restrictions\n* Detect call to abstract interface\n* OpenMP - add task_reduction clause, make reduction clause part of OmpClause\n* New Driver - adding support for various options, testing improvements, standard macro pre-definitions, fixed-form detection, CMake improvements\n* OpenACC - semantic checks to enforce declare directive restrictions\n* Internal subprogram improvements\n* OpenMP/OpenACC - Extend CheckNoBranching to handle branching provided by LabelEnforce\n* Disallow `INTENT` attribute on procedure dummy arguments\n* Module file improvements and bug fixes\n* Add tests for procedure arguments with implicit interfaces\n\nCall notes will be sent to the _flang-dev_ email list and also recorded [here]( https://docs.google.com/document/d/10T-S2J3GrahpG4Ooif93NSTz2zBW0MQc_RlwHi0-afY)\\\n."
                },
                {
                    "user": "milancurcic",
                    "date": "2021-02-02 21:55:51+00:00",
                    "text": "Thank you, @AlexisPerry!"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-02-02 21:58:57+00:00",
                    "text": "Thanks @AlexisPerry, I added the flang updates to the newsletter. One way to contribute content to the newletter is by creating a review comment on the respective section and add the updates using GitHub's suggestion feature:\n```suggestion\n...\n```"
                },
                {
                    "user": "milancurcic",
                    "date": "2021-02-02 22:05:41+00:00",
                    "text": "I think this is good to go. @awvwgk please merge when ready, and thank you all!"
                },
                {
                    "user": "AlexisPerry",
                    "date": "2021-02-02 22:06:10+00:00",
                    "text": "Thanks @AlexisPerry, I added the flang updates to the newsletter. One way to contribute content to the newletter is by creating a review comment on the respective section and add the updates using GitHub's suggestion feature:\n```suggestion\n...\n\n\n\nThank you so much @awvwgk !  I'll go that route next month.  :-)"
                }
            ]
        },
        {
            "number": 192,
            "user": "awvwgk",
            "date": "2021-01-03 09:21:26+00:00",
            "title": "Sort fpm registry alphabetically",
            "text": "The fpm registry at packages/fpm is currently sorted chronologically in the order of addition to the registry, a more useful sorting would be alphabetically.\nIt appears that Liquid is not able to sort a hash map alphabetically (!) by itself, therefore implementing this in Liquid will be ugly.",
            "is_open": true,
            "labels": [
                "packages"
            ],
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2021-01-03 11:29:29+00:00",
                    "text": "Perhaps the best option is to structure the index differently, as an array instead of a hash map"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-01-03 12:23:25+00:00",
                    "text": "A hash map is the right representation for the registry, I see no need to adapt it due to the shortcomings of a templating language. An easy fix from the fpm-registry side would be sorting the index before committing it, alternatively we have to search for a gem that can add the feature we need for the webpage here."
                },
                {
                    "user": "LKedward",
                    "date": "2021-01-04 10:52:45+00:00",
                    "text": "True, though the index is only a serialisation, converting to an array serialisation does not preclude implementation as a hash map. I'd rather not complicate the build with additional Ruby code so sorting the index would be preferred.  It's unfortunate to rely on the ordering of the data for rendering the site but your proposed solution is perhaps the simplest."
                }
            ]
        },
        {
            "number": 191,
            "user": "awvwgk",
            "date": "2021-01-03 09:15:26+00:00",
            "title": "Fix author/maintainer output in fpm registry",
            "text": "Joins arrays of author/maintainer names with \" and \".\nAlso, simplifies fetching of registry in workflow file.",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 190,
            "user": "awvwgk",
            "date": "2020-12-30 20:47:50+00:00",
            "title": "Add links to fpm contributing guidelines",
            "text": "The fpm contributing guidelines are not yet linked from the webpage. This PR adds links on the community page to the fpm contributor guide.",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 189,
            "user": "jvdp1",
            "date": "2020-12-29 20:05:23+00:00",
            "title": "January 2021 newsletter draft",
            "text": "@milancurcic @LKedward @gklimowicz @certik\nHere is a draft for the January 2021 newsletter.\nI tried to update for fortran-lang.org and stdlib sections. Other sections (fpm, compilers, ...) must be still be updated.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-12-29 20:26:42+00:00",
                    "text": "Thanks a lot for starting it @jvdp1!"
                },
                {
                    "user": "awvwgk",
                    "date": "2020-12-29 21:55:34+00:00",
                    "text": "I'll have a look at the fpm part."
                },
                {
                    "user": "LKedward",
                    "date": "2020-12-30 10:31:41+00:00",
                    "text": "Thanks for starting @jvdp1 and thanks for populating the fpm section @awvwgk - it was a busy month for fpm!\nLeft a few minor suggestions but everything else looks good. I'll update the contributor data tomorrow."
                },
                {
                    "user": "milancurcic",
                    "date": "2021-01-04 16:36:04+00:00",
                    "text": "Thank you, @gklimowicz!\n@certik are there any updates for LFortran or is this good to go?"
                },
                {
                    "user": "certik",
                    "date": "2021-01-04 17:30:49+00:00",
                    "text": "There are updates, but I don't have time to write them down, so this is good to go."
                },
                {
                    "user": "milancurcic",
                    "date": "2021-01-04 18:25:45+00:00",
                    "text": "Okay, sounds good, we can defer LFortran news to the next newsletter. I'll merge now. Thank you all!"
                }
            ]
        },
        {
            "number": 188,
            "user": "LKedward",
            "date": "2020-12-20 10:26:21+00:00",
            "title": "Use setup-ruby 2.7 to fix CI build",
            "text": "Fixes #184\nGithub changed the default Ruby binaries on the Ubuntu CI image which affected the installation of bundler.\nThis PR uses the setup-ruby action to select the correct version of Ruby.\nTested successfully on my fork.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2020-12-29 21:28:01+00:00",
                    "text": "This is an important fix for the homepage generation. I'll go ahead and merge it."
                }
            ]
        },
        {
            "number": 187,
            "user": "smeskos",
            "date": "2020-12-19 19:43:09+00:00",
            "title": "Correct Compiler page and tutorial regarding Intel oneAPI and PGI to NVIDIA",
            "text": "This is a minor correction PR about INTEL and NVIDIA (former PGI) at both the \"compilers\" page and at the mini-book \"setting up your os\".",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2020-12-19 19:44:47+00:00",
                    "text": "This is partly duplicating the effort in #182 to update the Intel oneAPI compiler."
                },
                {
                    "user": "smeskos",
                    "date": "2020-12-19 19:47:13+00:00",
                    "text": "This is partly duplicating the effort in #182 to update the Intel oneAPI compiler.\n\nOh.. I didn't even see that.. and it was just the previous PR..."
                },
                {
                    "user": "smeskos",
                    "date": "2020-12-19 19:52:39+00:00",
                    "text": "I will leave it open for now since I have added other modifications in different places and we can delete the one overlapping regarding the description of Intel oneAPI on the compiler's page."
                },
                {
                    "user": "smeskos",
                    "date": "2020-12-19 20:29:21+00:00",
                    "text": "I believe there is no conflict now with #182, the modifications I suggest here refer to Nvidia info on the compilers page and to the tutorial page."
                },
                {
                    "user": "milancurcic",
                    "date": "2021-02-01 16:00:46+00:00",
                    "text": "What do you think about keeping the PGI on the list, while adding NVIDIA (instead of replacing PGI with NVIDIA)? PGI downloads are still available (https://www.pgroup.com/support/release_archive.php), and from my limited experience, they're very different things. PGI compiler is mature and mostly working (last time I checked), but nvfortran is still rather experimental and can't compile some basic Fortran projects. Did you try both compilers? What is the current experience?"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-02-01 16:04:38+00:00",
                    "text": "Actually, the NVHPC are a rebranded version of the PGI compiler as far as I understood, with PGI reaching it end-of-life in the beginning of 2020 and NVHPC continuing from there on.\nIn fact NVHPC ships with PGI compilers which are just symlinks from pgfortran to nvfortran, so not much difference between the two in my opinion."
                },
                {
                    "user": "milancurcic",
                    "date": "2021-02-01 16:11:11+00:00",
                    "text": "OK, good, in that case no need to keep PGI around. I think this PR is good to go and I will merge it. Thank you both!"
                }
            ]
        },
        {
            "number": 186,
            "user": "awvwgk",
            "date": "2020-12-19 19:04:28+00:00",
            "title": "Add missing packages from list of popular Fortran projects",
            "text": "This should add all the remaining packages from #68 which have an open source license.\nImportant: since my background is electronic structure theory, I'm mostly not familiar with weather modeling or astrodynamics, which many of those projects are targeting. Somebody with experience in this fields should have a look over the descriptions and add tags as appropriate.\nThis PR will eventually close #68.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2020-12-31 12:44:44+00:00",
                    "text": "Let's try the #build_preview again."
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-12-31 12:45:43+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/186/"
                },
                {
                    "user": "awvwgk",
                    "date": "2020-12-31 16:59:16+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-12-31 16:59:37+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 185,
            "user": "ElAlderson",
            "date": "2020-12-19 11:35:26+00:00",
            "title": "Intel compiler info needs to be updated on website",
            "text": "Intel Parallel Studio XE has been rebranded to Intel oneAPI which now contains two FORTRAN compilers: Intel FORTRAN Compiler Classic (ifort) and Intel FORTRAN Compiler Beta (ifx). Choosing a compiler and Fortran Compilers pages need to be updated accordingly.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2020-12-19 11:51:03+00:00",
                    "text": "Duplicate of #181"
                },
                {
                    "user": "LKedward",
                    "date": "2020-12-19 11:53:07+00:00",
                    "text": "Bonsoir @ElAlderson, thanks for reporting \ud83d\udc4d"
                },
                {
                    "user": "ElAlderson",
                    "date": "2020-12-19 16:43:45+00:00",
                    "text": "Bonsoir @ElAlderson, thanks for reporting \ud83d\udc4d\n\nNo problem!"
                }
            ]
        },
        {
            "number": 184,
            "user": "awvwgk",
            "date": "2020-12-18 20:51:24+00:00",
            "title": "Jekyll build is broken",
            "text": "See https://github.com/fortran-lang/fortran-lang.org/actions/runs/431313773\nRun cd src\n  cd src\n  sudo gem install bundler\n  bundle config path .bundle\n  bundle install\n  shell: /bin/bash -e {0}\n  env:\n    SRC_DIR: src\n    PUBLISH_DIR: gh-pages\n    SITE_URL: https://fortran-lang.org\n    FPM_INDEX: https://raw.githubusercontent.com/fortran-lang/fpm-registry/master/index.json\nSuccessfully installed bundler-2.2.2\nParsing documentation for bundler-2.2.2\nInstalling ri documentation for bundler-2.2.2\nDone installing documentation for bundler after 3 seconds\n1 gem installed\n/usr/lib/ruby/2.5.0/rubygems.rb:289:in `find_spec_for_exe': can't find gem bundler (>= 0.a) with executable bundle (Gem::GemNotFoundException)\n\tfrom /usr/lib/ruby/2.5.0/rubygems.rb:308:in `activate_bin_path'\n\tfrom /usr/local/bin/bundle:23:in `<main>'\nError: Process completed with exit code 1.",
            "is_open": false,
            "labels": [
                "bug"
            ],
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2020-12-19 20:08:45+00:00",
                    "text": "Looks like the Jekyll build workflow is actually broken."
                },
                {
                    "user": "LKedward",
                    "date": "2020-12-19 21:09:35+00:00",
                    "text": "This might be an issue with the lock file, updating it might help."
                },
                {
                    "user": "LKedward",
                    "date": "2020-12-20 10:49:08+00:00",
                    "text": "Looks like this is related to actions/virtual-environments#2193 which may be fixed by using https://github.com/ruby/setup-ruby. I will test on my branch"
                }
            ]
        },
        {
            "number": 183,
            "user": "jme52",
            "date": "2020-12-14 00:10:41+00:00",
            "title": "Questions about package information",
            "text": "Would it be possible to display packages (e.g., in https://fortran-lang.org/packages/scientific) more uniformly? At the moment those that are developed on GitHub have much more information available than those that are based on other websites, which may give the impression that non-GitHub packages a less active.  Would it be possible to display the same information for those developed on GitLab?\n\n\nWould it be possible to give more information (ideally in the submission documentation) about how the version information works?  Its purpose is not very clear at the moment. Is that the version that package rapporteurs will be checking?  Do other versions need to meet the criteria too?  Are there any plans to create version-based links (so the version string must match a tag in the repository)?\n\n\nThank you.",
            "is_open": true,
            "labels": [
                "documentation",
                "packages"
            ],
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2020-12-17 15:09:45+00:00",
                    "text": "I think the main reason for this that we are currently relying on shields.io to display the meta data, which has a rather strong focus on GH. It would be beneficial to have actually access to the meta data we are displaying rather than using a third-party provider for this purpose."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-02-06 16:28:32+00:00",
                    "text": "I found a way to display additional information for gitlab hosted packages as well, see #196."
                },
                {
                    "user": "jme52",
                    "date": "2021-02-19 10:43:55+00:00",
                    "text": "Thank you for your replies.\n\n\nFixed by #196, thank you.\n\n\nMaybe more important than my questions back in December: after the merge of #196, PACKAGES.md should be updated since now versions are automatically detected for some non-github sites."
                }
            ]
        },
        {
            "number": 182,
            "user": "jme52",
            "date": "2020-12-13 23:54:06+00:00",
            "title": "Update compilers page following Intel oneAPI release.",
            "text": "This PR addresses #181.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2020-12-19 19:52:44+00:00",
                    "text": "@smeskos If you don't mind, could you have a look on this PR and than we can just merge it."
                }
            ]
        },
        {
            "number": 181,
            "user": "jme52",
            "date": "2020-12-13 23:41:09+00:00",
            "title": "Update compilers page after Intel oneAPI release",
            "text": "The section on the Intel compiler is now outdated: the suite name has changed, there are now two compilers, and they are available for free.",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 180,
            "user": "awvwgk",
            "date": "2020-12-12 18:47:49+00:00",
            "title": "Add TOML-Fortran to package index",
            "text": "This PR adds an entry for the toml-f library. The library implements a TOML 1.0.0-rc3 compliant parser in pure Fortran. The project is currently in beta stage (there is no v1.0 release for now), but is already successfully used in fpm.\nSince the projects main build system is still meson, with CMake and fpm supported as well, I think the package index is better suited than the fpm-registry.",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 179,
            "user": "luoheng23",
            "date": "2020-12-11 07:04:25+00:00",
            "title": "Fix word spelling error in quickstart page",
            "text": "",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 178,
            "user": "awvwgk",
            "date": "2020-12-07 19:09:23+00:00",
            "title": "Fix build preview",
            "text": "use new syntax to set environment variables",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2020-12-07 19:09:30+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "awvwgk",
                    "date": "2020-12-07 19:17:15+00:00",
                    "text": "This is still using the workflow file from the main repo rather than from this branch. Seems like the event triggering the build preview through a comment is not associated with the PR but with the latest commit on the main branch instead?\nSo you have to trust me that this will fix the issue with the build preview \ud83d\ude09"
                },
                {
                    "user": "urbanjost",
                    "date": "2021-12-05 17:47:23+00:00",
                    "text": "#build preview"
                }
            ]
        },
        {
            "number": 177,
            "user": "milancurcic",
            "date": "2020-12-07 15:32:59+00:00",
            "title": "Build preview action is broken",
            "text": "See https://github.com/fortran-lang/fortran-lang.org/actions/runs/406143514",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2020-12-07 15:43:39+00:00",
                    "text": "GH actions switched the way environment variables are handled, the equivalent now should be:\necho \"BUILD_DIR=pr/172\" >> $GITHUB_ENV"
                }
            ]
        },
        {
            "number": 176,
            "user": "jme52",
            "date": "2020-12-04 17:20:04+00:00",
            "title": "Multi-word tags in packages",
            "text": "Is it possible to have tags that use multiple words separated by spaces?\nAt the moment there are packages that define multi-word tags with hyphens (\"electronic-structure-calculations\"), and packages where the same words are separated by spaces, thus actually creating multiple tags (electronic structure calculations).  This results in duplicated tags in the list of featured topis on https://fortran-lang.org/packages/ (e.g., I can see \"electronic-structure\", \"electronic\" and \"structure\"), which prevents other tags from appearing there at all.",
            "is_open": false,
            "labels": [
                "packages"
            ],
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2020-12-04 17:40:04+00:00",
                    "text": "Agreed, the tag implementation is a little messy currently and could do with a cleanup so that the tag cloud is more representative of the packages."
                },
                {
                    "user": "LKedward",
                    "date": "2020-12-04 17:41:48+00:00",
                    "text": "An alternative solution could be to simply use a manually curated list of tags on the package page."
                },
                {
                    "user": "jme52",
                    "date": "2021-03-02 13:50:26+00:00",
                    "text": "I created a PR that I think partially addresses the issue - at least insofar as electronic structure and other related popular multi-word tags are involved.  I was not able to visualize the tag cloud in my build, so I would be grateful if somebody with the right repository permissions could trigger the appropriate GitHub action so that we can check the preview."
                },
                {
                    "user": "ivan-pi",
                    "date": "2022-04-14 23:40:50+00:00",
                    "text": "Closed by #216"
                }
            ]
        },
        {
            "number": 175,
            "user": "jme52",
            "date": "2020-12-04 15:57:09+00:00",
            "title": "Find a package does not work on Firefox with ETP",
            "text": "The \"Find a package\" search functionality of https://fortran-lang.org/packages/ does not work for me on Firefox (78.4.0esr, 64-bit, linux) when Enhanced Tracking Protection is On.  By \"does not work\" I mean that, when ETP is enabled:\n\nThere is no visible list of tags under \"Featured topics\".\nThe search results page (e.g., https://fortran-lang.org/packages/search/?query=lapack) is always an empty list.",
            "is_open": true,
            "labels": [],
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2020-12-04 16:02:08+00:00",
                    "text": "Search functionality works fine with Mozilla Firefox 83.0 on 64 bit Manjaro Linux with Enhanced Tracking Protection for me."
                },
                {
                    "user": "jme52",
                    "date": "2020-12-04 17:07:44+00:00",
                    "text": "Thank you for checking.  I tried again with a new profile, and it works with ETP.\nIt's strange: when using ETP, in the new profile Firefox tells me that \"No trackers known to Firefox were detected on this page\", but in my normal profile (no extensions, clean cache) I get two blocked tracked contents: https://fonts.googleapis.com and https://ajax.googleapis.com ."
                }
            ]
        },
        {
            "number": 174,
            "user": "milancurcic",
            "date": "2020-12-03 14:19:13+00:00",
            "title": "Should fortran-lang.org have a Fortran code snippet on the landing page?",
            "text": "What prompted me to open this: https://twitter.com/asmeurer/status/1334423581837561856\nWhen putting together the first version of the website back in April, I wanted and tried to include an example Fortran code snippet. However, at the time, I struggled with my HTML and CSS to make it look pretty so in interest of time I dropped it and moved on. Then I forgot about it.\nFirst question is, should the landing page have an example code syntax, nicely styled, syntax-colored, some minimal but real-world example? The purpose is to show what Fortran looks and feels like, on a first impression to a newcomer to the language.\nSecond, if the answer is yes (and I think so), can you please think of and propose some example snippets that you think would be good for this? Then we can all discuss them and choose our favorite.\nThird, are you interested in making this happen? It should be a relatively low-hanging fruit, with I think a high ROI. It would probably require basic-to-intermediate HTML+CSS skills and a basic sense of good design.\nHere are examples for inspiration, some pretty, some not so pretty:\n\nPython\nGo\nNim\nElixir\nRuby\nHaskell",
            "is_open": true,
            "labels": [
                "enhancement",
                "good first issue",
                "help wanted"
            ],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-12-03 14:21:01+00:00",
                    "text": "Tagging @asmeurer: What do you think would be a good example and design? Thank you!"
                },
                {
                    "user": "smeskos",
                    "date": "2020-12-03 14:50:23+00:00",
                    "text": "Nice idea, for me, a proper Hello Word example-code for Fortran would be a demonstration of a common and simplified version of a numerical method, eg. Newton-Raphson, or central-difference or something similar that could be written in 5-10 lines."
                },
                {
                    "user": "certik",
                    "date": "2020-12-03 17:00:43+00:00",
                    "text": "I was going to say what @smeskos suggested: some actual numerical method, that fits into a few lines. About 10 years ago, Travis Oliphant compared a simple vectorized Poisson solver in Python:\nhttp://technicaldiscovery.blogspot.com/2011/06/speeding-up-python-numpy-cython-and.html\nand I wrote a version in Fortran:\nhttps://github.com/certik/laplace_test\nthat was a lot faster: https://github.com/certik/laplace_test/blob/9f0f0c0377642a5d02a386fdda39d51808f75068/laplace_for.f90\nSo a simplified version could look something like this:\nprogram laplace_example\nimplicit none\ninteger, parameter :: dp=kind(0.d0), N = 100\nreal(dp) :: u(N,N), t1, t2\ncall cpu_time(t1)\nu = laplace(N, 8000, 0.1_dp, 0.1_dp)\ncall cpu_time(t2)\nprint *, \"Time:\", t2 - t1\nprint *, sum(u), sum(u**2)\n\ncontains\n\n    function laplace(N, Niter, dx, dy) result(u)\n    integer, intent(in) :: N, Niter\n    real(dp), intent(in) :: dx, dy\n    real(dp) :: u(N,N)\n    integer :: i\n    u(1,:) = 1\n    u(2:,:) = 0\n    do i = 1, Niter\n        u(2:N-1,2:N-1) = ((u(3:,2:N-1) + u(:N-2,2:N-1))*dy**2 + &\n            (u(2:N-1,3:) + u(2:N-1,:N-2))*dx**2) / (2*(dx**2 + dy**2))\n    end do\n    end function\n\nend program\nUpdate: I further simplified the code (it still returns the same answer):\nprogram laplace        \nimplicit none\ninteger, parameter :: dp=kind(0.d0), N = 100, Niter = 8000\nreal(dp) :: dx = 0.1_dp, u(N,N), t1, t2\ninteger :: i\ncall cpu_time(t1)\nu(1,:) = 1\nu(2:,:) = 0\ndo i = 1, Niter\n    u(2:N-1,2:N-1) = ((u(3:,2:N-1) + u(:N-2,2:N-1)) + &\n        (u(2:N-1,3:) + u(2:N-1,:N-2))) / 4\nend do\ncall cpu_time(t2)\nprint *, \"Time:\", t2 - t1\nprint *, sum(u), sum(u**2)\nend program\nOr to condense it even further to better fit at the front page:\nprogram laplace\nimplicit none\ninteger, parameter :: dp=kind(0.d0), N=100, Niter=8000\nreal(dp) :: dx=0.1_dp, u(N,N)\ninteger :: i\nu(1,:) = 1; u(2:,:) = 0\ndo i = 1, Niter\n    u(2:N-1,2:N-1) = ((u(3:,2:N-1) + u(:N-2,2:N-1)) + &\n        (u(2:N-1,3:) + u(2:N-1,:N-2))) / 4\nend do\nprint *, sum(u), sum(u**2)\nend program\nOnly 12 lines and it is the full program that compiles and runs."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-12-03 17:01:10+00:00",
                    "text": "A Newton-Raphson like example could be written in FORTRAN 77 as well. How\nabout a/my simple qsort example? That would demonstrate array operations as\nwell as non-trivial memory management.\n\nOp do 3 dec. 2020 15:50 schreef smeskos <notifications@github.com>:\n\u2026\n Nice idea, for me, a proper *Hello Word* example-code for Fortran would\n be a demonstration of a common and simplified version of a numerical\n method, eg. Newton-Raphson, or central-difference or something similar that\n could be written in 5-10 lines.\n\n \u2014\n You are receiving this because you are subscribed to this thread.\n Reply to this email directly, view it on GitHub\n <#174 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YR4UDRARF6KHUFDZJVLSS6QUBANCNFSM4UMBJH2Q>\n ."
                },
                {
                    "user": "certik",
                    "date": "2020-12-03 17:02:42+00:00",
                    "text": "@arjenmarkus, can you post an example that compiles? Let's compare code snippets, then we can effectively select the best one to represent Fortran."
                },
                {
                    "user": "asmeurer",
                    "date": "2020-12-03 17:54:56+00:00",
                    "text": "Thanks for opening this issue. To me, the most important thing is just to show what the basic syntax looks like. Believe it or not, quite a few people have never actually seen a Fortran program before."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-12-03 20:11:01+00:00",
                    "text": "@Ond\u0159ej \u010cert\u00edk <ondrej@certik.us>\n, well, here is an example:\n\n! qsort_reals.f90 --\n!\n!     Example belonging to \"Modern Fortran in Practice\" by Arjen Markus\n!\n!     This work is licensed under the Creative Commons Attribution 3.0\nUnported License.\n!     To view a copy of this license, visit\nhttp://creativecommons.org/licenses/by/3.0/\n!     or send a letter to:\n!     Creative Commons, 444 Castro Street, Suite 900, Mountain View,\nCalifornia, 94041, USA.\n!\n!     Compact implementation of the QuickSort algorithm\n!\n!     Note:\n!     Because the function uses Fortran 90 features, its interface should\nbe made\n!     explicit when using it in an actual program. This is easiest via a\nmodule.\n!\nmodule qsort_functions\n    implicit none\ncontains\nrecursive function qsort_reals( data ) result( sorted )\n    real, dimension(:), intent(in) :: data\n    real, dimension(1:size(data))  :: sorted\n\n    if ( size(data) > 1 ) then\n        sorted = &\n            (/ qsort_reals( pack( data(2:), data(2:) > data(1) ) ), &\n               data(1),                                             &\n               qsort_reals( pack( data(2:), data(2:) <= data(1) ) ) /)\n    else\n        sorted = data\n    endif\nend function qsort_reals\nend module qsort_functions\n\n! test --\n!     Straightforward test ...\n!\nprogram test_qsort_reals\n    use qsort_functions\n\n    implicit none\n\n    real, dimension(200) :: r\n\n    call random_number( r )\n\n    write(*,'(f12.5)') qsort_reals( r )\nend program test_qsort_reals\n\n\nOther examples I was thinking about: read a list of numbers, store them in\na growing array and then determine basic statistical parameters.\n\nOp do 3 dec. 2020 om 18:03 schreef Ond\u0159ej \u010cert\u00edk <notifications@github.com>:\n\u2026\n @arjenmarkus <https://github.com/arjenmarkus>, can you post an example\n that compiles? Let's compare code snippets, then we can effectively select\n the best one to represent Fortran.\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#174 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YRY6ZWQIMUVCTRQ2P43SS7AEHANCNFSM4UMBJH2Q>\n ."
                },
                {
                    "user": "certik",
                    "date": "2020-12-03 20:56:37+00:00",
                    "text": "@asmeurer wrote:\n\nBelieve it or not, quite a few people have never actually seen a Fortran program before.\n\nOh, we believe it. That is why where are all here trying to fix it. :) Thank you again for your feedback."
                },
                {
                    "user": "vmagnin",
                    "date": "2021-02-15 14:44:28+00:00",
                    "text": "Personally, I was very impressed by the Mandelbrot snippet on the Julia page:\nhttps://julialang.org/learning/code-examples/\nIn 14 lines, they compute and draw a Mandelbrot set in the terminal, like in Mandelbrot days (late 70's)...\nBut probably concerning Fortran, a short code computing something with array syntax would be better. The @certik  Laplace example is interesting, but the loop is difficult to read for someone not familiar with the method. Could be more readable if we put an image of the mathematical writing on the left, and the Fortran algorithm on the right? Fortran is the IBM Mathematical Formula Translating System, isn't it?"
                },
                {
                    "user": "ivan-pi",
                    "date": "2021-02-15 15:09:14+00:00",
                    "text": "Could be more readable if we put an image of the mathematical writing on the left, and the Fortran algorithm on the right? Fortran is the IBM Mathematical Formula Translating System, isn't it?\n\nThis is similar to what @rouson and others from the Sourcery Institute have, see here: http://www.sourceryinstitute.org/\nI'm not really sure custom unary and binary operators operating on derived types are the most representative element of Fortran though. A more \"low level\" example using array slicing might be more suitable.\nPerhaps an example including co-arrays is another good selling point. Visitors should realize from first sight, that Fortran is a parallel language."
                },
                {
                    "user": "vmagnin",
                    "date": "2021-02-15 15:22:27+00:00",
                    "text": "Perhaps an example including co-arrays is another good selling point. Visitors should realize from first sight, that Fortran is a parallel language.\n\nYes, I was also thinking it may be interesting (I am now reading the co-array article). Something with a very modern syntax, with the mathematical formula alongside..."
                },
                {
                    "user": "milancurcic",
                    "date": "2021-02-15 15:59:41+00:00",
                    "text": "If you need the math alongside, I think the example is not simple enough. @certik's Laplace example is too complex IMO."
                },
                {
                    "user": "interkosmos",
                    "date": "2021-02-15 16:18:55+00:00",
                    "text": "I\u2019m throwing in a Mandelbrot implementation in modern Fortran:\n! mandelbrot.f90\nprogram main\n    implicit none\n    integer, parameter :: NCOLS = 80, NROWS = 40, MAX_ITER = 10\n    real,    parameter :: THRESHOLD = 2.0\n\n    character(len=1) :: buffer(NCOLS, NROWS)\n    integer          :: x, y\n    real             :: re, im\n    real             :: t1, t2\n\n    buffer(:, :) = ' '\n\n    call cpu_time(t1)\n\n    do concurrent (y = 1:NROWS)\n        im = -1.5 + (y - 1) * 3.0 / NROWS\n\n        do concurrent (x = 1:NCOLS)\n            re = -2.0 + (x - 1) * 3.0 / NCOLS\n\n            if (mandelbrot(cmplx(re, im), MAX_ITER, THRESHOLD) >= MAX_ITER) &\n                buffer(x, y) = '*'\n        end do\n    end do\n\n    do y = 1, NROWS\n        print '(*(a1))', buffer(:, y)\n    end do\n\n    call cpu_time(t2)\n    print '(\"Time: \", f8.6, \" sec\")', t2 - t1\ncontains\n    pure integer function mandelbrot(c, max_iter, threshold)\n        complex, intent(in) :: c\n        integer, intent(in) :: max_iter\n        real,    intent(in) :: threshold\n        complex             :: z\n\n        z = (0.0, 0.0)\n\n        do mandelbrot = 0, max_iter\n            z = z**2 + c\n            if (abs(z) > threshold) exit\n        end do\n    end function mandelbrot\nend program main\nShould work with all compilers and on all platforms, for example:\n$ gfortran -o mandelbrot mandelbrot.f90\n$ ./mandelbrot\n                                                                                \n                                                                                \n                                                                                \n                                                 *                              \n                                                  ***                           \n                                                 ***                            \n                                              *********                         \n                                              ********                          \n                                     * *   ************  *     *                \n                                      ********************* *****               \n                                      **************************                \n                                   ****************************                 \n                    *     *        *******************************              \n                     *********    *******************************               \n                     *********************************************              \n                *   *********************************************               \n                 ***********************************************                \n**************************************************************                  \n                 ***********************************************                \n                *   *********************************************               \n                     *********************************************              \n                     *********    *******************************               \n                    *     *        *******************************              \n                                   ****************************                 \n                                      **************************                \n                                      ********************* *****               \n                                     * *   ************  *     *                \n                                              ********                          \n                                              *********                         \n                                                 ***                            \n                                                  ***                           \n                                                 *                              \n                                                                                \n                                                                                \n                                                                                \n                                                                                \n                                                                                \nTime: 0.006165 sec\n\nEdit: Added @arjenmarkus\u2019s hints."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2021-02-15 16:37:04+00:00",
                    "text": "Nice, just picking a few nits:\n\nPerhaps you can use the unlimited format:\n\nwrite(*,'(*(a))') buffer(:,iy)\n\nAnd if you check for a number of iterations larger than 10, there is no\nneed for MAX_ITER to be largerthan that, is there?\n\nAlso, the arguments max_iter and threshold could be taken from the host.\n\nOp ma 15 feb. 2021 om 17:19 schreef Philipp <notifications@github.com>:\n\u2026\n I\u2019m throwing in a Mandelbrot implementation in modern Fortran:\n\n ! mandelbrot.f90\n program main\n\n     implicit none\n\n     integer, parameter :: NCOLS = 80, NROWS = 40, MAX_ITER = 100\n\n     real,    parameter :: THRESHOLD = 2.0\n\n\n\n     character(len=1) :: buffer(NCOLS, NROWS)\n\n     character(len=8) :: fmt\n\n     integer          :: x, y\n\n     real             :: re, im\n\n     real             :: t1, t2\n\n\n\n     buffer(:, :) = ' '\n\n\n\n     call cpu_time(t1)\n\n\n\n     do concurrent (y = 0:NROWS)\n\n         im = -1.5 + y * 3.0 / NROWS\n\n\n\n         do concurrent(x = 0:NCOLS)\n\n             re = -2.0 + x * 3.0 / NCOLS\n\n\n\n             if (mandelbrot(cmplx(re, im), MAX_ITER, THRESHOLD) > 10) &\n\n                 buffer(x + 1, y + 1) = '*'\n\n         end do\n\n     end do\n\n\n\n     write (fmt, '(a, i0, a)') '(', NCOLS, '(a1))'\n\n\n\n     do y = 1, NROWS\n\n         print fmt, buffer(:, y)\n\n     end do\n\n\n\n     call cpu_time(t2)\n\n     print '(\"Time: \", f8.6, \" sec\")', t2 - t1\n contains\n\n     pure integer function mandelbrot(c, max_iter, threshold)\n\n         complex, intent(in) :: c\n\n         integer, intent(in) :: max_iter\n\n         real,    intent(in) :: threshold\n\n         complex             :: z\n\n\n\n         z = (0.0, 0.0)\n\n\n\n         do mandelbrot = 0, max_iter\n\n             z = z**2 + c\n\n             if (abs(z) > threshold) exit\n\n         end do\n\n     end function mandelbrot\n end program main\n\n Should work with all compilers and on all platforms, for example:\n\n $ gfortran -o mandelbrot mandelbrot.f90\n\n $ ./mandelbrot\n\n\n\n\n\n\n\n                                                  *\n\n                                                   ***\n\n                                                  ***\n\n                                               *********\n\n                                               ********\n\n                                      * *   ************  *     *\n\n                                       ********************* *****\n\n                                       **************************\n\n                                    ****************************\n\n                     *     *        *******************************\n\n                      *********    *******************************\n\n                      *********************************************\n\n                 *   *********************************************\n\n                  ***********************************************\n\n **************************************************************\n\n                  ***********************************************\n\n                 *   *********************************************\n\n                      *********************************************\n\n                      *********    *******************************\n\n                     *     *        *******************************\n\n                                    ****************************\n\n                                       **************************\n\n                                       ********************* *****\n\n                                      * *   ************  *     *\n\n                                               ********\n\n                                               *********\n\n                                                  ***\n\n                                                   ***\n\n                                                  *\n\n\n\n\n\n\n\n\n\n\n\n Time: 0.006165 sec\n\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#174 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YR5XPXUCBMWZBCH4QS3S7FCP7ANCNFSM4UMBJH2Q>\n ."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-06-16 20:18:36+00:00",
                    "text": "I tried to come up with a shorter version of Philipp's mandelbrot implementation (33 lines, 30 LOC):\n! mandelbrot.f90\nprogram main\n  implicit none\n  integer, parameter :: NCOLS = 80, NROWS = 40, MAX_ITER = 10\n  real,    parameter :: THRESHOLD = 1.7\n  character :: buffer(NCOLS, NROWS)\n  integer   :: x, y, it\n  real      :: re, im, t1, t2\n\n  call cpu_time(t1)\n  do concurrent (y = 1:NROWS, x = 1:NCOLS)\n    im = -1.5 + (y - 1) * 3.0 / NROWS\n    re = -2.0 + (x - 1) * 3.0 / NCOLS\n    it = mandelbrot(cmplx(re, im), MAX_ITER, THRESHOLD)\n    buffer(x, y) = merge('*', ' ', it >= MAX_ITER)\n  end do\n  call cpu_time(t2)\n  print '(*(a1))', [(buffer(:, y), new_line('a'), y = 1, NROWS)]\n  print '(\"Time: \", f8.6, \" sec\")', t2 - t1\ncontains\n  pure integer function mandelbrot(c, max_iter, threshold)\n    complex, intent(in) :: c\n    integer, intent(in) :: max_iter\n    real,    intent(in) :: threshold\n    complex             :: z\n\n    z = (0.0, 0.0)\n    do mandelbrot = 0, max_iter\n        z = z**2 + c\n        if (abs(z) > threshold) exit\n    end do\n  end function mandelbrot\nend program main\nI just checked it with Nvidia's, NAG's, Intel's and GCC's Fortran compiler, just to make sure we are not using anything that is prone to break with those. Also tried to reduce the line length (column 63) to make it nicely visible in small code containers.\nI think it is a nice example to start with as a code snippet."
                },
                {
                    "user": "vmagnin",
                    "date": "2021-06-16 20:52:30+00:00",
                    "text": "For computing Mandelbrot, abs(z) is not a good choice, it's faster to compute:\nif (real(z)**2 + aimag(z)**2 > threshold**2) exit\nOf course it does not matter here with the low resolution: with MAX_ITER = 100000, the time difference is really sensible, but brings nothing graphically here..."
                },
                {
                    "user": "certik",
                    "date": "2021-06-16 21:22:55+00:00",
                    "text": "Regarding abs(z) I want compilers to generate as fast code as real(z)**2 + aimag(z)**2, I can't see why they couldn't. I am aware that sometimes they don't, but I consider that a bug."
                },
                {
                    "user": "certik",
                    "date": "2021-06-16 21:38:31+00:00",
                    "text": "I think it's still too long for a front page. Here is a shorter version, closer to the Julia example:\nprogram main\n  implicit none\n  integer, parameter :: NCOLS = 80, NROWS = 40\n  character :: buffer(NCOLS, NROWS)\n  integer   :: x, y\n  real      :: re, im\n  do concurrent (y = 1:NROWS, x = 1:NCOLS)\n    im = -1.5 + (y - 1) * 3.0 / NROWS\n    re = -2.0 + (x - 1) * 3.0 / NCOLS\n    buffer(x, y) = merge('*', ' ', abs(mandelbrot(cmplx(re, im))) < 2)\n  end do\n  print '(*(a1))', [(buffer(:, y), new_line('a'), y = 1, NROWS)]\ncontains\n  pure complex function mandelbrot(a) result(z)\n    complex, intent(in) :: a\n    integer :: i\n    z = 0\n    do i = 1, 50\n      z = z**2 + a\n    end do\n  end function\nend program\nOurs is better, because it's in parallel."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-06-16 21:58:57+00:00",
                    "text": "Ours is better, because it's in parallel.\n\nParallel yes, but I'm not sure about the better\n\u276f nvfortran main.f90 -stdpar=multicore  && ./a.out\n/usr/bin/ld: warning: /opt/nvidia/Linux_x86_64/21.5/compilers/lib/nvhpc.ld contains output sections; did you forget -T?\n                                                                                \n     \n \n                                                                                \n        *\n*\n *                                                                              \n           \n \n                   *                             ****          *                \n         *  *     \n    \n                                       *** ***************                      \n                    \n   \n                                    ***************************                 \n                       \n                      **********   ******************************               \n                *        \n \n ************************************************************                   \n                           \n  \n                      *********    ******************************               \n               *               \n  \n                      *             **************************                  \n                 \n \n                                                *****                           \n                                               ******                           \n                                                 ****                           \n                                                                                \n                                                                                \n                                                                                \n                                                                                \n                                                                                \n                                                                                \n                                                                                \n\n\n\nIntel Fortran gets it right even in parallel. So no worries."
                },
                {
                    "user": "vmagnin",
                    "date": "2021-06-17 20:28:00+00:00",
                    "text": "Regarding abs(z) I want compilers to generate as fast code as real(z)**2 + aimag(z)**2, I can't see why they couldn't.\n\n@certik\nNo, don't forget that abs(z) = sqrt(real(z)**2 + aimag(z)**2)\nBy replacing abs() by real(z)**2 + aimag(z)**2, you are removing the useless computation of the square root, that's just why it's faster."
                },
                {
                    "user": "certik",
                    "date": "2021-06-17 20:38:48+00:00",
                    "text": "You are right, if forgot about that."
                },
                {
                    "user": "certik",
                    "date": "2021-06-19 21:46:28+00:00",
                    "text": "I still like the Laplace example the most. It's one of the simplest possible numerical methods. I agree the vectorized loop is not the simplest to read. But we can rewrite it in explicit loops, then it is clear that it is just the stencil. Here is the original:\nprogram laplace\nimplicit none\ninteger, parameter :: dp=kind(0.d0), N=100, Niter=80000\nreal(dp) :: u(N,N)\ninteger :: i\nu(1,:) = 1; u(2:,:) = 0\ndo i = 1, Niter\n    u(2:N-1,2:N-1) = ((u(3:,2:N-1) + u(:N-2,2:N-1)) + &\n        (u(2:N-1,3:) + u(2:N-1,:N-2))) / 4\nend do\nprint *, sum(u), sum(u**2)\nend program\nAnd here is the explicit stencil version:\nprogram laplace\nimplicit none\ninteger, parameter :: dp=kind(0.d0), N=100, Niter=80000\nreal(dp) :: u(N,N)\ninteger :: i, j, m\nu(1,:) = 1; u(2:,:) = 0\ndo m = 1, Niter\n    do j = 2, N-1\n    do i = 2, N-1\n        u(i,j) = (u(i+1,j) + u(i-1,j) + u(i,j+1) + u(i,j-1)) / 4\n    end do\n    end do\nend do\nprint *, sum(u), sum(u**2)\nend program\nThe first and second version produce the following numbers, respectively:\n   2500.9999999998840        1356.5191481174465     \n   2500.9999999998754        1356.5191481174404     \n\nFor smaller iteration numbers (Niter) they differ slightly because the first version updates the whole array at once, while the second version is reusing the new value in the next stencil, but as iterations progress, both versions converge towards the same result."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2021-06-21 07:49:47+00:00",
                    "text": "How about using j = 2,size(N,2)-1 and similar for i? Just to illustrate an\nIMO important aspect of Fortran: that you do not need to rely explicitly on\nthe declaration of arrays, but have (a limited form of) introspection.\n\nAlso: I prefer 4.0 over 4\n\nOne last remark: as this determines the stationary solution, it is not a\nparticular problem to use the new value of u(i,j), but it would be if you\nwere to extend it to a time-dependent diffusion problem.\n\nOp za 19 jun. 2021 om 23:46 schreef Ond\u0159ej \u010cert\u00edk ***@***.***\n\u2026\n:\n I still like the Laplace example the most. It's one of the simplest\n possible numerical methods. I agree the vectorized loop is not the simplest\n to read. But we can rewrite it in loops, then it is clear that it is just\n the stencil. Here is the original:\n\n program laplaceimplicit noneinteger, parameter :: dp=kind(0.d0), N=100, Niter=80000real(dp) :: u(N,N)integer :: i\n u(1,:) = 1; u(2:,:) = 0do i = 1, Niter\n     u(2:N-1,2:N-1) = ((u(3:,2:N-1) + u(:N-2,2:N-1)) + &\n         (u(2:N-1,3:) + u(2:N-1,:N-2))) / 4end doprint *, sum(u), sum(u**2)end program\n\n And here is the explicit stencil version:\n\n program laplaceimplicit noneinteger, parameter :: dp=kind(0.d0), N=100, Niter=80000real(dp) :: u(N,N)integer :: i, j, m\n u(1,:) = 1; u(2:,:) = 0do m = 1, Niter\n     do j = 2, N-1\n     do i = 2, N-1\n         u(i,j) = (u(i+1,j) + u(i-1,j) + u(i,j+1) + u(i,j-1)) / 4\n     end do\n     end doend doprint *, sum(u), sum(u**2)end program\n\n The first and second version produce the following numbers, respectively:\n\n    2500.9999999998840        1356.5191481174465\n    2500.9999999998754        1356.5191481174404\n\n For smaller iteration numbers they differ slightly because the first\n version updates the whole array at once, while the second version is\n reusing the new value in the next stencil, but as iterations progress, both\n versions converge towards the same result.\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#174 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YR42IELQKEDJYSFJES3TTUF37ANCNFSM4UMBJH2Q>\n ."
                },
                {
                    "user": "certik",
                    "date": "2021-06-21 11:42:55+00:00",
                    "text": "Btw, using 4.0 would give wrong answers, you want to use 4.0_dp. I prefer 4, because it is shorter, but I am fine with either.\nYes, we can do do i = 2, size(u)-1, although it's longer, so for cases like this, I usually prefer to use the variable N as it is shorter.\nBoth of these points are minor (from my perspective), so I am fine either way.\nGood point about time-dependent diffusion problem."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2021-06-21 11:49:26+00:00",
                    "text": "Re 4: yes, that is true, it should be 4.0_dp. I prefer to be explicit about\nthe \"real\" character, so that 4/3 * pi * radius**3 or the like does not\ngive surprising results.\n\nRe size: I prefer the longer version, because then I do not have to look up\nwhat the dimensions were - and to avoid misreading them ;).\n\nBut I can live with the short version too. Picking nits is a wonderful\npastime, but it is also nice to actually produce things.\n\nOp ma 21 jun. 2021 om 13:43 schreef Ond\u0159ej \u010cert\u00edk ***@***.***\n\u2026\n:\n Btw, using 4.0 would give wrong answers, you want to use 4.0_dp. I prefer\n 4, because it is shorter, but I am fine with either.\n\n Yes, we can do do i = 2, size(u)-1, although it's longer, so for cases\n like this, I usually prefer to use the variable N as it is shorter.\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#174 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YR6PRHZF7GBV5DYWKH3TT4QU5ANCNFSM4UMBJH2Q>\n ."
                },
                {
                    "user": "jacobwilliams",
                    "date": "2021-09-05 14:31:43+00:00",
                    "text": "I really like the https://www.python.org one, where they have a 5 very short examples.\nTheir \"launch interactive shell\" is also amazing.... maybe one day with LFortran we could have that too!"
                },
                {
                    "user": "ivan-pi",
                    "date": "2021-12-25 13:55:01+00:00",
                    "text": "The Taichi GitHub landing page also features a Mandelbrot example (both parallelized and executed on GPU). Taichi is a domain-specific language for high-performance parallel computing based on Python syntax."
                },
                {
                    "user": "bhaskar0120",
                    "date": "2022-01-18 14:48:53+00:00",
                    "text": "I really like the idea of an interactive shell on the website like @jacobwilliams suggested. But if that is a bit far fetched for now, I feel that a carousel animation of small code snippets (Like simple loops and conditions) would give the user a feel of what the language is syntactically."
                },
                {
                    "user": "hojdan",
                    "date": "2022-02-09 15:45:45+00:00",
                    "text": "Personally I like Python's approach the best. Haskell also has a sound approach in that they do not even need to write entire programs.\nInstead of a single program showcasing the capabilities of Fortran, perhaps several simpler programs each showcasing just a few features of the language would be better. It would not be as intimidating and I feel it would be better understood by newcomers. Also so that we don't need to keep seeing implicit none it does not need to be a full program."
                }
            ]
        },
        {
            "number": 173,
            "user": "awvwgk",
            "date": "2020-12-03 09:31:08+00:00",
            "title": "Update package index (add octopus)",
            "text": "add octopus (https://gitlab.com/octopus-code/octopus)\nremove version tag from atomsk\nadd version tag to libnegf",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-12-06 15:50:16+00:00",
                    "text": "Thank you!"
                }
            ]
        },
        {
            "number": 172,
            "user": "milancurcic",
            "date": "2020-12-01 01:41:36+00:00",
            "title": "December 2020 newsletter draft",
            "text": "Sorry for the late start on this.\nI populated the PR updates for each project. Please review and edit if needed. I will specifically need help from:\n\n@gklimowicz (Classic and LLVM Flang updates)\n@certik (LFortran updates)\n@LKedward (contributors data update)\n\nAs usual, please add your name to the authors list if you add, edit, or review content.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-12-02 18:10:16+00:00",
                    "text": "@certik @gklimowicz do you think you can provide compiler updates by the end of the week? Sorry again for the late notice."
                },
                {
                    "user": "gklimowicz",
                    "date": "2020-12-02 18:17:55+00:00",
                    "text": "Yes, but the probability increases as we approach Friday."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-12-04 19:13:18+00:00",
                    "text": "I'll merge the PR on Monday, 12/07, any additions are welcome until then."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-12-07 15:23:12+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "LKedward",
                    "date": "2020-12-07 15:29:35+00:00",
                    "text": "Apologies, it looks like the build preview action is broken due to a previous deprecation in github actions."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-12-07 15:31:02+00:00",
                    "text": "Thank you all! I will go ahead and merge.\nThe build preview CI failed because set-env is not allowed anymore. I will open a separate issue for that, but for now I will just go ahead with this as the newsletter seems fine from looking at the md file."
                }
            ]
        },
        {
            "number": 171,
            "user": "milancurcic",
            "date": "2020-12-01 00:54:57+00:00",
            "title": "Add Sebastian to the list of authors in the building-programs mini-book",
            "text": "I have merged #156 but only later realized that we didn't add @awvwgk to the list of authors. I did so in this PR. @awvwgk are you okay with this?",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 170,
            "user": "ivan-pi",
            "date": "2020-11-17 16:45:11+00:00",
            "title": "Fix PSBLAS github address mistake",
            "text": "Fixes the typo I made.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "ivan-pi",
                    "date": "2020-11-17 16:47:19+00:00",
                    "text": "Since @certik and @LKedward already reviewed the package is suitable and this is only a tiny correction, I will go ahead and merge."
                }
            ]
        },
        {
            "number": 169,
            "user": "ivan-pi",
            "date": "2020-11-17 16:17:58+00:00",
            "title": "Add PSBLAS to package index",
            "text": "Adds https://github.com/sfilippone/psblas3\nThis is an established library for sparse matrix linear algebra operations. It is described in several publications.\nPerhaps it will be necessary to update the license manually.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "ivan-pi",
                    "date": "2020-11-17 16:39:07+00:00",
                    "text": "Ooops, I mistyped the github name.\nIt should read \"sfilippone/psblas3\"."
                }
            ]
        },
        {
            "number": 168,
            "user": "milancurcic",
            "date": "2020-11-06 15:35:30+00:00",
            "title": "Newsletter on the October 2020 J3 meeting",
            "text": "There is a thread with a summary from the meeting here.\nLike we did with the February meeting newsletter, it would be useful to make and distribute a post about the progress made in the October meeting.\nIt looks like the GitHub issue thread could be largely adapted into a post. However, it would be helpful and nice to also have a brief discussion on the progress and future outlook, i.e. how did this meeting steer the course toward F202X.\nThe motivation for this is to leverage the fortran-lang reach and audience and promote the Committee's work.\nWhat do you think? @certik @zjibben @sblionel @longb @rouson @gklimowicz @everythingfunctional @FortranFan @tclune @mleair",
            "is_open": true,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-11-06 16:54:42+00:00",
                    "text": "I obviously agree, that is what I have been pushing all along and why Zach and I took our time to write things up.\n\nHowever, I would appreciate more help from the WG5 and J3 leadership. In my opinion it should be the leadership driving this effort (especially the part about future outlook and how the meeting steers towards F202X), and I can of course help, but it shouldn't be me driving this, as I am not in the committee leadership."
                },
                {
                    "user": "sblionel",
                    "date": "2020-11-06 19:33:48+00:00",
                    "text": "I'll be glad to do a writeup - probably for my blog as that's where I've written about standards progress before. Let me review the summary thread for ideas."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-11-06 22:40:43+00:00",
                    "text": "Thank you @sblionel. Would you agree to co-author your write-up with @certik and @zjibben who already wrote a useful summary, and cross-post the article on both fortran-lang.org and your website?\nI understand if you prefer to write your own thing for your website. In that case, we (others) should still publish one on fortran-lang.org. I think what @certik and @zjibben wrote is a great start. I could help summarize the discussion that followed in that thread."
                },
                {
                    "user": "FortranFan",
                    "date": "2020-11-07 12:49:17+00:00",
                    "text": "@milancurcic wrote Nov. 6, 2020, 10:35 AM EST:\n\nThere is a thread with a summary from the meeting here.\nLike we did with the February meeting newsletter, it would be useful to make and distribute a post about the progress made in the October meeting.\nIt looks like the GitHub issue thread could be largely adapted into a post. However, it would be helpful and nice to also have a brief discussion on the progress and future outlook, i.e. how did this meeting steer the course toward F202X.\nThe motivation for this is to leverage the fortran-lang reach and audience and promote the Committee's work.\nWhat do you think? @certik @zjibben @sblionel @longb @rouson @gklimowicz @everythingfunctional @FortranFan @tclune @mleair\n\nAs you all will know, J3 also puts out the meeting minutes which may be useful to reference in the newsletter: https://j3-fortran.org/doc/year/20/minutes222.txt\nGreat job on the newsletter."
                },
                {
                    "user": "sblionel",
                    "date": "2020-11-08 15:54:48+00:00",
                    "text": "@milancurcic , I think the idea of separate posts would work better. I can write mine from the WG5 perspective, and others can write one from the user perspective. We should cross-link the posts."
                }
            ]
        },
        {
            "number": 167,
            "user": "milancurcic",
            "date": "2020-11-03 23:47:15+00:00",
            "title": "Revert \"Test Twitter, try 2\"",
            "text": "Reverts #166",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 166,
            "user": "milancurcic",
            "date": "2020-11-03 23:41:13+00:00",
            "title": "Test Twitter, try 2",
            "text": "This time I removed the secrets from the Org and added them to the repo.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-11-03 23:41:36+00:00",
                    "text": "#tweet This is a test tweet."
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-11-03 23:41:50+00:00",
                    "text": "[tweet] the following message will be tweeted in @fortranlang after this PR is merged (character count: 21/280):\n\nThis is a test tweet."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-11-03 23:45:49+00:00",
                    "text": "@p-costa Same error persists. I will let you figure it out. I will give you permissions to the repo so you can set up the keys. Unfortunately, Twitter doesn't allow team management of the developer account (to get the secrets), but only for reading and posting tweets. I will contact you by email about getting access to the Twitter account."
                }
            ]
        },
        {
            "number": 165,
            "user": "milancurcic",
            "date": "2020-11-03 21:59:33+00:00",
            "title": "Revert \"Test Twitter CI\"",
            "text": "Reverts #164",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 164,
            "user": "milancurcic",
            "date": "2020-11-03 21:50:04+00:00",
            "title": "Test Twitter CI",
            "text": "",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-11-03 21:52:58+00:00",
                    "text": "#tweet This is a test tweet."
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-11-03 21:53:14+00:00",
                    "text": "[tweet] the following message will be tweeted in @fortranlang after this PR is merged (character count: 21/280):\n\nThis is a test tweet."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-11-03 22:06:10+00:00",
                    "text": "@p-costa I double-checked the names of the secrets (look okay to me), and I updated their values. I also double-checked that we have r+w access for the app in the Twitter account. We still get the same error.\nThis confuses me though:\n\nWhat is consumer-key? Is that a different name for one of the secrets or something different?\nDo you see if these are incorrect in any way?\n\nAnd here are the permissions.\n\nWhat do you think?"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-11-03 22:08:27+00:00",
                    "text": "I just looked in ethomson/send-tweet-action. Here's the snippet from their README:\nname: Send a Tweet\non: [push]\njobs:\n  tweet:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: ethomson/send-tweet-action@v1\n        with:\n          status: \"Hi, this is a test!\"\n          consumer-key: ${{ secrets.TWITTER_CONSUMER_API_KEY }}\n          consumer-secret: ${{ secrets.TWITTER_CONSUMER_API_SECRET }}\n          access-token: ${{ secrets.TWITTER_ACCESS_TOKEN }}\n          access-token-secret: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}\n\nNote the secrets names here. They are different from what twitter-together instructs.\nShould we rename TWITTER_API_KEY to TWITTER_CONSUMER_API_KEY and TWITTER_API_SECRET to TWITTER_CONSUMER_API_SECRET?"
                },
                {
                    "user": "p-costa",
                    "date": "2020-11-03 22:31:57+00:00",
                    "text": "Hi Milan,\nIt is no problem that they are different as long as the names in our CI are consistent with those in the github settings:\n        status: ${{steps.extract-tweet.outputs.body}}\n        consumer-key: ${{secrets.TWITTER_API_KEY}}\n        consumer-secret: ${{secrets.TWITTER_API_SECRET_KEY}}\n        access-token: ${{secrets.TWITTER_ACCESS_TOKEN}}\n        access-token-secret: ${{secrets.TWITTER_ACCESS_TOKEN_SECRET}}\n\nI tested it on my own twitter account. (what matters is they are passed correctly to send-tweet-action). So it all looks good to me... Can it be that the keys are swapped? I can dig further into this sometime tomorrow."
                },
                {
                    "user": "p-costa",
                    "date": "2020-11-03 22:35:54+00:00",
                    "text": "Perhaps trying the classical solution removing those secrets and adding them again? It seems that the secrets are not passing correctly to the CI. We get an error from the first secret the CI tries to fetch from the repo. (also generating new keys on the twitter app)"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-11-03 23:33:30+00:00",
                    "text": "It's possible that the keys are incorrect but I find it unlikely considering I did it twice. The error message \"consumer-key is required input\" just doesn't make it sound like the key is incorrect, but missing altogether.  It's possible that the org secrets are not correctly propagated to the repo secrets, even though they say they are. I will try this next."
                }
            ]
        },
        {
            "number": 163,
            "user": "milancurcic",
            "date": "2020-10-31 15:49:01+00:00",
            "title": "November newsletter",
            "text": "I populated the website updates summary.\nHere's what remains:\n\n stdlib updates; @jvdp1 can you tackle this one?\n fpm updates; @awvwgk or @everythingfunctional can you tackle this one?\n update URL of the monthly call video @ivan-pi\n flang updates @gklimowicz\n LFortran updates @certik\n Contributors data @LKedward\n\nAs usual, add your name to the authors list if you add, edit, or review content.\nConsidering that I started this draft very last minute and also that it's the weekend, don't worry about having it ready for November 1, just do it at your convenience.\nThank you all!",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "jvdp1",
                    "date": "2020-10-31 16:10:12+00:00",
                    "text": "I will look at it this evening.\n\nLe sam. 31 oct. 2020 \u00e0 16:49, Milan Curcic <notifications@github.com> a\n\u00e9crit :\n\u2026\n Assigned #163 <#163>\n to @jvdp1 <https://github.com/jvdp1>.\n\n \u2014\n You are receiving this because you were assigned.\n Reply to this email directly, view it on GitHub\n <#163 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AD5RO7AM2SLFRJPCOKZOL4LSNQWXVANCNFSM4TF6U6WQ>\n ."
                },
                {
                    "user": "certik",
                    "date": "2020-11-02 19:33:16+00:00",
                    "text": "I am working on the LFortran part, should have it ready later in the afternoon."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-11-03 14:40:04+00:00",
                    "text": "Thank you all, I think it's in great shape.\n@LKedward and @p-costa: Do you want to give it a shot with the Tweet? Here's an example for reference: https://twitter.com/fortranlang/status/1312119558543609856"
                },
                {
                    "user": "p-costa",
                    "date": "2020-11-03 14:43:28+00:00",
                    "text": "#tweet Fortran monthly newsletter, November 2020 edition:\nhttps://fortran-lang.org/newsletter/2020/11/01/Fortran-Newsletter-November-2020"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-11-03 14:43:44+00:00",
                    "text": "[tweet withdrawn]"
                },
                {
                    "user": "p-costa",
                    "date": "2020-11-03 14:44:38+00:00",
                    "text": "#tweet Fortran monthly newsletter, November 2020 edition: https://fortran-lang.org/newsletter/2020/11/01/Fortran-Newsletter-November-2020"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-11-03 14:44:54+00:00",
                    "text": "[tweet] the following message will be tweeted in @fortranlang after this PR is merged (character count: 130/280):\n\nFortran monthly newsletter, November 2020 edition: https://fortran-lang.org/newsletter/2020/11/01/Fortran-Newsletter-November-2020"
                },
                {
                    "user": "p-costa",
                    "date": "2020-11-03 14:46:51+00:00",
                    "text": "(character count is overestimated because of the link)"
                },
                {
                    "user": "certik",
                    "date": "2020-11-03 15:36:55+00:00",
                    "text": "Looks great!\n\u2026\nOn Tue, Nov 3, 2020, at 7:47 AM, Pedro Costa wrote:\n\n\n (character count is overestimated because of the link)\n\n \u2014\n You are receiving this because you were assigned.\n Reply to this email directly, view it on GitHub\n <#163 (comment)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAAFAWEXVCRNJ7AXG3BANW3SOAJWXANCNFSM4TF6U6WQ>."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-11-03 15:53:48+00:00",
                    "text": "It looks like the Tweet CI failed. I'll be able to look into it later today."
                },
                {
                    "user": "p-costa",
                    "date": "2020-11-03 16:02:42+00:00",
                    "text": "it looks like an issue with the configuration of the access tokens.\nsome possible causes based on my previous tests when developing could be\n\na mismatch in the name of the keys under the repo secrets, which should match the following names:\n\nTWITTER_API_KEY\nTWITTER_API_SECRET_KEY\nTWITTER_ACCESS_TOKEN\nTWITTER_ACCESS_TOKEN_SECRET\n\n\nlack of writing privileges in the twitter app\nof course, some mismatch in the keys when they were copied into the repo"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-11-03 18:21:37+00:00",
                    "text": "I will double-check, update if needed, and open a test PR just for the tweet."
                }
            ]
        },
        {
            "number": 162,
            "user": "ivan-pi",
            "date": "2020-10-31 12:46:44+00:00",
            "title": "November 2020 Newsletter",
            "text": "Has anyone started to work on this already?\nThe monthly call recording should be ready soon.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-10-31 13:46:39+00:00",
                    "text": "I haven't, though I planned it for this afternoon. Do you mind listing the PRs for one of the sections (website, stdlib, or fpm) and I can do the rest?"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-10-31 15:24:46+00:00",
                    "text": "I'm putting together a website PR summary now."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-11-06 15:23:55+00:00",
                    "text": "Fixed by #163."
                }
            ]
        },
        {
            "number": 161,
            "user": "certik",
            "date": "2020-10-27 19:20:27+00:00",
            "title": "Add a section about autodiff",
            "text": "It was discussed at the October 2020 Fortran call to add a section to our website about autodiff, similar to https://www.juliadiff.org/, that would list all the libraries and tools for automatic differentiation and we would keep it up to date as we develop such tools more.",
            "is_open": true,
            "labels": [
                "packages"
            ],
            "comments": [
                {
                    "user": "sgeard",
                    "date": "2020-10-27 22:16:48+00:00",
                    "text": "In the recent lockdown I decided to re-implement some code I wrote about 20 years ago to make it more extensible to higher derivatives. Currently it supports up to and including 4th:\nmy autodiff\nIt uses operator overloading, function pointers and type inheritance (order n extends order n-1). Built and tested with gfortran 10.1.0"
                }
            ]
        },
        {
            "number": 160,
            "user": "awvwgk",
            "date": "2020-10-27 15:28:48+00:00",
            "title": "Add in-depth introduction for Fortran with make",
            "text": "I just gave make and Fortran another try and realized again why I dropped it from all my project in the first place. Nevertheless, the attempt of writing this up might still be helpful for somebody learning make.\nThe idea of the guide is the following, take a real world example from the Fortran package index with medium complexity (more than one source file, but not a huge project), which is not using make as build system and describe the process of porting it to make as insightful as possible.\nThis guide describes:\n\ncreating simple functions\ncreating maps in make\nforeach loops over lists\nusing eval to generate make expressions from lists\nhandling of dependencies\npartly generating the Makefile with external tools\nwildcard functionality to detect source files\n\nLet me know what you think about this.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "arjenmarkus",
                    "date": "2020-10-27 15:45:33+00:00",
                    "text": "What is the level of sophistication you intend to reach? I have seen incredibly complicated Makefiles (mostly generated via tools like automake) that are not intended to be read or understood by mere mortals, but I have never encountered functions, maps, loops over lists or eval, at least not in Makefiles that were intended for mere mortals.\nAnd I do not think it is necessary to make it so sophisticated ;). But I may be mistaken. I would say that describing the last three points in depth would suffice for most if not all Fortran projects, but you can easily prove me wrong. After all, an essential tool like make has been described in preciously few books at any length, or I have missed most of them."
                },
                {
                    "user": "awvwgk",
                    "date": "2020-10-27 17:33:25+00:00",
                    "text": "The aim is to show a concise, scalable and still readable handwritten Makefile. The resulting Makefile will probably be sophisticated, but not complicated or bloated like an autogenerated Makefile. The part I wrote so far targets only the generation of dependencies in an automatic way, explaining the other features while showing use-cases for them."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-10-27 17:44:57+00:00",
                    "text": "I like this idea and think it will be useful. It will be useful for me for sure. I even own a book on GNU Make that I struggled learning anything useful from.\nIf the guide shows to be advanced, we can always give a heads-up note at the beginning of the guide, stating the intended level and who it's for."
                },
                {
                    "user": "certik",
                    "date": "2020-10-27 19:54:24+00:00",
                    "text": "Here is an example of a manual Makefile that we use in stdlib:\nhttps://github.com/fortran-lang/stdlib/blob/3733ae3624ec6852f9fe624d1f91fbd0423bdf01/src/Makefile.manual\nand it has module dependencies, and yet is seems simpler than the one proposed in this PR (no awk, no addsuffix, no patsubst, ...). Wouldn't it make sense to recommend the simpler approach that we did in stdlib?"
                },
                {
                    "user": "awvwgk",
                    "date": "2020-10-27 20:26:32+00:00",
                    "text": "There is certainly more than one style of make possible, the question is which we want to advertise.\nI find the substitution reference mechanism of make rather obscure, even if it avoids writing out patsubst or addsuffix functions explicitly. So technically the two Makefiles are setup quite similar, except for the stdlib Makefile is using recursively expanded variables while the guide is using normal variables instead."
                },
                {
                    "user": "certik",
                    "date": "2020-10-27 21:19:32+00:00",
                    "text": "I see. The approach that I like the most is fpm, and let fpm generate any other build system (if so desired), so even though I think I prefer the stdlib's style of makefile, I am fine with your approach to makefiles also. We can put your style in, and later if people have time, they can submit the other approach also."
                },
                {
                    "user": "awvwgk",
                    "date": "2020-10-28 09:18:38+00:00",
                    "text": "@certik The scope of this PR is to give an advanced introduction to make. It depends on the status of #156 and I'll adjust this PR to account for any review comments on make style there. I opened it as draft to see if there is any interest to have an advanced make guide in the minibooks at all and to discuss if the format I have chosen seems appropriate.\n\nThe approach that I like the most is fpm, and let fpm generate any other build system (if so desired)\n\nI agree that make would be my least favourite choice as build system for Fortran, since there are plenty other build systems like CMake, meson, fpm, ... which are easier to use. But I don't think that letting fpm generate a Makefile removes the need of an introduction to make. An fpm generated Makefile would be on the same level as an autotools or CMake generated one and not supposed to be read or modified by the user (at least in my opinion). Also, I would prefer to discuss fpm related features at the fpm repository instead."
                },
                {
                    "user": "awvwgk",
                    "date": "2020-12-18 17:09:29+00:00",
                    "text": "Let's give this PR another bump, since it has been stale for a while now.\nThis guide builds on the basic make introduction from #156, which is now part of the building programs book. It presents an intermediate to advanced overview over some powerful functionality and less known concepts of make. The idea is to show some interesting and unusual approaches how to actually use make to solve problems, going beyond the stuff you will usually find in a random Makefile.\nThe automation of the dependencies is one of the main issues faced when using make for Fortran projects, of course one can hard code them in the Makefile and avoid the topic, but this is in my opinion not a good answer on how to deal with module dependencies in make.\nIf this is not suited for the building programs book, I would suggest to start a new book on build systems and development tools as intermediate minibook instead."
                },
                {
                    "user": "certik",
                    "date": "2020-12-18 18:08:44+00:00",
                    "text": "I just talked with @awvwgk over video regarding this issue and I am fine with merging it as is. While we all work hard on fpm, it will still take some time before it can be used with larger production codes, and even when it can be used, not everybody will be using it for historical or other reasons. And thus having an authoritative source of \"best practices\" for Make and CMake with Fortran would always be helpful, even if they might not be the first approach we would recommend to beginners down the road.\nSo I am for merging this, and see what the response is, and if we get feedback, we can iterate on it.\n@milancurcic, are you ok to merge as is?"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-12-18 19:33:19+00:00",
                    "text": "I will review it over the weekend and will have minor edit suggestions. But overall I think it's a great addition. Thank you for putting it together!"
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-12-18 19:57:09+00:00",
                    "text": "I agree - it is a straightforward receipe for creating makefiles in a\ngeneric way. And it definitely contains features that I was unaware of.\n\nOp vr 18 dec. 2020 om 20:33 schreef Milan Curcic <notifications@github.com>:\n\u2026\n I will review it over the weekend and will have minor edit suggestions.\n But overall I think it's a great addition. Thank you for putting it\n together!\n\n \u2014\n You are receiving this because you commented.\n Reply to this email directly, view it on GitHub\n <#160 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YRZAWLMJFVTHUMA67ETSVOVA3ANCNFSM4TA7XQFQ>\n ."
                },
                {
                    "user": "awvwgk",
                    "date": "2020-12-18 20:48:40+00:00",
                    "text": "Might be a good occasion to check if the #build_preview is working again.\nEdit: Nope, it's still broken."
                },
                {
                    "user": "awvwgk",
                    "date": "2020-12-19 17:02:55+00:00",
                    "text": "The awk script is a weak spot, it only shortcoming is that it cannot deal with submodules, but otherwise it can handle most Fortran module and use statements, which are not using line breaks and/or whitespace hacks in fixed format. The difficulty is that you actually require a full Fortran parser to solve the dependency generation issue generally.\nHardcoding dependencies is a maintenance effort I found unacceptable for using make in Fortran projects, especially for projects I develop together with others. The only robust solution I found so far was over-engineering the Makefile generation or moving to another build system."
                },
                {
                    "user": "awvwgk",
                    "date": "2020-12-19 17:19:43+00:00",
                    "text": "I added some comments on how awk is processing the Fortran source to extract the information we are looking for."
                },
                {
                    "user": "ivan-pi",
                    "date": "2020-12-21 20:38:00+00:00",
                    "text": "If you have by chance the O'Reilly book Unix for FORTRAN Programmers written by Mike Loukides it contains a nicely written chapter on make.  Since the book was first published in 1990 the content is limited to F77, where make might have been sufficient to resolve all dependencies. If interested I can send you an excerpt from the book."
                },
                {
                    "user": "awvwgk",
                    "date": "2020-12-21 22:24:07+00:00",
                    "text": "@ivan-pi Thanks for the offer. My best source of knowledge on Unix tools was/is the built-in documentation so far. For example the info page of make is excellent (check info make or https://www.gnu.org/software/make/manual/make.html)."
                },
                {
                    "user": "awvwgk",
                    "date": "2020-12-30 20:24:39+00:00",
                    "text": "Thanks everybody for the comments and suggestions. With two approvals I'll go ahead and merge this PR."
                }
            ]
        },
        {
            "number": 159,
            "user": "LKedward",
            "date": "2020-10-26 09:06:11+00:00",
            "title": "Add: tapenade package",
            "text": "I was pleasantly surprised to see this previously closed-source commercially-licensed tool is now open source under MIT!\nIMO, this tool is the state of the art in automatic differentiation for Fortran. It has a long history and is hence quite robust.\nSee also the discussion on discourse.\n(It doesn't have gitlab stars because it's a self-hosted instance of gitlab I think.)",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "arjenmarkus",
                    "date": "2020-10-26 09:26:30+00:00",
                    "text": "Great, I have been attending a series of workshops on the topic recently, It has great potential."
                },
                {
                    "user": "ivan-pi",
                    "date": "2020-10-26 21:14:59+00:00",
                    "text": "Great, I have been attending a series of workshops on the topic recently, It has great potential.\n\nWere those the NAG workshops? Are there any publicly available materials also for non-participants?"
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-10-27 07:53:47+00:00",
                    "text": "Yes, the NAG workshops - I think the material is for participants only. but\nthe workshops themselves were free. You could contact them about it.\n\nRegards,\n\nArjen\n\nOp ma 26 okt. 2020 om 22:15 schreef Ivan <notifications@github.com>:\n\u2026\n Great, I have been attending a series of workshops on the topic recently,\n It has great potential.\n\n Were those the NAG workshops? Are there any publicly available materials\n also for non-participants?\n\n \u2014\n You are receiving this because you commented.\n Reply to this email directly, view it on GitHub\n <#159 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YR245DJZJLYFYKUHAE3SMXRGFANCNFSM4S7DARMQ>\n ."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-10-31 15:32:32+00:00",
                    "text": "This looks good, I will go ahead and merge. Thanks @LKedward!"
                }
            ]
        },
        {
            "number": 158,
            "user": "jvdp1",
            "date": "2020-10-24 18:30:53+00:00",
            "title": "add dnf install gcc-gfortran for Fedora 22+",
            "text": "Since Fedora 22, dnf is the default package manager (instead of yum).\nNote: the command yum is still availble, but is only an alias to dnf.",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 157,
            "user": "awvwgk",
            "date": "2020-10-24 12:57:04+00:00",
            "title": "Minibook(s) for commonly used build systems",
            "text": "I think there is a general interest in having a good Fortran specific introduction to commonly used build systems. The target audience has already intermediate or advance knowledge of Fortran, but maybe little to no knowledge of the respective build tools.\nI listed the ones I know about for quick reference:\n\nfpm (discussion: fortran-lang/fpm#302)\nmake (introduction: #156, dependencies: #160)\nCMake\nmeson\nautotools\nscons\nwaf\nFoBiS\nforay\n\nLet me know if there should be something added to this list.\nThe criteria to recommend a build system could be:\n\naccessibility (available platforms, setup prerequisites, open source)\nuser friendliness (learning curve, documentation in general, Fortran support)\nfunctionality (dependencies, cross compiling, speed)\nadaption in the community",
            "is_open": true,
            "labels": [
                "learn"
            ],
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2020-10-24 12:58:38+00:00",
                    "text": "@aradi would you be interested in contributing to a CMake introduction for Fortran?"
                },
                {
                    "user": "certik",
                    "date": "2020-10-24 15:06:00+00:00",
                    "text": "I think these are the main ones. We can add introduction how to get started with each of them.\n\u2026\nOn Sat, Oct 24, 2020, at 6:57 AM, Sebastian Ehlert wrote:\n\n\n I think there is a general interest in having a good Fortran specific\n introduction to commonly used build systems. The target audience has\n already intermediate or advance knowledge of Fortran, but maybe little\n to no knowledge of the respective build tools.\n\n I listed the ones I know about for quick reference:\n\n  * fpm <https://github.com/fortran-lang/fpm>\n  * make <https://www.gnu.org/software/make/manual/make.html>\n  * CMake <https://cmake.org/>\n  * meson <https://mesonbuild.com/>\n  * autotools\n <https://www.gnu.org/software/automake/manual/html_node/index.html#Top>\n  * scons <https://scons.org/>\n  * waf <https://waf.io/book>\n  * FoBiS <https://github.com/szaghi/FoBiS>\n  * foray <https://github.com/drewmccormack/foraytool>\n Let me know if there should be something added to this list.\n\n The criteria to recommend a build system could be:\n\n  * accessibility (available platforms, setup prerequisites, open source)\n  * user friendliness (learning curve, documentation in general, Fortran\n support)\n  * functionality (dependencies, cross compiling, speed)\n  * adaption in the community\n \u2014\n You are receiving this because you are subscribed to this thread.\n Reply to this email directly, view it on GitHub\n <#157>, or\n unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAAFAWG2XGFJQTV6TATLRVDSMLFKXANCNFSM4S5SID5Q>."
                },
                {
                    "user": "aradi",
                    "date": "2020-10-26 10:01:36+00:00",
                    "text": "@awvwgk Sure, I would be interested to contribute the CMake part."
                }
            ]
        },
        {
            "number": 156,
            "user": "awvwgk",
            "date": "2020-10-23 16:19:54+00:00",
            "title": "Update building programs book",
            "text": "I think the build-tools section of the building programs minibook is a bit short and the make example contains a few common gotchas, therefore I tried to update it.\nI also started some minimal introductions to meson and CMake to explain the concept of high-level build systems in comparison to make. Since it is an introductory book I didn't went to much into details on using those, as this might be something for an intermediate or advanced guide.\nChanges:\n\nreplace hyphens by endashs emdashs\nuse correct external link declaration\nrename the example source file to functions\ncorrect name of the generate module file set to user_functions\nextend the build-tools page with a detailed guide on make\n\nexplain concept of recursively defined variables which is commonly misused in make\n\n\nadd a short guide on meson\nadd a short guide on CMake",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-10-23 16:24:23+00:00",
                    "text": "Quite frankly, why don't we replace that section with fpm?\nThe document (I thought) is tailored for new users. New users either want to start a project from scratch (thus fpm I think will work already) or they wan to contribute to an already existing project, but then they have to follow whatever build system the existing project uses."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-10-23 16:42:54+00:00",
                    "text": "Quite frankly, why don't we replace that section with fpm?\n\nI agree that this is the way to go.\nAlthough it may not be quite adequate yet (two implementations, unstable spec and behavior, unimplemented functionality in the Fortran client), this would help adopt new fpm users. New Fortran users would go straight to fpm.\nI recommend that:\n\nWe review, edit, and merge this PR;\nWe work on the fpm guide;\nWe put the fpm guide first, and we keep the existing guide as \"Other build tools\" or similar. It's useful to keep it."
                },
                {
                    "user": "awvwgk",
                    "date": "2020-10-23 17:26:02+00:00",
                    "text": "There is some diversity in build tools available, I think they should be discussed at least briefly to give some guidance to a beginner. Also, there are only few projects offering help or useful insights for the build systems they are using. I was motivated to look into this guide after a friend asked me about a good read with some more depth on compiling, linking and building."
                },
                {
                    "user": "awvwgk",
                    "date": "2020-10-24 07:36:19+00:00",
                    "text": "An fpm guide wouldn't need any of the information in this particular minibook, writing a separate book on learning Fortran with fpm is the better call in my opinion."
                },
                {
                    "user": "awvwgk",
                    "date": "2020-10-24 08:39:32+00:00",
                    "text": "Question: How do you feel about inline HTML in the minibooks? I found we have a CSS class for tips in\n\n  \n    \n      fortran-lang.org/assets/css/main.css\n    \n    \n        Lines 463 to 468\n      in\n      5f95844\n    \n  \n  \n    \n\n        \n          \n           .aside-tip { \n        \n\n        \n          \n             border-left: 5px solid #3c92d1; \n        \n\n        \n          \n             font-size: 16px; \n        \n\n        \n          \n             padding-left: 10px; \n        \n\n        \n          \n             margin: 20px 0; \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nUsing this seems to require inline HTML instead of the blockquote:\ndiff --git a/learn/building_programs/build_tools.md b/learn/building_programs/build_tools.md\nindex 27d1a75..621ea2b 100644\n--- a/learn/building_programs/build_tools.md\n+++ b/learn/building_programs/build_tools.md\n@@ -60,12 +60,15 @@ It performs actions following rules defined in a configuration file\n called ``Makefile`` or ``makefile``, which usually leads to compiling a program\n from the provided source code.\n \n-> **Tip**\n->\n-> For an in-depth ``make`` tutorial lookup its info page. There is an online\n-> version of this\n-> <a href=\"https://www.gnu.org/software/make/manual/make.html\" target=\"_blank\" rel=\"noopener\">info page</a>,\n-> available.\n+<div class=\"aside-tip\">\n+  <b>Tip</b>\n+  <p>\n+    For an in-depth <code>make</code> tutorial lookup its info page. There is an online\n+    version of this\n+    <a href=\"https://www.gnu.org/software/make/manual/make.html\" target=\"_blank\" rel=\"noopener\">info page</a>,\n+    available.\n+  </p>\n+</div>\n \n We will start with the basics from your clean source directory. Create and open\n the file ``Makefile``, we start with a simple rule called *all*:\nEdit: There seems to be an include HTML as well, which requires this somewhat suboptimal construct with a liquid capture region:\n{% capture tip %}\nFor an in-depth ``make`` tutorial lookup its info page. There is an online\nversion of this\n<a href=\"https://www.gnu.org/software/make/manual/make.html\" target=\"_blank\" rel=\"noopener\">info page</a>,\navailable.\n{% endcapture %}\n{% include tip.html content=tip %}"
                },
                {
                    "user": "LKedward",
                    "date": "2020-10-24 09:08:11+00:00",
                    "text": "Edit: There seems to be an include HTML as well...\n\nYes please use the HTML includes for these asides.\n\n... somewhat suboptimal construct with a liquid capture region\n\nThe capture region isn't a necessesity (see Quickstart book) - if you can think of way to improve the syntax for simplicity please do!"
                },
                {
                    "user": "LKedward",
                    "date": "2020-10-24 09:10:02+00:00",
                    "text": "An fpm guide wouldn't need any of the information in this particular minibook, writing a separate book on learning Fortran with fpm is the better call in my opinion.\n\nI share this sentiment"
                },
                {
                    "user": "LKedward",
                    "date": "2020-10-24 09:21:56+00:00",
                    "text": "As someone who struggled to find adequate online material when learning make and other systems for Fortran (I still struggle with cmake), I think this is a good addition to this particular minibook. A separate minibook for fpm seems more appropriate - when ready this can then supplant this minibook as the recommended beginners' guide.\nEdit: I see that Milan has essentially proposed the same thing. I think it would be good to get more users to fpm with a good beginner's minibook here; there may need to be a warning regarding the maturity of fpm and it may be worth waiting for at least a first beta release milestone of the fortran implementation."
                },
                {
                    "user": "awvwgk",
                    "date": "2020-10-24 09:37:00+00:00",
                    "text": "@LKedward I won't get around a few capture statements, because some of the asides are several paragraphs with code blocks, but this should work for now. I'll have a look at the templates to figure out something nicer. Also, I noticed that the asides don't look as nice as the blockquotes, the spacing is somewhat off, maybe the CSS could use some adjustment as well."
                },
                {
                    "user": "awvwgk",
                    "date": "2020-10-24 12:00:22+00:00",
                    "text": "As someone who struggled to find adequate online material when learning make and other systems for Fortran (I still struggle with cmake), I think this is a good addition to this particular minibook.\n\nI added a few sections on common gotchas in make as well. If wanted I can also expand on some of the more useful make features, like vpath, string manipulation or recursive make."
                },
                {
                    "user": "ivan-pi",
                    "date": "2020-10-24 14:35:34+00:00",
                    "text": "As someone who struggled to find adequate online material when learning make and other systems for Fortran (I still struggle with cmake), I think this is a good addition to this particular minibook. A separate minibook for fpm seems more appropriate - when ready this can then supplant this minibook as the recommended beginners' guide.\n\nI second these thoughts. The available resources on Cmake and make targeted at Fortran are scarce. Most of the time I resorted to just adapting the makefiles from existing Fortran projects, not knowing what exactly are they doing. Having the minibooks in one place will hopefully make it easier for beginners to progress from small projects to intermediate and large projects where a build system is needed (at least until fpm is mature)."
                },
                {
                    "user": "certik",
                    "date": "2020-10-24 15:08:44+00:00",
                    "text": "Sounds good, I agree with the comments above.\n\u2026\nOn Sat, Oct 24, 2020, at 8:35 AM, Ivan wrote:\n\n\n > As someone who struggled to find adequate online material when learning `make` and other systems for Fortran (I still struggle with `cmake`), I think this is a good addition to this particular minibook. A separate minibook for fpm seems more appropriate - when ready this can then supplant this minibook as the recommended beginners' guide.\n\n I second these thoughts. The available resources on Cmake and make\n targeted at Fortran are scarce. Most of the time I resorted to just\n adapting the makefiles from existing Fortran projects, not knowing what\n exactly are they doing. Having the minibooks in one place will\n hopefully make it easier for beginners to progress from small projects\n to intermediate and large projects where a build system is needed (at\n least until fpm is mature).\n\n \u2014\n You are receiving this because you commented.\n Reply to this email directly, view it on GitHub\n <#156 (comment)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAAFAWEAH224H2ZKVI3F7OTSMLQ4DANCNFSM4S4YMOFA>."
                },
                {
                    "user": "awvwgk",
                    "date": "2020-11-22 09:56:13+00:00",
                    "text": "This PR has been stale for almost a month now. Is there still interest in this?"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-12-01 00:45:23+00:00",
                    "text": "With no objections, I'll go ahead and merge this."
                }
            ]
        },
        {
            "number": 155,
            "user": "p-costa",
            "date": "2020-10-17 00:38:10+00:00",
            "title": "fixed important issue thanks to @JarLob",
            "text": "",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-10-17 01:04:12+00:00",
                    "text": "Thank you!"
                }
            ]
        },
        {
            "number": 154,
            "user": "certik",
            "date": "2020-10-07 17:17:01+00:00",
            "title": "Add a link to fortran90.org",
            "text": "I plan to migrate information from there to fortran-lang.org, but until\nthis happens, it would be good to at least provide the link, so that\npeople who are new to Fortran can use the site to learn modern Fortran.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-10-07 18:06:25+00:00",
                    "text": "Thanks for the review!"
                }
            ]
        },
        {
            "number": 153,
            "user": "awvwgk",
            "date": "2020-10-06 08:03:40+00:00",
            "title": "Add electronic structure packages to index",
            "text": "Closes #151",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-10-06 16:20:19+00:00",
                    "text": "Looks great, thank you!"
                }
            ]
        },
        {
            "number": 152,
            "user": "smeskos",
            "date": "2020-10-06 00:02:31+00:00",
            "title": "New mini book:  OS setup for Fortran developement",
            "text": "Hi all, this PR is a follow-up to Issue #134.\nThe goal is to provide, in a beginners-friendly format, all the necessary steps to choose and install a compiler, as well as it includes information about text-editors and IDEs.\nIt is not complete and definitely needs \"attention\"... take it as a template to start building on it.\nThe part with the text-editors needs a few of you with experience with some of those editors to contribute with \"how to configure them\".\nI am aware that some parts are opinionated, but the topic itself is subjective by nature... choosing compilers, text-editors, or IDEs. Let's discuss them and find a common path.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "arjenmarkus",
                    "date": "2020-10-06 08:39:15+00:00",
                    "text": "Nice to see this - I will have a closer look at the text.\n\nOp di 6 okt. 2020 om 02:02 schreef smeskos <notifications@github.com>:\n\u2026\n Hi all, this PR is a follow-up to Issue #134\n <#134>.\n The goal is to provide, in a beginners-friendly format, all the necessary\n steps to choose and install a compiler, as well as it includes information\n about text-editors and IDEs.\n It is not complete and definitely needs \"attention\"... take it as a\n template to start building on it.\n The part with the text-editors needs a few of you with experience with\n some of those editors to contribute with \"how to configure them\".\n I am aware that some parts are opinionated, but the topic itself is\n subjective by nature... choosing compilers, text-editors, or IDEs. Let's\n discuss them and find a common path.\n ------------------------------\n You can view, comment on, or merge this pull request online at:\n\n   #152\n Commit Summary\n\n    - add new _site to master\n    - Revert \"add new _site to master\"\n    - test\n    - Revert \"test\"\n    - Merge remote-tracking branch 'upstream/master'\n    - Merge remote-tracking branch 'upstream/master'\n    - Merge remote-tracking branch 'upstream/master'\n    - Merge remote-tracking branch 'upstream/master'\n    - added main index page\n    - added second page: choosing compilers\n    - added third page: installing gfortran\n    - added fourth page: installing opencoarrays\n    - added fifth page: texteditors\n    - added sixth page: IDEs\n    - added final page: Tips\n    - added new minibook structure\n\n File Changes\n\n    - *M* _data/learning.yml\n    <https://github.com/fortran-lang/fortran-lang.org/pull/152/files#diff-793049ea95168d552f25dbf988e2b6f3>\n    (12)\n    - *A* learn/os_setup/choose_compiler.md\n    <https://github.com/fortran-lang/fortran-lang.org/pull/152/files#diff-3f295dde916c8c2704b83a487a362e44>\n    (18)\n    - *A* learn/os_setup/ides.md\n    <https://github.com/fortran-lang/fortran-lang.org/pull/152/files#diff-2681dbd91fd0b562e296b3b4441cf8ec>\n    (20)\n    - *A* learn/os_setup/index.md\n    <https://github.com/fortran-lang/fortran-lang.org/pull/152/files#diff-2da110db96cec689bc5276893e1f7924>\n    (27)\n    - *A* learn/os_setup/install_gfortran.md\n    <https://github.com/fortran-lang/fortran-lang.org/pull/152/files#diff-b3e6b9920d8f42caf950376c2e530f2e>\n    (85)\n    - *A* learn/os_setup/install_opencoarrays.md\n    <https://github.com/fortran-lang/fortran-lang.org/pull/152/files#diff-96fdd7a54c435d91e866957d4eac37c5>\n    (16)\n    - *A* learn/os_setup/text_editors.md\n    <https://github.com/fortran-lang/fortran-lang.org/pull/152/files#diff-88cbca544ed22b504a0f0bf812b14f34>\n    (54)\n    - *A* learn/os_setup/tips.md\n    <https://github.com/fortran-lang/fortran-lang.org/pull/152/files#diff-88f51d3e1e97db0cafb7b34ac5ba2ebd>\n    (13)\n\n Patch Links:\n\n    - https://github.com/fortran-lang/fortran-lang.org/pull/152.patch\n    - https://github.com/fortran-lang/fortran-lang.org/pull/152.diff\n\n \u2014\n You are receiving this because you are subscribed to this thread.\n Reply to this email directly, view it on GitHub\n <#152>, or\n unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YR4CW2UVBDYNB4YMFNTSJJNCHANCNFSM4SFKITAA>\n ."
                },
                {
                    "user": "smeskos",
                    "date": "2020-10-06 08:48:19+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-10-06 08:49:18+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/152/"
                },
                {
                    "user": "smeskos",
                    "date": "2020-10-06 09:08:05+00:00",
                    "text": "The link at the preview doesn't work. I am now sure why. I've built it locally and the site appears fine."
                },
                {
                    "user": "LKedward",
                    "date": "2020-10-06 14:10:00+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-10-06 14:11:10+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/152/"
                },
                {
                    "user": "smeskos",
                    "date": "2020-10-06 16:51:56+00:00",
                    "text": "@certik thank you for the review and your comments. I will try to address them one by one and discuss them. I would also like to repeat, that this is just a draft and it definitely needs improvements. Furthermore, I wrote about some topics even if I am not an expert, just because I believe, they should be addressed in this tutorial, with the expectation, that the more experienced developers in this community will help me correct them."
                },
                {
                    "user": "smeskos",
                    "date": "2020-10-19 07:21:08+00:00",
                    "text": "Thank you @milancurcic for this detailed review. Following your recommendation, I also added a link to a tutorial for update-alternatives."
                },
                {
                    "user": "smeskos",
                    "date": "2020-10-19 09:15:09+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-10-19 09:16:04+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/152/"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-10-20 16:22:19+00:00",
                    "text": "@arjenmarkus Do you need more time to review this or it's good to go?"
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-10-20 19:05:09+00:00",
                    "text": "Let me read it now - I have some time at the moment.\n\nOp di 20 okt. 2020 om 18:22 schreef Milan Curcic <notifications@github.com>:\n\u2026\n @arjenmarkus <https://github.com/arjenmarkus> Do you need more time to\n review this or it's good to go?\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#152 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YR5QBCYPTXIRCFQE3NDSLW2MZANCNFSM4SFKITAA>\n ."
                },
                {
                    "user": "certik",
                    "date": "2020-10-20 19:23:22+00:00",
                    "text": "I read through it, this is good enough to merge and we can improve it with future PRs. After @arjenmarkus approves, let's merge it.\nI think our tools should support all editors, but I think we should ensure that at least one editor works first class.\nI think we should pick an editor and provide tutorials with screenshots using it, and we should also write extensions to such an editor with fpm support, with formatting support, with Flang and LFortran support etc. Such an editor should work cross platform, and be in wide use. I think it should be VSCode. But as I said, we should write our tools in an editor independent way, but by ensuring that things just work in VSCode, we can simply direct new users to it, and make our lives simpler. And we can support other editors as we have time, but don't have to stress about it too much, since we have a nice default that will do the job for new users."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-10-20 19:35:11+00:00",
                    "text": "@smekos, I have just read the entire booklet in its present form. Nice work\n:), but I do have a comment: MinGW-w64 and MSYS2.\n\nFirst of all, under the threading Windows, MinGW-w64 is mentioned, but not\nits relation to MSYS2.\nSecondly. if you compile under MSYS2, then you get binaries that depend on\nthe MSYS2 environment, but if you use the MinGW-w64 environment, you can\nfreely distribute the programs. So, just the other way around.\nThirdly, the latest version, at https://github.com/msys2, gives you the GCC\ncompiler suite 10.2.\n\nRegards,\n\nArjen\n\nOp di 20 okt. 2020 om 21:04 schreef Arjen Markus <arjen.markus895@gmail.com\n\u2026\n:\n Let me read it now - I have some time at the moment.\n\n Op di 20 okt. 2020 om 18:22 schreef Milan Curcic ***@***.***\n >:\n\n> @arjenmarkus <https://github.com/arjenmarkus> Do you need more time to\n> review this or it's good to go?\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <#152 (comment)>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAN6YR5QBCYPTXIRCFQE3NDSLW2MZANCNFSM4SFKITAA>\n> .\n>"
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-10-20 19:37:01+00:00",
                    "text": "@Ond\u0159ej \u010cert\u00edk <ondrej@certik.us>, see my comments - the text is fine as it\nis, with just this inaccuracy/update for MinGW-w64/MSYS2. I particularly\nfocused on this, as it has confused me for years :).\n\nOp di 20 okt. 2020 om 21:23 schreef Ond\u0159ej \u010cert\u00edk <notifications@github.com\n\u2026\n:\n I read through it, this is good enough to merge and we can improve it with\n future PRs. After @arjenmarkus <https://github.com/arjenmarkus> approves,\n let's merge it.\n\n I think our tools should support all editors, but I think we should ensure\n that at least one editor works first class.\n I think we should pick an editor and provide tutorials with screenshots\n using it, and we should also write extensions to such an editor with fpm\n support, with formatting support, with Flang and LFortran support etc. Such\n an editor should work cross platform, and be in wide use. I think it should\n be VSCode. But as I said, we should write our tools in an editor\n independent way, but by ensuring that things just work in VSCode, we can\n simply direct new users to it, and make our lives simpler. And we can\n support other editors as we have time, but don't have to stress about it\n too much, since we have a nice default that will do the job for new users.\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#152 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YR4J5ZMQBHLRNR4U76DSLXPTTANCNFSM4SFKITAA>\n ."
                },
                {
                    "user": "LKedward",
                    "date": "2020-10-20 19:50:13+00:00",
                    "text": "Hi @arjenmarkus, the current text on MSYS2 and MinGW was written by myself. I will address your comments with an update. Can you be more specific about what you understand the relationship between MSYS2 and MinGW-w64 to be?\nMy understanding is that they are separate with MSYS2 providing one (of three) environments that is built atop MinGW-w64, hence why I have written that you can freely distribute programs. Yes, there is a 'native' MSYS2 environment that has it's own DLL dependency, however this environment is only recommended for developing tools for the MSYS2 ."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-10-20 19:50:23+00:00",
                    "text": "Okay, minor comments/suggestions added.\n\nOp di 20 okt. 2020 om 21:36 schreef Arjen Markus <arjen.markus895@gmail.com\n\u2026\n:\n @Ond\u0159ej \u010cert\u00edk ***@***.***>, see my comments - the text is fine as\n it is, with just this inaccuracy/update for MinGW-w64/MSYS2. I particularly\n focused on this, as it has confused me for years :).\n\n Op di 20 okt. 2020 om 21:23 schreef Ond\u0159ej \u010cert\u00edk <\n ***@***.***>:\n\n> I read through it, this is good enough to merge and we can improve it\n> with future PRs. After @arjenmarkus <https://github.com/arjenmarkus>\n> approves, let's merge it.\n>\n> I think our tools should support all editors, but I think we should\n> ensure that at least one editor works first class.\n> I think we should pick an editor and provide tutorials with screenshots\n> using it, and we should also write extensions to such an editor with fpm\n> support, with formatting support, with Flang and LFortran support etc. Such\n> an editor should work cross platform, and be in wide use. I think it should\n> be VSCode. But as I said, we should write our tools in an editor\n> independent way, but by ensuring that things just work in VSCode, we can\n> simply direct new users to it, and make our lives simpler. And we can\n> support other editors as we have time, but don't have to stress about it\n> too much, since we have a nice default that will do the job for new users.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <#152 (comment)>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAN6YR4J5ZMQBHLRNR4U76DSLXPTTANCNFSM4SFKITAA>\n> .\n>"
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-10-20 20:00:54+00:00",
                    "text": "Sure, I ran into this when I tried to understand the way MinGW-w64/MSYS2\nhandle Windows-style paths.\n\nIf you install MinGW-w64/MSYS2, you get a number of shells, each giving\naccess to their own versions of the various packages. To keep it simple, I\nwill describe what I understand regarding the GCC compiler suite:\nmingw64.exe: a program compiled with the GCC compilers understands the\nWindows-style path names, the home directory I get with \"echo $HOME\" is\n\"/home/markus\", but if I ask in a C program for the current directory if I\nam in my home directory, I get \"c:\\msys64-2020\\home\\markus\\\".\nI can copy the program to another machine or run it in a plain command\nwindow without any problem.\n\nmsys2.exe: if I do the same under this shell, I have a different version of\nthe compiler and the run-time libraries. The result of getcwd() would then\nbe Unixy - \"/home/markus\". And the program does not work outside the MSYS2\nenvironment, as it would miss a crucial DLL.\n\n\nOp di 20 okt. 2020 om 21:50 schreef Laurence Kedward <\nnotifications@github.com>:\n\u2026\n Hi @arjenmarkus <https://github.com/arjenmarkus>, the current text on\n MSYS2 and MinGW was written by myself. I will address your comments with an\n update. Can you be more specific about what you understand the relationship\n between MSYS2 and MinGW-w64 to be?\n My understanding is that they are separate with MSYS2 providing one (of\n three) environments that is built atop MinGW-w64, hence why I have written\n that you can freely distribute programs. Yes, there is a 'native' MSYS2\n environment that has it's own DLL dependency, however this environment is\n only recommended for developing tools for the MSYS2 .\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#152 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YRZ7S72BU2D6ERTU22DSLXSYJANCNFSM4SFKITAA>\n ."
                },
                {
                    "user": "LKedward",
                    "date": "2020-10-20 20:24:00+00:00",
                    "text": "Thanks @arjenmarkus, that essentially aligns with my understanding. However it should be clear that the MinGW-w64 toolchain is separate to MSYS2 and can be distributed independent of it.\nFurther, when you use the native MSYS2 shell, the compiler toolchain is not MinGW, but an MSYS2 native build of gcc.\nThe text I have written makes the assumption that the reader will use one of the MinGW shells in MSYS2 as opposed to the 'native' MSYS2 shell which should only be used for writing programs to distribute in MSYS2.\nTo be clear, the following compile environments are available:\n\nMinGW-w64: compiler toolchain only (no shell), links with Microsoft libs (native Windows), called from Windows shell\nMSYS2/mingw64: MinGW-w64 compiler toolchain provided as an MSYS2 package, links with Microsoft libs, called from MSYS2 shell\nMSYS2/mingw32: same as above with 32bit x-compile target\nMSYS2/MSYS2: GNU compiler collection compiled within the POSIX environment provided by MSYS2, links with msys-2.0.dll\n\nI will update the text tomorrow to make it simpler and clearer to a beginner."
                },
                {
                    "user": "smeskos",
                    "date": "2020-10-20 20:46:16+00:00",
                    "text": "@LKedward:\n\nI will update the text tomorrow to make it simpler and clearer to a beginner.\n\nPlease try to do that.\nI am also reading info from here msys2.org/wiki/History and trying to understand it as well.\nMy main concern is that every attempt to clarify all these options will lead to content outside of this tutorial's scope.\nHonestly, I'd rather remove the whole last paragraph and don't even mention about differences between MSYS2, Cygwin, and MinGW-w64."
                },
                {
                    "user": "certik",
                    "date": "2020-10-20 20:50:59+00:00",
                    "text": "Why don't we remove the paragraph, merge this PR, and then let's open another PR with just the mingw clarification and we can figure it out there?"
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-10-21 06:16:44+00:00",
                    "text": "I agree, unless we can come up with a concise and clear description. A\nclear description is of importance to the stdlib-os subproject as well and\ngiven the confusion we all have about it, it might even become a topic in a\nseparate minibook on popular OSes.\n\nOp di 20 okt. 2020 om 22:51 schreef Ond\u0159ej \u010cert\u00edk <notifications@github.com\n\u2026\n:\n Why don't we remove the paragraph, merge this PR, and then let's open\n another PR with just the mingw clarification and we can figure it out\n there?\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#152 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YR23TWPCRW2GFFSGKNLSLXZ4HANCNFSM4SFKITAA>\n ."
                },
                {
                    "user": "LKedward",
                    "date": "2020-10-21 08:14:23+00:00",
                    "text": "Thanks @smeskos - I agree, removing that paragraph is the clearest we can be for the scope of this tutorial."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-10-21 15:12:06+00:00",
                    "text": "This is now good to merge, correct?"
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-10-21 15:29:42+00:00",
                    "text": "As far as I am concerned, yes.\n\nOp wo 21 okt. 2020 om 17:12 schreef Milan Curcic <notifications@github.com>:\n\u2026\n This is now good to merge, correct?\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#152 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YR4XQ47CUDDQ5LQZUCTSL325RANCNFSM4SFKITAA>\n ."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-10-21 15:33:12+00:00",
                    "text": "Thank you all, and especially @smeskos who led the effort!"
                },
                {
                    "user": "certik",
                    "date": "2020-10-21 16:26:13+00:00",
                    "text": "Thanks everybody, I am glad this is in."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-02-13 10:01:39+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-02-13 10:02:06+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 151,
            "user": "awvwgk",
            "date": "2020-10-05 19:11:29+00:00",
            "title": "Electronic structure Fortran projects",
            "text": "Some other projects regarding electronic structure methods. Maybe a few of them are interesting as well, let me know and I will collect the necessary meta data.\n\n\n\nname\nurl\n\n\n\n\nDFT-D4\nhttps://github.com/dftd4/dftd4\n\n\nELPA\nhttps://gitlab.mpcdf.mpg.de/elpa/elpa\n\n\nELSI\nhttps://gitlab.com/elsi_project/elsi_interface\n\n\nFortJSON\nhttps://gitlab.com/elsi_project/fortjson\n\n\nlibnegf\nhttps://github.com/libnegf/libnegf\n\n\nNTPoly\nhttps://github.com/william-dawson/NTPoly\n\n\nMBD\nhttps://github.com/jhrmnn/libmbd\n\n\nmpifx\nhttps://github.com/dftbplus/mpifx\n\n\nOpenMolcas\nhttps://gitlab.com/Molcas/OpenMolcas\n\n\nscalapackfx\nhttps://github.com/dftbplus/scalapackfx",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-10-05 19:58:51+00:00",
                    "text": "@awvwgk I would suggest to add any that have Fortran as the main programming language."
                }
            ]
        },
        {
            "number": 150,
            "user": "awvwgk",
            "date": "2020-10-05 18:35:28+00:00",
            "title": "Add wannier90 to package index",
            "text": "This PR adds wannier90 to the package index, it provides interfaces to some of the already listed open source electronic structure packages (QE, Abinit, ...).\n\nhomepage: http://www.wannier.org/\nGH repository: https://github.com/wannier-developers/wannier90\ndocumentation: https://github.com/wannier-developers/wannier90/wiki\nGPL-2.0",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2020-10-05 18:51:23+00:00",
                    "text": "I think that was the last larger (open source) Fortran project I am aware of."
                },
                {
                    "user": "certik",
                    "date": "2020-10-05 18:58:21+00:00",
                    "text": "Thanks @awvwgk for including those. It was a lot of exploration to collect open source Fortran codes out there, but there is quite a few."
                }
            ]
        },
        {
            "number": 149,
            "user": "awvwgk",
            "date": "2020-10-05 18:01:56+00:00",
            "title": "Add xtb to package index",
            "text": "Disclaimer: this is a project I'm personally involved with.\nThis PR adds a xtb to the package index.\n\ndocumentation: https://xtb-docs.readthedocs.io/\nGH repository: https://github.com/grimme-lab/xtb\nbuilds with CMake and meson\nsupports GCC 7.5 to 10.2, Intel 17 to 20, PGI 19.7 to 20.7\nOpenMP and OpenACC parallelisation\nCI testing is done for Ubuntu and OSX (no Windows yet)\nLGPL-3.0-or-later",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 148,
            "user": "awvwgk",
            "date": "2020-10-05 17:46:38+00:00",
            "title": "Add NWChem to package index",
            "text": "This PR adds NWChem to the package index, see #68.\n\ndocumentation: https://nwchemgit.github.io/\nrepository: https://github.com/nwchemgit/nwchem",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 147,
            "user": "p-costa",
            "date": "2020-10-05 11:36:44+00:00",
            "title": "add CI for publishing on the fortran-lang twitter account upon merging a certain PR",
            "text": "Hello everyone!\nAs discussed in the fortran-lang discourse, this PR implements a CI that:\n\nGenerates tweets by commenting on a PR\nPublishes these tweets when the PR is merged\n\nPlease have a look, and feel free to test it by submitting a PR in this repo I created: p-costa/piu-piu-sandbox.\nIf you are happy with it, to get it to work, one needs to create a twitter app, following the steps similar to those indicated here: github.com/gr2m/twitter-together/blob/master/docs/01-create-twitter-app.md and add the corresponding keys and tokens to this repo.\nI should thank the author of find-comment for very promptly considering issues #23 and #24.\nThe tweets are published using send-tweet-action, as per @LKedward suggestion.\nIt works as follows:\nA comment in the PR starting with the keyword #tweet text will:\n\nremove a previous tweet, if it exists.\nadd a new tweet to be published by the CI once the PR is merged.\n\nA comment in the PR starting with the keyword #untweet will remove the tweet.\nThen, when the PR is merged, the CI will look for a specific keyword ([tweet]) published by the GitHub actions bot, and, if it exists in the PR comment thread, it will be deployed for publication in the fortran-lang twitter account.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2020-10-05 11:44:04+00:00",
                    "text": "Amazing, great work @p-costa! I'll have a look through this later today."
                },
                {
                    "user": "certik",
                    "date": "2020-10-05 13:03:24+00:00",
                    "text": "Great work. I tested it a bit.\nHere are my questions:\nhttps://github.com/p-costa/piu-piu-sandbox/pull/1#issuecomment-703616971"
                },
                {
                    "user": "p-costa",
                    "date": "2020-10-05 13:07:42+00:00",
                    "text": "Thanks for creating the PR and testing it @certik . I should have mentioned here as well that:\n#tweet text will:\n\nremove a previous tweet, if it exists.\nadd a new tweet to be published by the CI once the PR is merged.\n\n#untweet will remove the tweet."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-10-05 19:18:05+00:00",
                    "text": "Thanks, @p-costa! I have 2 questions:\n\nConsidering that #tweet text will remove a previous tweet if it exists, that means that there can be only one Tweet per PR, correct?\nWhat happens if text exceeds 280 characters? Do we get a thread of tweets or is the tweet truncated (or something else)?"
                },
                {
                    "user": "p-costa",
                    "date": "2020-10-05 19:40:48+00:00",
                    "text": "Hi @milancurcic ,\n\nCorrect. I assumed that one will not be tweeting too much from here, so 1 tweet per merged PR sounded reasonable.\nThe CI always prints a preview of the tweet showing the character count. So if it is exceeded one will see it and can fix it before merging.\n\nedit: I realize did not fully answer your question: if one merges with a tweet a message with > 280 characters anyway, the send-tweet-action will generate an error. So no threads/truncated tweet."
                },
                {
                    "user": "p-costa",
                    "date": "2020-10-05 23:29:44+00:00",
                    "text": "I converted this to draft so that I can polish the implementation tomorrow and make some final tests. Feel free to review it in any case, as it should not change much from my side."
                },
                {
                    "user": "p-costa",
                    "date": "2020-10-09 08:54:22+00:00",
                    "text": "Just want to comment here that it's ready. But no rush from my side -- I understand that this being a small convenience shouldn't be a high priority thing."
                },
                {
                    "user": "certik",
                    "date": "2020-10-09 14:18:28+00:00",
                    "text": "+1 with me also\n\u2026\nOn Fri, Oct 9, 2020, at 3:08 AM, Laurence Kedward wrote:\n\n\n ***@***.**** approved this pull request.\n\n Great stuff! I don't see any issues with the workflow which has already\n been tested and demonstrated. Clearly some work is still required to\n link to the twitter account.\n\n It looks like anyone can create and modify a tweet, but only\n maintainers can merge and publish the tweet so I think this workflow\n works well. Thanks @p-costa <https://github.com/p-costa> \ud83d\udc4d\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#147 (review)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAAFAWCPBVYHG75UIKRBAQLSJ3HJHANCNFSM4SESIBIA>."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-10-09 14:31:55+00:00",
                    "text": "It looks like the homework for me is to set up the app and keys:\n\nIf you are happy with it, to get it to work, one needs to create a twitter app, following the steps similar to those indicated here: github.com/gr2m/twitter-together/blob/master/docs/01-create-twitter-app.md and add the corresponding keys and tokens to this repo.\n\nI think I'll be able to do it today, if not, then over the weekend."
                },
                {
                    "user": "p-costa",
                    "date": "2020-10-09 14:47:54+00:00",
                    "text": "It looks like the homework for me is to set up the app and keys:\n\nLet me know if you run into problems. One thing that was not written in the instructions and I had to do was making sure that the app has read and write permissions:"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-10-09 15:58:22+00:00",
                    "text": "Okay, this is now done. I set the secrets in the Org and allowed them to be shared with this repo. This way we can easily reuse them in other repos when we want.\nShould this now be merged?"
                }
            ]
        },
        {
            "number": 146,
            "user": "awvwgk",
            "date": "2020-10-04 21:30:13+00:00",
            "title": "Correct license identifiers",
            "text": "license: none should be a no-go for the package index. The package index is of course no legal advice for licensing, but the information should be as accurate as possible. A package without license is unusable by definition (for open source projects), which is unfair to packages with permissive licensing conditions.\nFor a simple summary see: https://choosealicense.com/no-permission/\nI went through all the packages with license: none and tried to identify the licenses. I also tried to correct all licenses which are not valid SPDX license identifiers. Many missing licenses were malformatted BSD or MIT licenses, but some had actually interesting licensing condition like original MIT license with changes under BSD-3-Clause and so on.\nThere are still some issues with the GPL-2.0, and GPL-3.0, which should have the -only or -or-later suffix. (L)GPL-2 and (L)GPL-3 is usually insufficient to identify the license of a package clearly, since the minor version is missing.\nThis PR is open for discussion.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "awvwgk",
                    "date": "2020-10-05 06:26:43+00:00",
                    "text": "Many of @szaghi's projects have a GPL-3.0-only OR BSD-2-Clause OR BSD-3-Clause OR MIT license, which is quite lengthy for a badge (it doesn't state GPL-3.0-or-later for any package, I think). Not sure how to put those correctly without overflowing the rows."
                },
                {
                    "user": "LKedward",
                    "date": "2020-10-05 07:58:10+00:00",
                    "text": "Thanks @awvwgk, I agree with you however please note that license: none is a (misleading) programmatic identifier to disable rendering of the shields.io badge, it does not indicate anywhere on site that any software is license-free.\nOur package guidelines already state that only open source projects are accepted and they also require that the license field be specified if not detectable by github. I believe the large number of license: none entries may be, as you point out, that the licenses were non-standard formatting which meant I didn't know which identifier to use - at the time I opted to display no information rather than wrong information.\nThank you for tracking down this information.\nWe never made any promises regarding the use of SPDX identifiers, but I have no objection to adopting them now."
                },
                {
                    "user": "awvwgk",
                    "date": "2020-10-05 09:25:15+00:00",
                    "text": "I agree with you however please note that license: none is a (misleading) programmatic identifier to disable rendering of the shields.io badge, it does not indicate anywhere on site that any software is license-free.\n\nHow about license: off which should map to a boolean false in yaml, has a much clearer indent and can easily used within liquid. Or you can have a separate field as display-license: false to avoid mixing the meta data with programmatic identifiers."
                },
                {
                    "user": "LKedward",
                    "date": "2020-10-05 09:50:24+00:00",
                    "text": "Are there still packages currently in the index where we still need this capability? If so, a separate field seems like the best option. If not, the behaviour should simply be removed. It already isn't allowed in future PRs according to the current guidelines."
                },
                {
                    "user": "awvwgk",
                    "date": "2020-10-05 09:58:18+00:00",
                    "text": "This sounds way better than my suggestion \ud83d\udc4d."
                },
                {
                    "user": "certik",
                    "date": "2020-10-05 19:02:48+00:00",
                    "text": "Thanks for fixing this. Looks like there is no opposition, so I am going to merge it."
                }
            ]
        },
        {
            "number": 145,
            "user": "awvwgk",
            "date": "2020-10-04 20:07:49+00:00",
            "title": "Sort package index",
            "text": "Sorts the package index after the package names, this should make the package lists clearer.",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 144,
            "user": "awvwgk",
            "date": "2020-10-04 16:53:54+00:00",
            "title": "Add fypp to package index",
            "text": "I wonder why this one is missing here\n\nGH repository: https://github.com/aradi/fypp\ndocumentation: https://fypp.readthedocs.io",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 143,
            "user": "awvwgk",
            "date": "2020-10-04 16:37:28+00:00",
            "title": "Add DFTB+ to package index",
            "text": "Disclaimer: this is a project I'm personally involved with.\nThis PR adds an entry for DFTB+\n\nGH organisation of the project: https://github.com/dftbplus\nProject homepage: https://dftbplus.org/\nthe projects builds with CMake\nsupports GCC7.5, GCC8.4, GCC9.2, GCC10.1, Intel 18, Intel 19, NAG 7\nMPI and/or OpenMP parallel\ndocumentation for DFTB+\n\ndeveloper docs: https://dftbplus-develguide.readthedocs.io/en/latest/\nuser docs: https://dftbplus-recipes.readthedocs.io/en/latest/\n\n\n\nSee #68",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 142,
            "user": "awvwgk",
            "date": "2020-10-04 16:23:19+00:00",
            "title": "Package index request template",
            "text": "The packaging guidelines state:\n\n  \n    \n      fortran-lang.org/PACKAGES.md\n    \n    \n         Line 55\n      in\n      0013186\n    \n  \n  \n    \n\n        \n          \n           2. Users should open a pull request using the 'Package index request' template \n        \n    \n  \n\n\nBut there is no PR template available for this purpose.\nAdditional context\nDiscussion regarding this line in #26 (comment)",
            "is_open": true,
            "labels": [
                "documentation",
                "packages"
            ],
            "comments": []
        },
        {
            "number": 141,
            "user": "milancurcic",
            "date": "2020-10-02 19:07:23+00:00",
            "title": "fix youtube embed",
            "text": "There was an erroneous space character immediately before the <iframe> tag. Apparently this made it not render (??).",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-10-02 20:17:42+00:00",
                    "text": "Thanks for fixing it!"
                }
            ]
        },
        {
            "number": 140,
            "user": "milancurcic",
            "date": "2020-10-02 12:21:49+00:00",
            "title": "Revert \"Improved Docs\"",
            "text": "I'm sorry, I don't think this PR improves the README, but opposite:\n\nHeadings shouldn't end with colons\n\"How to setup\" doesn't work because \"setup\" is a noun. We can work to change it something like \"How to set up Jekyll\"\n\nReverts #139",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-10-02 12:24:18+00:00",
                    "text": "Some background: https://blog.domenic.me/hacktoberfest/\nI don't know if this PR was actually related to this, but please be mindful of small PRs in October that don't actually improve anything."
                },
                {
                    "user": "LKedward",
                    "date": "2020-10-02 12:27:37+00:00",
                    "text": "Headings shouldn't end with colons\n\"How to setup\" doesn't work because \"setup\" is a noun. We can work to change it something like \"How to set up Jekyll\"\n\n\nI completely agree on both points.\n\nSome background: https://blog.domenic.me/hacktoberfest/\n\nI was initially confused by why that PR was made, but this now makes sense.\nSmall PRs with genuine improvements to content or clarity are fine, but #139 is definitely neither I'm afraid"
                },
                {
                    "user": "certik",
                    "date": "2020-10-02 13:17:29+00:00",
                    "text": "I agree. Such PRs are essentially spam PRs.\n\u2026\nOn Fri, Oct 2, 2020, at 6:28 AM, Laurence Kedward wrote:\n\n\n ***@***.**** approved this pull request.\n\n \u2014\n You are receiving this because you are subscribed to this thread.\n Reply to this email directly, view it on GitHub\n <#140 (review)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAAFAWHQB3Y2PQNJXM4JD4TSIXBNLANCNFSM4SBUERSA>."
                },
                {
                    "user": "certik",
                    "date": "2020-10-02 16:48:29+00:00",
                    "text": "I changed the label from Invalid to Spam. That way they should not be able to get credit hopefully."
                },
                {
                    "user": "certik",
                    "date": "2020-10-02 16:49:59+00:00",
                    "text": "Btw, I was going to share the exact same link to the blog post that @milancurcic already shared. :)"
                },
                {
                    "user": "everythingfunctional",
                    "date": "2020-10-02 16:50:52+00:00",
                    "text": "I would be inclined to believe this PR was just spam, submitted by someone just looking for a free t-shirt.\n\nI changed the label from Invalid to Spam. That way they should not be able to get credit hopefully.\n\nI believe you must actually report the incident directly to DigitalOcean for them not to get credit.\n\ntagging pull requests with a \u201cspam\u201d label, and emailing hacktoberfest@digitalocean.com."
                },
                {
                    "user": "everythingfunctional",
                    "date": "2020-10-02 16:52:45+00:00",
                    "text": "Also, FYI, further background on a large source of the spam likely to be coming this month:\nhttps://joel.net/how-one-guy-ruined-hacktoberfest2020-drama"
                },
                {
                    "user": "everythingfunctional",
                    "date": "2020-10-02 16:53:18+00:00",
                    "text": "I was really hoping this repo wouldn't have to deal with that. Bummer"
                }
            ]
        },
        {
            "number": 139,
            "user": "adityashukl1502",
            "date": "2020-10-02 07:31:53+00:00",
            "title": "Improved Docs",
            "text": "",
            "is_open": false,
            "labels": [
                "spam"
            ],
            "comments": [
                {
                    "user": "arjenmarkus",
                    "date": "2020-10-02 07:40:46+00:00",
                    "text": "These are minor corrections and they improve the text."
                },
                {
                    "user": "certik",
                    "date": "2020-10-02 16:47:19+00:00",
                    "text": "This was merged by a mistake. This is a spam PR, more details here:\nhttps://blog.domenic.me/hacktoberfest/\nI changed the label to \"spam\"."
                }
            ]
        },
        {
            "number": 138,
            "user": "LKedward",
            "date": "2020-09-30 09:47:59+00:00",
            "title": "Fix CI: rollback and pin add-and-commit@v4.4.0",
            "text": "We have same CI issue as fortran-lang/fpm-registry#22; this PR addresses this.\nThis is a small change that's been tested in fpm-registry so I will merge.",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 137,
            "user": "milancurcic",
            "date": "2020-09-26 16:50:59+00:00",
            "title": "first draft of the October 2020 newsletter",
            "text": "It's that time of the month again. I summarized the website, stdlib, and fpm updates. There may be updates in merged PRs for stdlib and fpm in the next few days so we'll watch closely and make appropriate edits.\nTODO @certik and @gklimowicz for their respective compiler updates. Do we have a contact for gfortran updates?\nTODO @LKedward for updating the contribution data.\nAs usual, add your name to the authors list if you add, edit, or review content.\nWill merge on Thursday, October 1.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "everythingfunctional",
                    "date": "2020-09-30 22:36:09+00:00",
                    "text": "Aside from the handful of TODOs, I didn't notice any problems. Thanks for getting it going @milancurcic"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-10-02 18:34:40+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-10-02 18:35:50+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/137/"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-10-02 18:39:58+00:00",
                    "text": "Though I have issues viewing the build preview (not sure if it built correctly), the markdown preview looks okay. I will go ahead and merge, and if there are issues we can tidy it up. Thank you all."
                },
                {
                    "user": "p-costa",
                    "date": "2020-10-02 18:56:34+00:00",
                    "text": "Hi! The video in the events section is not rendering well on the website."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-10-02 19:02:17+00:00",
                    "text": "@p-costa Thanks I noticed it also and I'm trying to find out why."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-10-02 19:11:36+00:00",
                    "text": "It's now fixed by #141"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-02-13 10:01:14+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-02-13 10:01:30+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 136,
            "user": "milancurcic",
            "date": "2020-09-18 17:46:48+00:00",
            "title": "Small fix in the opening sentence on the compilers page",
            "text": "We list a total of 16 compilers on the page, so the opening line should be fixed.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-09-18 23:55:28+00:00",
                    "text": "+1\n\u2026\nOn Fri, Sep 18, 2020, at 11:47 AM, Milan Curcic wrote:\n We list a total of 16 compilers on the page, so the opening line should\n be fixed.\n\n You can view, comment on, or merge this pull request online at:\n\n   #136\n\n Commit Summary\n\n  * small fix in the opening sentence on the compilers page\n File Changes\n\n  * *M* compilers.md\n <https://github.com/fortran-lang/fortran-lang.org/pull/136/files#diff-9529f537267bec0588f8db4469297ab3> (2)\n Patch Links:\n\n  * https://github.com/fortran-lang/fortran-lang.org/pull/136.patch\n  * https://github.com/fortran-lang/fortran-lang.org/pull/136.diff\n \u2014\n You are receiving this because you are subscribed to this thread.\n Reply to this email directly, view it on GitHub\n <#136>, or\n unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAAFAWB2NMYJEFEQUB2IZATSGOMJXANCNFSM4RSJZUCA>."
                }
            ]
        },
        {
            "number": 135,
            "user": "milancurcic",
            "date": "2020-08-30 17:20:03+00:00",
            "title": "September newsletter",
            "text": "Please review and add anything that I missed. As usual, add yourself to the list of authors if you add, edit, or even just review content.\nI left specific TODOs for @certik for LFortran news and @gklimowicz for Flang news.\nSorry for the short notice! We'll try to start this earlier in the month. I got carried away and time flew by. If possible, aiming to merge on Tuesday, September 1.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-08-31 17:44:53+00:00",
                    "text": "Thanks! I have updates for LFortran and also for GFortran from Thomas K\u00f6nig. I'll add it in later today."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-09-01 15:03:35+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-09-01 15:04:35+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/135/"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-09-01 15:11:20+00:00",
                    "text": "The contributions are not displaying for me in the preview. @certik and @LKedward, is perhaps the contribution data that needs to be updated? There is a script that does it? I forget how it works."
                },
                {
                    "user": "LKedward",
                    "date": "2020-09-01 15:18:06+00:00",
                    "text": "The contributions are not displaying for me in the preview. @certik and @LKedward, is perhaps the contribution data that needs to be updated? There is a script that does it? I forget how it works.\n\nI'll run it now and push the updated json files."
                },
                {
                    "user": "LKedward",
                    "date": "2020-09-01 16:21:37+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-09-01 16:22:42+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/135/"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-09-01 16:58:43+00:00",
                    "text": "Thank you all and thank you Laurence for updating the contributions data. I think it's good to go. I will merge in one hour."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-02-13 10:00:50+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2021-02-13 10:01:09+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 134,
            "user": "smeskos",
            "date": "2020-08-19 20:15:29+00:00",
            "title": "Binaries of gfortran for windows no longer available for download",
            "text": "I am referring to the link that it is given in the quickstart tutorial hello_world.md.\nShould we replace it with something else, eg. http://mingw-w64.org?",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-08-19 20:32:59+00:00",
                    "text": "I think we should steer the Windows support toward WSL."
                },
                {
                    "user": "GS76",
                    "date": "2020-08-20 00:34:55+00:00",
                    "text": "My apologies what does WSL refer to?\n\nI am happy to use any type of installation of the Gfortran for Windows,\nhowever, I just found the link we have now was easiest for Windows users, I\nmyself.\n\nBut I am happy to try others, as long as they are easy for the user.\n\nJust my point of view.\n\u2026\nOn Wed, 19 Aug 2020 at 22:33, Milan Curcic ***@***.***> wrote:\n I think we should steer the Windows support toward WSL.\n\n \u2014\n You are receiving this because you are subscribed to this thread.\n Reply to this email directly, view it on GitHub\n <#134 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AM7MLHBBY4DOXWIRYF5OPMTSBQZIVANCNFSM4QFKDMOQ>\n ."
                },
                {
                    "user": "smeskos",
                    "date": "2020-08-20 07:20:24+00:00",
                    "text": "@GS76 WSL refers to Windows Subsystem for Linux, in short, you install a Linux distribution directly onto your Windows 10 (no virtual machine). This is an official Microsoft feature (not a 3rd party hack). Although it is not, yet, as robust as a clean Linux installation, and it lucks a GUI, you only get a bash, it is still a viable solution.\n@milancurcic I believe we need a new book about how to set up a Fortran environment in all major OS (including a list of the most common IDEs/Text-editors and how to configure them). From my experience with new Fortran users (from r/fortran and colleagues) they are usually Windows-only users with little programming experience. To push everyone toward WSL - a command-line-only Linux could bring a lot of frustration.\nFor the moment we should just replace this link with something else that works. We could mention both MinGW and WSL and later add a link to a new book that will explain how to set them up."
                },
                {
                    "user": "GS76",
                    "date": "2020-08-20 07:36:07+00:00",
                    "text": "@smeskos Thank you for the explanation. I will try it out. Your comments\nbelow with regards Windows-only users with little programming experience is\n100% accurate. I am in that category. I installed Linux about a 2 months\nago as I have always heard how much quicker it is than Windows. Anyway,\nonce up and running, I now understand what all the fuss is about and\ncompilers such as GCC and Gfortran are pre-installed, not necessarily the\ncorrect version, but I can understand why programmers would like the\nenvironment. I agree that we would need to show a complete installation\nprocedure, with WSL or whichever is most reliable and is guaranteed to be\nthe latest Gfortran.\n\u2026\nOn Thu, 20 Aug 2020 at 09:20, smeskos ***@***.***> wrote:\n @GS76 <https://github.com/GS76> WSL refers to Windows Subsystem for\n Linux, in short, you install a Linux distribution directly onto your\n Windows 10 (no virtual machine). This is an official Microsoft feature (not\n a 3rd party hack). Although it is not, yet, as robust as a clean Linux\n installation, and it lucks a GUI, you only get a bash, it is still a viable\n solution.\n\n @milancurcic <https://github.com/milancurcic> I believe we need a new\n book about how to set up a Fortran environment in all major OS (including a\n list of the most common IDEs/Text-editors and how to configure them). From\n my experience with new Fortran users (from r/fortran and colleagues) they\n are usually Windows-only users with little programming experience. To push\n everyone toward WSL - a command-line-only Linux could bring a lot of\n frustration.\n For the moment we should just replace this link with something else that\n works. We could mention both MinGW and WSL and later add a link to a new\n book that will explain how to set them up.\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#134 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AM7MLHH5FSKWID3VXXTNDETSBTFELANCNFSM4QFKDMOQ>\n ."
                },
                {
                    "user": "LKedward",
                    "date": "2020-08-20 08:16:40+00:00",
                    "text": "It is a shame these downloads stopped working - they offered a very easy install and packed in some useful extras like OpenMP and make.\n\nI believe we need a new book about how to set up a Fortran environment in all major OS (including a list of the most common IDEs/Text-editors and how to configure them).\n\nYes this idea has been discussed and is planned - if you are willing to make a start on this, that would be great!\nIdeally this mini-book would present the main options available for Windows, their respective advantages/disadvantages, and instructions for each.\n\nI think we should steer the Windows support toward WSL.\n\nThe main disadvantage of WSL is that you need to use cross-compilation to compile native Windows binaries, which is a common reason for needing Windows support, but I agree it is now a good solution for those comfortable with Linux command line.\n\nFrom my experience with new Fortran users (from r/fortran and colleagues) they are usually Windows-only users with little programming experience. To push everyone toward WSL - a command-line-only Linux could bring a lot of frustration.\n\nVery true, but I don't know of many easy GUI setups for Fortran. I used Geany on Windows when I was learning because it supports Fortran, but you still need to install the compiler yourself I think."
                },
                {
                    "user": "LKedward",
                    "date": "2020-08-20 14:03:51+00:00",
                    "text": "Looks like the download links are working again. We still have the problem of relying on this third-party site; a possible solution could be to setup a mirror."
                },
                {
                    "user": "GS76",
                    "date": "2020-08-20 15:56:28+00:00",
                    "text": "I checked, Geany does not install Gfortran when installed.\n\u2026\nOn Thu, 20 Aug 2020 at 16:04, Laurence Kedward ***@***.***> wrote:\n Looks like the download links are working again. We still have the problem\n of relying on this third-party site; a possible solution could be to setup\n a mirror.\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#134 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AM7MLHDUTK4SMJODMMJAUX3SBUUNPANCNFSM4QFKDMOQ>\n ."
                },
                {
                    "user": "smeskos",
                    "date": "2020-08-20 16:23:11+00:00",
                    "text": "Yes this idea has been discussed and is planned - if you are willing to make a start on this, that would be great!\n\nI am, I will start today and will commit a PR as soon as I have a first draft."
                }
            ]
        },
        {
            "number": 133,
            "user": "LKedward",
            "date": "2020-08-07 16:05:44+00:00",
            "title": "List FPM registry packages",
            "text": "A minimal modification to include packages from fpm-registry on the website.\nThey are listed in their own category ('fpm') as well as searchable via the existing search function.\nThis is a stopgap until we can clean this up and separate out fpm-registry like crates.io to provide more info.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2020-08-07 16:05:56+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-08-07 16:06:53+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/133/"
                },
                {
                    "user": "LKedward",
                    "date": "2020-08-07 16:08:37+00:00",
                    "text": "Sorry, preview's not working because it depends on the new CI files"
                },
                {
                    "user": "LKedward",
                    "date": "2020-08-08 07:53:38+00:00",
                    "text": "Thanks Ond\u0159ej! Yep I'm open to suggestions as to how we can improve this in the future"
                },
                {
                    "user": "LKedward",
                    "date": "2020-08-08 08:03:43+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-08-08 08:04:04+00:00",
                    "text": "The preview build for this PR has now been deleted."
                },
                {
                    "user": "certik",
                    "date": "2020-08-08 19:34:08+00:00",
                    "text": "I checked it on the website and it looks awesome! Thank you for implementing this.\n\u2026\nOn Sat, Aug 8, 2020, at 2:04 AM, github-actions[bot] wrote:\n\n\n The preview build for this PR has now been deleted.\n\n \u2014\n You are receiving this because you commented.\n Reply to this email directly, view it on GitHub\n <#133 (comment)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAAFAWC3N2WOL5GTQ2HOZGLR7UBH7ANCNFSM4PXYZTZQ>."
                }
            ]
        },
        {
            "number": 132,
            "user": "certik",
            "date": "2020-08-01 21:09:18+00:00",
            "title": "Make the link clickable",
            "text": "I didn't notice it as part of #125, as it shows fine on GitHub, but the Jekyll Markdown formatting doesn't make the url automatically a link.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-08-01 21:10:09+00:00",
                    "text": "It's a simple fix, so I am going to merge it."
                }
            ]
        },
        {
            "number": 131,
            "user": "milancurcic",
            "date": "2020-07-31 16:00:51+00:00",
            "title": "fix typos in the netcdf-fortran entry",
            "text": "Fixes 2 typos in the netcdf-fortran package index entry.",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 130,
            "user": "LKedward",
            "date": "2020-07-31 09:45:48+00:00",
            "title": "Add: ADflow to package index.",
            "text": "One from the list of popular Fortran projects.\nThis solver is state-of-the-art for aerodynamic optimization and probably one of very few remaining mainstream finite volume CFD solvers implemented in Fortran outside of industry.\n(Also an excellent example of the state-of-the-art in automatic differentiation in Fortran as discussed in j3-fortran/fortran_proposals#95.)",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-07-31 14:17:58+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-07-31 14:18:59+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/130/"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-07-31 14:20:06+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-07-31 14:20:26+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 129,
            "user": "certik",
            "date": "2020-07-30 15:02:01+00:00",
            "title": "Comment text in activity JSON files",
            "text": "Currently we store each comment together with the metadata in the activity JSON files. Do we need to do that? I think the JSON files might become much smaller without the text of the comments. I don't know if we might want to need them in the future, but even if so, I would imagine only to show some statistics (number of words / sentences written?), so it seems to me we can have some separate repository that can store the comments, but the JSON files that we need for this website should only contain things we actually need, which is just the metadata (plus any possible statistics about comments if we want in the future), but not the comments themselves.",
            "is_open": true,
            "labels": [],
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2020-07-30 15:22:02+00:00",
                    "text": "Yes you are right, we don't need all the data we are currently storing.\nMy long term plan has been to perform more pre-processing in the python script before dumping to json; every time the contributor data is loaded on a webpage, the json data has to be processed in javascript (this function) to extract a list of contribution dates per user. This is obviously wasteful on the client-side since this processingt can be performed a priori."
                },
                {
                    "user": "certik",
                    "date": "2020-07-30 15:59:25+00:00",
                    "text": "Yes, exactly."
                }
            ]
        },
        {
            "number": 128,
            "user": "dev-zero",
            "date": "2020-07-30 12:49:51+00:00",
            "title": "package_index: FortranCallGraph and Serialbox",
            "text": "While looking for a callgraph generator I stumbled over the FortranCallGraph project (a static callgrapher), from there you can find the FortranTestGenerator (unittest framework based on Capture & Replay via Serialbox), and the serialization library Serialbox (from Swiss Meteo).\nThe FortranTestGenerator I'm not yet adding due to lack of documentation example code.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "dev-zero",
                    "date": "2020-07-30 14:01:06+00:00",
                    "text": "@LKedward thanks, done"
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-30 14:04:48+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-07-30 14:05:37+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/128/"
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-30 14:10:44+00:00",
                    "text": "Packages and their badges are rendering properly \ud83d\udc4d .\nI'm happy that these packages meet the criteria for listing so I'll merge.\n#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-07-30 14:11:06+00:00",
                    "text": "The preview build for this PR has now been deleted."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-07-30 15:35:56+00:00",
                    "text": "Just so I understand for future packages, this one satisfies the relevance criterion:\n\nRelevance: the package must be primarily implemented in Fortran or provide a complete Fortran interface to an existing package or be purposed solely towards software development in Fortran.\n\nonly because it's \"purposed solely towards software development in Fortran\", correct?\nI ask because when I first looked at the repo, I saw that it's a Python package with only target code samples in Fortran, so it gave me pause.\nSo, the 3rd test in the relevance criterion basically allows any non-Fortran tool that is somehow to be used for Fortran development. Another obvious example is FORD. Am I interpreting this correctly?"
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-30 15:54:10+00:00",
                    "text": "So, the 3rd test in the relevance criterion basically allows any non-Fortran tool that is somehow to be used for Fortran development. Another obvious example is FORD. Am I interpreting this correctly?\n\nYes, this is my reasoning. The third criterion was written this way precisely to allow FORD and similar utilities.\nUltimately fortran-lang should probably list development tools and utilities like FORD separately somewhere, but for now they allowed as 'packages' just as a convenience."
                },
                {
                    "user": "certik",
                    "date": "2020-07-30 15:56:43+00:00",
                    "text": "I am a little worried that we are opening a pandora box with this ---- it seems we should also list any Fortran related tools, such as LFortran, GFortran, Flang, all kinds of plugins for VSCode etc.\nMaybe we can have a dedicated tag for these."
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-30 15:58:53+00:00",
                    "text": "I am a little worried that we are opening a pandora box with this...\n\nI agree, which is why a separate site page may be more suitable. Perhaps the Compiler page becomes a more general page with compilers and development tools?"
                },
                {
                    "user": "certik",
                    "date": "2020-07-30 16:02:22+00:00",
                    "text": "I think we should list all good related tools for Fortran somehow. Including things like debuggers and optimization tools if they work with Fortran. Also currently we only list open source tools (but for compilers we want to list the commercial ones too).\nSo it's just a question where. For now maybe we can have a tag or category for \"tools\" and list all these open source tools there."
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-30 16:47:15+00:00",
                    "text": "I think we should list all good related tools for Fortran somehow. Including things like debuggers and optimization tools if they work with Fortran. Also currently we only list open source tools (but for compilers we want to list the commercial ones too).\n\nYep, this is what I had in mind.\n+1 for introducing a 'Tools' category until we have a dedicated page for this."
                }
            ]
        },
        {
            "number": 127,
            "user": "fluidnumerics-joe",
            "date": "2020-07-27 14:24:20+00:00",
            "title": "Add Fortran Equation Parser",
            "text": "",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-07-27 14:35:09+00:00",
                    "text": "+1 to add. I haven't checked if the categories exist.\n\u2026\nOn Mon, Jul 27, 2020, at 8:24 AM, Joseph Schoonover wrote:\n\n You can view, comment on, or merge this pull request online at:\n\n   #127\n\n Commit Summary\n\n  * Add Fortran Equation Parser\n File Changes\n\n  * *M* _data/package_index.yml\n <https://github.com/fortran-lang/fortran-lang.org/pull/127/files#diff-ffb54f73abb65351a6456a90b3972a91> (8)\n Patch Links:\n\n  * https://github.com/fortran-lang/fortran-lang.org/pull/127.patch\n  * https://github.com/fortran-lang/fortran-lang.org/pull/127.diff\n \u2014\n You are receiving this because you are subscribed to this thread.\n Reply to this email directly, view it on GitHub\n <#127>, or\n unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAAFAWC3N2EKILH44XN3VX3R5WE2HANCNFSM4PI2IXYA>."
                },
                {
                    "user": "certik",
                    "date": "2020-07-28 17:29:19+00:00",
                    "text": "Thanks! Merging."
                }
            ]
        },
        {
            "number": 126,
            "user": "certik",
            "date": "2020-07-24 15:57:31+00:00",
            "title": "Tutorial: how to deal with strings",
            "text": "I am to this day struggling how to deal with strings in modern Fortran. I would be happy to contribute a tutorial, once I learn what the best practice is.\nFunction accepting a string\ninteger function f(s)\ncharacter(*), intent(in) :: s\nf = len(s)\nend function\nNote: the first argument in character(...) is len, so the above is equivalent to character(len=*). I think it is ok to not specify len, as things are shorter then.\nSubroutine returning a string\nsubroutine f(s)\ncharacter(:), allocatable, intent(out) :: s\ns = \"Some text\"\nend subroutine\nNote: This automatically allocate the LHS, so s will get allocated to the length of the string, no white space padding.\nQuestion 1\nIn fpm, the following code:\nsubroutine cmd_build()\ntype(string_t), allocatable :: files(:)\ncharacter(:), allocatable :: basename, pkg_name, linking\ninteger :: i, n    \nprint *, \"# Building project\"\ncall list_files(\"src\", files)\nlinking = \"\"\ndo i = 1, size(files)\n    if (str_ends_with(files(i)%s, \".f90\")) then\n        n = len(files(i)%s)\n        basename = files(i)%s(1:n-4)\n        call run(\"gfortran -c src/\" // basename // \".f90 -o \" // basename // \".o\")    \n        linking = linking // \" \" // basename // \".o\"\n    end if    \nend do\ncall run(\"gfortran -c app/main.f90 -o main.o\")\ncall package_name(pkg_name)\ncall run(\"gfortran main.o \" // linking // \" -o \" // pkg_name)\nend subroutine\nGives a warning:\n# gfortran (for build/gfortran_debug/fpm/fpm.o build/gfortran_debug/fpm/fpm.mod)\nsrc/fpm.f90:163:0:\n\n linking = \"\"\n \nWarning: \u2018.linking\u2019 may be used uninitialized in this function [-Wmaybe-uninitialized]\n\nWhat am I doing wrong? How do I initialize an empty string?\nQuestion 2\nHow do you return a string from a function as a return value?\n\nI will probably have more questions. These are the most pressing.",
            "is_open": true,
            "labels": [
                "learn"
            ],
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2020-07-24 16:04:15+00:00",
                    "text": "This would be a good tutorial to have as a reference \ud83d\udc4d\nI cannot find a reference right now, but I believe the maybe-uninitialized error in gfortran occurs spuriously for allocatable strings. I have the same warning in gfortran when I use allocatable strings, but not with ifort or new flang."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-07-24 16:07:45+00:00",
                    "text": "I do exactly the same thing as your examples of function accepting and subroutine returning strings. I imagine this is common use.\nQuestion 1: You're doing nothing wrong. Gfortran is warning about correct Fortran.\nQuestion 2:\nmodule mod_str\ncontains\n  pure function str()\n    character(:), allocatable :: str\n    str = 'hello'\n  end function str\nend module mod_str\n\n\nprogram test_str\n  use mod_str, only: str\n  print *, str()\nend program test_str"
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-24 16:17:45+00:00",
                    "text": "Continuing Milan's example:\nprogram test_str\n  use mod_str, only: str\n  character(:), allocatable :: my_string\n  my_string = str()\nend program test_str\nMy understanding about this usage is that there are two allocation-on-assignments happening: one in the function for the function result; and one for the assignment at program level.\nSo in comparison to a subroutine implementation, functions returning allocatables incur an extra allocation and, in this example, an extra copy during assignment."
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-24 16:19:04+00:00",
                    "text": "(sorry, closed by mistake)"
                },
                {
                    "user": "certik",
                    "date": "2020-07-24 16:29:45+00:00",
                    "text": "@LKedward that is precisely why I asked about this. If that is the case, that seems like a big downside and our string routines in stdlib should return the strings via arguments as subroutines, not as return values from functions."
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-24 16:36:39+00:00",
                    "text": "If that is the case, that seems like a big downside and our string routines in stdlib should return the strings via arguments as subroutines, not as return values from functions.\n\nYep, I haven't benchmarked it but this is why I generally avoid functions for returning non-scalars. You can use pointers to return allocated arrays from functions more efficiently, but I also avoid using pointers.\nNB: Allocation on assignment\nAnother useful thing to note, which I only learned recently, is that allocation-on-assignment doesn't occur for colon subscripts ((:)).\nSo this doesn't work:\nprogram test_str\n  use mod_str, only: str\n  character(:), allocatable :: my_string\n  my_string(:) = str()\nend program test_str\nBased on this, I would consider it good practice to use the colon subscript to explicitly indicate where there is assignment only and to avoid accidental reallocation.\nQuestion: filling a character string\nI have my own related question for strings: Is there a one-liner for filling a character(*) with a non-space character(1)?\nExample case is for filling a string with all zeros."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-07-24 17:03:31+00:00",
                    "text": "My understanding about this usage is that there are two allocation-on-assignments happening: one in the function for the function result; and one for the assignment at program level.\n\nYes, I think this is true for any function returning anything allocatable. It's especially penalizing for large arrays. Don't do it if you care about high performance.\nI have a toy wave physics project that did this for everything, including large arrays. I was optimizing for functional API and UI, although at the time I didn't understand the implications of functions returning allocatable arrays. Later I heard from a person who found the code to do exactly what they needed but it was too inefficient so they rewrote everything to subroutines to make it fast :)."
                },
                {
                    "user": "certik",
                    "date": "2020-07-24 17:13:33+00:00",
                    "text": "Regarding functions returning allocatable --- is this mandated by the Fortran Standard to allocate twice, or are compilers permitted to make it as efficient as intent(out) for subroutines? (It's just that some or most compilers currently don't optimize it out, but they could in the future.)"
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-24 17:26:33+00:00",
                    "text": "Regarding functions returning allocatable --- is this mandated by the Fortran Standard to allocate twice, or are compilers permitted to make it as efficient as intent(out) for subroutines? (It's just that some or most compilers currently don't optimize it out, but they could in the future.)\n\nIt would make sense that if the function is able to be inlined, then one allocation could be optimized out, but I'm no expert here.\nI think that in general, the function result needs to be a distinct memory location because it may be used subsequently in an expression; i.e. there is a fundamental difference between a function result and a subroutine intent(out) dummy arg - the former is returned by value whereas the latter is essentially a pointer.\nNote 1, section 15.6.2.2 from the interpretation doc:\nThe function result is similar to any other entity (variable or procedure pointer) local to a function sub-\nprogram. Its existence begins when execution of the function is initiated and ends when execution of the\nfunction is terminated. However, because the final value of this entity is used subsequently in the evaluation\nof the expression that invoked the function, an implementation might defer releasing the storage occupied\nby that entity until after its value has been used in expression evaluation."
                },
                {
                    "user": "certik",
                    "date": "2020-07-24 18:10:06+00:00",
                    "text": "My understanding of the text you posted is that the Standard allows the result of the function to be as efficient as an intent(out) dummy argument if the compiler chooses to do that."
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-24 19:40:13+00:00",
                    "text": "Would such an optimization be prevented by the requirement that the RHS is evaluated before the assignment occurs?\nFrom 10.2.1.3:\nThe execution of the assignment shall have the same effect as if the evaluation of\nexpr and the evaluation of all expressions in variable occurred before any portion\nof the variable is defined by the assignment.\n\nfor\nvariable = expr"
                },
                {
                    "user": "certik",
                    "date": "2020-07-24 20:04:56+00:00",
                    "text": "I don't know. We might need to ask at the committee. My understanding of it is that the key is \"shall have the same effect\", in other words, it does not actually have to happen that way, only have the same effect. So the question then becomes if double allocation has the same effect as single allocation. For a string, it seems the logic of the code would be the same. For user derived types perhaps the user requires the finalizer to be called twice."
                },
                {
                    "user": "smeskos",
                    "date": "2020-07-24 20:53:07+00:00",
                    "text": "Regarding Question1:\nIgnore the warning, this is one of the flags, and actually for the same particular use case, that I suppress with -Wno-maybe-uninitialized, and if you recall one of the reasons I raised an issue here fpm. Also, take a look at Steve Kargl's post in our discourse here. Finally, another similar discussion can be found here.\nRegarding Question2:\nI personally follow the way presented by @milancurcic :\n\nI do exactly the same thing as your examples of function accepting and subroutine returning strings. I imagine this is common use.\nQuestion 1: You're doing nothing wrong. Gfortran is warning about correct Fortran.\nQuestion 2:\nmodule mod_str\ncontains\n  pure function str()\n    character(:), allocatable :: str\n    str = 'hello'\n  end function str\nend module mod_str\n\n\nprogram test_str\n  use mod_str, only: str\n  print *, str()\nend program test_str\n\nHowever, since we are into this discussion, I also have something to add about the behavior of allocatable characters that may be relevant.\nThe following compiles with no warnings or errors but abords at runtime with a segmentation error:\ncharacter(len=:),allocatable :: str\n\nsubroutine init_string(filename, str)\n    character(len=*),intent(in) :: filename\n    character(len=:),allocatable, intent(out) :: str\n    open(file...)\n    read(unit,*)str\n    close(file...)\nend subroutine init_string\nwhile this is correct:\ncharacter(len=:),allocatable :: str\n\nsubroutine init_string(filename, str)\n    character(len=*),intent(in) :: filename\n    character(len=:),allocatable, intent(out) :: str\n    character(len=50) :: temp ! 50 is just a random number for demonstration purposes\n    open(file...)\n    read(unit,*)temp\n    str = trim(temp)\n    close(file...)\nend subroutine init_string\nAnother interesting behavior is when the allocatable character in the above example is part of a derived type eg:\ntype  t_gas\n    character(len=:),allocatable :: name\n    double :: mass\n    etc...\nend type t_gas\nNow assume we defined a type(t_gas)::gas and tried to read gas%name as we did in the first nonworking example then the program runs without any error but in reality name%gas remains uninitialized, you can print it and it just returns blank but NO error!!"
                },
                {
                    "user": "certik",
                    "date": "2020-07-24 21:32:09+00:00",
                    "text": "@smeskos I think you cannot read into an allocatable character type. I vaguely remember this being discussed in the standards committee how to improve the standard to allow this. Until then I think it is not allowed."
                },
                {
                    "user": "everythingfunctional",
                    "date": "2020-07-24 23:45:58+00:00",
                    "text": "I've generally just resorted to using a string type for everything, and then for intent(in) arguments just using an interface to allow people to also pass in character literals (or just character variables)."
                },
                {
                    "user": "ivan-pi",
                    "date": "2020-07-25 11:56:19+00:00",
                    "text": "Question: filling a character string\nI have my own related question for strings: Is there a one-liner for filling a character(*) with a non-space character(1)?\nExample case is for filling a string with all zeros.\n\ncharacter(len=:), allocatable :: s\ns = repeat('0',10)\nwrite(*,*) s\n\nwill output 0000000000"
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-25 12:45:35+00:00",
                    "text": "Perfect, thank you @ivan-pi!"
                }
            ]
        },
        {
            "number": 125,
            "user": "certik",
            "date": "2020-07-21 14:42:55+00:00",
            "title": "WIP: Add the initial draft of the August Newsletter",
            "text": "TODO:\n\n I left the word FIXME in the text for things that we still need to update\n @jvdp1 is there anything in stdlib that you would like to highlight?\n @everythingfunctional would you mind filling out the fpm section?\n Update contributor json data (@LKedward)\n\nIn general, do we want to get more news from more projects, such as compilers?",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-07-21 14:47:27+00:00",
                    "text": "@certik thank you for starting it!"
                },
                {
                    "user": "jvdp1",
                    "date": "2020-07-28 18:18:31+00:00",
                    "text": "I'll look tomorrow to write a small section on the changes of the structure of stdlib.\nIs it an idea to have a section Ongoing discussion inside the sdtlib section? It could highlight them to the community and maybe re-stimulate some of them."
                },
                {
                    "user": "certik",
                    "date": "2020-07-28 18:21:44+00:00",
                    "text": "Yes, ongoing discussion seems like a good idea to mention in the newsletter."
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-30 09:05:49+00:00",
                    "text": "I'll rerun and upload the contributor json data-files this afternoon."
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-30 09:10:26+00:00",
                    "text": "In general, do we want to get more news from more projects, such as compilers?\n\nI have no objection to this - any interesting updates from LFortran?"
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-07-30 09:20:36+00:00",
                    "text": "I read in the Slack page that they are still working on it (wednesday 22\njuly) - it is taking them more time than anticipated, as this is all new.\n\nMaybe Tiziano can provide an estimate?\n\nOp do 30 jul. 2020 om 11:03 schreef Laurence Kedward <\nnotifications@github.com>:\n\u2026\n ***@***.**** commented on this pull request.\n ------------------------------\n\n In _posts/2020-08-01-Fortran-Newsletter-August-2020.md\n <#125 (comment)>\n :\n\n > +* Try to use it. Does it work? No? Let us know! Read the [fpm packaging guide](https://github.com/fortran-lang/fpm/blob/master/PACKAGING.md) to learn how to build your package with fpm.\n +* Browse the [open issues](https://github.com/fortran-lang/fpm/issues) and see if you can help implement any fixes or features.\n +* Adapt your Fortran package for fpm.\n +* Improve the documentation.\n +\n +The short term goal of fpm is to make development and installation of Fortran packages with dependencies easier.\n +Its long term goal is to build a rich and decentralized ecosystem of Fortran packages and create a healthy\n +environment in which new open source Fortran projects are created and published with ease.\n +\n +## Events\n +\n +* [FortranCon 2020](https://tcevents.chem.uzh.ch/event/12) was held July 2 - 4.\n +with many interesting talks.\n +See the talk schedule\n +[here](https://tcevents.chem.uzh.ch/event/12/timetable/#20200702.detailed).\n +FIXME: is recordings available?\n\n They said they would be made available on their SWITCHtube\n <https://tube.switch.ch/organizations/5>, but nothing there yet.\n\n \u2014\n You are receiving this because you are subscribed to this thread.\n Reply to this email directly, view it on GitHub\n <#125 (review)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YR6RDIIBR3XNZNEJNZDR6EZNPANCNFSM4PDVP3PQ>\n ."
                },
                {
                    "user": "certik",
                    "date": "2020-07-30 15:46:55+00:00",
                    "text": "I have no objection to this - any interesting updates from LFortran?\n\nThe updates for last month would be:\n\nThe initial prototype C++ backend can translate Fortran's do concurrent to C++'s Kokkos::parallel_for: https://twitter.com/lfortranorg/status/1280764915242811393\nLFortran has a Twitter account for latest updates: @lfortranorg\nWork is progressing on the production version of LFortran that is written in C++\n22 Merge Requests were merged and 4 issues fixed in July 2020. Some notable ones:\n\n#163: Implement basic Fortran to C++ translation backend\n!410: Make simple calculations work via LLVM in interactive mode\n!402: Build ASR (Abstract Semantic Representation) properly for subroutines and functions\n\n\n\n@LKedward do you think it's worth putting in? If so, we should ask other open source compilers to provide updates also --- I am happy to do that (if they don't make this newsletter, they can make the next one)."
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-30 16:49:20+00:00",
                    "text": "@LKedward do you think it's worth putting in?\n\nThis is certainly of interest to me. Like you suggest, I'd also be interested in frequent updates from the new flang project as well.\nIt doesn't have to be every month, but it's nice to get progress updates on projects likes these that will eventually be of benefit to the wider community."
                },
                {
                    "user": "certik",
                    "date": "2020-07-30 17:44:48+00:00",
                    "text": "@LKedward ok. I have added it in 4a5004e."
                },
                {
                    "user": "certik",
                    "date": "2020-08-01 16:14:38+00:00",
                    "text": "I approve the last open suggestion. Please push in and merge. I am not at my computer.\n\u2026\nOn Sat, Aug 1, 2020, at 10:02 AM, Milan Curcic wrote:\n\n\n ***@***.**** approved this pull request.\n\n I think the newsletter is now in good shape.\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#125 (review)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAAFAWAELMZXILI3YSTJZX3R6Q4DDANCNFSM4PDVP3PQ>."
                },
                {
                    "user": "LKedward",
                    "date": "2020-08-01 17:11:47+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-08-01 17:12:49+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/125/"
                },
                {
                    "user": "LKedward",
                    "date": "2020-08-01 17:22:02+00:00",
                    "text": "Many thanks everyone for your contributions! Looking good with three approvals so I will now merge."
                },
                {
                    "user": "LKedward",
                    "date": "2020-08-01 17:24:04+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-08-01 17:24:23+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 124,
            "user": "nncarlson",
            "date": "2020-07-16 14:51:12+00:00",
            "title": "Update Truchas URL",
            "text": "",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-07-16 15:06:58+00:00",
                    "text": "Thanks for merging @LKedward !"
                }
            ]
        },
        {
            "number": 123,
            "user": "LKedward",
            "date": "2020-07-14 13:20:33+00:00",
            "title": "Add: license info to Futility package entry.",
            "text": "License info is not detected automatically for this package, so add explicitly.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-07-14 15:45:53+00:00",
                    "text": "+1"
                }
            ]
        },
        {
            "number": 122,
            "user": "Romendakil",
            "date": "2020-07-13 21:57:52+00:00",
            "title": "Adding WHIZARD as a Fortran project.",
            "text": "Proposal to add WHIZARD as a Fortran project. We are a High Energy Physics Monte Carlo Event Generator, so a scientific code, predominantly in Fortran up to F03 and F08 standard. The project ships with a code generator that is written in OCaml and generates Fortran code compiled and linked as shared libraries. Our development is done in a (non-openly visible) gitlab server at the University of Siegen, whose reviewed merge requests are mirrored to our public gitlab server in Siegen and an svn repository at Hepforge. Distribution tarballs are also available via http://launchpad.net/whizard. We are using both OpenMP and MPI for parallelized Monte Carlo integration and simulation, in our development version using also non-blocking communication. Two of our team members, Wolfgang Kilian and J\u00fcrgen Reuter, are relatively active on c.l.f., the Intel forum, and the gfortran bugzilla.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-07-13 22:34:37+00:00",
                    "text": "Thanks @Romendakil for submitting it!"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-07-13 22:48:22+00:00",
                    "text": "Thank you!"
                }
            ]
        },
        {
            "number": 121,
            "user": "aarograh",
            "date": "2020-07-13 19:28:12+00:00",
            "title": "Add CASL/Futility to package index",
            "text": "",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-07-13 19:37:39+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-07-13 19:38:39+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/121/"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-07-13 19:41:46+00:00",
                    "text": "I verified that this satisfies all 6 criteria. Thank you @aarograh!"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-07-13 19:42:03+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-07-13 19:42:26+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 120,
            "user": "LKedward",
            "date": "2020-07-08 10:01:54+00:00",
            "title": "Add learn books",
            "text": "Additional print resources as discussed on discourse\nCloses #118.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2020-07-08 10:02:11+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-07-08 10:03:10+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/120/"
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-08 18:21:57+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-07-08 18:22:18+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 119,
            "user": "LKedward",
            "date": "2020-07-08 08:43:05+00:00",
            "title": "Fix: broken contributor plots on safari.",
            "text": "Fixes #105.\nThere are still some formatting issues on mobile, but those can be addressed in a separate issue.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2020-07-08 08:43:40+00:00",
                    "text": "#build_preview\n@certik, can you check on your iPhone?"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-07-08 08:44:37+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/119/"
                },
                {
                    "user": "certik",
                    "date": "2020-07-08 15:08:51+00:00",
                    "text": "I just checked both Safari and Firefox on iPhone and it works now! Thank you for fixing it @LKedward."
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-13 08:59:05+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-07-13 08:59:29+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 118,
            "user": "LKedward",
            "date": "2020-07-06 09:55:10+00:00",
            "title": "Additional books for learning",
            "text": "See discussion at https://fortran-lang.discourse.group/t/books-for-the-learn-page/177/6",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 117,
            "user": "certik",
            "date": "2020-07-03 20:57:02+00:00",
            "title": "Add Benchmarks sections",
            "text": "I suggest that we have to have and maintain our own benchmarks and have a dedicated section for it.\nAs an example, the Julia page has benchmarks against Fortran, but unfortunately they do not enable all optimization flags in gfortran, and when I pointed that to them, they said that they do not want to do that because they have different priorities in what they want to benchmark: JuliaLang/julia#24568, which is fine, they have the right to do that. But it is then misleading to users when they think that Fortran is not that fast.\nTo fix that, we have to maintain our own benchmarks, and test them with several Fortran compilers, and ensure that all optimization options are enabled. And we should benchmark against other languages.\nThis will also provide motivation for Fortran compiler vendors to speed up some of these benchmarks if Fortran is not the fastest.\nHere are some ideas for benchmarks to include:\n\nhttps://julialang.org/benchmarks/\nhttps://benchmarksgame-team.pages.debian.net/benchmarksgame/fastest/fortran.html\nhttps://github.com/ParRes/Kernels\n...",
            "is_open": true,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-07-03 21:10:58+00:00",
                    "text": "Furthermore, I suggest to set objectives of what code we will accept:\n\nMust only use the given language, for example Fortran or C++, and it should not use any assembly directly.\n\nAs an example, for the n-body problem, this code is fine for Fortran: https://benchmarksgame-team.pages.debian.net/benchmarksgame/program/nbody-ifc-6.html, readable, maintainable. For C++, we should include an equivalent code, we specifically should not allow to include assembly instrinsics like this one: https://benchmarksgame-team.pages.debian.net/benchmarksgame/program/nbody-gpp-7.html, full of assembly intrinsics. More specifically, we should mention it that you can of course write this in assembly (or inline it in C++ in various ways), but in our main benchmarks, we should put code that people would actually write to solve the problem in the given language itself without resolving to assembly. The same with the Rust version that currently is the fastest: https://benchmarksgame-team.pages.debian.net/benchmarksgame/program/nbody-rust-7.html, it's full of assembly intrinsics.\nThen we can have a section where anything is allowed, including assembly.\nThe idea is that with enough expertise, the best is to optimize in assembly. For example OpenBLAS is mostly in assembly. But the point of the benchmarks is to see how fast can you get if you only stick to the language and canonical ways of doing things in the language.\nTo put it another way: our benchmarks should show, that Fortran is an excellent choice for this mission:\n\nenable scientists, engineers, and other domain experts to write programs that naturally express the mathematics and algorithms employed, are portable across HPC systems, remain viable over decades of use, and extract a high percentage of performance from the underlying hardware."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-07-03 21:20:23+00:00",
                    "text": "Yes, it's paramount that we set the objectives ahead of time so we're clear ourselves what is it that we want to measure. Considering the scope of the project, I think this issue calls for a dedicated repo, fortran-lang/benchmarks."
                },
                {
                    "user": "certik",
                    "date": "2020-07-03 21:26:27+00:00",
                    "text": "Yes, definitely a dedicated repository, so that people can easily run the benchmarks on their systems. Only the results can be shown at fortran-lang.org."
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-06 09:24:11+00:00",
                    "text": "+1 for a benchmarks repo!\nIdeally, for the web-published results we would have a dedicated machine for automation and consistency of test-environment, but I guess this isn't strictly necessary if we're interested in relative comparisons.\nDo we only test free compilers like gfortran and flang or can we get a license for ifort and others?\n\nThis will also provide motivation for Fortran compiler vendors to speed up some of these benchmarks if Fortran is not the fastest.\n\nI agree, it will also identify any areas where Fortran is lagging behind; in the Julia benchmarks, Fortran seems to be let down by the integer parsing and the file io benchmarks (implementation here)."
                },
                {
                    "user": "certik",
                    "date": "2020-07-06 16:16:19+00:00",
                    "text": "The Debian shootout page is using Intel Fortran, so I suggest we use all Fortran compilers that are available to us. In fact, this can be a nice opportunity to compare the various Fortran compilers themselves. We can have different sections in the benchmarks, such as:\n\nFortran only (Fortran compilers comparison)\nLanguages comparison (the best is probably to show various Fortran and C++ and other languages' compilers); inline assembly and intrinsics are not allowed\nAssembly section (where any code in any form is allowed)\n\nThe \"Languages comparison\" section can also have subsections, like\n\nall optimizations on (the default section)\n-ffast-math not allowed (that's essentially the Julia benchmarks page), which has its merits, but I would argue most Fortran users care more about the \"all optimizations on\" section"
                },
                {
                    "user": "certik",
                    "date": "2020-07-09 15:25:15+00:00",
                    "text": "See also a related thread at https://fortran-lang.discourse.group/t/improving-fortran-results-in-the-julia-micro-benchmarks/198.\nLet's start the repository.\nHow about https://github.com/fortran-lang/benchmarks?"
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-09 15:56:16+00:00",
                    "text": "Sounds good! We can then discuss various options for implementation in the dedicated repo."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-07-09 16:00:44+00:00",
                    "text": "\ud83d\udc4d for fortran-lang/benchmarks"
                },
                {
                    "user": "certik",
                    "date": "2020-07-09 16:02:34+00:00",
                    "text": "Done, the repository is up, @LKedward you should have maintainer access. Go ahead and start it."
                }
            ]
        },
        {
            "number": 116,
            "user": "Irvise",
            "date": "2020-07-02 10:49:33+00:00",
            "title": "Expand do loops with cycle and exit",
            "text": "This is a minor expansion of the tutorial page on control flow.\nI am not entirely happy with the current result, but I cannot figure out why (probably because it is very short when compared to the rest of the file). So any comments on these changes are welcome.\nI expect to continue expanding this with do concurrent and tags. However, some initial feedback will be beneficial.\nThis pull is related to the discussion in #82.\nRegards,\nFernando",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2020-07-02 11:06:12+00:00",
                    "text": "This looks great @Irvise, definitely an improvement!\nThanks \ud83d\udc4d"
                },
                {
                    "user": "certik",
                    "date": "2020-07-02 15:43:58+00:00",
                    "text": "Thanks @Irvise, looks great!"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-07-02 17:39:29+00:00",
                    "text": "I agree, great addition, thank you!\n#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-07-02 17:40:30+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/116/"
                },
                {
                    "user": "Irvise",
                    "date": "2020-07-03 10:52:01+00:00",
                    "text": "I suppose this marks the end of the changes.\nPlease, check do concurrent since I am not well versed with it and I may have committed some mistakes.\nMore comments are welcome."
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-06 09:53:06+00:00",
                    "text": "Apologies for the delay @Irvise, I will review this today with specific feedback."
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-07 09:34:35+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-07 09:37:40+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-07 09:41:30+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-07-07 09:42:36+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/116/"
                },
                {
                    "user": "Irvise",
                    "date": "2020-07-07 10:01:12+00:00",
                    "text": "I have moved  do concurrent to the bottom and I have updated some comparison symbols to a more \"modern\" standard.\nI would say LGTM. Thanks @LKedward for the improvements!"
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-07 10:16:16+00:00",
                    "text": "Great stuff! \ud83d\udc4d  (Sorry for the conflicts!)\n#build_preview"
                },
                {
                    "user": "Irvise",
                    "date": "2020-07-07 13:55:07+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-07-07 13:56:07+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/116/"
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-08 08:25:02+00:00",
                    "text": "One last thing @Irvise, some of the indentation is rendering incorrectly for the cycle example, and the tagged nested loop example; the end if is not aligned with the opening if and the loop body has extra indentation. Can you make sure you're not using any tab characters, only spaces?"
                },
                {
                    "user": "Irvise",
                    "date": "2020-07-08 16:52:47+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-07-08 16:53:37+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/116/"
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-13 08:55:07+00:00",
                    "text": "I will merge as no other comments. Great addition @Irvise, thanks!"
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-13 08:58:35+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-07-13 08:58:57+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 115,
            "user": "LKedward",
            "date": "2020-06-25 13:13:35+00:00",
            "title": "Fix: README link to CONTRIBUTING.md",
            "text": "",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 114,
            "user": "LKedward",
            "date": "2020-06-25 13:08:03+00:00",
            "title": "Update: preview action for future posts.",
            "text": "Build PR previews with --future flag to allow previewing of future newsletters.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-06-25 21:57:44+00:00",
                    "text": "I'll merge so we can try it for the newsletter."
                }
            ]
        },
        {
            "number": 113,
            "user": "milancurcic",
            "date": "2020-06-23 17:48:47+00:00",
            "title": "Begin draft of the July newsletter",
            "text": "Will merge on July 1. Please review, edit, and approve before then.\nIf you make edits, please also add your name to the Authors list.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-06-23 17:49:20+00:00",
                    "text": "Assigned @certik for generating the contributors list."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-25 21:59:16+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-06-25 22:00:11+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/113/"
                },
                {
                    "user": "certik",
                    "date": "2020-06-30 19:47:43+00:00",
                    "text": "I'll update the data files either tonight or tomorrow."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-07-01 15:49:52+00:00",
                    "text": "@certik Sounds good. Whenever you get to update the data, check the newsletter that it looks good, add your edits and name to the list of authors, and merge. IMO it's good to go."
                },
                {
                    "user": "certik",
                    "date": "2020-07-02 04:28:52+00:00",
                    "text": "Didn't get to it today. Do you need this before your presentation, or can I do it some time tomorrow when I have time?"
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-02 08:05:32+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-07-02 08:06:23+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/113/"
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-02 08:40:05+00:00",
                    "text": "I'll update the data files either tonight or tomorrow.\n\nI'll move the data files out to a separate repo this month and set up a github action so we don't have to do this manually in future."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-07-02 12:34:32+00:00",
                    "text": "@certik I don't need it for the talk, please do it when it's convenient for you."
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-02 12:40:20+00:00",
                    "text": "@certik, @milancurcic, I pushed updated json data files this morning."
                },
                {
                    "user": "certik",
                    "date": "2020-07-02 13:25:34+00:00",
                    "text": "+1 to merge. Just a note that if we change the contributors section, we need to update all the newsletter with the new code."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-07-02 17:42:10+00:00",
                    "text": "Merging, thank you all!"
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-13 08:58:07+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-07-13 08:58:29+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 112,
            "user": "milancurcic",
            "date": "2020-06-23 16:03:06+00:00",
            "title": "Language tutorial topics",
            "text": "We discussed website tutorials on our June 19 call and we tentatively agreed to organize the mini-books that teach the language itself around topics, rather than skill level. Each mini-book would then cover the topic with increasing skill level, starting from the most basic concepts and building toward more advanced.\nThis is specific to the mini-books that teach the language itself. We'd still have other mini-books that cover other topics like building programs, best practices, Rosetta code and similar.\nOn the call a few people suggested that we discuss what should be the topics to cover. I think we should aim to define topics that are mostly complementary, have little overlap between each other (but it's impossible to completely avoid overlap). Here are the topics that I think would work well:\n\nBuilt-in types and operators\nControl flow\nProcedures\nModules\nArrays\nStrings\nDerived types\nI/O\nOOP\nParallel programming\nC-interop\n\nAs an example of building skill level within a topic, mini-book on parallel programming would cover all parallel concepts, from basic to advanced: Images, synchronization, coarrays, collectives, teams, events, and perhaps even some example parallel algorithms.\nIn this approach, a user of any skill level who wants to learn or refresh memory on any aspect of the language, knows where to look for it because the mini-books are organized by topic. Once in the mini-book, they can skip forward to more advanced aspects of a topic if needed.\nHow this all evolves exactly in practice, I don't know. Perhaps @LKedward will have some ideas. Perhaps we just expand the sections in the existing Quickstart until they become complete enough to warrant transitioning them into a dedicated mini-book.\nWhat do you think?",
            "is_open": true,
            "labels": [
                "learn"
            ],
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2020-06-24 12:30:12+00:00",
                    "text": "This sounds good @milancurcic! I like your topic breakdown - this gives us a good starting point!\nWhere there is overlap between topics, will we be referring the reader to the corresponding mini-book (as a recommended prerequisite) or will we be repeating the content in both mini-books? The obvious examples I can think of are Procedures/Interfaces being prerequisite for Modules/C-interop and Derived types being prerequisite to OOP.\nThe problem with repeated content is increased maintainer workload and potential confusion for readers as to where best to go for a topic. The former problem can probably be solved by sharing pages between mini-books in the yaml file but I feel this exacerbates the latter issue of confusing readers.\nIMO, I think for these situations it is best not to repeat content and to recommend pre-requisite mini-books in the introduction of the dependent mini-book. The disadvantage of this approach is that the mini-books are not perfectly self-contained but partially interdependent.\nThere is a question about the future of the Quickstart mini-book - I would prefer to keep the mini-book as a brief overview of the main language features but with links to the other mini-books for each topic in detail. The Quickstart mini-book would not be part of the core language mini-books but the 'Other' mini-books.\nFinally, your proposed Parallel Programming book is a Coarray Parallel Programming book - I want to ask whether we are going to additionally cover MPI, OpenMP, and OpenACC as well. IMO we should include these, each in a separate mini-book, because they are well-established standards and I don't see any reason to arbitrarily limit the tutorial content to just the Fortran standard."
                },
                {
                    "user": "ivan-pi",
                    "date": "2020-06-24 13:16:15+00:00",
                    "text": "Finally, your proposed Parallel Programming book is a Coarray Parallel Programming book - I want to ask whether we are going to additionally cover MPI, OpenMP, and OpenACC as well. IMO we should include these, each in a separate mini-book, because they are well-established standards and I don't see any reason to arbitrarily limit the tutorial content to just the Fortran standard.\n\n+1. Recently I was at an OpenMP training course where I discovered they have a lot of nice training material also for Fortran. The book by Dragos B. Chirila also contains an OpenMP chapter in the context of Fortran.\nAn overview of solutions for GPU programming including CUDA, OpenCL, OpenMP, and OpenACC from the Fortran perspective would also be nice. I understand however, that the goal of coarrays was exactly to remove the burden of having to learn all of these standards and focus instead on the actual problem. There is a recent paper where they attempted to use coarrays on GPUs.\nWe could also ask the developers of these standards if they are willing to contribute a mini-book."
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-24 14:54:13+00:00",
                    "text": "An overview of solutions for GPU programming including CUDA, OpenCL, OpenMP, and OpenACC from the Fortran perspective would also be nice.\n\nYes this is what I would like, though I am also aware that there is a lot of good preexisting material on these topics already.\n\nI understand however, that the goal of coarrays was exactly to remove the burden of having to learn all of these standards and focus instead on the actual problem.\n\nIt's great to have coarrays in the standard and I'm hopeful about their future, but unfortunately I'm not currently convinced of their maturity and portability (I can't yet find a native Windows version* except for ifort). Thanks for the paper link!\n\nWe could also ask the developers of these standards if they are willing to contribute a mini-book.\n\nGood idea!\n(edit: *I have not tried building OpenCoarrays from source on Windows.)"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-24 15:58:31+00:00",
                    "text": "Where there is overlap between topics, will we be referring the reader to the corresponding mini-book (as a recommended prerequisite) or will we be repeating the content in both mini-books? The obvious examples I can think of are Procedures/Interfaces being prerequisite for Modules/C-interop and Derived types being prerequisite to OOP.\n\nI also think referring the reader to other mini-books, rather than repetition, is better. One technique I learned from Manning is that if a mini-book (chapter) strongly depends on another, for example the way OOP depends on derived types, then at the beginning of the mini-book we can state clearly:\n\nThis tutorial assumes that you have a good grasp of the derived types. If you don't, please work through the derived types mini-book first.\n\nor similar. Another technique is to add a reference to a definition whenever we first bring up a term that we won't define here. For example, in OOP, when we first show a listing with a derived type in it, we can say something like:\n\nThis is a derived type, which is described in <link to derived type mini-book>.\n\n\nFinally, your proposed Parallel Programming book is a Coarray Parallel Programming book - I want to ask whether we are going to additionally cover MPI, OpenMP, and OpenACC as well. IMO we should include these, each in a separate mini-book, because they are well-established standards and I don't see any reason to arbitrarily limit the tutorial content to just the Fortran standard.\n\nYes, I meant it to cover only concepts that are part of the language, and I'd also like us to have separate mini-books on MPI, OpenMP, and OpenACC each."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-24 16:00:38+00:00",
                    "text": "It's great to have coarrays in the standard and I'm hopeful about their future, but unfortunately I'm not currently convinced of their maturity and portability (I can't yet find a native Windows version* except for ifort).\n\nI can confirm OpenCoarrays build and work well in WSL. I didn't try other Windows approaches."
                },
                {
                    "user": "certik",
                    "date": "2020-06-24 16:29:27+00:00",
                    "text": "I second that a tutorial how to use Fortran on GPUs efficiently would be key to help users around me stay in Fortran instead of moving to C++."
                }
            ]
        },
        {
            "number": 111,
            "user": "sblionel",
            "date": "2020-06-20 16:23:45+00:00",
            "title": "Add Doctor Fortran blog to learning.yml",
            "text": "Add Steve Lionel's \"Doctor Fortran\" blog to the list of external resources on the Fortran language",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-06-20 16:26:24+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-06-20 16:27:33+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/111/"
                },
                {
                    "user": "certik",
                    "date": "2020-06-20 16:54:28+00:00",
                    "text": "Thanks!"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-20 17:00:39+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-06-20 17:01:03+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 110,
            "user": "sblionel",
            "date": "2020-06-19 17:26:27+00:00",
            "title": "Add link to Doctor Fortran blog?",
            "text": "On the Learn page, please add a link under Other Resources > On the Web as follows:\nDoctor Fortran blog Posts about various aspects, features and misconceptions of the Fortran language\nI tried to figure out how to do this myself, but could not locate the source that has the list of links.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-06-19 17:49:35+00:00",
                    "text": "I agree. It needs to be added as an entry here."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-19 17:50:30+00:00",
                    "text": "Steve, give it a try adding it through a PR, otherwise I can help."
                },
                {
                    "user": "sblionel",
                    "date": "2020-06-19 18:24:08+00:00",
                    "text": "I have never done this before and the help isn't helping. I gather I need to create a branch first, but I never see the option to create a new branch when I type a branch name from the main page. If you can lead me through the steps, I'll give it another go."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-20 16:08:39+00:00",
                    "text": "If you use git on your local machine, use this workflow:\n\nNavigate to https://github.com/fortran-lang/fortran-lang.org\nClick on \"Fork\" in the upper-right corner. This will create a fork of this repository under your account at https://github.com/sblionel/fortran-lang.org.\nClone your fork to your local machine:\n\ngit clone https://github.com/sblionel/fortran-lang.org\n\nif you're using username+password to authenticate with GitHub, or:\ngit clone git@github.com:sblionel/fortran-lang.org\n\nif you're using an SSH key for a password-less auth.\n\nIn your local copy of the repo, create and checkout a new branch that will serve for this contribution:\n\ncd fortran-lang.org\ngit branch 110-add-drfortran-blog # creates a new branch with the name 110-add-drfortran-blog\ngit checkout 110-add-drfortran-blog # switch to the new branch\n\nYou can name the branch anything you want, but generally it's helpful to put which issue it fixes (110) and a short description in the name.\n\nMake changes to _data/learning.yml in your local copy.\nStage, commit, and push your changes to GitHub:\n\ngit add _data/learning.yml # this stages the changes in this file\ngit commit -m \"add Dr. Fortran blog entry to the resources\" # this commits the change to the repository on your local machine\ngit push origin 110-add-drfortran-blog # this will push your updated branch to your fork on GitHub at sblionel/fortran-lang.org\n\n\nNow navigate to https://github.com/fortran-lang/fortran-lang.org again. Near the top of the page you'll see a yellow box with a suggestion to open a PR with your recent contribution. There will be a button there that says \"Compare and open PR\" or something similar. Click on it. This will take you to a PR dialog that looks very much like opening a new issue, and you should be good from there.\n\nThis approach is tedious and has many steps, but becomes really useful when you need to develop and test on your local machine, and make changes to many files.\n\nAlternatively, if you don't use git on your local machine, there is a simpler workflow through GitHub, although I think it's useful only for smaller, single file contributions. For what you want to do here, it should suffice. I am less clear about this approach but I will try.\n\nNavigate to https://github.com/fortran-lang/fortran-lang.org/blob/master/_data/learning.yml, that's the file you want to edit.\nIn the upper-right corner, click on the little pencil (\"Edit\") button. This will take you to the in-browser editor to make changes directly. Because you don't have permissions to write to the file directly, GitHub will automatically create a fork for you, but you don't have to worry about doing anything with it.\nOnce you made the changes, somewhere at the bottom there will be a prompt to open a pull request. This is the part I'm less clear about how it looks exactly because I did this myself only a few times. But the UI should be able to guide you.\n\nLet me know how it goes or if anything's unclear. I recently guided Arjen in #77 to do the same. It seems that it would be useful that we have these notes somewhere prominent on the website, as these steps apply to all projects."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-20 16:21:35+00:00",
                    "text": "I realize now that in the first (longer) workflow, you can skip steps 3 through 6, and edit the file in your fork directly on GitHub, then go straight to step 7."
                },
                {
                    "user": "sblionel",
                    "date": "2020-06-20 16:25:09+00:00",
                    "text": "Thanks! I chose the simpler route of doing it through Github, but I will keep this in mind for the future. The UI was straightforward."
                }
            ]
        },
        {
            "number": 109,
            "user": "MarDiehl",
            "date": "2020-06-19 16:16:08+00:00",
            "title": "better not write all functions again",
            "text": "just a small hint that I find helpful",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "MarDiehl",
                    "date": "2020-06-19 17:54:43+00:00",
                    "text": "I also thought about changing the example, but then decided this is pedagogical not bad: Learn the manual implementation and learn that there is an intrinsic. I also could not think of a good example for a vector reduction to a scalar. min and max are also intrinsic.\nThe example is anyways really basic, I would never make the size of the array an extra argument."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-22 21:48:42+00:00",
                    "text": "Small PR with no objections, merging. Thank you, Martin!"
                }
            ]
        },
        {
            "number": 108,
            "user": "milancurcic",
            "date": "2020-06-19 01:17:32+00:00",
            "title": "Fix indenting and few other minor things in the building programs mini-book",
            "text": "This PR makes a few aesthetic fixes to the building programs mini-book:\n\nRemove date from the top page\nFix code indentation throughout\nOne or two other miscellaneous things",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 107,
            "user": "GS76",
            "date": "2020-06-15 20:59:28+00:00",
            "title": "Update hello_world.md",
            "text": "Replacing the original link to the Windows binaries with the following link:\nhttp://www.equation.com/servlet/equation.cmd?fa=fortran",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "GS76",
                    "date": "2020-06-16 09:16:21+00:00",
                    "text": "@LKedward\nI was able to install the gfortran.\nI then checked the version in a different path and it worked.\nI did not need to define the environment variables.\nRegards."
                },
                {
                    "user": "GS76",
                    "date": "2020-06-17 05:46:11+00:00",
                    "text": "Hi all,\nI am unsure what I should do now as I do not see this change live on fortran-lang.org?"
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-17 06:15:00+00:00",
                    "text": "Hi @GS76, we haven't merged this yet hence why it isn't on the site.\nEverything looks good to merge except I notice you haven't committed Milan's suggestion for macOS - if you've done this locally on your computer, don't forget to push again to the same branch. Otherwise you can also commit the change via the web interface."
                },
                {
                    "user": "GS76",
                    "date": "2020-06-17 06:57:58+00:00",
                    "text": "Hi @GS76, we haven't merged this yet hence why it isn't on the site.\nEverything looks good to merge except I notice you haven't committed Milan's suggestion for macOS - if you've done this locally on your computer, don't forget to push again to the same branch. Otherwise, you can also commit the change via the web interface.\n\nHi @LKedward\nHow are you?\nI do not have access to a macOS machine so I can not test this.\nThank you."
                },
                {
                    "user": "GS76",
                    "date": "2020-06-17 07:05:01+00:00",
                    "text": "Hi @LKedward\nApologies, did I do the wrong thing by closing this as it is unmerged.\nI am inexperienced with Github.\nHow can I correct this"
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-17 08:03:00+00:00",
                    "text": "Apologies, did I do the wrong thing by closing this as it is unmerged.\n\nNot to worry, PR is reopened now.\n\nI am inexperienced with Github.\n\ngit and github have a bit of a learning curve but I promise it doesn't take long to become familiar with the processes. We really appreciate the effort on your part in learning these tools and contributing to the site \ud83d\udc4d\n\n...\nHow can I correct this\n\nYou won't have permission to merge this pull request yourself - I hope you can understand my reluctance to merge it since, as Milan pointed out, the text currently points macOS users to the site for windows binaries.\n\nI do not have access to a macOS machine so I can not test this.\n\nI agree this is important and, while I also cannot test this, Milan's suggestion for macOS is exactly what is recommended on the gcc binaries page: https://gcc.gnu.org/install/binaries.html.\nFinally, I have confidence in the Homebrew system since it is currently used by the stdlib continuous integration tests (which run after each commit)."
                },
                {
                    "user": "GS76",
                    "date": "2020-06-17 08:12:59+00:00",
                    "text": "Apologies, did I do the wrong thing by closing this as it is unmerged.\n\nNot to worry, PR is reopened now.\n\nI am inexperienced with Github.\n\ngit and github have a bit of a learning curve but I promise it doesn't take long to become familiar with the processes. We really appreciate the effort on your part in learning these tools and contributing to the site \ud83d\udc4d\n\n...\nHow can I correct this\n\nYou won't have permission to merge this pull request yourself - I hope you can understand my reluctance to merge it since, as Milan pointed out, the text currently points macOS users to the site for windows binaries.\n\nI do not have access to a macOS machine so I can not test this.\n\nI agree this is important and, while I also cannot test this, Milan's suggestion for macOS is exactly what is recommended on the gcc binaries page: https://gcc.gnu.org/install/binaries.html.\nFinally, I have confidence in the Homebrew system since it is currently used by the stdlib continuous integration tests (which run after each commit).\n\n@LKedward\nI am in complete agreement.\nWe should do it once correctly.\nThat macOS project looks like the right way to go. Now to just find an Apple user to help us test."
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-17 09:02:30+00:00",
                    "text": "Thanks @GS76.\nTo be clear, I think this PR can be merged with Milan's suggestion included, since the site already recommends these macOS solutions indirectly by referencing the link to gcc binaries page.\nHowever if you would prefer to hold off until they have been tested by the community, then I have no objection to that.\nWhat do you think @milancurcic?"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-17 13:10:19+00:00",
                    "text": "Sorry @GS76 and @LKedward for not responding sooner to this.\n@zbeekman and @scivision can either of you confirm that the following instruction is accurate:\n\nOn macOS, you can install gfortran using Homebrew or MacPorts."
                },
                {
                    "user": "scivision",
                    "date": "2020-06-17 13:15:44+00:00",
                    "text": "Yes I tell everyone to use Homebrew for Mac OS. I think we should note that the user \"brew install gcc\" with homebrew"
                },
                {
                    "user": "GS76",
                    "date": "2020-06-17 13:25:12+00:00",
                    "text": "Thank you @milancurcic, @LKedward and @scivision.\nLet me know how I can help to close this out.\nI will then continue testing the tutorials on the site."
                },
                {
                    "user": "scivision",
                    "date": "2020-06-17 14:00:02+00:00",
                    "text": "The issue is that if users do brew install gfortran they're getting not the latest binaries. The main package is brew install gcc"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-17 14:07:38+00:00",
                    "text": "Thank you @scivision. We should definitely add the specific Homebrew instructions, though this belongs to a dedicated section on how to install gfortran, with subsections for Homebrew, Ubuntu, Fedora, Windows, etc. Let's tackle these in a separate PR.\nThank you @GS76, I will merge now."
                },
                {
                    "user": "GS76",
                    "date": "2020-06-17 14:36:40+00:00",
                    "text": "Hi all,\nIs this complete? What is remaining now? Sorry, new to Github?"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-17 14:43:18+00:00",
                    "text": "Yes, it's merged (which automatically closes the PR) and your changes are live on the website. \ud83c\udf89"
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-17 14:43:24+00:00",
                    "text": "Hi @GS76, yes this has been merged and published successfully! Many thanks \ud83d\udc4d\n(Note that the site can take some time to update - see the CONTRIBUTOR guide for how to force a  refresh)"
                }
            ]
        },
        {
            "number": 106,
            "user": "GS76",
            "date": "2020-06-15 20:02:21+00:00",
            "title": "Quickstart tutorial: Replacing the link for Windows version of gfortran",
            "text": "The \"Quickstart Fortran tutorial\" works well.\nHowever, the link to the Windows install for gfortran should be updated to the following link:\nhttp://www.equation.com/servlet/equation.cmd?fa=fortran\nThere is a 32-bit and 64-bit versions of the latest as well as weekly versions of the GNU gcc builds, including OpenMP and other libraries.\nIt has been tested and works.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-06-15 20:13:00+00:00",
                    "text": "@GS76 thanks for opening an issue for this. Would you mind submitting a pull request (PR) for this?"
                },
                {
                    "user": "GS76",
                    "date": "2020-06-15 20:50:07+00:00",
                    "text": "@certik, no problem. I will do so."
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-18 12:56:31+00:00",
                    "text": "Closing, fixed by #107. Thanks again @GS76"
                },
                {
                    "user": "GS76",
                    "date": "2020-06-18 14:03:16+00:00",
                    "text": "My pleasure. Thank you for everyone's assistance."
                }
            ]
        },
        {
            "number": 105,
            "user": "certik",
            "date": "2020-06-08 18:06:53+00:00",
            "title": "Contributor graph does not work on mobile",
            "text": "The contributor graph at https://fortran-lang.org/community/ does not work on my iPhone:\n\nI have iPhone 10 and Firefox. I also tried Safari, the same result.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-06-08 18:10:59+00:00",
                    "text": "FWIW, it works on Android 9 and Chrome."
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-08 18:12:28+00:00",
                    "text": "Thanks for the report @certik - I will look into this.\n(I only tested with Android + Chrome on mobile)"
                },
                {
                    "user": "certik",
                    "date": "2020-06-08 18:13:10+00:00",
                    "text": "@LKedward thanks. Let me know if you want me to test something, I am happy to do that."
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-10 08:22:58+00:00",
                    "text": "I've been able to reproduce in the Midori web browser (on Ubuntu) which I think uses the same Webkit engine as Safari.\nThe problem appears to be with parsing the date string from the JSON files with the Javascript Date object where some browsers implement more supported date formats in addition to the standard format.\n@certik can you test a simple fix that I'm trialling here: https://lkedward.github.io/fortran-lang.github.io/community/. Can you check both Safari and Firefox on your iPhone?\nThere may still be a few formatting issues but if it works I will open a PR.\nThanks \ud83d\udc4d"
                }
            ]
        },
        {
            "number": 104,
            "user": "LKedward",
            "date": "2020-06-08 15:44:21+00:00",
            "title": "Update contributor guide",
            "text": "Add introduction to CONTRIBUTING.md about how the site works\nMinor updates to workflow and style guide\nUpdate README with links to contributor documentation\nReplace deprecated bundle syntax in README",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "smeskos",
                    "date": "2020-06-08 17:46:39+00:00",
                    "text": "Hi @LKedward, great work. As a beginner, myself, that went through this process only a couple of days ago, there is still one thing that I haven't figured out, and it's not clear (to me) in your updated guide. The build preview process. Does a preview need to be built only once, and all subsequent commits/pushes are updated automatically in the preview, or a new preview needs to be built after each new push?\nAlso, great that you noted the issue with the cashed preview not updating and providing a solution! Small details like that make difference... e.g. I wouldn't have spammed so many build-previews in my PR :)."
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-08 18:03:55+00:00",
                    "text": "Thanks for the feedback @smeskos!\n\nDoes a preview need to be built only once, and all subsequent commits/pushes are updated automatically in the preview, or a new preview needs to be built after each new push?\n\nGood question. No, the preview builds must be triggered manually with '{hash}build_preview' whenever you push updated commits. This may be updated in the future to provide a more automated workflow - I just need to learn how GitHub permissions work first.\nI will update the workflow text with this explanation."
                }
            ]
        },
        {
            "number": 103,
            "user": "LKedward",
            "date": "2020-06-08 15:40:12+00:00",
            "title": "Add: .gitignore to repo.",
            "text": "Fixes #97",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-06-08 18:12:25+00:00",
                    "text": "Thank you, this solves for most of our needs. This PR is straightforward and doesn't affect the website so I'll go ahead and merge it."
                }
            ]
        },
        {
            "number": 102,
            "user": "LKedward",
            "date": "2020-06-08 07:41:23+00:00",
            "title": "External dependencies",
            "text": "PR #100 adds a Javascript library and JSON data files - as discussed in this PR, these are best left out of the main repository. In the case of the JSON files, this is because of their file size.\nTwo solutions I can think of:\n\n\nAdd a shell script for cloning and updating dependencies from their respective repositories -\nscript is run in CI and by contributors at checkout;\n\n\nUse git submodules.\n\n\nMy preference is for submodules:\n\nSubmodules are designed specifically for this purpose\nI don't like the idea of maintaining a shell script\nChecking-out submodules is a simpler workflow than requiring contributors to run a shell script\n\nMy impression is that the issues people face with submodules are usually when pushing commits to repositories from submodules - we won't be doing that.",
            "is_open": true,
            "labels": [],
            "comments": []
        },
        {
            "number": 101,
            "user": "jvdp1",
            "date": "2020-06-07 10:50:20+00:00",
            "title": "Code style for Fortran examples in the tutorials?",
            "text": "In both #99 and #96 the code style is mentioned. Should we use the same code style as for stdlib?",
            "is_open": true,
            "labels": [],
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2020-06-07 11:01:37+00:00",
                    "text": "It makes sense to adopt the same code style guidelines for all Fortran-lang projects.\nUnfortunately I have a strong gripe with the stdlib code style which is the 4-space indentation.\nI realise the time has passed for me to voice my opinion on this, however my reasoning is that limiting line lengths to 80 characters is really useful for readability and side-by-side editing, but 4-space indentation massively reduces the amount of usable line length and leads to many line-continuations which greatly reduce readability. 2-spaces are perfectly sufficient for indentation and don't eat-up your usable characters."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-07 11:24:56+00:00",
                    "text": "Laurence, I also oppose the 4-spaces indent. I can't find the original poll now, but I vaguely recall that it was about 50-50 between 2 and 4 spaces, perhaps slightly in favor of 2. It may be time for another vote.\nBut we need a dedicated style guide for the tutorials (you'll see that many items in the stdlib guide don't apply here), and be consistent with it."
                },
                {
                    "user": "jvdp1",
                    "date": "2020-06-07 12:02:26+00:00",
                    "text": "Here are the issues related to this topic in stdlib: [#57](https://github.com/fortran-lang/stdlib/pull/57] and #3\nIt is indeed maybe worthwhile to re-open it."
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-07 12:35:48+00:00",
                    "text": "Thanks for the links @jvdp1 - I would support re-opening the discussion on spaces, but that is for another thread.\nPS. I also notice that the line limit problem is made worse in stdlib by needing to also indent preprocessor blocks."
                },
                {
                    "user": "everythingfunctional",
                    "date": "2020-06-07 21:54:25+00:00",
                    "text": "I have a suggestion on how we should work through defining a style guide. Lot's of people are going to have very strong opinions on the subject, and on each aspect of code style. We should have some example code (several probably), format it according to various styles, and have a community wide poll on what people find most readable. Hopefully this can minimize the arguing."
                },
                {
                    "user": "certik",
                    "date": "2020-06-08 02:45:50+00:00",
                    "text": "We went with 4 spaces with the idea that we can re-evaluate in few months.\nLet's do what @everythingfunctional suggested. So let's take representative codes, indent them with the various way, and let the community vote.\nIf there is a clear winner, let's go with that. If there is not a clear winner, then we'll have to decide what to do. We spent a lot of time on this before, so I would prefer, if possible, that we don't waste weeks of time on this again. I understand if the current setup is irritating, that people are unhappy. If we switch, it will be irritating to some others. I personally definitely prefer 4 spaces, just like in Python and C++ (however I do not indent inside modules and subroutines, to save horizontal space), but I will go with whatever the community prefers based on the votes, and if it's 2 spaces, we can do that."
                },
                {
                    "user": "smeskos",
                    "date": "2020-06-20 17:00:24+00:00",
                    "text": "I suggest that we move forward with a poll to decide whether people want a code style or not. If yes, we should proceed asap with a survey on the details. I mentioned this issue yesterday at the monthly call, and I insist again, here, because now is the time to decide while the project is still young with only a few lines of code uploaded, and while the main contributors are all active and can quickly refactor their codes. If it takes 6 months or more, it might be too late. Also, to prevent long debates and misunderstandings, we should definitely emphasize that whatever coding style is chosen, it will merely be for the sake of consistency of the tutorials and by no means something official."
                },
                {
                    "user": "certik",
                    "date": "2020-06-20 20:25:18+00:00",
                    "text": "I agree, let's start a poll if we want a coding style to be used in tutorials.\n\nI vote yes.\n\u2026\nOn Sat, Jun 20, 2020, at 11:00 AM, smeskos wrote:\n\n\n I suggest that we move forward with a poll to decide whether people\n want a code style or not. If yes, we should proceed asap with a survey\n on the details. I mentioned this issue yesterday at the monthly call,\n and I insist again, here, because now is the time to decide while the\n project is still young with only a few lines of code uploaded, and\n while the main contributors are all active and can quickly refactor\n their codes. If it takes 6 months or more, it might be too late. Also,\n to prevent long debates and misunderstandings, we should definitely\n emphasize that whatever coding style is chosen, it will merely be for\n the sake of consistency of the tutorials and by no means something\n official.\n\n \u2014\n You are receiving this because you commented.\n Reply to this email directly, view it on GitHub\n <#101 (comment)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAAFAWF6K4NPM6IMNDTAE3DRXTTLHANCNFSM4NXCUEKA>."
                },
                {
                    "user": "certik",
                    "date": "2020-06-20 20:30:10+00:00",
                    "text": "To clarify the question I am voting yes is:\n\nDo I prefer to have a coding style agreed upon by the community even if it might contain some things that I personally do not like?\n\u2026\nOn Sat, Jun 20, 2020, at 2:24 PM, Ond\u0159ej \u010cert\u00edk wrote:\n I agree, let's start a poll if we want a coding style to be used in tutorials.\n\n I vote yes.\n\n On Sat, Jun 20, 2020, at 11:00 AM, smeskos wrote:\n >\n >\n > I suggest that we move forward with a poll to decide whether people\n > want a code style or not. If yes, we should proceed asap with a survey\n > on the details. I mentioned this issue yesterday at the monthly call,\n > and I insist again, here, because now is the time to decide while the\n > project is still young with only a few lines of code uploaded, and\n > while the main contributors are all active and can quickly refactor\n > their codes. If it takes 6 months or more, it might be too late. Also,\n > to prevent long debates and misunderstandings, we should definitely\n > emphasize that whatever coding style is chosen, it will merely be for\n > the sake of consistency of the tutorials and by no means something\n > official.\n >\n > \u2014\n > You are receiving this because you commented.\n > Reply to this email directly, view it on GitHub\n > <#101 (comment)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAAFAWF6K4NPM6IMNDTAE3DRXTTLHANCNFSM4NXCUEKA>.\n >"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-21 15:41:31+00:00",
                    "text": "I think the response will be unanimous, but we need to document it. To do that, I created a poll here:\nhttps://fortran-lang.discourse.group/t/style-guide-for-fortran-lang-org-do-we-want-a-style-guide/134\nPlease cast your vote there. Don't vote in GitHub issues, it doesn't scale well for voting."
                },
                {
                    "user": "nncarlson",
                    "date": "2020-06-21 22:49:24+00:00",
                    "text": "No, I don't think it will be unanimous.  What is the proposed scope of the coding style? There's a whole spectrum of things that could potentially be specified, to the point of being overbearing. Some amount of consistency across the tutorials is clearly good, but if it's too overbearing you may find that you've selected away potential contributors. I know I've seen some coding styles that I find horrendous and could not bring myself to follow."
                },
                {
                    "user": "certik",
                    "date": "2020-06-21 23:17:57+00:00",
                    "text": "I agree. The question is unfortunately formulated. I think it should ask: should we try to agree on code formatting conventions for tutorials?\n\nSo voting yes can still mean voting no later if the convention that most voted for is unacceptable to you. And if we can't reach a consensus I don't think we should be forcing it on everybody.\n\nThe question is, should we even try to find a consensus?\n\u2026\nOn Sun, Jun 21, 2020, at 4:49 PM, Neil Carlson wrote:\n\n\n No, I don't think it will be unanimous. What is the proposed scope of\n the coding style? There's a whole spectrum of things that could\n potentially be specified, to the point of being overbearing. Some\n amount of consistency across the tutorials is clearly good, but if it's\n too overbearing you may find that you've selected away potential\n contributors. I know I've seen some coding styles that I find\n horrendous and could not bring myself to follow.\n\n \u2014\n You are receiving this because you commented.\n Reply to this email directly, view it on GitHub\n <#101 (comment)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAAFAWAFXR6ISATHM2UTXK3RX2FABANCNFSM4NXCUEKA>."
                }
            ]
        },
        {
            "number": 100,
            "user": "LKedward",
            "date": "2020-06-06 10:31:06+00:00",
            "title": "Add community section",
            "text": "This PR creates a new top-level page called 'Community' for the Fortran-lang projects in order to:\n\nProvide instructions & links for (new) contributors\nLink to project documentation\nList and acknowledge contributors\n\nThe PR includes json data files from https://gitlab.com/fortran-lang/github_stats_data which is used to generate the contributor lists and plots. On the new community page you can use the slider beneath the aggregate plot to filter contributions by a specific date range.\nThe contributions list can also be incorporated into newsletters with a fixed date range, which I have done for the June newsletter as an example.\nWork for future PRs will be:\n\nincluding commit data into contributions;\nusing github actions to update json data periodically.\n\nAs always, I value feedback on this - my focus has been on the structure and implementation, so any suggestions for the text content are especially welcome.\n(Apologies for the size of this PR, it grew to more than I was initially planning to organise and cleanup the javascript files.)",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2020-06-06 10:31:17+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-06-06 10:32:17+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/100/"
                },
                {
                    "user": "jvdp1",
                    "date": "2020-06-06 10:49:35+00:00",
                    "text": "Great new page!"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-06 19:45:39+00:00",
                    "text": "This is excellent, thank you Laurence. Very nice contribution graphs. Are contributions == commits + comments?"
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-06 20:11:03+00:00",
                    "text": "This is excellent, thank you Laurence. Very nice contribution graphs. Are contributions == commits + comments?\n\nThanks!\nNo, I should have said: currently it's just comments because that's what's in the json files currently - when Ond\u0159ej updates his stats scripts, it will include commits as well.\n@certik"
                },
                {
                    "user": "everythingfunctional",
                    "date": "2020-06-07 03:30:01+00:00",
                    "text": "This is really cool. I think it helps to gameify things enough to keep us all coming back and contributing. And the more we keep contributing the better it will get and the more it will grow and then turn into a virtuous cycle. Great addition."
                },
                {
                    "user": "certik",
                    "date": "2020-06-07 04:34:22+00:00",
                    "text": "@everythingfunctional you got the idea. We want people to feel proud and excited to be visible there."
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-07 10:20:41+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-06-07 10:21:36+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/100/"
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-07 10:30:58+00:00",
                    "text": "Thanks for the feedback!\nRegarding the javascript library and JSON data files, I agree that these should ideally be left out of this repository - CI downloading is an option, but we also don't want the CI environment to be able to diverge from the local clones, i.e. we need a solution that brings dependencies into the local repos as well.\nMy preferred solution to this would be to use git submodules, however I'm aware that some people do not like submodules. I personally have never had any problems with submodules and the advantage here is that it minimally affects contributor workflow while also allowing dependencies in separate repos.\nDoes anyone have a strong preference not to use git submodules?"
                },
                {
                    "user": "certik",
                    "date": "2020-06-07 16:35:13+00:00",
                    "text": "I think this can be merged as far as I am concerned.\nI personally am not a big fan of submodules, it's an extra struggle. But I am also not against it, and I think it technically does what we need: keeping the big files out of the repository. And since you are @LKedward the main contributor to this website (as apparent from the statistics in this PR:), and you like submodules, then let's use them.\nIf too many people struggle with them, we can always move to another solution later.\nThanks again for this PR."
                },
                {
                    "user": "everythingfunctional",
                    "date": "2020-06-07 22:00:38+00:00",
                    "text": "I have good success using submodules as a dependency management strategy. I would vote for using them. As @certik said, we can move to something else later if need be."
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-08 07:24:26+00:00",
                    "text": "Okay I will merge and open a new issue for the external dependencies."
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-08 07:27:16+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-06-08 07:27:37+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 99,
            "user": "arjenmarkus",
            "date": "2020-06-05 19:23:56+00:00",
            "title": "Update of the minibook on building programs:",
            "text": "Text split into separate \"chapters\"/\"sections\"\nApplying consistent mark-up for code sections and keywords and such\nApplying most suggestions from the reviews (I have kept the \"tabulate.f90\"\nmostly as it was, but I have changed the name of the module to make it\na bit clearer.\nSmall textual changes in places",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-06-05 19:36:47+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-06-05 19:37:36+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/99/"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-05 19:46:05+00:00",
                    "text": "@arjenmarkus does this PR supersede the previous one (#90)?"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-05 19:57:04+00:00",
                    "text": "@LKedward do you know why this preview didn't build? The preview site doesn't load for me."
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-05 20:17:17+00:00",
                    "text": "@LKedward do you know why this preview didn't build? The preview site doesn't load for me.\n\nIt's working for me - can you try on another device, maybe with mobile internet?\nI've had this issue before; I think there may be some kind of caching issue with github pages where if you visit the new address too soon, it caches the 404 and keeps serving you with it."
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-05 20:18:52+00:00",
                    "text": "@milancurcic - also give https://fortran-lang.org/pr/99/index.html a try."
                },
                {
                    "user": "certik",
                    "date": "2020-06-05 20:21:45+00:00",
                    "text": "I think this looks great, thank you.\nOnce fpm is more usable, we can update the tutorial to show how to do this using fpm."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-06-05 20:32:00+00:00",
                    "text": "Hi Milan,\n\nyes, this is the result of the suggestions made earlier by J\u00e9r\u00e9mie and\nothers, and of splitting up the text based on the recipe by Laurence.\n\nRegards,\n\nArjen\n\nOp vr 5 jun. 2020 om 21:46 schreef Milan Curcic <notifications@github.com>:\n\u2026\n @arjenmarkus <https://github.com/arjenmarkus> does this PR supersede the\n previous one (#90\n <#90>)?\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#99 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YRYX6AKRXFY6MBYLTJDRVFDSFANCNFSM4NU76QZQ>\n ."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-06 20:09:15+00:00",
                    "text": "@arjenmarkus As you review the suggestions, click on \"Commit suggestion\" to automatically incorporate it in this PR, or just \"Resolve conversation\" to dismiss it."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-06-08 06:43:13+00:00",
                    "text": "Hi everyone,\n\nThanks for the suggestions and the approval. I hope to find time in the\nnext few days (let's be careful with promises) to incorporate these\nsuggestions. (I confess being a trifle lazy when it comes to hunting down\nthe relevant URLs :)).\n\nRegards,\nArjen\n\n\nOp zo 7 jun. 2020 om 13:04 schreef Laurence Kedward <\nnotifications@github.com>:\n\u2026\n ***@***.**** approved this pull request.\n\n Thanks Arjen for your work on this - it's looking really good \ud83d\udc4d\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#99 (review)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YR6AIQVUPIOUL34AS2TRVNX2XANCNFSM4NU76QZQ>\n ."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-06-08 06:45:57+00:00",
                    "text": "Hi Milan,\n\nwrt the indentation, hm, no, not really - at least I guess they are\nsuperfluous now that the blocks are marked with the programming language. I\ndid not realise the indentation could be removed. That could certainly be a\ncosmetic update.\n\nRegards,\n\nArjen\n\nOp za 6 jun. 2020 om 22:08 schreef Milan Curcic <notifications@github.com>:\n\u2026\n ***@***.**** approved this pull request.\n\n @arjenmarkus <https://github.com/arjenmarkus> Thanks a lot. I love your\n writing style. I left several minor suggestions.\n\n I noticed that many code listings/snippets are entirely indented by 4 or 8\n spaces. Are these indentations necessary?\n ------------------------------\n\n In learn/building_programs/build_tools.md\n <#99 (comment)>\n :\n\n > +* The `make` utility is a classical tool that uses instructions about\n\n +how the various components of a program depend on each other to\n\n +efficiently compile and link the program (or programs). It takes a\n\n +so-called `Makefile` that contains the dependencies.\n\n +\n\n +    Simply put:\n\n +\n\n +    If a program file is older than any of the libraries and object files\n\n +it depends on, the make utility knows it has to rebuild it and goes on\n\n +to look at the libraries and object files - are any out of date?\n\n +\n\n +    If an object file is older than the corresponding source file, the\n\n +make utility knows it has to compile the source file.\n\n +\n\n +* Integrated development tools take care of many of the above details. A\n\n +popular tool on Windows is MicroSoft's Visual Studio, but others exist,\n\n\n \u2b07\ufe0f Suggested change\n\n -popular tool on Windows is MicroSoft's Visual Studio, but others exist,\n\n +popular cross-platform  tool is Microsoft's [Visual Studio Code](https://code.visualstudio.com/), but others exist,\n\n\n ------------------------------\n\n In learn/building_programs/build_tools.md\n <#99 (comment)>\n :\n\n > +how the various components of a program depend on each other to\n\n +efficiently compile and link the program (or programs). It takes a\n\n +so-called `Makefile` that contains the dependencies.\n\n +\n\n +    Simply put:\n\n +\n\n +    If a program file is older than any of the libraries and object files\n\n +it depends on, the make utility knows it has to rebuild it and goes on\n\n +to look at the libraries and object files - are any out of date?\n\n +\n\n +    If an object file is older than the corresponding source file, the\n\n +make utility knows it has to compile the source file.\n\n +\n\n +* Integrated development tools take care of many of the above details. A\n\n +popular tool on Windows is MicroSoft's Visual Studio, but others exist,\n\n +such as Eclipse (Photran) and Code::Blocks. They offer a graphical\n\n\n \u2b07\ufe0f Suggested change\n\n -such as Eclipse (Photran) and Code::Blocks. They offer a graphical\n\n +such as [Atom](https://atom.io/), [Eclipse Photran](https://www.eclipse.org/photran/), and [Code::Blocks](http://www.codeblocks.org/). They offer a graphical\n\n\n ------------------------------\n\n In learn/building_programs/build_tools.md\n <#99 (comment)>\n :\n\n > +    Simply put:\n\n +\n\n +    If a program file is older than any of the libraries and object files\n\n +it depends on, the make utility knows it has to rebuild it and goes on\n\n +to look at the libraries and object files - are any out of date?\n\n +\n\n +    If an object file is older than the corresponding source file, the\n\n +make utility knows it has to compile the source file.\n\n +\n\n +* Integrated development tools take care of many of the above details. A\n\n +popular tool on Windows is MicroSoft's Visual Studio, but others exist,\n\n +such as Eclipse (Photran) and Code::Blocks. They offer a graphical\n\n +user-interface, but are often very specific for the compiler and\n\n +platform.\n\n +\n\n +* Maintenance tools like autotools and CMake can generate makefiles or\n\n\n \u2b07\ufe0f Suggested change\n\n -* Maintenance tools like autotools and CMake can generate makefiles or\n\n +* Maintenance tools like autotools and CMake can generate Makefiles or\n\n\n ------------------------------\n\n In learn/building_programs/distributing.md\n <#99 (comment)>\n :\n\n > @@ -0,0 +1,136 @@\n\n +---\n\n +layout: book\n\n +title: Distributing your programs\n\n +permalink: /learn/building_programs/distributing\n\n +---\n\n +\n\n +When you distributed your programs, there are a number of options you can\n\n\n \u2b07\ufe0f Suggested change\n\n -When you distributed your programs, there are a number of options you can\n\n +When you distribute your programs, there are a number of options you can\n\n\n ------------------------------\n\n In learn/building_programs/distributing.md\n <#99 (comment)>\n :\n\n > @@ -0,0 +1,136 @@\n\n +---\n\n +layout: book\n\n +title: Distributing your programs\n\n +permalink: /learn/building_programs/distributing\n\n +---\n\n +\n\n +When you distributed your programs, there are a number of options you can\n\n +choose from:\n\n +\n\n +1. Distribute the entire source code\n\n +2. Distribute a pre-built executable program\n\n +3. Distribute static or dynamic libraries that people can use\n\n +\n\n +ad 1.\n\n\n What does ad. 1 (and so on) mean? Perhaps better to explicitly type out\n each item for each explanation\n ------------------------------\n\n In learn/building_programs/linking_pieces.md\n <#99 (comment)>\n :\n\n > +the function in the right way. It might be that you made a mistake and\n\n +called the function with two arguments instead of one. If the compiler\n\n +does not know anything about the function's interface, then it cannot\n\n +check anything.\n\n +\n\n +The second step invokes the compiler in such a way that:\n\n +\n\n +* it compiles the file \"tabulate.f90\" (using the module file);\n\n +* it invokes the linker to combine the object files tabulate.o and function.o into an\n\n +executable program - with the default name \"a.out\" or \"a.exe\" (if you\n\n +want a different name, use the option \"-o\").\n\n +\n\n +What you do not see in general is that the linker also adds a number of\n\n +extra files in this link step, the run-time libraries. These run-time\n\n +libraries contain all the \"standard\" stuff - low-level routines that do\n\n +the input and output to screen, the `sine` function and much more.\n\n\n \u2b07\ufe0f Suggested change\n\n -the input and output to screen, the `sine` function and much more.\n\n +the input and output to screen, the `sin` function and much more.\n\n\n ------------------------------\n\n In learn/building_programs/managing_libraries.md\n <#99 (comment)>\n :\n\n > +libraries remain outside the executable program and as a consequence\n\n +can be replaced without rebulding the entire program. Compilers and\n\n +indeed the operating system itself rely heavily on such dynamic\n\n +libraries. You could consider dynamic libraries as a sort of executable\n\n +programs that need a bit of help to be run.\n\n +\n\n +Building dynamic libraries works slightly differently from building\n\n +static libraries: you use the compiler/linker instead of a tool\n\n +like `ar` or `lib`.\n\n +\n\n +On Linux:\n\n +\n\n +```shell\n\n +    $ gfortran -fpic -c file1.f90 file2.f90\n\n +    $ gfortran -fpic -c file3.f90 ...\n\n +    $ gfortran -shared --o supportlib.so file1.o file2.o file3.o ...\n\n\n \u2b07\ufe0f Suggested change\n\n -    $ gfortran -shared --o supportlib.so file1.o file2.o file3.o ...\n\n +   $ gfortran -shared -o supportlib.so file1.o file2.o file3.o ...\n\n\n ------------------------------\n\n In learn/building_programs/managing_libraries.md\n <#99 (comment)>\n :\n\n > +\n\n +```shell\n\n +    $ gfortran -o tabulate tabulate.f90 function.dll\n\n +```\n\n +\n\n +The DLL and the .mod file are used to build the executable program\n\n +with checks on the function's interface, the right name and the reference\n\n +to \"a\" DLL, called \"function.dll\".\n\n +\n\n +You can replace the shared library \"function.dll\" by another one, implementing\n\n +a different function \"f\". Of course, you need to be careful to use the correct\n\n +interface for this function. The compiler/linker are not invoked anymore, so they\n\n +can do no checking.\n\n +\n\n +## Windows and Intel Fortran\n\n +The setup is the same as with GNU/Linux, but on Windows it is necessary\n\n\n \u2b07\ufe0f Suggested change\n\n -The setup is the same as with GNU/Linux, but on Windows it is necessary\n\n +The setup is the same as with Linux, but on Windows it is necessary\n\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#99 (review)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YRYLJAJZQDC6GSNHXVLRVKO2NANCNFSM4NU76QZQ>\n ."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-06-16 17:08:08+00:00",
                    "text": "How to resolve this conflict?"
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-06-16 17:09:52+00:00",
                    "text": "Hi everyone,\n\njust did my best to get the remaining suggestions in. I do not know exactly\nwhat to do with the conflict in learn.yml, so I would like your advice on\nthis.\n\nRegards,\n\nArjen\n\nOp ma 8 jun. 2020 om 08:45 schreef Arjen Markus <arjen.markus895@gmail.com>:\n\u2026\n Hi Milan,\n\n wrt the indentation, hm, no, not really - at least I guess they are\n superfluous now that the blocks are marked with the programming language. I\n did not realise the indentation could be removed. That could certainly be a\n cosmetic update.\n\n Regards,\n\n Arjen\n\n Op za 6 jun. 2020 om 22:08 schreef Milan Curcic ***@***.***\n >:\n\n> ***@***.**** approved this pull request.\n>\n> @arjenmarkus <https://github.com/arjenmarkus> Thanks a lot. I love your\n> writing style. I left several minor suggestions.\n>\n> I noticed that many code listings/snippets are entirely indented by 4 or\n> 8 spaces. Are these indentations necessary?\n> ------------------------------\n>\n> In learn/building_programs/build_tools.md\n> <#99 (comment)>\n> :\n>\n> > +* The `make` utility is a classical tool that uses instructions about\n>\n> +how the various components of a program depend on each other to\n>\n> +efficiently compile and link the program (or programs). It takes a\n>\n> +so-called `Makefile` that contains the dependencies.\n>\n> +\n>\n> +    Simply put:\n>\n> +\n>\n> +    If a program file is older than any of the libraries and object files\n>\n> +it depends on, the make utility knows it has to rebuild it and goes on\n>\n> +to look at the libraries and object files - are any out of date?\n>\n> +\n>\n> +    If an object file is older than the corresponding source file, the\n>\n> +make utility knows it has to compile the source file.\n>\n> +\n>\n> +* Integrated development tools take care of many of the above details. A\n>\n> +popular tool on Windows is MicroSoft's Visual Studio, but others exist,\n>\n>\n> \u2b07\ufe0f Suggested change\n>\n> -popular tool on Windows is MicroSoft's Visual Studio, but others exist,\n>\n> +popular cross-platform  tool is Microsoft's [Visual Studio Code](https://code.visualstudio.com/), but others exist,\n>\n>\n> ------------------------------\n>\n> In learn/building_programs/build_tools.md\n> <#99 (comment)>\n> :\n>\n> > +how the various components of a program depend on each other to\n>\n> +efficiently compile and link the program (or programs). It takes a\n>\n> +so-called `Makefile` that contains the dependencies.\n>\n> +\n>\n> +    Simply put:\n>\n> +\n>\n> +    If a program file is older than any of the libraries and object files\n>\n> +it depends on, the make utility knows it has to rebuild it and goes on\n>\n> +to look at the libraries and object files - are any out of date?\n>\n> +\n>\n> +    If an object file is older than the corresponding source file, the\n>\n> +make utility knows it has to compile the source file.\n>\n> +\n>\n> +* Integrated development tools take care of many of the above details. A\n>\n> +popular tool on Windows is MicroSoft's Visual Studio, but others exist,\n>\n> +such as Eclipse (Photran) and Code::Blocks. They offer a graphical\n>\n>\n> \u2b07\ufe0f Suggested change\n>\n> -such as Eclipse (Photran) and Code::Blocks. They offer a graphical\n>\n> +such as [Atom](https://atom.io/), [Eclipse Photran](https://www.eclipse.org/photran/), and [Code::Blocks](http://www.codeblocks.org/). They offer a graphical\n>\n>\n> ------------------------------\n>\n> In learn/building_programs/build_tools.md\n> <#99 (comment)>\n> :\n>\n> > +    Simply put:\n>\n> +\n>\n> +    If a program file is older than any of the libraries and object files\n>\n> +it depends on, the make utility knows it has to rebuild it and goes on\n>\n> +to look at the libraries and object files - are any out of date?\n>\n> +\n>\n> +    If an object file is older than the corresponding source file, the\n>\n> +make utility knows it has to compile the source file.\n>\n> +\n>\n> +* Integrated development tools take care of many of the above details. A\n>\n> +popular tool on Windows is MicroSoft's Visual Studio, but others exist,\n>\n> +such as Eclipse (Photran) and Code::Blocks. They offer a graphical\n>\n> +user-interface, but are often very specific for the compiler and\n>\n> +platform.\n>\n> +\n>\n> +* Maintenance tools like autotools and CMake can generate makefiles or\n>\n>\n> \u2b07\ufe0f Suggested change\n>\n> -* Maintenance tools like autotools and CMake can generate makefiles or\n>\n> +* Maintenance tools like autotools and CMake can generate Makefiles or\n>\n>\n> ------------------------------\n>\n> In learn/building_programs/distributing.md\n> <#99 (comment)>\n> :\n>\n> > @@ -0,0 +1,136 @@\n>\n> +---\n>\n> +layout: book\n>\n> +title: Distributing your programs\n>\n> +permalink: /learn/building_programs/distributing\n>\n> +---\n>\n> +\n>\n> +When you distributed your programs, there are a number of options you can\n>\n>\n> \u2b07\ufe0f Suggested change\n>\n> -When you distributed your programs, there are a number of options you can\n>\n> +When you distribute your programs, there are a number of options you can\n>\n>\n> ------------------------------\n>\n> In learn/building_programs/distributing.md\n> <#99 (comment)>\n> :\n>\n> > @@ -0,0 +1,136 @@\n>\n> +---\n>\n> +layout: book\n>\n> +title: Distributing your programs\n>\n> +permalink: /learn/building_programs/distributing\n>\n> +---\n>\n> +\n>\n> +When you distributed your programs, there are a number of options you can\n>\n> +choose from:\n>\n> +\n>\n> +1. Distribute the entire source code\n>\n> +2. Distribute a pre-built executable program\n>\n> +3. Distribute static or dynamic libraries that people can use\n>\n> +\n>\n> +ad 1.\n>\n>\n> What does ad. 1 (and so on) mean? Perhaps better to explicitly type out\n> each item for each explanation\n> ------------------------------\n>\n> In learn/building_programs/linking_pieces.md\n> <#99 (comment)>\n> :\n>\n> > +the function in the right way. It might be that you made a mistake and\n>\n> +called the function with two arguments instead of one. If the compiler\n>\n> +does not know anything about the function's interface, then it cannot\n>\n> +check anything.\n>\n> +\n>\n> +The second step invokes the compiler in such a way that:\n>\n> +\n>\n> +* it compiles the file \"tabulate.f90\" (using the module file);\n>\n> +* it invokes the linker to combine the object files tabulate.o and function.o into an\n>\n> +executable program - with the default name \"a.out\" or \"a.exe\" (if you\n>\n> +want a different name, use the option \"-o\").\n>\n> +\n>\n> +What you do not see in general is that the linker also adds a number of\n>\n> +extra files in this link step, the run-time libraries. These run-time\n>\n> +libraries contain all the \"standard\" stuff - low-level routines that do\n>\n> +the input and output to screen, the `sine` function and much more.\n>\n>\n> \u2b07\ufe0f Suggested change\n>\n> -the input and output to screen, the `sine` function and much more.\n>\n> +the input and output to screen, the `sin` function and much more.\n>\n>\n> ------------------------------\n>\n> In learn/building_programs/managing_libraries.md\n> <#99 (comment)>\n> :\n>\n> > +libraries remain outside the executable program and as a consequence\n>\n> +can be replaced without rebulding the entire program. Compilers and\n>\n> +indeed the operating system itself rely heavily on such dynamic\n>\n> +libraries. You could consider dynamic libraries as a sort of executable\n>\n> +programs that need a bit of help to be run.\n>\n> +\n>\n> +Building dynamic libraries works slightly differently from building\n>\n> +static libraries: you use the compiler/linker instead of a tool\n>\n> +like `ar` or `lib`.\n>\n> +\n>\n> +On Linux:\n>\n> +\n>\n> +```shell\n>\n> +    $ gfortran -fpic -c file1.f90 file2.f90\n>\n> +    $ gfortran -fpic -c file3.f90 ...\n>\n> +    $ gfortran -shared --o supportlib.so file1.o file2.o file3.o ...\n>\n>\n> \u2b07\ufe0f Suggested change\n>\n> -    $ gfortran -shared --o supportlib.so file1.o file2.o file3.o ...\n>\n> +   $ gfortran -shared -o supportlib.so file1.o file2.o file3.o ...\n>\n>\n> ------------------------------\n>\n> In learn/building_programs/managing_libraries.md\n> <#99 (comment)>\n> :\n>\n> > +\n>\n> +```shell\n>\n> +    $ gfortran -o tabulate tabulate.f90 function.dll\n>\n> +```\n>\n> +\n>\n> +The DLL and the .mod file are used to build the executable program\n>\n> +with checks on the function's interface, the right name and the reference\n>\n> +to \"a\" DLL, called \"function.dll\".\n>\n> +\n>\n> +You can replace the shared library \"function.dll\" by another one, implementing\n>\n> +a different function \"f\". Of course, you need to be careful to use the correct\n>\n> +interface for this function. The compiler/linker are not invoked anymore, so they\n>\n> +can do no checking.\n>\n> +\n>\n> +## Windows and Intel Fortran\n>\n> +The setup is the same as with GNU/Linux, but on Windows it is necessary\n>\n>\n> \u2b07\ufe0f Suggested change\n>\n> -The setup is the same as with GNU/Linux, but on Windows it is necessary\n>\n> +The setup is the same as with Linux, but on Windows it is necessary\n>\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <#99 (review)>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAN6YRYLJAJZQDC6GSNHXVLRVKO2NANCNFSM4NU76QZQ>\n> .\n>"
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-17 08:13:17+00:00",
                    "text": "Hi @arjenmarkus, many thanks.\nI've resolved the conflict on github - you will need to run git pull on your local copy if you intend to do any more edits in your local copy.\nI will update the #build_preview with the latest changes for a final check."
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-06-17 08:14:29+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/99/"
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-06-17 11:02:24+00:00",
                    "text": "Hi @LKedward, thanks - got the copy now. (I am still learning the workflow\n:))\n\nRegards,\n\nArjen\n\nOp wo 17 jun. 2020 om 10:13 schreef Laurence Kedward <\nnotifications@github.com>:\n\u2026\n Hi @arjenmarkus <https://github.com/arjenmarkus>, many thanks.\n I've resolved the conflict on github - you will need to run git pull on\n your local copy if you intend to do any more edits in your local copy.\n I will update the #build_preview with the latest changes for a final check.\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#99 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YR4TEBNL4IAIFOCOLLDRXB3KXANCNFSM4NU76QZQ>\n ."
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-06-17 11:03:17+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/99/"
                },
                {
                    "user": "GS76",
                    "date": "2020-06-17 13:37:25+00:00",
                    "text": "Thank you for everything."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-06-17 14:23:23+00:00",
                    "text": "Hi everyone,\n\njust committed the changes - I should now close the pull request, I guess?\n\nRegards,\n\nArjen\n\nOp wo 17 jun. 2020 om 15:46 schreef Laurence Kedward <\nnotifications@github.com>:\n\u2026\n ***@***.**** commented on this pull request.\n ------------------------------\n\n In learn/building_programs/distributing.md\n <#99 (comment)>\n :\n\n > +        !DEC$ ATTRIBUTES DLLEXPORT :: f\n\n +            real, intent(in) :: x\n\n +\n\n +            ... TO BE FILLED IN ...\n\n +\n\n +        end function f\n\n +        end module user_functions\n\n +```\n\n +\n\n +* Provide a basic build script with a command like:\n\n +\n\n +```shell\n\n +        gfortran -o function.dll function.f90 -shared\n\n +```\n\n +\n\n +        or:\n\n\n Okay, removing the indent fixes it.\n \u2b07\ufe0f Suggested change\n\n -        or:\n\n +or:\n\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#99 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YRZMTE2CNKZKBI4LU33RXDCMHANCNFSM4NU76QZQ>\n ."
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-17 14:27:34+00:00",
                    "text": "Thanks @arjenmarkus - this looks good! Since you're happy with it, I will merge."
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-17 14:29:44+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-06-17 14:30:12+00:00",
                    "text": "The preview build for this PR has now been deleted."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-06-17 14:43:53+00:00",
                    "text": "Nice to see this on the website :).\n\nRegards,\n\nArjen\n\nOp wo 17 jun. 2020 om 16:30 schreef github-actions[bot]\n<notifications@github.com>:\n\u2026\n\n The preview build for this PR has now been deleted.\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub, or unsubscribe."
                }
            ]
        },
        {
            "number": 98,
            "user": "smeskos",
            "date": "2020-06-05 19:19:04+00:00",
            "title": "New page in quickstart derived types",
            "text": "I am attempting the same PR, as before, hopefully, this time correctly, without the _site directory.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "smeskos",
                    "date": "2020-06-05 19:21:47+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-06-05 19:22:47+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/98/"
                },
                {
                    "user": "certik",
                    "date": "2020-06-05 20:35:33+00:00",
                    "text": "Thanks @smeskos !"
                },
                {
                    "user": "smeskos",
                    "date": "2020-06-06 10:19:01+00:00",
                    "text": "@jvdp1, @LKedward thank you both for your suggestions!\n\n@LKedward: Finally, just in case you are not aware: github provides an easy interface on it's website to apply (or reject) any suggested changes with a click of a button - this avoids you having to manually copy them to your local copy and push back again. (But please use the workflow you are most comfortable with).\n\nI am learning git/Github as we speak, this is my first participation in a public repo. Everything is new to me and feel free to give all advice you think may help me. Speaking of which, I simply used the \"commit suggestion\" button to commit the changes you two suggested so far. What I have to do next for these commits to appear in the branch?"
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-06 10:24:11+00:00",
                    "text": "I am learning git/Github as we speak, this is my first participation in a public repo. Everything is new to me and feel free to give all advice you think may help me.\n\n\ud83d\udc4d\n\n... Speaking of which, I simply used the \"commit suggestion\" button to commit the changes you two suggested so far. What I have to do next for these commits to appear in the branch?\n\nYes that's the button I was referring to. To see these changes in your local copy I think you just need to pull again, try git pull"
                },
                {
                    "user": "smeskos",
                    "date": "2020-06-06 12:53:53+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-06-06 12:54:48+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/98/"
                },
                {
                    "user": "smeskos",
                    "date": "2020-06-06 12:57:49+00:00",
                    "text": "How to make the new commits to show in the preview?"
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-06 13:20:25+00:00",
                    "text": "Hi @smeskos, can you try this link:\nhttps://fortran-lang.org/pr/98/learn/quickstart/derived_types?v=2.\nI can see your updated commits in the preview."
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-06 14:28:21+00:00",
                    "text": "Thanks for your updates @smeskos - this is looking good! \ud83d\udc4d"
                },
                {
                    "user": "everythingfunctional",
                    "date": "2020-06-07 02:44:43+00:00",
                    "text": "I think this looks pretty good. My only comment is with regards to code style. We haven't officially settled on one yet (I don't think), so no need to worry about it as part of this PR. Once we can settle on one we should go through and make sure all the code examples on the site comply with it."
                },
                {
                    "user": "jvdp1",
                    "date": "2020-06-07 10:47:59+00:00",
                    "text": "I think this looks pretty good. My only comment is with regards to code style. We haven't officially settled on one yet (I don't think), so no need to worry about it as part of this PR. Once we can settle on one we should go through and make sure all the code examples on the site comply with it.\n\nHere is the code style for stdlib. Should we use the same one in these tutorials?"
                },
                {
                    "user": "smeskos",
                    "date": "2020-06-07 11:06:00+00:00",
                    "text": "Thank you, Milan for all your suggestions.\nRegarding your second suggestion: Move Derived types in detail to the advanced tutorial.\nDo you mean everything from this header and on? That would leave very little information regarding derived types in this Quickstart tutorial and personally, I am not agreeing to this. My thinking is that this Quickstart tutorial is meant for people who already know how to program, they are most probably experienced programmers in another language and want a quick \"get up to speed\" with modern Fortran.  In that sense everyone, more or less is accustomed with OOP features, and would expect to learn how to implement the basic OOP features in Fortran syntax."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-07 11:34:17+00:00",
                    "text": "Yes, I meant that whole section. But we can keep it for now because we don't have an advanced tutorial yet. When we do, I will propose to move it and we'll put it to a vote. You can't assume the level of reader here. Being experienced with OOP is quite advanced.\nBut it's not even the OOP, but more that it lists a set of rules and syntaxes in standardese-like format, without concrete examples. It reads more like reference than learning material."
                },
                {
                    "user": "smeskos",
                    "date": "2020-06-07 15:46:04+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-06-07 15:46:55+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/98/"
                },
                {
                    "user": "smeskos",
                    "date": "2020-06-07 15:59:05+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-06-07 16:00:00+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/98/"
                },
                {
                    "user": "smeskos",
                    "date": "2020-06-07 16:15:08+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-06-07 16:16:05+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/98/"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-07 16:33:20+00:00",
                    "text": "With 5 approvals, I will now merge this into master. Great work, @smeskos !"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-07 16:34:28+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-06-07 16:34:45+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 97,
            "user": "LKedward",
            "date": "2020-06-05 17:57:22+00:00",
            "title": "Add .gitignore to repo",
            "text": "To avoid problems like in #96.\nMine currently has:\n.bundle*\n_site*",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 96,
            "user": "smeskos",
            "date": "2020-06-05 17:23:11+00:00",
            "title": "New page in quickstart derived types",
            "text": "A new introductory tutorial about derived types placed as the last page in the Quickstart tutorial.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "smeskos",
                    "date": "2020-06-05 17:31:54+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-06-05 17:32:46+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/96/"
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-05 17:39:22+00:00",
                    "text": "Hi @smeskos, this is great! Many thanks for adding this. I will go over and review in detail soon \ud83d\udc4d\nQuick observation: one of your commits seems to modify a lot of files, and I can't work out why?"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-05 17:44:17+00:00",
                    "text": "Thanks a lot, Stavros! This is a great addition.\nHowever, I'm sorry if this wasn't clear (we need to improve the contributing guide): _site/* directory and any files built by Jekyll shouldn't be committed to the repo. They are built and deployed automatically by GitHub.\nI think the easiest way to fix this is to close this PR and open a new one which would include only your additions to the Markdown file where the tutorial is, and the associated metadata (.yml)."
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-05 17:53:05+00:00",
                    "text": "Ah I see what's happended.\n_site/ files are added in 82487ce.\nSo git revert 82487ce should fix this branch."
                },
                {
                    "user": "smeskos",
                    "date": "2020-06-05 18:47:42+00:00",
                    "text": "I will try to fix this."
                },
                {
                    "user": "LKedward",
                    "date": "2020-07-13 08:59:38+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-07-13 09:00:01+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 95,
            "user": "milancurcic",
            "date": "2020-06-01 23:03:05+00:00",
            "title": "add Contributors section to TOC",
            "text": "We forgot to add Contributors to the TOC.",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 94,
            "user": "LKedward",
            "date": "2020-06-01 09:43:16+00:00",
            "title": "Fix: page-nav script to work on any page.",
            "text": "This allows page contents to be easily added\nto any page by simply adding <ul id=\"page-nav\"></ul>.\nThis will be populated by all the <h2> headings on the current page.",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 93,
            "user": "LKedward",
            "date": "2020-06-01 09:35:30+00:00",
            "title": "Update contributor guide",
            "text": "Minor update to workflow and adds information on styling.\nAdds new guide on writing mini-book tutorials.",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 92,
            "user": "jvdp1",
            "date": "2020-05-28 19:29:17+00:00",
            "title": "News letter for June",
            "text": "I started a news letter for June. It is far to be finished, but it was to give it a start.\nIf inappropriate, please close the PR.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-05-28 19:55:00+00:00",
                    "text": "Thanks! In Hugo, you can have an item that is not published. Is this possible with Jekyll?\nIf so, let's add the \"draft\" tag, merge this PR and then we can keep sending PR to the draft document in master. When it is ready, we remove the \"draft\" tag and it appears online."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-28 20:18:45+00:00",
                    "text": "Thank you for starting it, @jvdp1. I meant to do it for a while now but it slipped away.\nYes, drafts are placed into _drafts directory, see here. I don't see a good reason to commit it master as a draft when we can just work on it in a fork via a PR. Plus, we have a single dedicated PR for each newsletter. @certik why do you prefer working on a draft in master over one in a fork?\nMy main objection is that it interrupts the current work flow and we're only few days away from publication.\nSome items we should recap here (I'll help with this):\n\nDiscourse was new in May (this is a big one)\nShort recap of the first monthly call\nNew fpm functionality from #82 if @everythingfunctional merges it this month\nFortranCon2020 and community submissions to it (LFortran, stdlib, fpm, community)\n\nI think we should drop the Jobs section unless we get contributions from employers. It will be just be a lot of work to scout things out ourselves and I don't have time to do it right now."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-28 20:27:05+00:00",
                    "text": "I agree with Milan here, one PR per newsletter is better than many incremental ones imo. The drafts tag sounds useful if you're not using version control, but here the git workflow is superior."
                },
                {
                    "user": "everythingfunctional",
                    "date": "2020-05-28 20:37:19+00:00",
                    "text": "@milancurcic , I was giving everybody another day or two to follow up if they wanted to. I just merged it, so yeah, mention that in the newsletter."
                },
                {
                    "user": "certik",
                    "date": "2020-05-28 20:42:45+00:00",
                    "text": "If you open just one PR, is the workflow to comment here, or to provide suggestions in the diff?"
                },
                {
                    "user": "jvdp1",
                    "date": "2020-05-28 20:52:41+00:00",
                    "text": "I think we should drop the Jobs section unless we get contributions from employers. It will be just be a lot of work to scout things out ourselves and I don't have time to do it right now.\n\nI agree. I'll remove the section."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-28 20:53:53+00:00",
                    "text": "If you open just one PR, is the workflow to comment here, or to provide suggestions in the diff?\n\nI think either or both. You could also push directly to the newsletter branch, although I think this works well if contributing complete sections rather than small edits."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-28 20:56:22+00:00",
                    "text": "@everythingfunctional Great! Mind contributing a paragraph here on what's new in fpm? New feature (dependencies from remote git) is super cool and I think even an \"in action\" example would be great for the newsletter."
                },
                {
                    "user": "everythingfunctional",
                    "date": "2020-05-28 22:47:00+00:00",
                    "text": "@everythingfunctional Great! Mind contributing a paragraph here on what's new in fpm?\n\nYep, I'll take a crack at it."
                },
                {
                    "user": "everythingfunctional",
                    "date": "2020-05-29 02:33:53+00:00",
                    "text": "I don't seem to have permissions to push to the branch. @jvdp1 can you grant me access?"
                },
                {
                    "user": "certik",
                    "date": "2020-05-29 03:24:33+00:00",
                    "text": "Yes, that's the problem with just one PR as opposed to sending a bunch of PRs against a draft article, as anyone can send a PR and we can discuss changes on a case by case basis.\n\u2026\nOn Thu, May 28, 2020, at 8:34 PM, Brad Richardson wrote:\n\n\n I don't seem to have permissions to push to the branch. @jvdp1\n <https://github.com/jvdp1> can you grant me access?\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#92 (comment)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAAFAWAHERS6DLREVJFVDE3RT4NJ3ANCNFSM4NNLTIYQ>."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-29 04:02:14+00:00",
                    "text": "@everythingfunctional I just added a permission for you to push to PR branches. If anybody else needs this, please let me know. For most edits and additions here, commit suggestions should be just fine.\n@certik Please open an issue to propose an alternative workflow and we'll discuss it. I'm open to ideas."
                },
                {
                    "user": "certik",
                    "date": "2020-05-29 04:46:50+00:00",
                    "text": "My only alternative workflow is what I proposed above. It's not that important for me, I am fine with doing just one PR. I have bigger fish to fry. :)"
                },
                {
                    "user": "jvdp1",
                    "date": "2020-05-29 05:50:36+00:00",
                    "text": "@everythingfunctional Can you push to the branch now?"
                },
                {
                    "user": "everythingfunctional",
                    "date": "2020-05-29 14:55:04+00:00",
                    "text": "There's always a little bit of friction and adjustment trying to strike a balance between security and convenience when trying to come up with the \"best\" workflow. I agree with @milancurcic and @LKedward , one PR per newsletter. Merging half done stuff always makes me nervous."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-31 17:33:16+00:00",
                    "text": "I think this is now in mostly good shape. Everyone please take the time to read it to make sure we're all okay with it."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-31 17:36:10+00:00",
                    "text": "While working on this locally, I learned that if the post date is future date--like June 1 here--then the post is automatically a draft and not published. I don't know if this is a Jekyll default or our own setting."
                },
                {
                    "user": "certik",
                    "date": "2020-06-01 02:52:38+00:00",
                    "text": "I would suggest to either put all of the people who helped with everything that says \"we\" as authors or put authors something like fortran-lang contributors.\n\u2026\nOn Sun, May 31, 2020, at 8:36 PM, Brad Richardson wrote:\n\n\n ***@***.**** approved this pull request.\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#92 (review)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAAFAWGVLDMFEB5SHYABFXDRUMHZBANCNFSM4NNLTIYQ>."
                },
                {
                    "user": "certik",
                    "date": "2020-06-01 02:58:04+00:00",
                    "text": "In addition we should list all people who contributed code and comments across all fortran-lang repositories. I can run my scripts tomorrow to obtain the info.\n\u2026\nOn Sun, May 31, 2020, at 8:52 PM, Ond\u0159ej \u010cert\u00edk wrote:\n I would suggest to either put all of the people who helped with\n everything that says \"we\" as authors or put authors something like\n fortran-lang contributors.\n\n On Sun, May 31, 2020, at 8:36 PM, Brad Richardson wrote:\n >\n >\n > ***@***.**** approved this pull request.\n >\n > \u2014\n > You are receiving this because you were mentioned.\n > Reply to this email directly, view it on GitHub\n > <#92 (review)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAAFAWGVLDMFEB5SHYABFXDRUMHZBANCNFSM4NNLTIYQ>.\n >"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-01 03:32:24+00:00",
                    "text": "Yes, authors are authors of the newsletter and not of the contributions to the projects.\nI agree we should acknowledge all contributors. @certik if you can do this by tomorrow (and add your name to the authors list), by all means, but please let's not delay the newsletter."
                },
                {
                    "user": "certik",
                    "date": "2020-06-01 04:39:59+00:00",
                    "text": "I strongly believe we can't send this without acknowledgment. I'll try to do it tomorrow, but if we have to delay by a day, then that's better than not giving credit.\n\u2026\nOn Sun, May 31, 2020, at 9:32 PM, Milan Curcic wrote:\n\n\n Yes, authors are authors of the newsletter and not of the contributions\n to the projects.\n\n I agree we should acknowledge all contributors. @certik\n <https://github.com/certik> if you can do this by tomorrow (and add\n your name to the authors list), by all means, but please let's not\n delay the newsletter.\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#92 (comment)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAAFAWHKIFYHXFAQXFI27ODRUMONHANCNFSM4NNLTIYQ>."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-01 11:23:18+00:00",
                    "text": "@certik sounds good, please merge when you're ready."
                },
                {
                    "user": "certik",
                    "date": "2020-06-01 15:30:05+00:00",
                    "text": "I am working on the scripts now."
                },
                {
                    "user": "certik",
                    "date": "2020-06-01 21:44:35+00:00",
                    "text": "I extracted all the data and posted it here:\nhttps://gitlab.com/fortran-lang/github_stats_data\nnow I am working on extracting contributor names in the range:\nhttps://gitlab.com/fortran-lang/github_stats/-/merge_requests/2"
                },
                {
                    "user": "certik",
                    "date": "2020-06-01 22:27:38+00:00",
                    "text": "This is a first draft of the contributors. I am now working on adding names next to their GitHub IDs. This was automatically generated by a script in this MR:\nhttps://gitlab.com/fortran-lang/github_stats/-/merge_requests/2\nSo you can see exactly how it works.\nPatches / ideas welcome how to improve this."
                },
                {
                    "user": "certik",
                    "date": "2020-06-01 22:29:24+00:00",
                    "text": "I can see we should remove the github-actions[bot] user."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-01 22:36:50+00:00",
                    "text": "Great, thank you @certik!\nI have a few suggestions, feel free to apply them as you see fit:\n\nRather than saying \"The following contributors commented on any of the four repositories...\", I suggest a more personal message, something like: \"We thank everybody who contributed to fortran-lang in the past month: \". Currently the message is quite dry and impersonal. It's quite ironic that github-actions[bot] got included :).\nSimilar to 1), I suggest renaming the section title from \"Contributors\" to either \"Thank you\" or \"Acknowledgements\". (maybe I like \"Contributors\" on second read)\nRemove the numbering and the \"@\" and simply list names, comma-separated, for example (keep the hyperlinks):\n\n\ncertik, milancurcic, LKedward, ..."
                },
                {
                    "user": "certik",
                    "date": "2020-06-01 22:40:33+00:00",
                    "text": "I posted how the markdown looks like now, but realized it probably sent an email to all the people using a mention...; So I deleted my comment, don't know if that will fix it. If anyone of you got tagged by a mistake, I apologize.\nHere is how it looks like:\nhttps://gitlab.com/fortran-lang/github_stats/-/merge_requests/2#note_353238748"
                },
                {
                    "user": "certik",
                    "date": "2020-06-01 22:46:02+00:00",
                    "text": "Thanks @milancurcic for the suggestions. I updated the wording. I think I would like to spell which repositories are counted, and that this lists people who commented.\nCurrently it looks like this:\n\nOnd\u0159ej \u010cert\u00edk (@certik)\nMilan Curcic (@milancurcic)\nLaurence Kedward (@LKedward)\n...\n\nShould we change it to:\nOnd\u0159ej \u010cert\u00edk (@certik), Milan Curcic (@milancurcic), Laurence Kedward (@LKedward), ...\nOr some other formatting?"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-01 22:48:45+00:00",
                    "text": "I personally like this best:\n\nOnd\u0159ej \u010cert\u00edk (@certik), Milan Curcic (@milancurcic), Laurence Kedward (@LKedward), ..."
                },
                {
                    "user": "certik",
                    "date": "2020-06-01 22:49:04+00:00",
                    "text": "Ok, let me change it."
                },
                {
                    "user": "certik",
                    "date": "2020-06-01 22:52:33+00:00",
                    "text": "@milancurcic like this?"
                },
                {
                    "user": "certik",
                    "date": "2020-06-01 22:54:55+00:00",
                    "text": "@milancurcic go ahead and merge this."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-01 22:55:05+00:00",
                    "text": "Excellent, thank you very much @certik! This is a huge improvement to our newsletter."
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-02 07:11:48+00:00",
                    "text": "Thanks @certik for this! It's great also to see the number of people getting involved!"
                },
                {
                    "user": "certik",
                    "date": "2020-06-02 18:39:37+00:00",
                    "text": "Yes. We should figure out how to share this in some nice graphs also. But for now this is good enough."
                }
            ]
        },
        {
            "number": 91,
            "user": "HaoZeke",
            "date": "2020-05-23 02:45:35+00:00",
            "title": "packages: Init QUIP",
            "text": "",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 90,
            "user": "arjenmarkus",
            "date": "2020-05-22 19:24:06+00:00",
            "title": "First commit of a mini-book on building programs",
            "text": "Please review the text: hopefully it presents the material in a clear way.  IMO, the pitfall is that it presents too much details. Suggestions for changes are welcome.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2020-05-23 11:04:49+00:00",
                    "text": "I don't think this needs to be changed in this pull request but the Windows-specific content is presented for Cygwin, and I wonder whether the same content can be abstracted away from this environment somehow? For this tutorial it seems that Cygwin only serves to present the same Linux workflow but on Windows. Does Windows development need a separate tutorial maybe?\nI have no problem with Cygwin but:\n\nreaders may not be familiar with it and;\nit is only one of multiple linux-type interfaces for Windows.\n\n(If I need to develop on Windows I now use MSYS2 because unlike WSL and Cygwin it produces truly native Windows executables)"
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-05-25 17:45:10+00:00",
                    "text": "Hi Laurence,\n\nCygwin happens to be the easiest access I have to a Linux-like environment\n(with an up-to-date gfortran installation) ;). Nothing really essential.\nHowever, since some things simply work differently on Windows, I think it\nis good to present both platforms. Actually I would like to include MacOS*\nas well. But perhaps a bit more separation - present the common bits first\nand then (separately?) the specifics.\n\nRegards,\n\nArjen\n\nOp za 23 mei 2020 om 13:05 schreef Laurence Kedward <\nnotifications@github.com>:\n\u2026\n I don't think this needs to be changed in this pull request but the\n Windows-specific content is presented for *Cygwin*, and I wonder whether\n the same content can be abstracted away from this environment somehow? For\n this tutorial it seems that Cygwin only serves to present the same Linux\n workflow but on Windows. Does Windows development need a separate tutorial\n maybe?\n\n I have no problem with Cygwin but:\n\n    - readers may not be familiar with it and;\n    - it is only one of multiple linux-type interfaces for Windows.\n\n (If I need to develop on Windows I now use MSYS2 because unlike WSL and\n Cygwin it produces truly native Windows executables)\n\n \u2014\n You are receiving this because you authored the thread.\n Reply to this email directly, view it on GitHub\n <#90 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YR6L7MJHD7CW7ZQC4JLRS6UV3ANCNFSM4NICRNUA>\n ."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-05-25 17:46:17+00:00",
                    "text": "Hi J\u00e9r\u00e9mie,\n\nthanks for the review - I will have a look and pick those cherries ;).\n\nRegards,\n\nArjen\n\n\n\nOp ma 25 mei 2020 om 18:58 schreef Jeremie Vandenplas <\nnotifications@github.com>:\n\u2026\n ***@***.**** commented on this pull request.\n\n Great introduction. Cherry-pick what you want/like.\n ------------------------------\n\n In learn/building_programs.md\n <#90 (comment)>\n :\n\n > +option \"/out:\" with the name of the new library next to it. To add\n\n +object files to an existing library, leave out the \"/out:\" bit.\n\n +* On platforms like Linux there is a particular convention to name\n\n +libraries. If you name your library like \"libname.a\" (note the \"lib\"\n\n +prefix), then you can refer to it as \"-lname\" in the link step.\n\n +* Libraries are often sought in directories indicated by an option \"-L\"\n\n +or \"/LIBPATH\". This saves you from having to specify the exact path for\n\n +every library.\n\n +\n\n +Using libraries you can build very large programs without\n\n +having to resort to extremely long command lines.\n\n +\n\n +\n\n +### Static versus dynamic libraries\n\n +\n\n +The above discussion is tacitly assuming that you are using so-called\n\n\n \u2b07\ufe0f Suggested change\n\n -The above discussion is tacitly assuming that you are using so-called\n\n +The above discussion is tacitly assuming that you are using the so-called\n\n\n ------------------------------\n\n In learn/building_programs.md\n <#90 (comment)>\n :\n\n > +or \"/LIBPATH\". This saves you from having to specify the exact path for\n\n +every library.\n\n +\n\n +Using libraries you can build very large programs without\n\n +having to resort to extremely long command lines.\n\n +\n\n +\n\n +### Static versus dynamic libraries\n\n +\n\n +The above discussion is tacitly assuming that you are using so-called\n\n +static libraries. Static libraries (or at least parts of their\n\n +contents) become an integral part of the executable program. The only\n\n +way to change the routines incorporated in the program is by rebuilding\n\n +the program with a new version of the library.\n\n +\n\n +A flexible alternative is to use so-called dynamic libraries. These\n\n\n \u2b07\ufe0f Suggested change\n\n -A flexible alternative is to use so-called dynamic libraries. These\n\n +A flexible alternative is to use the so-called dynamic libraries. These\n\n\n ------------------------------\n\n In learn/building_programs.md\n <#90 (comment)>\n :\n\n > +every library.\n\n +\n\n +Using libraries you can build very large programs without\n\n +having to resort to extremely long command lines.\n\n +\n\n +\n\n +### Static versus dynamic libraries\n\n +\n\n +The above discussion is tacitly assuming that you are using so-called\n\n +static libraries. Static libraries (or at least parts of their\n\n +contents) become an integral part of the executable program. The only\n\n +way to change the routines incorporated in the program is by rebuilding\n\n +the program with a new version of the library.\n\n +\n\n +A flexible alternative is to use so-called dynamic libraries. These\n\n +libraries remain outside the executable program and as a consequence you\n\n\n \u2b07\ufe0f Suggested change\n\n -libraries remain outside the executable program and as a consequence you\n\n +libraries remain outside the executable program and as a consequence\n\n\n ------------------------------\n\n In learn/building_programs.md\n <#90 (comment)>\n :\n\n > +\n\n +Using libraries you can build very large programs without\n\n +having to resort to extremely long command lines.\n\n +\n\n +\n\n +### Static versus dynamic libraries\n\n +\n\n +The above discussion is tacitly assuming that you are using so-called\n\n +static libraries. Static libraries (or at least parts of their\n\n +contents) become an integral part of the executable program. The only\n\n +way to change the routines incorporated in the program is by rebuilding\n\n +the program with a new version of the library.\n\n +\n\n +A flexible alternative is to use so-called dynamic libraries. These\n\n +libraries remain outside the executable program and as a consequence you\n\n +can replace them without rebulding the entire program. Compilers and\n\n\n \u2b07\ufe0f Suggested change\n\n -can replace them without rebulding the entire program. Compilers and\n\n +can be replaced without rebulding the entire program. Compilers and\n\n\n ------------------------------\n\n In learn/building_programs.md\n <#90 (comment)>\n :\n\n > +### Static versus dynamic libraries\n\n +\n\n +The above discussion is tacitly assuming that you are using so-called\n\n +static libraries. Static libraries (or at least parts of their\n\n +contents) become an integral part of the executable program. The only\n\n +way to change the routines incorporated in the program is by rebuilding\n\n +the program with a new version of the library.\n\n +\n\n +A flexible alternative is to use so-called dynamic libraries. These\n\n +libraries remain outside the executable program and as a consequence you\n\n +can replace them without rebulding the entire program. Compilers and\n\n +indeed the operating system itself rely heavily on such dynamic\n\n +libraries. You could consider dynamic libraries as a sort of executable\n\n +programs that need a bit of help to be run.\n\n +\n\n +Building dynamic libraries works slightly differently:\n\n\n Differently based on what? I have the feeling that something is missing in\n this sentence.\n ------------------------------\n\n In learn/building_programs.md\n <#90 (comment)>\n :\n\n > +\n\n +Building dynamic libraries works slightly differently:\n\n +\n\n +On Linux:\n\n +\n\n +    $ gfortran -fpic -c file1.f90 file2.f90\n\n +    $ gfortran -fpic -c file3.f90 ...\n\n +    $ gfortran -shared --o supportlib.so file1.o file2.o file3.o ...\n\n +\n\n +On Windows, with the Intel Fortran compiler:\n\n +\n\n +    $ ifort -c file1.f90 file2.f90\n\n +    $ ifort -c file3.f90 ...\n\n +    $ ifort -dll -exe:supportlib.dll file1.obj file2.obj file3.obj ...\n\n +\n\n +The differences:\n\n\n \u2b07\ufe0f Suggested change\n\n -The differences:\n\n +The differences are that:\n\n\n ------------------------------\n\n In learn/building_programs.md\n <#90 (comment)>\n :\n\n > +\n\n +On Linux:\n\n +\n\n +    $ gfortran -fpic -c file1.f90 file2.f90\n\n +    $ gfortran -fpic -c file3.f90 ...\n\n +    $ gfortran -shared --o supportlib.so file1.o file2.o file3.o ...\n\n +\n\n +On Windows, with the Intel Fortran compiler:\n\n +\n\n +    $ ifort -c file1.f90 file2.f90\n\n +    $ ifort -c file3.f90 ...\n\n +    $ ifort -dll -exe:supportlib.dll file1.obj file2.obj file3.obj ...\n\n +\n\n +The differences:\n\n +\n\n +* You need to specify a compile option on Linux, \"-fpic\", because the\n\n\n This option is for gfortran right?It could be good to mention it\n explicitely\n ------------------------------\n\n In learn/building_programs.md\n <#90 (comment)>\n :\n\n > +On Windows, with the Intel Fortran compiler:\n\n +\n\n +    $ ifort -c file1.f90 file2.f90\n\n +    $ ifort -c file3.f90 ...\n\n +    $ ifort -dll -exe:supportlib.dll file1.obj file2.obj file3.obj ...\n\n +\n\n +The differences:\n\n +\n\n +* You need to specify a compile option on Linux, \"-fpic\", because the\n\n +object code is slightly different.\n\n +* You need to tell in the link step that you want a dynamic library (on\n\n +Linux: a shared object/library, hence the extension \".so\"; on Windows:\n\n +a dynamic link library)\n\n +\n\n +There is one more thing to be aware of: On Windows you must\n\n +explicitly specify that a routine is to be _exported_, i.e. is visible\n\n\n \u2b07\ufe0f Suggested change\n\n -explicitly specify that a routine is to be _exported_, i.e. is visible\n\n +explicitly specify that a procedure is to be _exported_, i.e. is visible\n\n\n ------------------------------\n\n In learn/building_programs.md\n <#90 (comment)>\n :\n\n > +compiler directive:\n\n +\n\n +    subroutine myroutine( ... )\n\n +    !GCC$ ATTRIBUTES DLLEXPORT:: myroutine\n\n +\n\n +Or, with the Intel Fortran compiler:\n\n +\n\n +    subroutine myroutine( ... )\n\n +    !DEC$ ATTRIBUTES DLLEXPORT:: myroutine\n\n +\n\n +Besides a dynamic library (DLL), a so-called import library may be\n\n +generated.\n\n +\n\n +Because the details differ per compiler, here are two examples:\n\n +gfortran on Cygwin and Intel Fortran on Windows. In both cases\n\n +we look at the tabulation program.\n\n\n \u2b07\ufe0f Suggested change\n\n -we look at the tabulation program.\n\n +we look at the `tabulation.f90` program.\n\n\n ------------------------------\n\n In learn/building_programs.md\n <#90 (comment)>\n :\n\n > +    !GCC$ ATTRIBUTES DLLEXPORT:: myroutine\n\n +\n\n +Or, with the Intel Fortran compiler:\n\n +\n\n +    subroutine myroutine( ... )\n\n +    !DEC$ ATTRIBUTES DLLEXPORT:: myroutine\n\n +\n\n +Besides a dynamic library (DLL), a so-called import library may be\n\n +generated.\n\n +\n\n +Because the details differ per compiler, here are two examples:\n\n +gfortran on Cygwin and Intel Fortran on Windows. In both cases\n\n +we look at the tabulation program.\n\n +\n\n +### Cygwin and gfortran\n\n +The \"tabulate\" program requires a user-defined routine \"f\". If we\n\n\n \u2b07\ufe0f Suggested change\n\n -The \"tabulate\" program requires a user-defined routine \"f\". If we\n\n +The `tabulate` program requires a user-defined routine `f`. If we\n\n\n ------------------------------\n\n In learn/building_programs.md\n <#90 (comment)>\n :\n\n > +    !DEC$ ATTRIBUTES DLLEXPORT:: myroutine\n\n +\n\n +Besides a dynamic library (DLL), a so-called import library may be\n\n +generated.\n\n +\n\n +Because the details differ per compiler, here are two examples:\n\n +gfortran on Cygwin and Intel Fortran on Windows. In both cases\n\n +we look at the tabulation program.\n\n +\n\n +### Cygwin and gfortran\n\n +The \"tabulate\" program requires a user-defined routine \"f\". If we\n\n +let it reside in a dynamic library, say \"function.dll\", we can simply\n\n +replace the implementation of the function by putting another dynamic\n\n +library in the directory. No need to rebuild the program as such.\n\n +\n\n +On Cygwin it is not necessary to explicitly export a routine - all\n\n\n \u2b07\ufe0f Suggested change\n\n -On Cygwin it is not necessary to explicitly export a routine - all\n\n +On Cygwin it is not necessary to explicitly export a procedure - all\n\n\n ------------------------------\n\n In learn/building_programs.md\n <#90 (comment)>\n :\n\n > +\n\n +Besides a dynamic library (DLL), a so-called import library may be\n\n +generated.\n\n +\n\n +Because the details differ per compiler, here are two examples:\n\n +gfortran on Cygwin and Intel Fortran on Windows. In both cases\n\n +we look at the tabulation program.\n\n +\n\n +### Cygwin and gfortran\n\n +The \"tabulate\" program requires a user-defined routine \"f\". If we\n\n +let it reside in a dynamic library, say \"function.dll\", we can simply\n\n +replace the implementation of the function by putting another dynamic\n\n +library in the directory. No need to rebuild the program as such.\n\n +\n\n +On Cygwin it is not necessary to explicitly export a routine - all\n\n +publically visible routines are exported when you build a dynamic library.\n\n\n \u2b07\ufe0f Suggested change\n\n -publically visible routines are exported when you build a dynamic library.\n\n +publically visible procedures are exported when you build a dynamic library.\n\n\n ------------------------------\n\n In learn/building_programs.md\n <#90 (comment)>\n :\n\n > +The \"tabulate\" program requires a user-defined routine \"f\". If we\n\n +let it reside in a dynamic library, say \"function.dll\", we can simply\n\n +replace the implementation of the function by putting another dynamic\n\n +library in the directory. No need to rebuild the program as such.\n\n +\n\n +On Cygwin it is not necessary to explicitly export a routine - all\n\n +publically visible routines are exported when you build a dynamic library.\n\n +Also, no import library is generated.\n\n +\n\n +Since our dynamic library can be built from a single source file, we\n\n +can take a shortcut:\n\n +\n\n +    $ gfortran -shared -o function.dll function.f90\n\n +\n\n +This produces the files \"function.dll\" and \"function.mod\". The\n\n +utility \"nm\" tells us the exact name of the function \"f\":\n\n\n \u2b07\ufe0f Suggested change\n\n -utility \"nm\" tells us the exact name of the function \"f\":\n\n +utility \"nm\" tells us the exact name of the function `f`:\n\n\n ------------------------------\n\n In learn/building_programs.md\n <#90 (comment)>\n :\n\n > +\n\n +This produces the files \"function.dll\" and \"function.mod\". The\n\n +utility \"nm\" tells us the exact name of the function \"f\":\n\n +\n\n +    $ nm function.dll\n\n +    ...\n\n +    000000054f9d7000 B __dynamically_loaded\n\n +                     U __end__\n\n +    0000000000000200 A __file_alignment__\n\n +    000000054f9d1030 T __function_MOD_f\n\n +    000000054f9d1020 T __gcc_deregister_frame\n\n +    000000054f9d1000 T __gcc_register_frame\n\n +    ...\n\n +\n\n +It has received a prefix `__function_MOD_` to distinguish it from any\n\n +other routine \"f\" that might be defined in another module.\n\n\n \u2b07\ufe0f Suggested change\n\n -other routine \"f\" that might be defined in another module.\n\n +other procedure `f` that might be defined in another module.\n\n\n ------------------------------\n\n In learn/building_programs.md\n <#90 (comment)>\n :\n\n > +    subroutine myroutine( ... )\n\n +    !GCC$ ATTRIBUTES DLLEXPORT:: myroutine\n\n +\n\n +Or, with the Intel Fortran compiler:\n\n +\n\n +    subroutine myroutine( ... )\n\n +    !DEC$ ATTRIBUTES DLLEXPORT:: myroutine\n\n +\n\n +Besides a dynamic library (DLL), a so-called import library may be\n\n +generated.\n\n +\n\n +Because the details differ per compiler, here are two examples:\n\n +gfortran on Cygwin and Intel Fortran on Windows. In both cases\n\n +we look at the tabulation program.\n\n +\n\n +### Cygwin and gfortran\n\n\n It could be good to replace Cygwin by GNU/Linux\n ------------------------------\n\n In learn/building_programs.md\n <#90 (comment)>\n :\n\n > +\n\n +Build tools\n\n +-----------\n\n +\n\n +If this seems complicated, well, you are right and we are only\n\n +scratching the surface here. The complications arise because of\n\n +differences between platforms, differences between compilers/linkers and\n\n +because of differences in the way programs are set up. Fortunately,\n\n +there are many tools to help configure and maintain the build steps.\n\n +We will not try and catalogue them, but give instead a very limited\n\n +list of tools that you typically encounter:\n\n +\n\n +* The \"make\" utility is a classical tool that uses instructions about\n\n +how the various components of a program depend on each other to\n\n +efficiently compile and link the program (or programs). It takes a\n\n +so-called makefile that contains the dependencies.\n\n\n \u2b07\ufe0f Suggested change\n\n -so-called makefile that contains the dependencies.\n\n +so-called `Makefile` that contains the dependencies.\n\n\n ------------------------------\n\n In learn/building_programs.md\n <#90 (comment)>\n :\n\n > +how the various components of a program depend on each other to\n\n +efficiently compile and link the program (or programs). It takes a\n\n +so-called makefile that contains the dependencies.\n\n +\n\n +    Simply put:\n\n +\n\n +    If a program file is older than any of the libraries and object files\n\n +it depends on, the make utility knows it has to rebuild it and goes on\n\n +to look at the libraries and object files - are any out of date?\n\n +\n\n +    If an object file is older than the corresponding source file, the\n\n +make utility knows it has to compile the source file.\n\n +\n\n +* Integrated development tools take care of many of the above details. A\n\n +popular tool on Windows is MicroSoft's Visual Studio, but others exist,\n\n +such Eclipse (Photran) and Code::Blocks. They offer a graphical\n\n\n \u2b07\ufe0f Suggested change\n\n -such Eclipse (Photran) and Code::Blocks. They offer a graphical\n\n +such as Eclipse (Photran) and Code::Blocks. They offer a graphical\n\n\n ------------------------------\n\n In learn/building_programs.md\n <#90 (comment)>\n :\n\n > +to look at the libraries and object files - are any out of date?\n\n +\n\n +    If an object file is older than the corresponding source file, the\n\n +make utility knows it has to compile the source file.\n\n +\n\n +* Integrated development tools take care of many of the above details. A\n\n +popular tool on Windows is MicroSoft's Visual Studio, but others exist,\n\n +such Eclipse (Photran) and Code::Blocks. They offer a graphical\n\n +user-interface, but are often very specific for the compiler and\n\n +platform.\n\n +\n\n +* Maintenance tools like autotools and CMake can generate makefiles or\n\n +Visual Studio project files via a high-level description. They abstract\n\n +away from the compiler and platform specifics.\n\n +\n\n +Here is a very simple example of a makefile as used by the make utility,\n\n\n \u2b07\ufe0f Suggested change\n\n -Here is a very simple example of a makefile as used by the make utility,\n\n +Here is a very simple example of a `Makefile` as used by the make utility,\n\n\n ------------------------------\n\n In learn/building_programs.md\n <#90 (comment)>\n :\n\n > +A pre-built program that does not need to be customised, other than via its\n\n +input, will still need to come with the various run-time libraries and will\n\n +be specific to the operating system/environment it was built for.\n\n +\n\n +The set of run-time libraries differs per operating system and compiler version.\n\n +For a freely available compiler like gfortran, the easiest thing is to ask the\n\n +user to install that compiler on their system. In the case of Windows: the Cygwin\n\n +environment may be called for.\n\n +\n\n +Alternatively, you can supply copies of the run-time libraries together with your\n\n +program. Put them in the directory where they can be found at run-time.\n\n +\n\n +Note: On Windows, the Intel Fortran comes with a set of _redistributable_ libraries.\n\n +These will need to be made available.\n\n +\n\n +In general: use a tool like \"ldd\" or \"dependency walker\" to find out what\n\n\n \u2b07\ufe0f Suggested change\n\n -In general: use a tool like \"ldd\" or \"dependency walker\" to find out what\n\n +In general: use a tool like `ldd` or `dependency walker` to find out what\n\n\n \u2014\n You are receiving this because you authored the thread.\n Reply to this email directly, view it on GitHub\n <#90 (review)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YR5BRJN56DOTBQJR35DRTKPSPANCNFSM4NICRNUA>\n ."
                },
                {
                    "user": "certik",
                    "date": "2020-05-25 19:15:40+00:00",
                    "text": "Just a note regarding the platform: I strongly propose that our long term goal should be to run natively on all platforms (Linux, macOS, Windows natively as well as in Cygwin and WSL, HPC, ...) using native tools where applicable. We should have some tutorial \"how to get started on each platform\", and how to do the basic things for each platform. That way the actual tutorial such as this PR can be written for one particular platform (Cygwin in this case) and people would know how to execute the commands on other platforms using the \"how to get started on each platform\" tutorial.\nSo I think it's perfectly fine if this tutorial sticks with Cygwin."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-06-03 11:04:07+00:00",
                    "text": "Hi everyone,\n\nI plan to work through the suggestions by J\u00e9r\u00e9mie tomorrow. I noticed that\nthe tutorial has been split into separate chapters. I can do that with this\nminibook as well.\n\nIf you have more comments/suggestions, let me know.\n\nRegards,\n\nArjen\n\nOp ma 25 mei 2020 om 21:15 schreef Ond\u0159ej \u010cert\u00edk <notifications@github.com>:\n\u2026\n Just a note regarding the platform: I strongly propose that our long term\n goal should be to run natively on all platforms (Linux, macOS, Windows\n natively as well as in Cygwin and WSL, HPC, ...) using native tools where\n applicable. We should have some tutorial \"how to get started on each\n platform\", and how to do the basic things for each platform. That way the\n actual tutorial such as this PR can be written for one particular platform\n (Cygwin in this case) and people would know how to execute the commands on\n other platforms using the \"\"how to get started on each platform\" tutorial.\n\n So I think it's perfectly fine if this tutorial sticks with Cygwin.\n\n \u2014\n You are receiving this because you authored the thread.\n Reply to this email directly, view it on GitHub\n <#90 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YR6EHDDRNKMDLC6PIQDRTK7WRANCNFSM4NICRNUA>\n ."
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-03 18:27:16+00:00",
                    "text": "Thanks for the update @arjenmarkus.\nJust to let you know that there is now a guide in the repository for how to use the new multi-page mini-book format. Do let me know if anything isn't clear or you need further assistance.\nLooking forward to seeing your mini-book published on site.\nLaurence"
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-06-04 06:51:33+00:00",
                    "text": "Hi Laurence,\n\ngreat - that should be helpful indeed. I was going to do it with the\ntutorial's sources as an example but this is much better.\n\nRegards,\n\nArjen\n\nOp wo 3 jun. 2020 om 20:27 schreef Laurence Kedward <\nnotifications@github.com>:\n\u2026\n Thanks for the update @arjenmarkus <https://github.com/arjenmarkus>.\n Just to let you know that there is now a guide\n <https://github.com/fortran-lang/fortran-lang.org/blob/master/MINIBOOKS.md>\n in the repository for how to use the new multi-page mini-book format. Do\n let me know if anything isn't clear or you need further assistance.\n Looking forward to seeing your mini-book published on site.\n Laurence\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#90 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YR46J6WYRKX3VMZRIXDRU2IZFANCNFSM4NICRNUA>\n ."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-06-05 19:27:59+00:00",
                    "text": "Okay, just created a new pull request for this minibook. I have tried to be\naccurate wrt the mark-up and the suggested changes. A few improvements I am\nthinking of:\n- Clearer characterisation of the platforms\n- The tabulate.f90 source should probably be revised. I have left it mostly\nas it was, but the suggestions made me think a bit.\n\nOh, and perhaps add the source code as examples for people to work with.\n\nRegards,\n\nArjen\n\nOp do 4 jun. 2020 om 08:51 schreef Arjen Markus <arjen.markus895@gmail.com>:\n\u2026\n Hi Laurence,\n\n great - that should be helpful indeed. I was going to do it with the\n tutorial's sources as an example but this is much better.\n\n Regards,\n\n Arjen\n\n Op wo 3 jun. 2020 om 20:27 schreef Laurence Kedward <\n ***@***.***>:\n\n> Thanks for the update @arjenmarkus <https://github.com/arjenmarkus>.\n> Just to let you know that there is now a guide\n> <https://github.com/fortran-lang/fortran-lang.org/blob/master/MINIBOOKS.md>\n> in the repository for how to use the new multi-page mini-book format. Do\n> let me know if anything isn't clear or you need further assistance.\n> Looking forward to seeing your mini-book published on site.\n> Laurence\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <#90 (comment)>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAN6YR46J6WYRKX3VMZRIXDRU2IZFANCNFSM4NICRNUA>\n> .\n>"
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-06 09:05:12+00:00",
                    "text": "Closing, superseded by #99."
                }
            ]
        },
        {
            "number": 89,
            "user": "certik",
            "date": "2020-05-22 18:14:02+00:00",
            "title": "Consider changing static site generator",
            "text": "I have great experience with Hugo for site generation --- a single binary download on all platforms, it's very fast to run, and overall seems robust.\nThe issue with Jekyll is that it's harder to install and you typically run into issue such as this one:\n#77 (comment)\nThis is relatively lower priority, since this website was primarily developed by @milancurcic and @LKedward and so I let them choose the technology. I opened this issue just as an alternative to know about.",
            "is_open": true,
            "labels": [
                "help wanted"
            ],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-05-22 18:27:15+00:00",
                    "text": "Indeed Hugo is easier to install and run because it's a single binary. The only Jekyll issue that I see is actually nothing about Jekyll but with gem and bundler, which IMO just plain suck. Especially when you start using specific versions. Tracebacks are inscrutable.\nHugo was actually what I started working with at first and then gave up after few hours. I was somewhat familiar with Jekyll already, and Hugo is overall more complex so there was more to learn.\nSo setting up the tooling to run Jekyll is worse than Hugo. But after you do that once, I think Jekyll is easier to work with than Hugo. Personal opinion of course.\nBuild previews that @LKedward made mostly solves this. If you know how to submit a PR, there's no need to run locally. For writing markdown pages and submitting content this is good enough. If you need to make structural changes to the website, chances are that setting up Jekyll is not an issue."
                },
                {
                    "user": "certik",
                    "date": "2020-05-22 18:35:09+00:00",
                    "text": "That's fine, you two are the main maintainers, so if you are comfortable with Jekyll, that is fine with me. If we start getting more users struggling to install Jekyll, we can reconsider."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-23 13:43:29+00:00",
                    "text": "I agree Jekyll isn't great for contributors to setup - I'm also not sure if it supports Windows or not?\nI find the Jekyll templating language very rudimentary at times, but this also means that it isn't too complicated to get started. I'm happy to stick with Jekyll for now, but we can reconsider later if need be."
                },
                {
                    "user": "LKedward",
                    "date": "2021-02-26 11:44:31+00:00",
                    "text": "As discussed in #201, Jekyll isn't well-suited to robust internationalization, most notably it isn't possible to use a gettext-based approach which would offer a safe and automated workflow. Hugo similarly doesn't have support for using gettext.\nBased on this, we should re-open discussion of changing static site generator with a mind to support gettext-based translation.\nAs suggested by @certik, the sympy site uses jinja2 templating with an i18n extension that supports gettext. The generate script demonstrates this nicely.\nSome points for discussion/comment:\n\nAre there any objections to switching static site generator in order to robustly implement internationalization?\nDoes anyone have an objection to switching to jinja2?\nDoes anyone have any other suggestions for alternative site generators with gettext support?\nWhat are the specific requirements for site generators in order to port all of fortran-lang.org?"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-02-26 12:56:41+00:00",
                    "text": "Switching from jekyll to plain HTML + jinja2 seems like a major step back. jinja2 templating is not so much different to liquid templating in jekyll and we would loose the markdown support to gain gettext support.\nI'm fine with loosing markdown support only if we are able to replace it with something similarly like reStructuredText or Asciidoc in our static page generation, we need support for code-blocks and I'm not too eager writing those in plain HTML or some ugly template block."
                },
                {
                    "user": "LKedward",
                    "date": "2021-02-26 14:02:39+00:00",
                    "text": "I'm fine with loosing markdown support only if we are able to replace it with something similarly like reStructuredText or Asciidoc in our static page generation, we need support for code-blocks and I'm not too eager writing those in plain HTML or some ugly template block.\n\nYes agreed, we definitely want to keep easy support for code-blocks."
                },
                {
                    "user": "certik",
                    "date": "2021-02-26 14:36:46+00:00",
                    "text": "It looks like our website is a combination of html files and markdown. For html, moving to jinja is a step up.\nFor Markdown, we need to figure out a way how to translate Markdown documents in general. What are the options / alternatives? How is this done in Jekyll?"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-02-26 14:39:12+00:00",
                    "text": "Jekyll is using a Markdown to HTML converter, you have the choice between several vendors, usually kramdown is used (which we are using as well), but you can plugin other converters as well, e.g. if you want to use Asciidoc with Jekyll."
                },
                {
                    "user": "milancurcic",
                    "date": "2021-02-26 14:44:48+00:00",
                    "text": "Beside being able to write content in a human-readable markup, it's also important for me that GitHub can render it in the browser (in file views and PRs). I know GitHub renders md and rst but I don't know about adoc. Consider also how many people are familiar with these markups. Markdown is probably the most ubiquitous, and would impose the least friction to contributing writers."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-02-26 14:56:36+00:00",
                    "text": "GitHub can basically render any known markup language: md, rst, adoc, textile, mediawiki, ... This shouldn't be a limitation. I'm not too attached to a particular markup language, but I have a slight preference for reStructuredText and Asciidoc because I found them easier to use in bigger technical documentations, especially when it comes to code-blocks in admonitions. We currently create those with a liquid capture block in the minibooks which is quite ugly.\nreStructuredText would be a natural choice when using sphinx as static side generator which has a gettext based i18n module"
                },
                {
                    "user": "certik",
                    "date": "2021-02-26 14:56:49+00:00",
                    "text": "I strongly prefer Markdown. Let's keep using it.\nAs a start, we can simply require that the whole Markdown file must be translated, and perhaps the translation can keep a comment somewhere which exact English version was used. That way you can manually check if there was some change in the English version. We can even write a tool for this. So in some sense, it would be like gettext, but for the whole Markdown document at once. I think that's fine with me.\nMy main objection was for the html documents, and those would be fixed with jinja+gettext."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-03-05 21:07:19+00:00",
                    "text": "I'll pin this issue for better visibility.\nI had a look into SymPy's HTML + jinja2 and the generate script. While we won't be able to use gettext here, I'm quite confident that I can make localization work with jekyll and the plugin used in #201 almost as if we were using gettext. It might become a bit heavy on Ruby for the \u201cgenerate\u201d script the way I'm envision it, but I haven't yet started on this project yet due to time constraints.\nThe general idea would be:\n\nuse the translate / t to translate sentences like in SymPy's jinja2 syntax, this works for HTML just like markdown.\n\n{% t \"High-performance parallel programming language\" %}\n\nuse a \u201cgenerate\u201d script to extract all sentences from the liquid templates and create the _i18n/en.yml automatically\n\n# \"index.html\" 10\n\"High-performance parallel programming language\": >-\n High-performance parallel programming language\n\ntranslators copy the _i18n/en.yml and translate all sentences, i.e. _i18n/fr.yml would contain\n\n# \"index.html\" 10\n\"High-performance parallel programming language\": >-\n Un langage de programmation parall\u00e8le haute performance\n\nthe plugin will safely fall back for missing translations to the English version if translations are not yet available.\n\nWe will need some tooling to work with yml files and merge translations, but those are hash maps which require some fuzzy string comparison at best, nothing too difficult in the Ruby world."
                },
                {
                    "user": "certik",
                    "date": "2021-03-05 21:11:22+00:00",
                    "text": "Of course, the generate script and the other tooling will be written in Fortran! :)\nIs the fr.yml format standardized somehow? It sucks to write our own tool for this, but I remember the tools are just not super great anyway. I would only suggest to use more common formats, as I think there are tools that can read those files and help translators by providing GUIs."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-03-05 21:26:09+00:00",
                    "text": "It's YAML, not sure if I would call it \u201cstandardized\u201d in any way ;).\nOf course, I would drop the whole effort of creating our own tools without a second thought if there were actually tools available for our problem."
                },
                {
                    "user": "LKedward",
                    "date": "2021-03-06 10:18:53+00:00",
                    "text": "Your proposed solution sounds good @awvwgk considering the various limitations we are dealing with. I have no experience with Ruby so I can't comment on how complex/time-consuming it might be to write and maintain the \"generate\" script, but if it's simple and robust, and it makes our life easier then it seems like a good approach."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-03-09 19:07:55+00:00",
                    "text": "I have been experimenting a bit with sphinx and myst recently while working on my teaching resources at https://qc2-teaching.readthedocs.io. While hacking an existing sphinx theme with CSS overwrites is incredible tedious, we could just create our own fortran-lang theme for this purpose (this would be the HTML + jinja2 part discussed above). Also, the myst parser does allow us to use markdown almost on par with reStructuredText which is really a step up from the kramdown parser. As a plus point we could use reStructuredText as well to write minibooks.\nIt is still a huge effort, but we would be using Python rather than Ruby, which most of you are probably more familiar with. Another plus point is that fortran90.org is using sphinx as well, so we could easily migrate the whole fortran90.org content as reStructuredText into fortran-lang.org at some point."
                },
                {
                    "user": "aslozada",
                    "date": "2021-03-09 20:51:18+00:00",
                    "text": "sphinx\nAn extension for internationalization (i18n) and localization (l10n) using i18n API is presented here"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-03-09 20:53:39+00:00",
                    "text": "Exactly, with sphinx we would get first class translation support via gettext."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-05-16 18:33:15+00:00",
                    "text": "I started working on sphinx based version of the webpage at my fork https://github.com/awvwgk/fortran-lang.org in the sphinx branch. It is still quite experimental at the moment, but so far sphinx looks really promising."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-12-01 21:41:01+00:00",
                    "text": "Coming back to this issue after a while, it seems like there is some development in the sphinx themes I checked previously. Styling with CSS is now quite straight-forward, also the sphinx-panels has been superseded by the sphinx-design project, which allows usage of almost all bootstrap we need. And we can translate it (there are a few rough edges)."
                }
            ]
        },
        {
            "number": 88,
            "user": "LKedward",
            "date": "2020-05-20 15:38:32+00:00",
            "title": "Fixes #73 lapack entry in package index.",
            "text": "Fixes #73",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-05-20 16:30:53+00:00",
                    "text": "Good catch."
                }
            ]
        },
        {
            "number": 87,
            "user": "LKedward",
            "date": "2020-05-20 15:31:00+00:00",
            "title": "Add: Navbar social icons",
            "text": "Resolves #85.\nI also removed the social links from the news sidebar (now that they're in the navbar) and replaced them with the fortran-lang twitter feed.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2020-05-20 15:31:09+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-05-20 15:32:09+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/87/"
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-20 16:36:50+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-05-20 16:37:13+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 86,
            "user": "shahmoradi",
            "date": "2020-05-19 06:47:42+00:00",
            "title": " adding the ParaMonte library ",
            "text": "This commit adds the ParaMonte library to the list of Fortran numerical libraries. ParaMonte is a well-tested general-purpose open-source high-performance MPI/Coarray-parallel Monte Carlo simulation library implemented in the 2018-standard-complaint Fortran programming language, currently with interfaces to the C/C++/Fortran/MATLAB/Python programming languages. The project's documentation is available at: https://github.com/cdslaborg/paramonte",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 85,
            "user": "certik",
            "date": "2020-05-18 19:40:56+00:00",
            "title": "Move the Discourse link at the top",
            "text": "Currently one must scroll down to find the Discourse link. Let's put it at the top horizontal menu? I think we want this as the primary discussion forum, so that would be a great place for it.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-05-18 19:56:55+00:00",
                    "text": "I agree it should be easier to find. I'm not crazy about the Discourse badge being in the navbar, design-wise. But maybe it could work, all the way to the right of \"News\". The problem here is that on mobile, Discourse link would be hidden until the user opens the sandwich bar. A workaround for this would be to keep the Discourse link both where it is now, and to add it to the navbar.\nAn alternative would be to move the whole \"Join us\" section up, and bring the \"News\" section down. I think this would be my favorite solution."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-18 20:00:27+00:00",
                    "text": "Yeah I agree, just move the section up. It definitely shouldn't be in the navbar."
                },
                {
                    "user": "certik",
                    "date": "2020-05-18 20:14:04+00:00",
                    "text": "I was thinking putting either \"Forum\" or \"Discourse\" text / link into the navigation bar at the top, not the logo. Is there a problem design-wise with that?"
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-18 20:20:28+00:00",
                    "text": "We could do something like this where we group our external links (discourse, twitter, github) as mini icons in the navbar far right, separate from internal nav links?"
                },
                {
                    "user": "certik",
                    "date": "2020-05-18 20:23:34+00:00",
                    "text": "@LKedward this looks even better! I just want to go to fortran-lang.org and then get to Discourse from there. I just don't remember the address and ultimately we want more people to do what I do --- to go through the main webpage. So that as we add more things, or announcements, they can see them."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-18 20:27:14+00:00",
                    "text": "I just want to go to fortran-lang.org and then get to Discourse from there. I just don't remember the address ..\n\nI've been doing the exact same thing! Scrolling down each time.\n\nand ultimately we want more people to do what I do --- to go through the main webpage. So that as we add more things, or announcements, they can see them.\n\nAbsolutely I agree, we want this to be more accessible and visible.\nI can have a go at putting this together this week \ud83d\udc4d"
                }
            ]
        },
        {
            "number": 84,
            "user": "certik",
            "date": "2020-05-18 14:56:01+00:00",
            "title": "Cray: Fix the name of CCE",
            "text": "",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-05-18 14:57:40+00:00",
                    "text": "This was an approved change by Cray, so I am just going to merge it."
                }
            ]
        },
        {
            "number": 83,
            "user": "LKedward",
            "date": "2020-05-17 14:39:33+00:00",
            "title": "Add navigation structure for learn section",
            "text": "As we expand the Quickstart tutorial and others start contributing tutorial content, we need a central structure for organising the learning pages on the site.\nI've drafted a possible solution in this PR:\n\nA new page layout is introduced with a navigation side bar which displays the contents of the learn section and the structure of the current page headings.\nA yaml file is used to define the contents and order of the navigation bar whereby learning pages are grouped into named chapters\n\nThis approach:\n\nmakes navigation explicitly clear to site users (no getting lost among lots of pages);\nallows contributors to start adding tutorial pages to the site now;\nbut is flexible enough that it can easily be restructured as the number of tutorials increases;\n\nTo add a page, contributors need only write a markdown file and add an entry under the appropriate chapter in the yaml data file. (I will update CONTRIBUTING.md)\nFor this draft PR I've just included the existing quickstart tutorial to demonstrate; eventually the landing page will be updated to include useful links etc.\n@milancurcic , @certik what are your thoughts?\n#build_preview",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2020-05-17 14:39:56+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-05-17 14:40:59+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/83/"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-17 15:02:27+00:00",
                    "text": "I think this is great and a step forward. I approve.\nI anticipate that our structure of content will be more unordered than ordered, so we may drop the numbering, but we can figure this out later as we go."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-30 14:50:36+00:00",
                    "text": "Okay, I've restructured this PR so that it's less like a single monolithic book with chapters and\ninstead it allows single-page and multi-page mini-book tutorials.\nThe name and contents of each mini-book is defined in a yaml data file which is used to: populate the Learn landing page with a list of books, grouped by category; and populate a table-of-contents for each mini-book.\nTo demonstrate this, the Quickstart tutorial has been broken out into multiple pages so it's easier to navigate.\nThe 'Learn' landing page has been updated to also include an initial selection of third-party resources as well.\nThe Learn page is a little bare at the moment, but with the structure now in place it should be quite easy to start adding more mini-book tutorials (starting with #90).\nI will add a section to the contributor guide on how to write a mini-book tutorial.\n#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-05-30 14:51:37+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/83/"
                },
                {
                    "user": "certik",
                    "date": "2020-05-30 16:07:22+00:00",
                    "text": "@LKedward this looks really great. Lots of work done here thank you!\nWe should put there a link to https://github.com/j3-fortran/fortran_proposals also I think.\nI think it looks great, +1 from me."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-30 19:21:04+00:00",
                    "text": "An issue that comes up here is how to sort the books? Currently they don't seem sorted in any particular way. Books at the top of the list will be implicitly given higher priority or sense of importance. So we need to decide how to sort them:\n\nAlphabetically by title?\nAlphabetically by author last name?\nChronologically from newest to oldest?\n\n\nAs yes, good point, I hadn't considered this.\nI'm not sure what the best/standard way to sort them is - my preference would be to sort by date with newest first to prioritise up-to-date editions."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-30 19:31:31+00:00",
                    "text": "Print books are now sorted by year descending - this can be changed to alphabetical if desired.\n#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-05-30 19:32:40+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/83/"
                },
                {
                    "user": "jvdp1",
                    "date": "2020-05-30 20:16:49+00:00",
                    "text": "This looks really great. Easy to navigate and read! Really good job!"
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-31 09:19:20+00:00",
                    "text": "Thanks all for the feedback and suggestions. I will now merge and work on updating the contributor guide with instructions in a new PR."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-31 09:25:09+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-05-31 09:25:28+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 82,
            "user": "LKedward",
            "date": "2020-05-17 14:19:00+00:00",
            "title": "Update Quickstart tutorial",
            "text": "#7 (comment)\nWe can discuss what needs to be done here.",
            "is_open": true,
            "labels": [
                "learn"
            ],
            "comments": [
                {
                    "user": "Irvise",
                    "date": "2020-06-13 21:13:59+00:00",
                    "text": "I have a proposal that I want to explain here to get some feedback before making any pull request.\nIn the control flow section only if-else, do and do-while are discussed.\nI propose to add a small footnote to indicate the existence of cycle, exit, where, forall? and do concurrent. Just like in derived types with the comment of pointer, codimension, etc. This will make the reader aware that fortran supports more than just the \"common\" flow instructions\nPS: it is great idea to have a \"modern\" place to get into/discuss fortran. Tank you!"
                },
                {
                    "user": "certik",
                    "date": "2020-06-14 04:34:20+00:00",
                    "text": "@Irvise I think that's a great idea. Go ahead and submit a PR."
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-14 09:28:26+00:00",
                    "text": "Hi @Irvise, you're absolutely right; there should definitely be a mention and explanation of those control flow statements. The control flow page is a little sparse currently and I think there could probably be a bit more explanative text there (#99 is a good example of the writing style for these tutorials).\nThe Quickstart tutorial is by no means a finished product so any more suggestions and contributions are certainly welcome!"
                },
                {
                    "user": "Irvise",
                    "date": "2020-06-14 09:50:49+00:00",
                    "text": "@certik @LKedward would you like it to be a very short note commenting their existence or would you prefer to have a small sentence explaining what each of them are supposed to do?\nI personally think cycle and exit are \"basic\" control flow key words. Maybe they deserve their own section to be properly discussed?\nAnd regarding the more \"advance\" features. Are there any plans to make an \"Intermediate fortran\" page? I have seen that you are discussing a Rust-style book, will it be a complete language introduction?"
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-14 11:08:56+00:00",
                    "text": "I think we should actually explain what cycle and exit do since they are quite fundamental to loop operations; if you think they need their own section (on the same page) then I have no objection to that.\nThere could probably be another section on the Loops page about implied do loops and the where statement. I'm not sure about including the forall statement since this is now an obsolescent feature.\nDo concurrent could be be mentioned perhaps, but detail deferred to a future tutorial?\nWe've moved away from the idea of a single monolithic Rust-style book in favour of many smaller books on different topics - as part of this, I think an \"Intermediate Fortran\" book makes sense as a next step after the Quickstart guide. Do you have any thoughts on what could go in this? Perhaps we should open an issue to discuss that."
                },
                {
                    "user": "Irvise",
                    "date": "2020-06-14 15:21:39+00:00",
                    "text": "Okay, I will start to write in a week or two (a bit too much work now).\nHas the proposal to have something similar to Ada's learn page been discussed? I think it solves most of the points mentioned (plus it is interactive). However, I know this is not the issue to discuss this point. In order to keep the issue on point, could you point me to where the current discussion taking place?"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-14 16:09:00+00:00",
                    "text": "Hi @Irvise, that would be a great addition.\n\n@certik @LKedward would you like it to be a very short note commenting their existence or would you prefer to have a small sentence explaining what each of them are supposed to do?\n\nWe should have at least a complete small example showing how they work and a paragraph describing each feature. So, considerably more than a note or a sentence. While you're at it, if you can help expand the existing https://fortran-lang.org/learn/quickstart/operators_control_flow#loop-constructs-do section, that would be great.\n\nI personally think cycle and exit are \"basic\" control flow key words. Maybe they deserve their own section to be properly discussed?\n\nI think they should be in this section, and each should probably have its own subsection. Something like this (and separated from logical operators which don't belong with control flow):\n# Control flow (chapter)\n## if-branches (section)\n...\n## do-loops (section)\n### regular do (subsection)\n### do while() (subsection)\n### do concurrent() (subsection)\n### cycle, exit (subsection)\nI agree that we shouldn't include forall for the reason that Laurence mentioned. We should include where, but not in control flow, as it's an array assignment construct. So it belongs in the Arrays chapter, which should be separated from strings."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-06-14 16:39:27+00:00",
                    "text": "We've moved away from the idea of a single monolithic Rust-style book in favour of many smaller books on different topics - as part of this, I think an \"Intermediate Fortran\" book makes sense as a next step after the Quickstart guide. Do you have any thoughts on what could go in this? Perhaps we should open an issue to discuss that.\n\n@LKedward I think you refer to this. I apologize that I didn't provide feedback back in that thread. I didn't in part because I haven't gotten clear my self with the best way forward, and this in a difficult problem to solve.\nI like the approach of mini-books over one large monolithic book. However, we're currently unclear what the specific mini-books are and what separates them. When you separate a subject matter into multiple parts (mini-books) you need to decide how to separate them. You can do it in different ways:\n\nBy topic (compiling and linking, arrays, control flow, OOP, etc.)\nBy reader skill level (intro, advanced, expert)\nBy teaching method (tutorial, reference, cookbook, FAQ, best practices)\n\nDifferent teaching methods serve different purposes, so I think we all agree we need separation by teaching method (e.g. we'll have best practices from fortran90.org etc.). There are kind of a neutral ground mini-books, because they will tend to touch on all of the topics, and be useful to programmers of all skill levels.\nHowever, please, please be cautious of separating mini-books by both topic and skill level at the same time. By doing that you have to assume which topics are basic or advanced. And by assuming that you're assuming about what the reader needs. Which I don't think we can or should assume.\nAnother problem is overlap in content. Inevitably, both the intro and advanced mini-books will cover I/O, arrays, derived types etc. There will be a lot of repetition and cross-referencing. An average reader won't know ahead of time where the specific feature they're looking for is described.\nI urge everybody here to discuss and decide whether to separate by topic or by skill level, but please don't do both. We'll end up with many messy and complicated books.\nMy preference is to separate by topic (e.g. mini-book on arrays, I/O, OOP, parallelism, interop etc.), and each successive section of a mini-book builds gradually in depth and skill level. Of course, some topics will depend on others, and we'll end up with a natural sequence of mini-books that form a nice, coherent, large book, just like the Rust book. Which is what we wanted in the first place. :)"
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-14 18:08:24+00:00",
                    "text": "However, we're currently unclear what the specific mini-books are and what separates them.\n\nWe briefly discussed this (in the first tutorial PR I think) and I recall that we agreed to avoid separation by skill level, due to the issues you discuss, and primarily go for separation by topic + other formats (FAQ etc.). Based off this previous conversation, this is also my preferred method of separation.\n@milancurcic, my mention of an \"Intermediate Fortran\" book may have caused confusion - by this I meant that it would be good to have a follow-on book from the Quickstart tutorial that covers more advanced topics that are not already contained within the Quickstart tutorial. i.e. they are split by topic where multiple topics are grouped within a book. This would be more of a \"Further Fortran\" book.\nI realise that it may be preferable to have more topic granularity at the book level (one topic per book), however I also don't think we should have ~10 books each consisting of ~3 paragraphs to start off with.\n\nthis in a difficult problem to solve.\n\nAbsolutely, the idea behind the mini-books is to give us as much flexibility in structuring the content while also enabling us to publish content incrementally instead of in large tranches.\nMy idea was that topics can start off as sections and be expanded to pages and then broken-out into stand-alone books, as more content is added."
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-14 18:17:19+00:00",
                    "text": "Okay, I will start to write in a week or two (a bit too much work now).\n\nThanks @Irvise ! Any help with the tutorials would be greatly appreciated!\n\nHas the proposal to have something similar to Ada's learn page been discussed? I think it solves most of the points mentioned (plus it is interactive). However, I know this is not the issue to discuss this point. In order to keep the issue on point, could you point me to where the current discussion taking place?\n\nWe have a general discussion for the Learn section in #7 - I'll take a look at the Ada page.\nI had considered including interactivity using compiler explorer: you can essentially store code snippets on it using the short urls; it can be configured to just show compilation and execution output without the assembly dump and it can be embedded via an iframe (see the 'share' menu)."
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-14 18:49:50+00:00",
                    "text": "it would be good to have a follow-on book from the Quickstart tutorial that covers more advanced topics that are not already contained within the Quickstart tutorial. i.e. they are split by topic where multiple topics are grouped within a book. This would be more of a \"Further Fortran\" book.\n\nFollow-up: I realise the idea of grouping topics into books still suffers from the underlying issue of making an assumption about the skill level of the topics and so isn't really a good idea.\nBest to keep to one topic per book."
                }
            ]
        },
        {
            "number": 81,
            "user": "aktech",
            "date": "2020-05-15 18:29:42+00:00",
            "title": "Use {{site.baseurl}} instead of relative link",
            "text": "As suggested here:\n#80 (comment) and\nhttps://github.com/fortran-lang/fortran-lang.org/blob/master/CONTRIBUTING.md#internal-site-links\nping @LKedward @certik",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-05-15 20:47:56+00:00",
                    "text": "Thanks Amit!"
                }
            ]
        },
        {
            "number": 80,
            "user": "aktech",
            "date": "2020-05-15 18:17:00+00:00",
            "title": "Fix broken getting started link from tutorial -> learn",
            "text": "It seems the getting started link in the home page (https://fortran-lang.org/) above footer is broken as it still points to tutorial/, which was removed in this commit: 2adc5eb#diff-94d9a081cd1256334373c8ca6fb6276c",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-05-15 18:19:47+00:00",
                    "text": "Nice to see you here @aktech !"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-15 18:22:27+00:00",
                    "text": "Thank you and welcome @aktech !"
                }
            ]
        },
        {
            "number": 79,
            "user": "LKedward",
            "date": "2020-05-15 14:49:22+00:00",
            "title": "Transfer fortran90.org content",
            "text": "See #7 (comment)",
            "is_open": true,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-05-15 17:27:18+00:00",
                    "text": "Yes, we should transfer it and then put a banner at fortran90.org to come here."
                },
                {
                    "user": "vmagnin",
                    "date": "2021-04-19 17:21:43+00:00",
                    "text": "Following that discussion https://fortran-lang.discourse.group/t/fortran-lang-is-now-second-in-google/931/14 , I can help working on translating the ReStructuredText format to Markdown, using Pandoc."
                },
                {
                    "user": "certik",
                    "date": "2021-04-19 17:33:45+00:00",
                    "text": "@vmagnin thank you! That would be super helpful."
                },
                {
                    "user": "jvdp1",
                    "date": "2021-04-19 17:41:17+00:00",
                    "text": "I would be happy to help too! I guess that the file conversion is the easiest step ;) A nice integration in fortran-lang (by considering the current content of fortran-lang to avoid overlap) would require more work."
                },
                {
                    "user": "certik",
                    "date": "2021-04-19 18:45:46+00:00",
                    "text": "Go ahead, take one page and submit a PR against this repository. Then let's figure out how to best integrate."
                },
                {
                    "user": "vmagnin",
                    "date": "2021-04-19 19:01:34+00:00",
                    "text": "@jvdp1\n\nI would be happy to help too! I guess that the file conversion is the easiest step ;) A nice integration in fortran-lang (by considering the current content of fortran-lang to avoid overlap) would require more work.\n\nYes, a quick try today showed me that Pandoc was doing a very good job, except some characters like quotes, and some links. So the translation with Pandoc will be very fast, the longest work will be to verify that every thing is OK. Perhaps a simple copy/paste of the texts of both versions, and a diff on the two resulting files could accelerate that validation.\nThen will begin the integration to the website.\nI propose beginning working myself on the Pandoc and validation step. In the meantime, @jvdp1 you can have a look at the text of fortran90.org and the content of Fortran-lang.org to identify potential problems."
                },
                {
                    "user": "vmagnin",
                    "date": "2021-04-19 19:11:54+00:00",
                    "text": "@certik\n\nGo ahead, take one page and submit a PR against this repository. Then let's figure out how to best integrate.\n\nI guess I should put the Markdown files into a directory in https://fortran-lang.org/learn/\nPerhaps https://fortran-lang.org/learn/tutorials/ ? Or any other name you think more adequate.\nThen probably we will need Sebastian @awvwgk to integrate those .md files into the code of the site."
                },
                {
                    "user": "awvwgk",
                    "date": "2021-04-19 19:16:22+00:00",
                    "text": "The documentation regarding the learn subsection is located here."
                },
                {
                    "user": "vmagnin",
                    "date": "2021-04-19 19:19:35+00:00",
                    "text": "@awvwgk\n\nThe documentation regarding the learn subsection is located here.\n\nWow! I will look at it.\nI will work in my fork from awvwgk/fortran-lang.org\nShould I create a new branch?"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-04-19 19:22:58+00:00",
                    "text": "Right, you forked from my fork, just branch from my default branch, it is kept in sync with the @fortran-lang default branch automatically. You can direct your PR against the @fortran-lang version of the homepage, but if you make a PR against my fork by accident, I'll watch out and advice how to get to the real upstream."
                },
                {
                    "user": "vmagnin",
                    "date": "2021-04-20 10:07:35+00:00",
                    "text": "I report my progress translating fortran90.org files. The following command gives good results:\n$ pandoc --standalone --toc --resource-path=../images --to markdown_strict --shift-heading-level-by=1 best-practices.rst -o best-practices.md\nI have added the --to markdown_strict to fix some problems: some characters were escaped like \\\" or \\', and there was problems with rst labels. At first glance, it looks now fine, except for the escaped \\$ in the OpenMP directives (only three occurrences).\nIn the rosetta.rst page, there is a mandelbrot.png image. Curiously, despite the --resource-path=../images option, I had to modify the path ![image](/images/mandelbrot.png) to  ![image](../images/mandelbrot.png).\nThe --shift-heading-level-by=1 is for starting headings at <h2>, like specified in the style guide.\nNow my objective is to first work on a PR for best-practices.md.  There is two possibilities:\n\na single-page mini-book: although that page is quite long, we could put it quickly online and later, as the text is revised, slice it into a multi-page mini-book.\nworking directly on a multi-page mini-book.\n\nRemarks concerning code indentation:\nit is generally 4 spaces. As far as I understand, the discussions #101 and https://fortran-lang.discourse.group/t/should-tutorials-on-fortran-lang-org-follow-a-consistent-style-for-code-listings/134/18 seem OK with that although other tutorials seem to be rather 2 spaces. But we can also notice that there is generally no indentation for the code inside functions and subroutines, which could be discussed if the content is later revised.\nUseful links:\n\nhttps://fortran-lang.org/learn/\nhttps://www.fortran90.org/\nhttps://github.com/certik/fortran90.org/\nhttps://pandoc.org/MANUAL.html\nhttps://www.markdownguide.org/tools/jekyll/"
                },
                {
                    "user": "jvdp1",
                    "date": "2021-04-20 10:13:26+00:00",
                    "text": "Thank you @vmagnin for this wok. I would be in favor of working directly on a multi-page mini-book. IMO it will be easier to review and identify possible overlaps with existing contents."
                },
                {
                    "user": "certik",
                    "date": "2021-04-20 15:55:26+00:00",
                    "text": "Thank you @vmagnin for this work!\nYes, we can do multi page mini book and review page by page. Yes, let's start with the best practices. (The rosetta has an issue that it has side by side code comparisons which we have to figure out how to do in Markdown. We don't need to include the Mandelbrot image, I only included it to show that both Python and Fortran generate exactly the same image.)\nI think there is in general no agreement on the number of spaces. I suggest to keep the formatting as is, and see how it looks when rendered and if there are objections."
                },
                {
                    "user": "vmagnin",
                    "date": "2021-04-20 16:19:38+00:00",
                    "text": "Yes, we can do multi page mini book and review page by page. Yes, let's start with the best practices. (The rosetta has an issue that it has side by side code comparisons\n\nSo let's go with multi-page! I will slice best-practices.md in as many files as needed, following the MINIBOOKS guide. And when ready, I will post here the directory tree to be sure we agree with the directory and filenames before I commit them in my fork and create a PR.\nConcerning rosetta.md, Pandoc has converted the tables containing the Fortran and Python codes in HTML tables. It looks quite good in a Markdown visualizer, although when the two codes have very different lengths, the shorter one is vertically aligned centered, contrarily to the original in fortran90.org. I imagine it can be fixed by modifying the HTML parameters.\nNote that for the moment, I have not yet included those files in my Fortran-lang.org fork, so I don't know yet how they will look in a browser."
                },
                {
                    "user": "vmagnin",
                    "date": "2021-04-20 16:38:56+00:00",
                    "text": "For rosetta.md there is also an extension grid_tables to avoid HTML:\n$ pandoc --standalone --toc --resource-path=../images/ --to markdown_strict+grid_tables --shift-heading-level-by=1 rosetta.rst -o rosetta.md\nThe tables look good in a text editor, but my Markdown viewers don't manage them. But I will test it in the website fork."
                },
                {
                    "user": "vmagnin",
                    "date": "2021-04-20 20:02:37+00:00",
                    "text": "Beginning visualizing the result with Jekyll, I have updated my Pandoc command:\n$ pandoc --standalone --toc --resource-path=../images --to markdown_strict+pipe_tables+backtick_code_blocks best-practices.rst -o best-practices.md\n\nThe pipe_tables extension yields tables in markdown format instead of HTML.\nThe backtick_code_blocks extension is for having code in blocks ```fortran... ``` which allows syntactic coloration. By default the code was in blocks indented with 4 spaces.\nI have removed --shift-heading-level-by=1 because the <h1> title of each file will be transferred into the header of the md file. And so others will already begin at level 2."
                },
                {
                    "user": "vmagnin",
                    "date": "2021-04-20 20:28:56+00:00",
                    "text": "I will continue tomorrow, but it looks quite good:"
                },
                {
                    "user": "certik",
                    "date": "2021-04-20 20:34:06+00:00",
                    "text": "Nice, thank you @vmagnin! I can help proof read once you are ready."
                },
                {
                    "user": "vmagnin",
                    "date": "2021-04-21 09:27:08+00:00",
                    "text": "I have committed the new mini-book to my fork in a new fortran90org branch:\nhttps://github.com/vmagnin/fortran-lang.org/tree/fortran90org\n$ tree best_practices\nbest_practices\n\u251c\u2500\u2500 allocatable_arrays.md\n\u251c\u2500\u2500 arrays.md\n\u251c\u2500\u2500 callbacks.md\n\u251c\u2500\u2500 c_interfacing.md\n\u251c\u2500\u2500 element_operations.md\n\u251c\u2500\u2500 file_io.md\n\u251c\u2500\u2500 floating_point.md\n\u251c\u2500\u2500 index.md\n\u251c\u2500\u2500 integer_division.md\n\u251c\u2500\u2500 modules_programs.md\n\u251c\u2500\u2500 multidim_arrays.md\n\u251c\u2500\u2500 parallel_programming.md\n\u251c\u2500\u2500 python_interfacing.md\n\u251c\u2500\u2500 style_guide.md\n\u2514\u2500\u2500 type_casting.md\n\n0 directories, 15 files\nLet me know if you agree with those directory and filenames. I am waiting for your signal to make a PR.\nSome remarks:\n\nI have not changed anything in the content except a word in the introduction (\"This page\" => \"This mini-book\"), and I have added the authors (https://www.fortran90.org/src/contributors.html) in the header of the index.md file.\nThe markdown looks good, but perhaps the markdown tables look could be improved.\nIn the learn/ directory, there is still a file best_practices.md (Draft structure for fortran tutorials) created by @LKedward one year ago."
                },
                {
                    "user": "LKedward",
                    "date": "2021-04-21 09:34:37+00:00",
                    "text": "Great stuff! (Feel free to delete the vestigial best_practices.md in your pull request.)"
                },
                {
                    "user": "vmagnin",
                    "date": "2021-04-21 12:48:20+00:00",
                    "text": "Thanks @LKedward, I have committed a git rm best_practices.md in my fork.\nConcerning the Python Fortran Rosetta Stone page, it's more difficult with the Python / Fortran code comparisons in two columns. I have found no Pandoc extension to obtain a correct Markdown table. Pandoc can generate HTML tables, but we lose the syntax highlighting. No idea for the moment...\nThe vertical alignment problem can be fixed by adding an attribute: <td style=\"vertical-align:top\">:"
                },
                {
                    "user": "certik",
                    "date": "2021-04-21 13:32:47+00:00",
                    "text": "I'll review later today, thank you so much @vmagnin!\nRegarding the rosetta, one option is to use Myst: https://myst-nb.readthedocs.io/en/latest/use/markdown.html, it is markdown and it can do anything that ReST could do. I believe it can do side by side tables."
                },
                {
                    "user": "jvdp1",
                    "date": "2021-04-21 14:04:26+00:00",
                    "text": "Let me know if you agree with those directory and filenames. I am waiting for your signal to make a PR.\n\nSounds good to me. I guess a PR could be opened for review. Should we already introduce cross-references with the current content of fortran-lang.org  (especially from the Quickstart tutorial in whcih tips are mentioned to this mi-book) (during the review)?"
                },
                {
                    "user": "vmagnin",
                    "date": "2021-04-22 08:49:14+00:00",
                    "text": "Concerning the FAQ and Gotchas pages of fortran90.org, the Pandoc command used for Fortran Best Practices also makes a perfect job."
                }
            ]
        },
        {
            "number": 78,
            "user": "LKedward",
            "date": "2020-05-15 14:47:42+00:00",
            "title": "Tutorial: object-oriented Fortran",
            "text": "As discussed on fortran-lang mailing list\nAssign: Williams",
            "is_open": true,
            "labels": [],
            "comments": [
                {
                    "user": "jvdp1",
                    "date": "2020-05-16 06:48:53+00:00",
                    "text": "Here is a good tutorial (IMHO) on Fortran OOP:\nhttps://gist.github.com/n-s-k/522f2669979ed6d0582b8e80cf6c95fd\nIt is maybe worthwhile to ask the author (@n-s-k) if he would be interested to contribute to this tutorial."
                }
            ]
        },
        {
            "number": 77,
            "user": "LKedward",
            "date": "2020-05-15 14:45:12+00:00",
            "title": "Tutorial: building compiled programs",
            "text": "As discussed on fortran-lang mailing list, this will cover compiling, linking and libraries.\nAssigned: @arjenmarkus",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "arjenmarkus",
                    "date": "2020-05-15 19:17:49+00:00",
                    "text": "I took the opportunity of a couple of hours during a lazy evening to sit down and write a quick-and-dirty document. No Markdown mark-up, just plain text. It is just the start, but it should illustrate what I am thinking of. Of course there are plenty of tools to help with building a program, but I think it is also important to understand what is going on when you build a program.\nThe document is very much work-in-progress, so have a look and et me know whether this is useful or not.\nbuilding_programs.txt"
                },
                {
                    "user": "certik",
                    "date": "2020-05-15 19:35:02+00:00",
                    "text": "@arjenmarkus I think this looks great and I would like to have it in our Documentation section somewhere. @milancurcic, @LKedward where do you think would be the best place?"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-15 19:39:27+00:00",
                    "text": "I love this. I think this is the kind of style we should take for tutorials.\nI think it would work well as a self-contained \"book\" (as described in #7) on building and linking, and we can link to it from the quickstart tutorial (/learn page).\nIt will be straightforward to convert it to Markdown."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-15 20:08:37+00:00",
                    "text": "Looks great, thanks @arjenmarkus."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-05-15 20:31:07+00:00",
                    "text": "Well, that is encouraging :).\n\nRegards,\n\nArjen\n\nOp vr 15 mei 2020 om 22:08 schreef Laurence Kedward <\nnotifications@github.com>:\n\u2026\n Looks great, thanks @arjenmarkus <https://github.com/arjenmarkus>.\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#77 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YRZGPFQNWV62M4QGT6LRRWONJANCNFSM4NBUJL7Q>\n ."
                },
                {
                    "user": "jvdp1",
                    "date": "2020-05-16 06:35:23+00:00",
                    "text": "@arjenmarkus Thank you for this manuscript. I really like the style.\nIt would be indeed easy to convert it to Markdown. We could help with the conversion when it will submitted to a PR."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-05-16 18:32:20+00:00",
                    "text": "Thanks - I am always a trifle uncertain about the precise formatting or the\ndialect. Of course, so far the formatting requirements are very basic - and\nI intend to keep it that way.\n\nRegards,\n\nArjen\n\nOp za 16 mei 2020 om 08:35 schreef Jeremie Vandenplas <\nnotifications@github.com>:\n\u2026\n @arjenmarkus <https://github.com/arjenmarkus> Thank you for this\n manuscript. I really like the style.\n It would be indeed easy to convert it to Markdown. We could help with the\n conversion when it will submitted to a PR.\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#77 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YRYQGAVJTKVTXMZHPMDRRYX3NANCNFSM4NBUJL7Q>\n ."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-05-19 06:49:59+00:00",
                    "text": "Short update: I have almost completed the draft of the tutorial I have in\nmind. A rather tricky problem: make sure the _necessary_ details are\npresented in a clear and structured way. It is easy enough to structure the\ntext and it is easy enough to describe all the details. But the challenge\nis: only what is necessary in a structured way :).\n\nPutting in the Markdown formatting was not a big issue, butI will probably\nneed some assistance with the next step - the pull request.\n\nRegards,\n\nArjen\n\nOp za 16 mei 2020 om 20:32 schreef Arjen Markus <arjen.markus895@gmail.com>:\n\u2026\n Thanks - I am always a trifle uncertain about the precise formatting or\n the dialect. Of course, so far the formatting requirements are very basic -\n and I intend to keep it that way.\n\n Regards,\n\n Arjen\n\n Op za 16 mei 2020 om 08:35 schreef Jeremie Vandenplas <\n ***@***.***>:\n\n> @arjenmarkus <https://github.com/arjenmarkus> Thank you for this\n> manuscript. I really like the style.\n> It would be indeed easy to convert it to Markdown. We could help with the\n> conversion when it will submitted to a PR.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <#77 (comment)>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAN6YRYQGAVJTKVTXMZHPMDRRYX3NANCNFSM4NBUJL7Q>\n> .\n>"
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-19 07:35:22+00:00",
                    "text": "Thanks for the update @arjenmarkus.\nRegarding the next step, I'm happy to provide guidance on putting together the PR or otherwise to submit the PR myself on your behalf."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-05-22 14:14:14+00:00",
                    "text": "Hi Laurence,\n\nokay, I have finished the draft, converted it to Markdown and I have cloned\nthe website on my machine. I can simply add the file in the subdirectory\n\"learn\", but I suppose I also need to add the header, like from the index:\n---\nlayout: page\ntitle: Quickstart Fortran\npermalink: /learn/\nnavbar: Learn\n---\nbut what to fill in?\n\nAlso: for now I have added a link to CC-BY, but is that the sort of license\nwe want to use for these mini-books? Or do we use LGPL or ...?\n\nRegards,\n\nArjen\n.\n\nOp di 19 mei 2020 om 09:35 schreef Laurence Kedward <\nnotifications@github.com>:\n\u2026\n Thanks for the update @arjenmarkus <https://github.com/arjenmarkus>.\n Regarding the next step, I'm happy to provide guidance on putting together\n the PR or otherwise to submit the PR myself on your behalf.\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#77 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YR3FKPEDIEZ32WDH6R3RSIZETANCNFSM4NBUJL7Q>\n ."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-22 14:28:35+00:00",
                    "text": "Hi @arjenmarkus,\nSounds good. Regarding the header, you only need to change the title field to the title of your tutorial\nand the permalink field to something like permalink: /learn/building_programs - this will cause the web address of your tutorial to be https://fortran-lang.org/learn/building_programs. The ending after /learn/ just needs to be a short descriptive string for your tutorial. The other fields (layout, navbar) can be kept the same as in the index file.\nI'm not sure if we are using a different license for the tutorial content - the website source is currently licensed under MIT, but it may be a good idea to license the tutorials under one of the CC-BY licenses. As the author and copyright holder, the licensing of the tutorial content is ultimately your choice - but it would be good to agree a license for all tutorial and similar content on fortran-lang.org. What are your thoughts @milancurcic and @certik ?"
                },
                {
                    "user": "certik",
                    "date": "2020-05-22 14:30:18+00:00",
                    "text": "I suggest to use an MIT license by default for such books. Consistent with other materials here. Unless the author specifically objects, in which case we can discuss on a case by case basis.\n\u2026\nOn Fri, May 22, 2020, at 8:14 AM, arjenmarkus wrote:\n\n\n  Hi Laurence,\n\n  okay, I have finished the draft, converted it to Markdown and I have cloned\n  the website on my machine. I can simply add the file in the subdirectory\n  \"learn\", but I suppose I also need to add the header, like from the index:\n  ---\n  layout: page\n  title: Quickstart Fortran\n  permalink: /learn/\n  navbar: Learn\n  ---\n  but what to fill in?\n\n  Also: for now I have added a link to CC-BY, but is that the sort of license\n  we want to use for these mini-books? Or do we use LGPL or ...?\n\n  Regards,\n\n  Arjen\n  .\n\n  Op di 19 mei 2020 om 09:35 schreef Laurence Kedward <\n  ***@***.***>:\n\n  > Thanks for the update @arjenmarkus <https://github.com/arjenmarkus>.\n  > Regarding the next step, I'm happy to provide guidance on putting\n together\n  > the PR or otherwise to submit the PR myself on your behalf.\n  >\n  > \u2014\n  > You are receiving this because you were mentioned.\n  > Reply to this email directly, view it on GitHub\n  >\n <#77 (comment)>,\n  > or unsubscribe\n  >\n <https://github.com/notifications/unsubscribe-auth/AAN6YR3FKPEDIEZ32WDH6R3RSIZETANCNFSM4NBUJL7Q>\n  > .\n  >\n \u2014\n You are receiving this because you commented.\n Reply to this email directly, view it on GitHub\n <#77 (comment)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAAFAWBIDBGGX23I6ZUPBZTRS2CELANCNFSM4NBUJL7Q>."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-22 14:34:40+00:00",
                    "text": "I suggest to use an MIT license by default for such books. Consistent with other materials here. Unless the author specifically objects, in which case we can discuss on a case by case basis.\n\nI agree with preferring consistency, but MIT is strictly a software license - I believe the general copyright equivalent is CC-BY which simply requires attribution like MIT."
                },
                {
                    "user": "certik",
                    "date": "2020-05-22 14:38:37+00:00",
                    "text": "I am not an expert on the CC licenses, I know some of them are not open source so we have to be very careful to pick the right one. What does Rust use for their documentation?\n\u2026\nOn Fri, May 22, 2020, at 8:34 AM, Laurence Kedward wrote:\n\n\n > I suggest to use an MIT license by default for such books. Consistent with other materials here. Unless the author specifically objects, in which case we can discuss on a case by case basis.\n\n I agree with preferring consistency, but MIT is strictly a software\n license - I believe the general copyright equivalent is CC-BY which\n simply requires attribution like MIT.\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#77 (comment)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAAFAWAWTD7KUYWDJZRTMETRS2EQ5ANCNFSM4NBUJL7Q>."
                },
                {
                    "user": "certik",
                    "date": "2020-05-22 14:43:04+00:00",
                    "text": "P.S. I view documentation as code: it's written in Markdown, which literally is a source code that gets parsed and compiled to the final form, whether html or pdf. Also one can then copy and paste example code from the documentation into user projects without problem. So I've always used MIT for documentation.  But I am not opposed to other options.\n\u2026\nOn Fri, May 22, 2020, at 8:38 AM, Ond\u0159ej \u010cert\u00edk wrote:\n I am not an expert on the CC licenses, I know some of them are not open\n source so we have to be very careful to pick the right one. What does\n Rust use for their documentation?\n\n On Fri, May 22, 2020, at 8:34 AM, Laurence Kedward wrote:\n >\n >\n > > I suggest to use an MIT license by default for such books. Consistent with other materials here. Unless the author specifically objects, in which case we can discuss on a case by case basis.\n >\n > I agree with preferring consistency, but MIT is strictly a software\n > license - I believe the general copyright equivalent is CC-BY which\n > simply requires attribution like MIT.\n >\n > \u2014\n > You are receiving this because you were mentioned.\n > Reply to this email directly, view it on GitHub\n > <#77 (comment)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAAFAWAWTD7KUYWDJZRTMETRS2EQ5ANCNFSM4NBUJL7Q>.\n >"
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-22 14:44:40+00:00",
                    "text": "I am not an expert on the CC licenses, I know some of them are not open source so we have to be very careful to pick the right one.\n\nAh okay, good point - I'm no expert either.\n\nWhat does Rust use for their documentation?\n\nIt appears to be under the same license as Rust itself which is MIT/Apache2.\n\nP.S. I view documentation as code: it's written in Markdown, which literally is a source code that gets parsed and compiled to the final form, whether html or pdf. Also one can then copy and paste example code from the documentation into user projects without problem. So I've always used MIT for documentation. But I am not opposed to other options.\n\nThis makes sense to me; I'm happy to keep with MIT for consistency then \ud83d\udc4d"
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-05-22 16:54:59+00:00",
                    "text": "Hi everyone,\n\nno problem with me - as long as it is a permissive licence :). The MIT\nlicence should do fine and consistency is not unimportance.\n\nRegards,\n\nArjen\n\nOp vr 22 mei 2020 om 16:44 schreef Laurence Kedward <\nnotifications@github.com>:\n\u2026\n I am not an expert on the CC licenses, I know some of them are not open\n source so we have to be very careful to pick the right one.\n\n Ah okay, good point - I'm no expert either.\n\n What does Rust use for their documentation?\n\n It appears to be under the same license as Rust itself which is MIT/Apache2\n <https://github.com/rust-lang/book/blob/master/CONTRIBUTING.md#licensing>.\n\n P.S. I view documentation as code: it's written in Markdown, which\n literally is a source code that gets parsed and compiled to the final form,\n whether html or pdf. Also one can then copy and paste example code from the\n documentation into user projects without problem. So I've always used MIT\n for documentation. But I am not opposed to other options.\n\n This makes sense to me; I'm happy to keep with MIT for consistency then \ud83d\udc4d\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#77 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YR7LVOJEL47USCHNI4DRS2FWNANCNFSM4NBUJL7Q>\n ."
                },
                {
                    "user": "certik",
                    "date": "2020-05-22 18:02:20+00:00",
                    "text": "Ok then, let's stick to MIT then."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-05-22 18:03:19+00:00",
                    "text": "Hi everyone,\n\nI tried to view the new page as per the instructions via \"jekyll\", but I\ngot a lot of error messages:\n\n$ bundle exec jekyll serve --watch\nConfiguration file: none\n            Source: /cygdrive/d/fortran/fortran-lang/fortran-lang.org/learn\n       Destination: /cygdrive/d/fortran/fortran-lang/\nfortran-lang.org/learn/_site\n Incremental build: disabled. Enable with --incremental\n      Generating...\n     Build Warning: Layout 'page' requested in best_practices.md does not\nexist.\n     Build Warning: Layout 'page' requested in building_programs.md does\nnot exist.\n  Liquid Exception: Could not locate the included file 'note.html' in any\nof [\"/cygdrive/d/fortran/fortran-lang/fortran-lang.org/learn/_includes\"].\nEnsure it exists in one of those directories and, if it is a symlink, does\nnot point outside your site source. in index.md\njekyll 3.8.6 | Error:  Could not locate the included file 'note.html' in\nany of [\"/cygdrive/d/fortran/fortran-lang/fortran-lang.org/learn/_includes\"].\nEnsure it exists in one of those directories and, if it is a symlink, does\nnot point outside your site source.\n\nI did a fresh install of Ruby, gems and bundle - there were some complaints\nabout old and deprecated packages, but nothing that seemed serious.\n\nThe file \"note.html\"  it is complaining about does actually exist in the\nsubdirectory _includes.\n\nFor your information: I installed Ruby and its packages on Cygwin.\n\nRegards,\n\nArjen\n\n\nOp vr 22 mei 2020 om 18:54 schreef Arjen Markus <arjen.markus895@gmail.com>:\n\u2026\n Hi everyone,\n\n no problem with me - as long as it is a permissive licence :). The MIT\n licence should do fine and consistency is not unimportance.\n\n Regards,\n\n Arjen\n\n Op vr 22 mei 2020 om 16:44 schreef Laurence Kedward <\n ***@***.***>:\n\n> I am not an expert on the CC licenses, I know some of them are not open\n> source so we have to be very careful to pick the right one.\n>\n> Ah okay, good point - I'm no expert either.\n>\n> What does Rust use for their documentation?\n>\n> It appears to be under the same license as Rust itself which is\n> MIT/Apache2\n> <https://github.com/rust-lang/book/blob/master/CONTRIBUTING.md#licensing>\n> .\n>\n> P.S. I view documentation as code: it's written in Markdown, which\n> literally is a source code that gets parsed and compiled to the final form,\n> whether html or pdf. Also one can then copy and paste example code from the\n> documentation into user projects without problem. So I've always used MIT\n> for documentation. But I am not opposed to other options.\n>\n> This makes sense to me; I'm happy to keep with MIT for consistency then\n> \ud83d\udc4d\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <#77 (comment)>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAN6YR7LVOJEL47USCHNI4DRS2FWNANCNFSM4NBUJL7Q>\n> .\n>"
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-05-22 18:06:27+00:00",
                    "text": "Oh, now I see the problem - it looks at \"learn/_includes\", not \"_includes\".\nHm.\n\nRegards,\n\nArjen\n\nOp vr 22 mei 2020 om 20:03 schreef Arjen Markus <arjen.markus895@gmail.com>:\n\u2026\n Hi everyone,\n\n I tried to view the new page as per the instructions via \"jekyll\", but I\n got a lot of error messages:\n\n $ bundle exec jekyll serve --watch\n Configuration file: none\n             Source: /cygdrive/d/fortran/fortran-lang/\n fortran-lang.org/learn\n        Destination: /cygdrive/d/fortran/fortran-lang/\n fortran-lang.org/learn/_site\n  Incremental build: disabled. Enable with --incremental\n       Generating...\n      Build Warning: Layout 'page' requested in best_practices.md does not\n exist.\n      Build Warning: Layout 'page' requested in building_programs.md does\n not exist.\n   Liquid Exception: Could not locate the included file 'note.html' in any\n of [\"/cygdrive/d/fortran/fortran-lang/fortran-lang.org/learn/_includes\"].\n Ensure it exists in one of those directories and, if it is a symlink, does\n not point outside your site source. in index.md\n jekyll 3.8.6 | Error:  Could not locate the included file 'note.html' in\n any of [\"/cygdrive/d/fortran/fortran-lang/fortran-lang.org/learn/_includes\"].\n Ensure it exists in one of those directories and, if it is a symlink, does\n not point outside your site source.\n\n I did a fresh install of Ruby, gems and bundle - there were some\n complaints about old and deprecated packages, but nothing that seemed\n serious.\n\n The file \"note.html\"  it is complaining about does actually exist in the\n subdirectory _includes.\n\n For your information: I installed Ruby and its packages on Cygwin.\n\n Regards,\n\n Arjen\n\n\n Op vr 22 mei 2020 om 18:54 schreef Arjen Markus ***@***.***\n >:\n\n> Hi everyone,\n>\n> no problem with me - as long as it is a permissive licence :). The MIT\n> licence should do fine and consistency is not unimportance.\n>\n> Regards,\n>\n> Arjen\n>\n> Op vr 22 mei 2020 om 16:44 schreef Laurence Kedward <\n> ***@***.***>:\n>\n>> I am not an expert on the CC licenses, I know some of them are not open\n>> source so we have to be very careful to pick the right one.\n>>\n>> Ah okay, good point - I'm no expert either.\n>>\n>> What does Rust use for their documentation?\n>>\n>> It appears to be under the same license as Rust itself which is\n>> MIT/Apache2\n>> <https://github.com/rust-lang/book/blob/master/CONTRIBUTING.md#licensing>\n>> .\n>>\n>> P.S. I view documentation as code: it's written in Markdown, which\n>> literally is a source code that gets parsed and compiled to the final form,\n>> whether html or pdf. Also one can then copy and paste example code from the\n>> documentation into user projects without problem. So I've always used MIT\n>> for documentation. But I am not opposed to other options.\n>>\n>> This makes sense to me; I'm happy to keep with MIT for consistency then\n>> \ud83d\udc4d\n>>\n>> \u2014\n>> You are receiving this because you were mentioned.\n>> Reply to this email directly, view it on GitHub\n>> <#77 (comment)>,\n>> or unsubscribe\n>> <https://github.com/notifications/unsubscribe-auth/AAN6YR7LVOJEL47USCHNI4DRS2FWNANCNFSM4NBUJL7Q>\n>> .\n>>\n>"
                },
                {
                    "user": "certik",
                    "date": "2020-05-22 18:14:55+00:00",
                    "text": "@arjenmarkus did you figure it out?\nI struggle with Jekyll too. See also #89."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-22 18:17:34+00:00",
                    "text": "@arjenmarkus we can also build a live preview from a pull request. Here's what you need to do:\n\nFork this repository\nClone your fork (not this repo), that would be https://github.com/arjenmarkus/fortran-lang.org\nAdd your content locally, commit it, then push to your repo on GitHub.\nWhen you navigate back to this repo, there will be a button suggesting you to open a pull request\nIn pull request dialog, check the box that says \"allow edits from reviewers\" (or similar).\n\nand we can make sure it previews correctly from there."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-05-22 18:35:39+00:00",
                    "text": "Hi everyone,\n\nthe problem was (apparently) that I started jekyll in the subdirectory\n\"learn\" rather than the root. Now it works fine, that is. under \"Learn\" I\nonly see the contents of \"index.md\". I f I specify the paths\nlearn/best_practices and learn/build_programs I can see those pages. So,\naccessing those pages is not entirely correct yet.\n\nWell, with that solved and after a look at the page I will now proceed with\nthe pull request :).\n\nRegards,\n\nArjen\n\nOp vr 22 mei 2020 om 20:17 schreef Milan Curcic <notifications@github.com>:\n\u2026\n @arjenmarkus <https://github.com/arjenmarkus> we can also build a live\n preview from a pull request. Here's what you need to do:\n\n    1. Fork this repository\n    2. Clone your fork (not this repo), that would be\n    https://github.com/arjenmarkus/fortran-lang.org\n    3. Add your content locally, commit it, then push to your repo on\n    GitHub.\n    4. When you navigate back to this repo, there will be a button\n    suggesting you to open a pull request\n    5. In pull request dialog, check the box that says \"allow edits from\n    reviewers\" (or similar).\n\n and we can make sure it previews correctly from there.\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#77 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YR3XFBTIN6XBKRGXSPDRS26UXANCNFSM4NBUJL7Q>\n ."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-05-22 18:56:08+00:00",
                    "text": "Hi Milan, everyone,\n\nI have now cloned the repository and created a branch\n\"building_programs\". The pull request is there.\n\nThe repository is public, so I guess you can see it and submit your\ncomments etc. I hope I did all that correctly :).\n\nRegards,\n\nArjen\n\nOp vr 22 mei 2020 om 20:17 schreef Milan Curcic <notifications@github.com>:\n\u2026\n\n @arjenmarkus we can also build a live preview from a pull request. Here's what you need to do:\n\n Fork this repository\n Clone your fork (not this repo), that would be https://github.com/arjenmarkus/fortran-lang.org\n Add your content locally, commit it, then push to your repo on GitHub.\n When you navigate back to this repo, there will be a button suggesting you to open a pull request\n In pull request dialog, check the box that says \"allow edits from reviewers\" (or similar).\n\n and we can make sure it previews correctly from there.\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub, or unsubscribe."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-22 19:06:32+00:00",
                    "text": "Almost there. It looks like you created a pull request in your own repository (arjenmarkus/fortran-lang.org).\nInstead, create a pull request in this repository (fortran-lang/fortran-lang.org) by navigating to its home page and clicking on the \"New pull request\" button.\nI don't know if this matters, but I also see that your fortran-lang.org repository doesn't appear as a fork. Did you create it by clicking the \"Fork\" button on this repository?"
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-05-22 19:12:11+00:00",
                    "text": "Hi Milan,\n\nI thought I had created a fork. Hm, let me redo that. (It does not seem\npossible to create a pull request based on the one I just created).\nHopefully I will get it right this time.\n\nRegards,\n\nArjen\n\nOp vr 22 mei 2020 om 21:06 schreef Milan Curcic <notifications@github.com>:\n\u2026\n Almost there. It looks like you created a pull request in your own\n repository (arjenmarkus/fortran-lang.org).\n\n Instead, create a pull request in this repository\n <https://github.com/fortran-lang/fortran-lang.org> (fortran-lang/\n fortran-lang.org) by navigating to its home page and clicking on the \"New\n pull request\" button.\n\n I don't know if this matters, but I also see that your fortran-lang.org\n repository doesn't appear as a fork. Did you create it by clicking the\n \"Fork\" button on this repository?\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#77 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAN6YR662YRNGPREGQIAOGLRS3EMNANCNFSM4NBUJL7Q>\n ."
                },
                {
                    "user": "arjenmarkus",
                    "date": "2020-05-22 19:26:46+00:00",
                    "text": "No, I had created a repository in my personal space and imported the\nfortran-lang.org repository. What I should have done is go to the home page\nof fortran-lang.org and use the \"Fork\" option from there. Well, hopefully\nit is all right now :). I think this will be the last e-mail from me for\ntoday.\n\nRegards,\n\nArjen\n\nOp vr 22 mei 2020 om 21:11 schreef Arjen Markus <arjen.markus895@gmail.com>:\n\u2026\n Hi Milan,\n\n I thought I had created a fork. Hm, let me redo that. (It does not seem\n possible to create a pull request based on the one I just created).\n Hopefully I will get it right this time.\n\n Regards,\n\n Arjen\n\n Op vr 22 mei 2020 om 21:06 schreef Milan Curcic ***@***.***\n >:\n\n> Almost there. It looks like you created a pull request in your own\n> repository (arjenmarkus/fortran-lang.org).\n>\n> Instead, create a pull request in this repository\n> <https://github.com/fortran-lang/fortran-lang.org> (fortran-lang/\n> fortran-lang.org) by navigating to its home page and clicking on the\n> \"New pull request\" button.\n>\n> I don't know if this matters, but I also see that your fortran-lang.org\n> repository doesn't appear as a fork. Did you create it by clicking the\n> \"Fork\" button on this repository?\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <#77 (comment)>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAN6YR662YRNGPREGQIAOGLRS3EMNANCNFSM4NBUJL7Q>\n> .\n>"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-22 19:41:31+00:00",
                    "text": "@arjenmarkus Yes, that worked! Thank you! I will review it in detail over the weekend."
                },
                {
                    "user": "LKedward",
                    "date": "2020-06-18 12:58:04+00:00",
                    "text": "Closing, completed by #99."
                }
            ]
        },
        {
            "number": 76,
            "user": "certik",
            "date": "2020-05-14 22:36:54+00:00",
            "title": "Add the MESA code",
            "text": "I first heard about it here:\nhttps://news.ycombinator.com/item?id=23160114",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2020-05-15 07:36:39+00:00",
                    "text": "This code looks impressive: last release in March 2020, it uses modern Fortran with OpenMP and it has an informative website! This should definitely be listed!\nyaml entry looks good to me \ud83d\udc4d"
                },
                {
                    "user": "certik",
                    "date": "2020-05-15 18:25:20+00:00",
                    "text": "@LKedward yes, exactly. There might be a few more codes like this out there.\nAs discussed before, I think this code is not something that is probably super easy to use in other projects. However, I want it in to proudly show that Fortran is still used in actively maintained codes as the main language and for the community to see this and to perhaps learn some stuff how they do, and they can learn some stuff from other such projects."
                }
            ]
        },
        {
            "number": 75,
            "user": "certik",
            "date": "2020-05-14 20:24:44+00:00",
            "title": "Change the name to HPE / Cray",
            "text": "",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-05-14 20:30:10+00:00",
                    "text": "I think @longb mentioned on the call that they still use Cray for software products. Should we rather call this \"Cray (HPE)\". That way it's clear that it's what people know as Cray, while still acknowledging the parent company. Bill, how would you word this?"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-14 20:39:43+00:00",
                    "text": "Otherwise, it's fine with me. My earlier comment is a super minor nit pick. We can always improve it later."
                },
                {
                    "user": "certik",
                    "date": "2020-05-14 20:41:23+00:00",
                    "text": "I am going to merge it, and if Bill suggests a different wording, we'll change it.\nI plan to contact each company anyway to approve the wording for their compiler, I just didn't have time yet."
                },
                {
                    "user": "longb",
                    "date": "2020-05-14 20:43:20+00:00",
                    "text": "On May 14, 2020, at 3:30 PM, Milan Curcic ***@***.***> wrote:\n\n\n I think @longb mentioned on the call that they still use Cray for software products.\nCorrect. As the page correctly indicates, the old HP compiler is not longer being maintained.  The Cray compilers are being ported to the more modern HPE hardware, such as Apollo.\n Should we rather call this \"Cray (HPE)\". That way it's clear that it's what people know as Cray, while still acknowledging the parent company. Bill, how would you word this?\nI\u2019ll ask the manager in the know.  At least for Fortran, everyone still thinks of it as the \u201cCray compiler\u201d.    However, \u201cCray\u201d by itself (as a company) probably needs qualification.\n\nCheers,\nBill\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub, or unsubscribe.\n\nBill Long                                                                       longb@cray.com\nPrincipal Engineer, Fortran Technical Support &   voice:  651-605-9024\nBioinformatics Software Development                      fax:  651-605-9143\nCray, a Hewlett Packard Enterprise company/ 2131 Lindau Lane/  Suite 1000/  Bloomington, MN  55425"
                }
            ]
        },
        {
            "number": 74,
            "user": "p-costa",
            "date": "2020-05-13 20:55:13+00:00",
            "title": "nitpicking :)",
            "text": "",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-05-13 21:17:11+00:00",
                    "text": "Thanks for noticing and fixing it @p-costa."
                }
            ]
        },
        {
            "number": 73,
            "user": "LKedward",
            "date": "2020-05-13 11:15:33+00:00",
            "title": "Fix LAPACK package entry",
            "text": "The github entry should be:\nReference-LAPACK/lapack\nand license is BSD 3-Clause.",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 72,
            "user": "certik",
            "date": "2020-05-12 23:03:34+00:00",
            "title": "Add a category \"contains Fortran\"",
            "text": "We should add a new category:\n\nCodes that contain some Fortran code, but Fortran is not the primary development language (either has never been, or is not anymore) as judged from the latest commits in the last few years. It does not matter in terms of lines if the Fortran code is a majority or minority.\n\nWhat this category will show is what projects depend on Fortran, even if only as \"clients\". All those projects will benefit from any improvement we will do for the Fortran ecosystem, even if indirectly.\nHere I found libraries that fit exactly into this category:\n\nhttps://github.com/scipy/scipy\nhttps://github.com/xianyi/OpenBLAS\n\nAnd I think many of these fit there also (they all have Fortran code inside, but I suspect Fortran is not the primary development language):\n\nhttps://github.com/keflavich/plfit\nhttps://github.com/kthyng/tracpy\nhttps://github.com/dfm/python-fsps\nhttps://github.com/sonofeft/RocketCEA\nhttps://github.com/pvthinker/Fluid2d\nhttps://github.com/stfc/PSyclone\nhttps://github.com/mancellin/capytaine\n\nI am sure there are many more such projects.",
            "is_open": true,
            "labels": [],
            "comments": []
        },
        {
            "number": 71,
            "user": "certik",
            "date": "2020-05-12 22:44:25+00:00",
            "title": "Remove OpenBLAS",
            "text": "The package does not satisfy our criteria, in particular:\nRelevance\n\nthe package must be primarily implemented in Fortran\nor provide a complete Fortran interface to an existing package\nor be purposed solely towards software development in Fortran.\n\nNone of these apply. They do not provide a Fortran interface to another\npackage, and OpenBLAS is not purposed solely towards software\ndevelopment in Fortran. Regarding the first bullet point, the package is\nprimarily developed in assembly, all new code is in assembly. Fortran is\nnot the primary implementation language, despite technically having more\nlines than their implementation language (assembly).\nThey have a lot of Fortran code (in fact the majority of lines) because\nthey have several copies of LAPACK. They keep applying fixes from\nreference LAPACK (which is already included in our index, so we should\nnot be including it twice). OpenBLAS is in the same category as SciPy.\nThey copied a mature Fortran project / code, but use a different\nlanguage to further develop the package (assembly and Python\nrespectively). In the SciPy's case, the Python code now has more lines\nthan Fortran, in OpenBLAS case the assembly code does not yet have more\nlines, but eventually it will.\nUniqueness\n\nthe package shall not be a fork or minor revision of existing packages\n\nAs far as Fortran is concerned, this package is just a fork of LAPACK.\nThere is no new Fortran code that isn't in LAPACK that other projects\ncould use.\n\nWe can think (see #72) if we should have categories for projects that happen to\nhave Fortran code included, even it is not further developed. OpenBLAS\nand SciPy would be two major libraries to include there. Until then, we\nshould remove OpenBLAS from our listing.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-05-12 23:10:11+00:00",
                    "text": "Indeed OpenBLAS doesn't expose Fortran bindings to its capability. I had assumed it did, but never checked. Fortran code is truly just a dependency here. If we made Fortran bindings to say, libcurl, which would then be a dependency, we wouldn't call the bindings a C project.\nI agree with removing it."
                },
                {
                    "user": "certik",
                    "date": "2020-05-12 23:13:03+00:00",
                    "text": "I think OpenBLAS is be exposing its functionality into Fortran using the Lapack interface. But it would be like we took libcurl, and rewrote some internal subroutines into Fortran, and only used Fortran to keep improving over libcurl --- that would not be a C project anymore."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-12 23:24:02+00:00",
                    "text": "I didn't get that impression from the documentation. They expose a C interface to Fortran code. They don't expose a Fortran interface to their C and Assembly code."
                },
                {
                    "user": "certik",
                    "date": "2020-05-12 23:32:37+00:00",
                    "text": "Yes, I think we are both saying the same thing.\n\nFurthermore even if they exposed Fortran code to their assembly, it wouldn't make it a Fortran project.\n\u2026\nOn Tue, May 12, 2020, at 5:24 PM, Milan Curcic wrote:\n\n\n I didn't get that impression from the documentation\n <https://github.com/xianyi/OpenBLAS/wiki/User-Manual>. They expose a C\n interface to Fortran code. They don't expose a Fortran interface to\n their C and Assembly code.\n\n \u2014\n You are receiving this because you authored the thread.\n Reply to this email directly, view it on GitHub\n <#71 (comment)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAAFAWB6RT7THWFLUL7DACDRRHLB5ANCNFSM4M7HMK5A>."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-12 23:37:10+00:00",
                    "text": "Furthermore even if they exposed Fortran code to their assembly, it wouldn't make it a Fortran project.\n\nIt wouldn't be strictly a \"Fortran project\", but it would qualify to list it in the registry because:\n\nor provide a complete Fortran interface to an existing package\n\nIf OpenBLAS had Fortran bindings to its unique value (that is not reference BLAS and LAPACK), it would be very important to include it."
                },
                {
                    "user": "certik",
                    "date": "2020-05-13 00:47:18+00:00",
                    "text": "I see, so it would be in the interfaces section.\n\nI need to check, maybe they provide an interface.\n\nThe interfaces is a special section.\n\nFor me the main value of our Packages section is to show and promote codes that are actively developed in Fortran, to show the Fortran community that there are open source codes out there and to connect us together. And to show some success stories to motivate us.\n\nThe interfaces section is a secondary goal for me, those are useful to have and use obviously. But I don't view these as Fortran codes, although they would obviously be packaged by fpm later on.\nSort of like the issue #72 which I think is also very useful to have. But these are not Fortran packages in my understanding of the word.\n\u2026\nOn Tue, May 12, 2020, at 5:37 PM, Milan Curcic wrote:\n\n\n > Furthermore even if they exposed Fortran code to their assembly, it wouldn't make it a Fortran project.\n\n It wouldn't be strictly a \"Fortran project\", but it would qualify to\n list it in the registry because:\n\n > or provide a complete Fortran interface to an existing package\n\n If OpenBLAS had Fortran bindings to its unique value (over reference\n BLAS and LAPACK), it would be very important to include it.\n\n \u2014\n You are receiving this because you authored the thread.\n Reply to this email directly, view it on GitHub\n <#71 (comment)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAAFAWE3UJDY6AE6A2FGAF3RRHMTFANCNFSM4M7HMK5A>."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-13 11:10:41+00:00",
                    "text": "I agree that according to our criteria, unless OpenBLAS contains explicit Fortran interfaces, it should not be listed.\n\nFor me the main value of our Packages section is to show and promote codes that are actively developed in Fortran, to show the Fortran community that there are open source codes out there and to connect us together. And to show some success stories to motivate us. The interfaces section is a secondary goal for me, those are useful to have and use obviously. But I don't view these as Fortran codes, although they would obviously be packaged by fpm later on. Sort of like the issue #72 which I think is also very useful to have.\n\nI have a different view of the Packages section: it is already well-accepted that many large applications (mainly scientific) are actively developed in Fortran. What is less accepted is that Fortran is a suitable language and has a sufficient ecosystem for developing new codes.\nThe Packages section shows off the large offering of Fortran libraries that are available to support code development - this is because someone looking to develop in Fortran will interested in what libraries already exist to make their life easier. As part of this, the interfaces category is absolutely essential.\nTo summarise my view:\n\n\nThe existence of large scientific codes already written in Fortran is unlikely to heavily influence someone to choose Fortran for their new project (unless they want to link against them);\n\n\nRather, the ecosystem (libraries, tools and community) are much more of an influencing factor;\n\n\nIn the absence of an online package registry, the packages section serves this purpose.\n\n\n\nBut these are not Fortran packages in my understanding of the word.\n\nIf they contain c-binding interfaces written in Fortran, then I consider them Fortran regardless of whether they implement functionality or not. (Creating a c-binding module can be a lot work)"
                },
                {
                    "user": "certik",
                    "date": "2020-05-13 13:36:59+00:00",
                    "text": "OpenBLAS can be used from Fortran easily just like any other LAPACK implementation. I've done it.\n\nIt doesn't contain modern Fortran interfaces for linear algebra like we are creating in stdlib, but it nevertheless works from Fortran.\n\nSo I would say it qualifies for the interfaces section. It's a package that you can use from Fortran.\n\nGood points. It looks like the purpose of the Package section is twofold. In the broader sense to show what packages are readily available to use in Fortran. And in the narrower sense to show that Fortran is used to develop new open source code. Everything except interfaces qualifies for the second point.\n\u2026\nOn Wed, May 13, 2020, at 5:10 AM, Laurence Kedward wrote:\n\n\n I agree that according to our criteria, unless OpenBLAS contains\n explicit Fortran interfaces, it should not be listed.\n\n > For me the main value of our Packages section is to show and promote codes that are actively developed in Fortran, to show the Fortran community that there are open source codes out there and to connect us together. And to show some success stories to motivate us. The interfaces section is a secondary goal for me, those are useful to have and use obviously. But I don't view these as Fortran codes, although they would obviously be packaged by fpm later on. Sort of like the issue #72 <#72> which I think is also very useful to have.\n\n *I have a different view of the Packages section:* it is already\n well-accepted that many large applications (mainly scientific) are\n actively developed in Fortran. What is less accepted is that Fortran is\n a suitable language and has a sufficient ecosystem for *developing new\n codes*.\n  The Packages section shows off the large offering of Fortran libraries\n that are available to support code development - this is because\n someone looking to develop in Fortran will interested in what libraries\n already exist to make their life easier. As part of this, the\n interfaces category is absolutely essential.\n\n To summarise my view:\n\n  * The existence of large scientific codes already written in Fortran\n is unlikely to heavily influence someone to choose Fortran for their\n new project (unless they want to link against them);\n\n  * Rather, the ecosystem (libraries, tools and community) are much more\n of an influencing factor;\n\n  * In the absence of an online package registry, the packages section\n serves this purpose.\n\n > But these are not Fortran packages in my understanding of the word.\n\n If they contain c-binding interfaces written in Fortran, then I\n consider them Fortran regardless of whether they implement\n functionality or not. (Creating a c-binding module can be a lot work)\n\n \u2014\n You are receiving this because you authored the thread.\n Reply to this email directly, view it on GitHub\n <#71 (comment)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAAFAWCHGOVZAYOWKCSFQJTRRJ54BANCNFSM4M7HMK5A>."
                },
                {
                    "user": "certik",
                    "date": "2020-05-13 14:32:38+00:00",
                    "text": "So I think I vote to move OpenBLAS to interfaces.\nThis is unlike SciPy, as SciPy cannot directly be used in Fortran, while OpenBLAS can."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-13 15:12:56+00:00",
                    "text": "Okay, if that's the case, I'm okay with keeping it in \"Interfaces\". I am still concerned that I couldn't find OpenBLAS documentation on Fortran bindings, and I had assumed that if you're just calling Fortran LAPACK included OpenBLAS, you're not gaining anything over reference LAPACK. But I trust @certik and if he says that OpenBLAS has a meaningful and useful Fortran binding, I'm okay with it.\nI want to also caution about the \"Interfaces\" category. If you looked at our existing categories, you'll see that \"Interfaces\" is the only category that says \"how something works\" rather than \"what it does\".\nSimilar to @LKedward, for me by far the main purpose of this page is for new developers to be able to find the tool they need for their Fortran work. Not so much for us to prove there are pure Fortran packages out there, or to be proud of it. That too is important, but is secondary to me.\nIn that sense, when a newcomer to Fortran arrives to the packages page, the \"Interfaces\" category is the only one that doesn't really tell them what's in there, only that the packages in there are bindings to other languages. However, I don't think this category is necessarily harmful, and is okay to keep it."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-13 15:23:59+00:00",
                    "text": "So I think I vote to move OpenBLAS to interfaces.\n\nOkay I see your point here, we should keep it.\n\nI am still concerned that I couldn't find OpenBLAS documentation on Fortran bindings, and I had assumed that if you're just calling Fortran LAPACK included OpenBLAS, you're not gaining anything over reference LAPACK.\n\nMy understanding is that all the LAPACK interfaces are purely explicit (explicit shape etc.) so they don't need explicit Fortran interfaces to be visible to the calling code.\n(Presumably because LAPACK predates the iso c binding)\nAs to OpenBLAS usefulness, I only ever use OpenBLAS because it is significantly faster than the reference LAPACK."
                },
                {
                    "user": "certik",
                    "date": "2020-05-13 16:24:51+00:00",
                    "text": "As @LKedward said, OpenBLAS does not provide new functionality (as far as I know), but the main purpose of it is that it provides a drop in replacement for LAPACK that is much faster, as in, one of the fastest out there. It's a great library.\nYes, LAPACK predates iso_c_binding, and OpenBLAS just follows what LAPACK does. The tradition there is to just provide the symbols and hope that they work (but they do in practice, even if I don't recommend to do that for new projects).\nSo let's put it into into interfaces.\nI think we are in agreement --- for you and @LKedward the main purpose is to list packages that are useful for Fortran developers to use. For me that is part of it. But equally important for me is to leverage our community and connect us to each other and to show what is out there, and showing how Fortran can be used --- because I think we absolutely have to prove that Fortran can be used for new projects and for new developments. That Fortran is not just for wrapping other languages and for legacy codes."
                },
                {
                    "user": "certik",
                    "date": "2020-05-14 21:21:03+00:00",
                    "text": "I am going back and forth on this. Maybe OpenBLAS can stay where it currently is, right next to LAPACK:\nhttps://fortran-lang.org/packages/numerical\nThey both provide the same functionality, both can readily be used from Fortran, and OpenBLAS provides a much faster implementation.\nI viewed the Package list as packages written in Fortran, but since both of you @milancurcic and @LKedward see it as packages that can be directly used from Fortran, then we don't care what the primary implementation language is.\nI would say that OpenBLAS satisfies this bullet point:\n\nor provide a complete Fortran interface to an existing package\n\nSince it provides the complete Fortran interface to their very fast (assembly+Fortran) implementation of LAPACK. As discussed, the interface is not iso_c_binding interface, but it's the old fashioned LAPACK interface. However it works.\nSo I am going to close this PR, I think OpenBLAS can stay where it is. And our understanding of the Packages section then must be: any package that can be used from Fortran right away."
                }
            ]
        },
        {
            "number": 70,
            "user": "certik",
            "date": "2020-05-12 22:24:18+00:00",
            "title": "Change categories for fgsl and SciFortran",
            "text": "They are both SciPy like libraries, and so should belong into\n\"numerical\". The Scientific Codes category I think should be reserved\nfor more of end user applications or physics solvers, not purely\nnumerical libraries.",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 69,
            "user": "certik",
            "date": "2020-05-12 20:09:59+00:00",
            "title": "Arpack: fix version and license",
            "text": "",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-05-12 20:28:48+00:00",
                    "text": "Weird, the website now says version not found, but there are releases for Arpack."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-12 20:38:55+00:00",
                    "text": "Weird, the website now says version not found, but there are releases for Arpack.\n\nNot sure why this is happening - I'll look into it."
                }
            ]
        },
        {
            "number": 68,
            "user": "certik",
            "date": "2020-05-12 19:51:28+00:00",
            "title": "Add packages from List-of-popular-open-source-Fortran-projects",
            "text": "Go over:\nhttps://github.com/fortran-lang/stdlib/wiki/List-of-popular-open-source-Fortran-projects\nand add the rest of the packages.",
            "is_open": false,
            "labels": [
                "good first issue"
            ],
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2020-05-12 20:19:44+00:00",
                    "text": "OpenBLAS\n fortran-machine\n LAPACK\n ElmerFEM\n WRF\n fds\n functional-fortran\n Quantum ESPRESSO\n fluidity\n fortranlib\n json-fortran\n Nek5000\n cp2k\n fortran2018-examples\n NASTRAN-95\n specfem3d (https://github.com/geodynamics/specfem3d)\n NWChem (#148)\n gtk-fortran\n CFL3D (https://github.com/nasa/CFL3D)\n fortran-utils\n SHTOOLS\n OpenCoarrays\n arpack-ng\n DFTB+ (#143)\n NASTRAN-93 (https://github.com/nasa/NASTRAN-93)\n MPAS (https://github.com/MPAS-Dev/MPAS-Model)\n neural-fortran\n NetCDF-Fortran\n CTSM (https://github.com/ESCOMP/CTSM)\n Castro\n ABINIT\n FLAP\n bspline-fortran\n FOODIE\n forpy\n OFF\nWAVEWATCH III (https://github.com/NOAA-EMC/WW3) no open source license\n MOM6 (https://github.com/NOAA-GFDL/MOM6)\n VTKFortran\n datetime-fortran\n node-fortran (https://github.com/IonicaBizau/node-fortran)\n Fortran-Astrodynamics-Toolkit (https://github.com/jacobwilliams/Fortran-Astrodynamics-Toolkit)\n pyplot-fortran\nStarlink (https://github.com/jacobwilliams/pyplot-fortran) license unknown\nWPS (https://github.com/wrf-model/WPS) license unknown\n ogpf\n pFUnit\n tcp-client-server\n ftl\n fgsl\nOpenCMISS (https://github.com/OpenCMISS/cm) license unknown\n StringiFor\nwrf_hydro_nwm_public (https://github.com/NCAR/wrf_hydro_nwm_public) license unclear\n SciFortran\n bandup (https://github.com/band-unfolding/bandup)\n LaGriT\n stdlib\n clfortran\n fox\n HANDE-QMC (#153)\n FEconv\n lesgo (https://github.com/lesgo-jhu/lesgo)\n FortranPatterns\nFV3-GFS (https://github.com/NOAA-EMC/fv3gfs) no open source license\n coretran\n tsunami (https://github.com/modern-fortran/tsunami)\n fdict\nCFD (https://github.com/liruipengyu/CFD) no open source license\n ICAR (https://github.com/NCAR/icar)\nMODFLOW6 (https://github.com/MODFLOW-USGS/modflow6) no open source license\nPIC Skeleton Codes (https://github.com/UCLA-Plasma-Simulation-Group/PIC-skeleton-codes) no open source license\nIAMR (https://github.com/AMReX-Codes/IAMR) license unclear\n ADflow\n PoisFFT (#153)\nsigma (https://github.com/danshapero/sigma) no open source license\n aenet (https://github.com/atomisticnet/aenet)\n DBCSR\n GALAHAD\n node.fortran (https://github.com/IonicaBizau/node.fortran)\n h5fortran\n kdtree2\n numerical-methods-fortran\n TRACMASS (https://github.com/TRACMASS/tracmass)\n CompDam (https://github.com/nasa/CompDam_DGD)\n Flexi (https://github.com/flexi-framework/flexi)\nGFR (https://github.com/nasa/GFR) no open source license\n OpenSWPC (https://github.com/tktmyd/OpenSWPC)\nROMS (https://github.com/kshedstrom/roms) no open source license\n slsqp\n Truchas\n fortran-csv-module\n FMS (https://github.com/NOAA-GFDL/FMS)\n SNAP (https://github.com/lanl/SNAP)\n freeCappuccino"
                },
                {
                    "user": "awvwgk",
                    "date": "2020-10-05 20:43:23+00:00",
                    "text": "Looks like there are 35 packages left. I had a quick look, but non is really in my field of expertise, so putting together useful tags would be difficult.\nI think this could be a good opportunity for contributions, I will tag it with help-wanted good-first-issue to make it more visible."
                },
                {
                    "user": "certik",
                    "date": "2020-10-05 21:09:43+00:00",
                    "text": "Thank you @awvwgk for your help with this. For volunteers who submit PRs for the remaining packages, don't be afraid to guess the relevant tags. We will do our best in the PR review. And if the upstream authors of the packages become interested in the future, they can always submit a PR to improve their entry."
                },
                {
                    "user": "awvwgk",
                    "date": "2020-12-19 19:06:57+00:00",
                    "text": "I went through all the packages and opened #186 to add them to the package index. I removed projects by strikeout from the above list where I was unable to identify if the project is free open source software, this assessment might be incorrect for some projects (marked with unclear license), so feel free to double check those projects."
                }
            ]
        },
        {
            "number": 67,
            "user": "certik",
            "date": "2020-05-12 19:47:54+00:00",
            "title": "Packages: add Quantum ESPRESSO",
            "text": "",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 66,
            "user": "certik",
            "date": "2020-05-12 19:46:37+00:00",
            "title": "Packages: add Castro",
            "text": "",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-05-12 19:57:56+00:00",
                    "text": "@LKedward what does version: none do? I added the actual version instead."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-12 20:01:05+00:00",
                    "text": "@LKedward what does version: none do? I added the actual version instead.\n\nIt hides the version badge - otherwise it shows an error if it can't find a github version.\nI've just realised this repo does have github realises so you don't need the version field, my mistake.\nIt will look like this:\n\n(https://img.shields.io/github/v/release/AMReX-Astro/Castro?color=green)"
                },
                {
                    "user": "certik",
                    "date": "2020-05-12 20:05:56+00:00",
                    "text": "@LKedward I see, thanks for the info and the reviews."
                }
            ]
        },
        {
            "number": 65,
            "user": "certik",
            "date": "2020-05-12 19:37:59+00:00",
            "title": "Packages: add ABINIT",
            "text": "",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 64,
            "user": "certik",
            "date": "2020-05-12 19:31:19+00:00",
            "title": "Add a CI",
            "text": "When a new PR is submitted a CI should run to check that the website can be built. This is especially critical for new package submissions to ensure the yaml is properly formatted.",
            "is_open": true,
            "labels": [],
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2020-06-18 12:59:07+00:00",
                    "text": "Another task for the CI is to check for broken links (both internal and external)."
                }
            ]
        },
        {
            "number": 63,
            "user": "certik",
            "date": "2020-05-12 19:24:14+00:00",
            "title": "Packages: add dftatom",
            "text": "",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-05-12 19:50:41+00:00",
                    "text": "When I click on Merge, nothing happens. That's ridiculous. I'll try again later."
                }
            ]
        },
        {
            "number": 62,
            "user": "certik",
            "date": "2020-05-12 19:16:25+00:00",
            "title": "Packages: add Truchas",
            "text": "",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-05-12 19:22:41+00:00",
                    "text": "@nncarlson can you please review this?"
                },
                {
                    "user": "nncarlson",
                    "date": "2020-05-12 22:00:20+00:00",
                    "text": "Good to me, though I'm not sure about the \"version 3.0\" bit.  That's the the last official tarball we rolled, but it's very old and no one should use it.  Everyone works off the master branch version.  I've done a bad job of managing versioning (help @certik :-)."
                },
                {
                    "user": "certik",
                    "date": "2020-05-12 22:14:05+00:00",
                    "text": "Ok, I removed the version. I am going to merge it now. Thanks @nncarlson for reviewing. Yes, we need to fix the Truchas's release process."
                }
            ]
        },
        {
            "number": 61,
            "user": "milancurcic",
            "date": "2020-05-12 18:21:15+00:00",
            "title": "add f03gl and PLplot",
            "text": "Submitting 2 graphics libraries to the registry. I couldn't find the PR template for this. Do we have any?",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2020-05-12 18:36:39+00:00",
                    "text": "Submitting 2 graphics libraries to the registry. I couldn't find the PR template for this. Do we have any?\n\nNo PR template yet"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-12 18:38:48+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-05-12 18:39:37+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/61/"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-12 18:40:30+00:00",
                    "text": "Preview doesn't seem to work."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-12 18:42:12+00:00",
                    "text": "Preview doesn't seem to work.\n\nWorking for me:"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-12 18:44:27+00:00",
                    "text": "It does for me as well now."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-12 18:46:54+00:00",
                    "text": "Regarding versions: f03gl indeed didn't have a version and we don't want to show a version none badge. However, PLplot does (5.15.0, I forgot to include it). Why wouldn't we show version for non-GH projects that have one?"
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-12 18:48:21+00:00",
                    "text": "Sorry I didn't mean for all non-github repos, just those without explicit versions"
                },
                {
                    "user": "certik",
                    "date": "2020-05-12 18:50:49+00:00",
                    "text": "Here is what we have to go over: https://github.com/fortran-lang/fortran-lang.org/blob/8f74576faef57a6da975195ffda8da85402b1ba9/PACKAGES.md"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-12 18:52:02+00:00",
                    "text": "@certik I did, feel free to check it as well."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-12 18:52:40+00:00",
                    "text": "Here is what we have to go over: https://github.com/fortran-lang/fortran-lang.org/blob/8f74576faef57a6da975195ffda8da85402b1ba9/PACKAGES.md\n\nI'm happy these packages meet all the criteria discussed \ud83d\udc4d"
                },
                {
                    "user": "certik",
                    "date": "2020-05-12 18:55:19+00:00",
                    "text": "Have you tried installing the packages and do they work? I haven't checked the \"Maturity\" section.\nI am hoping that fpm will help with libraries like these, to make them easy to install, part of the wide Fortran ecosystem and also have usage statistic at the registry webpage, and so on.\nI am fine adding them."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-12 19:02:08+00:00",
                    "text": "Have you tried installing the packages and do they work? I haven't checked the \"Maturity\" section.\n\nYes for f03gl, no for PLplot.\nHave you looked at PLplot? This may be among the most mature libraries in the registry (contributions go back to 1992): https://www.openhub.net/p/plplot/contributors/summary"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-12 19:02:38+00:00",
                    "text": "Thank you both, merging."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-12 19:02:57+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-05-12 19:03:24+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 60,
            "user": "LKedward",
            "date": "2020-05-07 17:04:04+00:00",
            "title": "Fix: preview build action checkout.",
            "text": "",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 59,
            "user": "LKedward",
            "date": "2020-05-07 16:58:43+00:00",
            "title": "Fix: preview build action.",
            "text": "",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 58,
            "user": "LKedward",
            "date": "2020-05-07 16:55:14+00:00",
            "title": "Fix: preview action PR checkout.",
            "text": "Checkout the PR ref manually.",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 57,
            "user": "LKedward",
            "date": "2020-05-07 16:02:28+00:00",
            "title": "Fix: pr preview action.",
            "text": "Checkout pull request head and fix comment action.",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 56,
            "user": "LKedward",
            "date": "2020-05-07 15:48:48+00:00",
            "title": "Change PR preview trigger to comment.",
            "text": "PR preview builds are triggered by a pull request\ncomment containing '#build_preview'.",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 55,
            "user": "LKedward",
            "date": "2020-05-07 14:54:35+00:00",
            "title": "Fix: minor typo on compilers page.",
            "text": "This small PR will test PR preview functionality.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2020-05-07 15:51:03+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-07 16:04:03+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-05-07 16:05:17+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/55/"
                },
                {
                    "user": "certik",
                    "date": "2020-05-07 16:37:01+00:00",
                    "text": "@LKedward thanks for setting it up! Note that it does not seem to work, the PR link shows the website with the word \"Discountinued\", which you fixed in this PR."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-07 16:39:38+00:00",
                    "text": "Hmm, seems to me like it works--both link here and link on the preview website."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-07 16:41:18+00:00",
                    "text": "@LKedward thanks for setting it up! Note that it does not seem to work, the PR link shows the website with the word \"Discountinued\", which you fixed in this PR.\n\nYep you are right - the action is not checking out the right commit, currently looking for a solution."
                },
                {
                    "user": "certik",
                    "date": "2020-05-07 16:42:39+00:00",
                    "text": "@milancurcic it does not work for me, see the screenshot:"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-07 16:43:13+00:00",
                    "text": "Got it, nevermind, I totally misunderstood."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-07 16:56:49+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-07 17:00:11+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-07 17:05:56+00:00",
                    "text": "this is the one...\n#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-05-07 17:06:56+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/55/"
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-07 17:14:52+00:00",
                    "text": "Okay, I think this is finally working!\n@milancurcic and @certik apologies for the large number of notifications you have probably received in the last hour!\nLast thing to test is that both of you can also trigger a build by commenting '#build_preview'."
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-05-07 17:15:59+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/55/"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-07 17:22:02+00:00",
                    "text": "#build_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-05-07 17:23:10+00:00",
                    "text": "This PR has been built with Jekyll and can be previewed at: https://fortran-lang.org/pr/55/"
                },
                {
                    "user": "certik",
                    "date": "2020-05-07 17:27:44+00:00",
                    "text": "I think it's working! Thanks for fixing it @LKedward."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-10 16:40:33+00:00",
                    "text": "#delete_preview"
                },
                {
                    "user": "github-actions[bot]",
                    "date": "2020-05-10 16:40:55+00:00",
                    "text": "The preview build for this PR has now been deleted."
                }
            ]
        },
        {
            "number": 54,
            "user": "LKedward",
            "date": "2020-05-07 12:09:48+00:00",
            "title": "Reapply \"Github actions build & PR preview\" PR",
            "text": "This PR is identical to #46 which was reverted.\n@milancurcic when the repo has been renamed and is serving from 'gh-pages', then this PR can be re-merged.\nResolves #41.\n#no_preview",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2020-05-07 14:40:26+00:00",
                    "text": "@milancurcic it looks like it's serving from the previously-built gh-pages branch now which is good.\nIf we merge this, the action should rebuild the site with your latest changes."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-07 14:41:32+00:00",
                    "text": "Yes, but I think we need to rebase+merge, no? Edit: Actually, I may be wrong."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-07 14:44:56+00:00",
                    "text": "Website looks good and up to date. Great work @LKedward !"
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-07 14:46:48+00:00",
                    "text": "Yep github action completed succesfully \ud83d\udc4d\nCheers @milancurcic !"
                }
            ]
        },
        {
            "number": 53,
            "user": "milancurcic",
            "date": "2020-05-06 00:22:33+00:00",
            "title": "52 add discourse badge",
            "text": "This PR:\n\nAdds Discourse badge and link to the landing page and the sidebar in News and Compilers pages;\nRemoves Stack Exchange reference on the landing page (rationale: I think it's now redundant if we want to have these questions on the Discourse)\nMinor clean up of the mailing list description\n\nFixes #52",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-05-06 03:27:47+00:00",
                    "text": "+1 to merge, looks good!\n\u2026\nOn Tue, May 5, 2020, at 6:22 PM, Milan Curcic wrote:\n This PR:\n\n  * Adds Discourse badge and link to the landing page and the sidebar in\n News and Compilers pages;\n  * Removes Stack Exchange reference on the landing page (rationale: I\n think it's now redundant if we want to have these questions on the\n Discourse)\n  * Minor clean up of the mailing list description\n Fixes #52\n <#52>\n\n You can view, comment on, or merge this pull request online at:\n\n #53\n\n Commit Summary\n\n  * add discourse badge to landing page and sidebar\n  * remove Stack Exchange pointer from landing page\n  * trim the mailing list description a bit\n File Changes\n\n  * *A* _includes/discourse.html\n <https://github.com/fortran-lang/fortran-lang.github.io/pull/53/files#diff-7e8162ce65434463728971b6d879dc8b> (5)\n  * *M* _includes/mailing_list.html\n <https://github.com/fortran-lang/fortran-lang.github.io/pull/53/files#diff-2bbfd89da94f9b32b63605742d481452> (4)\n  * *M* _includes/news_sidebar.html\n <https://github.com/fortran-lang/fortran-lang.github.io/pull/53/files#diff-29c04d30d4ad9d8bf45e8fafd5608ab2> (2)\n  * *A* assets/img/discourse.png\n <https://github.com/fortran-lang/fortran-lang.github.io/pull/53/files#diff-4c3ad1e15c7e2781bffa97b865406994> (0)\n  * *M* index.html\n <https://github.com/fortran-lang/fortran-lang.github.io/pull/53/files#diff-eacf331f0ffc35d4b482f1d15a887d3b> (6)\n Patch Links:\n\n  * https://github.com/fortran-lang/fortran-lang.github.io/pull/53.patch\n  * https://github.com/fortran-lang/fortran-lang.github.io/pull/53.diff\n \u2014\n You are receiving this because your review was requested.\n Reply to this email directly, view it on GitHub\n <#53>, or\n unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAAFAWE4QX3TQGY3FJPZBQTRQCUVLANCNFSM4M2AOI3A>."
                }
            ]
        },
        {
            "number": 52,
            "user": "milancurcic",
            "date": "2020-05-05 20:46:30+00:00",
            "title": "Add Discourse badge to the landing page",
            "text": "We now have a Discourse instance. Please join and try it out.\nThe website should have a hyperlinked Discourse badge that would allow people who visit the site to discover Discourse. We have an obvious place for this, where we list the mailing list, Twitter, and so on.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-05-05 20:52:27+00:00",
                    "text": "Thanks for setting it up. For inspiration, here is how Rust and Julia do discourse:\nhttps://users.rust-lang.org/\nhttps://discourse.julialang.org/"
                }
            ]
        },
        {
            "number": 51,
            "user": "milancurcic",
            "date": "2020-05-03 18:13:42+00:00",
            "title": "Revert \"Github actions build & PR preview\"",
            "text": "Reverts #46",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 50,
            "user": "certik",
            "date": "2020-05-03 14:14:59+00:00",
            "title": "Contact each compiler vendor to update their text",
            "text": "Here is the list of all Fortran compilers:\nhttps://fortran-lang.org/compilers/\nFor now I just copied the text from their official websites. We should now contact each vendor and see if they would prefer to change the text that appears at the webpage for their compiler. Perhaps they would like to stress that they have free versions for open source, or such.\nWe should limit the text to 100 words, to be fair to everyone. Currently all the texts at the webpage fit into 100 words and that seems like the right size to give enough background for each compiler but not be too long.",
            "is_open": true,
            "labels": [],
            "comments": [
                {
                    "user": "phil-blain",
                    "date": "2020-12-31 22:48:59+00:00",
                    "text": "My 2 cents: if the text comes from the vendor, it should be styled as a citation on the website, so as not to look like the website authors \"sell\" one compiler better than the other :)"
                }
            ]
        },
        {
            "number": 49,
            "user": "certik",
            "date": "2020-05-03 00:15:34+00:00",
            "title": "Make the scope of the mailinglist broader",
            "text": "If you have even better way to word this, go ahead and provide suggestions.\nI want the mailing list to be a place where people can have a general discussion, announcements and other things. Not just to passively receive the latest news (Twitter is much better for that, and we already have a Twitter account).",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 48,
            "user": "milancurcic",
            "date": "2020-05-02 19:39:35+00:00",
            "title": "47 mailing list",
            "text": "Adds the mailing list to the landing page and news sidebar.\nIt also makes a few minor imporovements such as add RSS feed to the news sidebar, and adds a heading to the Twitter component for consistency.\nFixes #47",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-05-02 19:49:21+00:00",
                    "text": "Thanks! With Laurence's approval, I'll go ahead and merge. @certik if there are any issues we'll follow-up in another PR."
                },
                {
                    "user": "certik",
                    "date": "2020-05-03 00:20:08+00:00",
                    "text": "See #49."
                }
            ]
        },
        {
            "number": 47,
            "user": "milancurcic",
            "date": "2020-05-02 18:12:38+00:00",
            "title": "Mailing list",
            "text": "Thank you @certik for starting the fortran-lang mailinglist.\nFor everybody else, please see Group Email Addresses on that page for details.\nSpecifically, we should have a subscription link on the website.\nI think a good place is on the landing page in the \"Join us\" section, such that we have, in this order:\n\nSubscribe to the mailing list\nFollow us on Twitter\nContribute on GitHub\nAsk about usage on Stack Exchange\n\nIn addition, it should also be in the sidebar on the news page\n@certik @LKedward Let me know what you think and I can follow up with a PR.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-05-02 19:14:31+00:00",
                    "text": "I think that looks good. Can you submit a PR? Let's get it done, then we can refine later."
                }
            ]
        },
        {
            "number": 46,
            "user": "LKedward",
            "date": "2020-05-02 15:56:48+00:00",
            "title": "Github actions build & PR preview",
            "text": "This PR aims to resolve #41.\nThe approach here is to use github actions to explicitly build the site on push as opposed to the automatic github Jekyll build used currently; this action builds the site using Jekyll on the master branch and pushes to the 'gh-pages' branch. (Repo settings will therefore need to be changed by admin here to point to 'gh-pages' branch).\nAdditional actions are added for pull requests which are built and pushed to the 'gh-pages' branch under the path 'pr/<pr_number>'; therefore pull requests can be previewed at fortran-lang.org/pr/46/ for example.\nTo enable the 'pr/<pr_number>' sub-path, the site source has been updated such that all internal site links and references are prepended with {{site.baseurl}}, see here for explanation.\nI'm not an expert on github actions so if anyone has more experience and feedback then let me know!\nThis has been tested on a private repo, but I'm not sure if any extra steps are required for this organisation repo.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-05-02 15:59:31+00:00",
                    "text": "Thanks for this! Yes, that's exactly what we need. How do I test it out?"
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-02 16:05:57+00:00",
                    "text": "... How do I test it out?\n\nI'm going to see if I can merge into the master of my fork and demonstrate a working build and PR."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-02 17:08:26+00:00",
                    "text": "Thank you @LKedward! Once you nail down the workflow, please document each step from a developer's point of view, either in a \"How to contribute\" section in README.md, or in CONTRIBUTING.md. I also don't know how this works."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-02 17:23:47+00:00",
                    "text": "Thank you @LKedward! Once you nail down the workflow, please document each step from a developer's point of view, either in a \"How to contribute\" section in README.md, or in CONTRIBUTING.md. I also don't know how this works.\n\nAh yes good point, I'll make sure to document this."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-03 09:41:43+00:00",
                    "text": "To test this out I have merged into my personal fork:\n\n\nThis is the site built using this github action:\nhttps://lkedward.github.io/fortran-lang.github.io/\n\n\nThis is a pull request preview built with this github action:\nhttps://lkedward.github.io/fortran-lang.github.io/pr/3/\n\nfor this pull request:  LKedward#3\n\n\n\nThe rendered site files (for both the normal site and for PRs) are pushed to the 'gh-pages' orphan branch https://github.com/LKedward/fortran-lang.github.io/tree/gh-pages.\nBefore this can be merged, a 'gh-pages' branch needs to be created in this main repository by an admin as an orphan branch"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-03 16:01:40+00:00",
                    "text": "Sounds good, I'll go ahead and create the orphan branch."
                },
                {
                    "user": "certik",
                    "date": "2020-05-03 16:14:24+00:00",
                    "text": "@milancurcic if you have time to set this up, please go ahead! I am quite busy today."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-03 17:55:26+00:00",
                    "text": "@LKedward done. Is this PR ready to merge?"
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-03 18:01:49+00:00",
                    "text": "@LKedward done. Is this PR ready to merge?\n\nCheers @milancurcic, yep I'm happy with it - ready to merge!"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-03 18:06:02+00:00",
                    "text": "Okay, just merged. Do we now need to have a dummy PR to trigger the build? Notice that the site is currently broken."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-03 18:09:18+00:00",
                    "text": "Okay, just merged. Do we now need to have a dummy PR to trigger the build? Notice that the site is currently broken.\n\nNo, it's been built and pushed okay.\nCan you check in the repo settings that the github pages are pointing to 'gh-pages' branch.\nLike this:"
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-03 18:12:34+00:00",
                    "text": "Oh no, I think we can't use the gh-pages branch on github.io repos!\nI didn't take this into account here. I think we need to revert since I can't think a solution atm."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-03 18:12:50+00:00",
                    "text": "I just realized it too:"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-03 18:16:23+00:00",
                    "text": "Okay I just reverted this PR.\nRegarding a possible solution, could we:\n\nRename this repository so that it's not a user page, for example fortran-lang-website or similar;\nSet it up to serve from gh-pages"
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-03 18:34:19+00:00",
                    "text": "Okay I just reverted this PR.\n\nThanks.\nOkay it looks like we have to do 1 but keep this repo:\nSo the current repo contents is moved to a separate repository and the github actions push the built html to this repository.\nIt's a bit of an upheaval unfortunately."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-03 18:48:33+00:00",
                    "text": "It's a bit of an upheaval unfortunately.\n\nBy this I just mean that all contributors will have to checkout a different repository.\nRegarding the github action workflows I've put together here: there is very little that needs changing, I only need to change the repository that it pushes to."
                },
                {
                    "user": "certik",
                    "date": "2020-05-03 21:08:38+00:00",
                    "text": "That was a mistake of using a repo and serving it directly. A better approach is to have a repository with the sources, and the CI then builds the page from master and pushes it somewhere else to be served.\nSecond, the name of this repository fortran-lang.github.io is misleading anyway because it is actually serves at fortran-lang.org. So how about we rename this repository to fortran-lang.org, to keep all the history, stars, issues, etc.\nThen we create a new repository that would actually serve fortran-lang.org. So that it is not confusing, perhaps it can be called fortran-lang.org.deploy or something like that.\nAnd then setup a CI at fortran-lang.org that checks each PR (it builds it and pushes somewhere to be looked at, not at fortran-lang.org), and then every master will get built and pushed into fortran-lang.org.deploy to be served at fortran-lang.org."
                },
                {
                    "user": "certik",
                    "date": "2020-05-03 21:12:44+00:00",
                    "text": "Now when I think about it, let's just keep https://github.com/fortran-lang/fortran-lang.github.io as is, if GitHub allows it, but it will become the source repository. The fortran-lang.org domain will be served from the new repository, say fortran-lang.org.deploy. The same setup from my previous comment, but we don't need to rename this repository, so people don't need to update their setup."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-03 21:24:12+00:00",
                    "text": "That was a mistake of using a repo and serving it directly. A better approach is to have a repository with the sources, and the CI then builds the page from master and pushes it somewhere else to be served.\n\nI disagree here, this approach, of using the 'gh-pages' branch is quite standard for so-called project sites, see here. Unfortunately I didn't realise github doesn't allow this approach for so-called organisation sites. (I can see no actual reason why it is disallowed here)\n\nSecond, the name of this repository fortran-lang.github.io is misleading anyway because it is actually serves at fortran-lang.org. So how about we rename this repository to fortran-lang.org, to keep all the history, stars, issues, etc.\nThen we create a new repository that would actually serve fortran-lang.org. So that it is not confusing, perhaps it can be called fortran-lang.org.deploy or something like that.\nAnd then setup a CI at fortran-lang.org that checks each PR (it builds it and pushes somewhere to be looked at, not at fortran-lang.org), and then every master will get built and pushed into fortran-lang.org.deploy to be served at fortran-lang.org.\n\nWe have to keep the rendered html at fortran-lang.github.io since this is a so-called organisation site which serves the site at https://<organization>.github.io. If we use any other repository it will not be an organisation site but simply a project site which is not served at the site root but under https://<organization>.github.io/<repository>.\nSee here for full explanation:\nhttps://help.github.com/en/github/working-with-github-pages/about-github-pages#types-of-github-pages-sites\nMy proposition is similarly based on a two repository approach, but the unbuilt source (current repo contents) is moved to a new repository and fortran-lang.github.io is used for deployment via CI for the reasons mentioned above.\nUnfortunately as I said, and as you point out, it is an upheaval meaning stars, issues etc are effectively lost."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-03 21:27:04+00:00",
                    "text": "That was a mistake of using a repo and serving it directly.\n\nNo, I did it on purpose as an org page so that repository pages like stdlib automatically inherit the top-level domain.\nI'm okay with either approach. For the site in production repository name, just fortran-lang.org is my preference."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-03 21:28:00+00:00",
                    "text": "To lay out my proposed solution more formally:\n\n\nRename existing fortran-lang.github.io repo to fortran-lang-source\n(We get to keep stars, issues, history, etc)\n\n\nCreate new fortran-lang.github.io repo\n\n\nUpdate pull request CI to deploy to master on new fortran-lang.github.io"
                },
                {
                    "user": "certik",
                    "date": "2020-05-03 21:30:36+00:00",
                    "text": "@LKedward that's fine, this will work.\nNote that I routinely deploy from a deploy repository, e.g. https://www.theoretical-physics.com/, is served by https://github.com/certik/tfc-deploy and pushed into it from the https://gitlab.com/certik/theoretical-physics/ source repository. But perhaps it's different if we are part of an organization? I don't know."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-03 21:36:38+00:00",
                    "text": "The only reason the original workflow didn't work here is because github allows the workflow for project sites but not for organisation/user sites. (I had the workflow working in my fork, but because it was a fork it was a project site not an organisation site.)"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-03 21:53:36+00:00",
                    "text": "We don't have to use an organization page. I chose that because of 2 benefits:\n\nYou don't need to maintain a production repo (the one being served), it's done automatically and under the hood by GitHub;\nProject pages inherit top-level domain.\n\nI don't think there are any other advantages. The obvious downside is that you can't do what we're now trying to do here, and we want to do it.\nIf the repo is called <orgname>.github.io and you chose to serve a page from it, then it's an org page (and ditto for <username>).\nHowever, this doesn't mean that fortran-lang.github.io (this repo) must be an org page. If you disable serving in the settings, it's not a page anymore.\nThere's a number of solutions here that preserve repo metadata (stars, issues, etc.).\nMy favorite actually is to:\n\nRename this repo so it's not an org page (preserves metadata);\nDeploy to gh-pages branch.\n\nBut deploying to master of another repo is okay too. It just seems like unnecessary added complexity of carrying a separate repo for deployment."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-03 21:56:39+00:00",
                    "text": "We have to keep the rendered html at fortran-lang.github.io since this is a so-called organisation site which serves the site at https://.github.io. If we use any other repository it will not be an organisation site but simply a project site which is not served at the site root but under https://<organization>.github.io/<repository>.\n\n@LKedward I don't think this matters at all because GitHub will redirect https://<organization>.github.io/<repository> to fortran-lang.org anyway. Am I wrong?"
                },
                {
                    "user": "certik",
                    "date": "2020-05-03 22:30:45+00:00",
                    "text": "It's a clean approach to just have a repository with the sources. But I am fine either way.\n\nWhat do you mean by inherit top level domain? I think one can always serve to subdomains such as docs.fortran-lang.org with different repositories.\n\u2026\nOn Sun, May 3, 2020, at 3:53 PM, Milan Curcic wrote:\n\n\n We don't have to use an organization page. I chose that because of 2 benefits:\n\n  1. You don't need to maintain a production repo (the one being\n served), it's done automatically and under the hood by GitHub;\n  2. Project pages inherit top-level domain.\n I don't think there are any other advantages. The obvious downside is\n that you can't do what we're now trying to do here, and we want to do\n it.\n\n If the repo is called .github.io *and* you chose to serve a page from\n it, then it's an org page (and ditto for ).\n\n However, this doesn't mean that fortran-lang.github.io (this repo) must\n be an org page. If you disable serving in the settings, it's not a page\n anymore.\n\n There's a number of solutions here that preserve repo metadata (stars,\n issues, etc.).\n\n My favorite actually is to:\n\n  1. Rename this repo so it's not an org page (preserves metadata);\n  2. Deploy to gh-pages branch.\n But deploying to master of another repo is okay too. It just seems like\n unnecessary added complexity of carrying a separate repo for deployment.\n\n \u2014\n You are receiving this because you commented.\n Reply to this email directly, view it on GitHub\n <#46 (comment)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAAFAWHGDBV5AFWVF5CU4WTRPXRWZANCNFSM4MXXO3AQ>."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-03 22:37:53+00:00",
                    "text": "What do you mean by inherit top level domain?  I think one can always serve to subdomains such as docs.fortran-lang.org with different repositories.\n\nExample: https://fortran-lang.org/stdlib/. That page is served from the fortran-lang/stdlib repo. It's just a convenience feature, nothing major.\nYes, we can easily serve other project pages as subdomains, it's just a matter of adding a CNAME record.\nI defer the choice of final implementation for this to you and Laurence. What matters to me is that we have automatic previews and preserve metadata, for both of which it looks like we have solutions."
                },
                {
                    "user": "certik",
                    "date": "2020-05-03 22:41:35+00:00",
                    "text": "I see. I think we should not use this master domain feature. Rather, I would serve the whole webpage as a single generated page from a single repo. I feel that's cleaner. We can still pull out docs from other repos.\n\u2026\nOn Sun, May 3, 2020, at 4:38 PM, Milan Curcic wrote:\n\n\n > What do you mean by inherit top level domain? I think one can always serve to subdomains such as docs.fortran-lang.org with different repositories.\n\n Example: https://fortran-lang.org/stdlib/. That page is served from the\n fortran-lang/stdlib repo. It's just a convenience feature, nothing\n major.\n\n Yes, we can easily serve other project pages as subdomains, it's just a\n matter of adding a CNAME record.\n\n I defer the choice of final implementation for this to you and\n Laurence. What matters to me is that we have automatic previews and\n preserve metadata, for both of which it looks like we have solutions.\n\n \u2014\n You are receiving this because you commented.\n Reply to this email directly, view it on GitHub\n <#46 (comment)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAAFAWBHYTPCQZ7VVOBLII3RPXW4ZANCNFSM4MXXO3AQ>."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-04 07:58:28+00:00",
                    "text": "@LKedward I don't think this matters at all because GitHub will redirect https://<organization>.github.io/<repository> to fortran-lang.org anyway. Am I wrong?\n\nAh okay, yep you are right here.\n\nMy favorite actually is to:\n\nRename this repo so it's not an org page (preserves metadata);\nDeploy to gh-pages branch.\n\n\nI agree this is by far the simplest and least-disruptive solution.\nWe get to keep metadata and this pull request can be merged as is.\nDoes anyone know how this will affect existing forks?\nUpdate: I've never renamed a repository before but it seems github is very accommodating to renaming repositories: the original repository url will redirect all web traffic and git operations to the new one (assuming we don't create another fortran-lang.github.io repo) so there aren't really any disadvantages to this approach!"
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-07 12:10:12+00:00",
                    "text": "I've reopened this PR in #54 for when the repo has been renamed.\nI think fortran-lang.org makes sense as a repo name, what do you think?"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-07 12:41:15+00:00",
                    "text": "I agree. @certik what do you think?"
                },
                {
                    "user": "certik",
                    "date": "2020-05-07 12:49:38+00:00",
                    "text": "Yes.\n\u2026\nOn Thu, May 7, 2020, at 6:41 AM, Milan Curcic wrote:\n\n\n I agree. @certik <https://github.com/certik> what do you think?\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#46 (comment)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAAFAWDVAQYBOWH3NYIFG2DRQKT7TANCNFSM4MXXO3AQ>."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-07 14:35:07+00:00",
                    "text": "Okay, I'm gonna rename the repo now."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-07 14:40:32+00:00",
                    "text": "The rename seems like it worked. The website had about 1 minute of downtime while I was applying the custom domain in the settings. It is now served from gh-pages. I think we can now move forward and merge #54"
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-07 14:41:27+00:00",
                    "text": "Sounds good!"
                }
            ]
        },
        {
            "number": 45,
            "user": "certik",
            "date": "2020-04-30 22:36:50+00:00",
            "title": "Add the rest of the Fortran compilers",
            "text": "Every compiler from the following pages should now be listed (either\nactive or discontinued):\nhttps://en.wikipedia.org/wiki/List_of_compilers#Fortran_compilers\nhttp://fortranwiki.org/fortran/show/Compilers\nhttps://fortran.bcs.org/2017/fortran_2003_2008_compiler_support.pdf",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-04-30 22:48:04+00:00",
                    "text": "Available now at https://fortran-lang.org/compilers/\nWe are now in a pretty good shape. Turns out there are still 12 commercial compilers that seem maintained (some more than others). That's impressive."
                }
            ]
        },
        {
            "number": 44,
            "user": "certik",
            "date": "2020-04-30 16:01:13+00:00",
            "title": "Make the favicon F white inside",
            "text": "Currently this is how the https://fortran-lang.org/ page looks in a Tab that is not active:\n\nThe F is really hard to read. We should make the F inside the purple box white. That way it should be nicely visible.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-04-30 16:02:05+00:00",
                    "text": "It's this file that has to be fixed: https://github.com/fortran-lang/fortran-lang.github.io/blob/837383d01152ff8fdf5412228fca6bee8c09781f/favicon.ico"
                },
                {
                    "user": "jacobwilliams",
                    "date": "2020-04-30 16:13:28+00:00",
                    "text": "Can do! Actually I thought I did make it white... Maybe it is transparent."
                },
                {
                    "user": "certik",
                    "date": "2020-04-30 16:22:43+00:00",
                    "text": "Thanks @jacobwilliams. I thought you did too, but for some reason it still is transparent on the website. Not sure where the problem is."
                },
                {
                    "user": "LKedward",
                    "date": "2020-04-30 16:28:37+00:00",
                    "text": "@certik could your browser be caching the old icon?\nIt doesn't appear transparent here: https://fortran-lang.org/favicon.ico"
                },
                {
                    "user": "certik",
                    "date": "2020-04-30 16:31:06+00:00",
                    "text": "@LKedward I don't know. Can you send a screenshot how it looks like in an inactive Tab for you?\nI would like the corners to be transparent, but the F inside to be white. Here is how  https://fortran-lang.org/favicon.ico looks in my Firefox on Ubuntu:\n\nIt has white inside, but also around the corners. The corners should be transparent."
                },
                {
                    "user": "LKedward",
                    "date": "2020-04-30 16:35:16+00:00",
                    "text": ""
                },
                {
                    "user": "certik",
                    "date": "2020-04-30 16:35:26+00:00",
                    "text": "Ok, maybe it is cached. Here is how the fortran-lang.org tab looks like now:\nInactive:\n\nActive:\n\nIn both cases, the corners are transparent and the F is white, as I would like it.\nSo maybe it's already fixed and it was just my browser that cached the old icon? I don't know what I did differently. I tested both Firefox and Chrome in Ubuntu 18.04 and it seems to work now.\nCan others confirm that what they see is exactly what I posted in this comment?"
                },
                {
                    "user": "certik",
                    "date": "2020-05-03 14:12:06+00:00",
                    "text": "I am going to close this. I think it is fixed."
                },
                {
                    "user": "ivan-pi",
                    "date": "2020-05-03 17:57:01+00:00",
                    "text": "Just noticed this issue now. After clicking \"Clear recent history\" in my browser and marking the cache checkbox, the favicon is displayed correctly. \ud83d\udc4d"
                }
            ]
        },
        {
            "number": 43,
            "user": "LKedward",
            "date": "2020-04-30 10:12:32+00:00",
            "title": "Update: packages footer with instructions link.",
            "text": "After #26 is merged, this will update the link at the bottom of\nthe packages pages to point to PACKAGES.md which details the criteria and\nprocess for getting a project listed in the index.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-04-30 15:52:28+00:00",
                    "text": "Looks great, thanks!"
                }
            ]
        },
        {
            "number": 42,
            "user": "certik",
            "date": "2020-04-25 16:25:13+00:00",
            "title": "Make all urls clickable links",
            "text": "",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 41,
            "user": "certik",
            "date": "2020-04-25 16:08:21+00:00",
            "title": "Create a Preview for each PR",
            "text": "Right now we have to test a PR locally that it works. Our CI should create a preview of each PR, so that we can simply see it right away. Typically that is achieved by pushing the PR into some review github pages as a branch with a url prefix so each PR has its own prefix and we can check that the page looks good.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-05-03 21:17:04+00:00",
                    "text": "We had to revert the fix, so I am reopening the issue also."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-07 15:02:31+00:00",
                    "text": "I think this needs re-opening unfortunately,\nTest PR #55 failed to push the preview build to the repo.\nThere's a permissions problem."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-07 15:10:31+00:00",
                    "text": "I don't see any failure in that link. What kind of permission is needed?"
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-07 15:17:42+00:00",
                    "text": "I don't see any failure in that link.\n\nYeah it's a bit annoying, the marketplace action for pushing to the repo completes successfully even if the push failed.\nLook under  > Commit and push to gh-pages /  > Internal logs.\nIt seems the github action for pull requests from forks only has read-only access.\nI think a solution can be to have the preview build triggered explicitly when someone with write access comments #build_pr or something. I will look into this."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-07 15:24:01+00:00",
                    "text": "If we add you as collaborator with permissions on this repo, would you know how to set it up?"
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-07 15:27:37+00:00",
                    "text": "If we add you as collaborator with permissions on this repo, would you know how to set it up?\n\nYes I believe so"
                }
            ]
        },
        {
            "number": 40,
            "user": "LKedward",
            "date": "2020-04-25 09:24:37+00:00",
            "title": "Fix: navbar highlighting and sign-posting",
            "text": "Fixes #39\nCompilers and Learn section are now highlighting correctly.\nThe newsletters have been switched to using the 'post' layout so that 'News' is highlighted in the navbar.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-04-25 16:06:21+00:00",
                    "text": "I checked locally, it looks good. Thanks!"
                }
            ]
        },
        {
            "number": 39,
            "user": "LKedward",
            "date": "2020-04-25 09:21:33+00:00",
            "title": "Navbar highlighting not working consistently",
            "text": "Highlighting the current site section in the Navbar is currently only working for the packages pages.",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 38,
            "user": "LKedward",
            "date": "2020-04-25 09:11:31+00:00",
            "title": "News sidebar displays recent news.",
            "text": "Copied the news format from the top-level index.html\nto _includes/news_sidebar.html so that it shows recent\nnews titles.",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 37,
            "user": "LKedward",
            "date": "2020-04-25 09:01:32+00:00",
            "title": "Add: gemfile.lock to repository.",
            "text": "Fixes #17.",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 36,
            "user": "LKedward",
            "date": "2020-04-25 08:58:32+00:00",
            "title": "Update: news page to show more posts",
            "text": "Fixes #35.\nNews page shows last five posts; first post is shown in full.\nArchive page formatting updated to group posts.\nNav bar highlighting fixed for news pages.",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 35,
            "user": "certik",
            "date": "2020-04-24 21:27:37+00:00",
            "title": "The NEWS page only shows the latest news item",
            "text": "This should list all the news, not just the latest:\nhttps://fortran-lang.org/news/",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 34,
            "user": "certik",
            "date": "2020-04-24 21:23:56+00:00",
            "title": "Show authors",
            "text": "",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-04-24 21:58:16+00:00",
                    "text": "I need this to show online already (I am sending a link to it to my management). I am going to merge it. @milancurcic and others --- if you are against this change, I am happy to revert it. Let me know."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-04-24 21:59:41+00:00",
                    "text": "It's perfect, I'm glad you moved it forward."
                }
            ]
        },
        {
            "number": 33,
            "user": "certik",
            "date": "2020-04-24 21:12:40+00:00",
            "title": "Use better formatting of headers",
            "text": "",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-04-24 21:13:10+00:00",
                    "text": "This makes it look much better. I am just going to merge it."
                }
            ]
        },
        {
            "number": 32,
            "user": "certik",
            "date": "2020-04-24 21:00:25+00:00",
            "title": "Installation instructions fail",
            "text": "Even after the fix in #31 they fail:\n$ bundle install --path .bundle\n[DEPRECATED] The `--path` flag is deprecated because it relies on being remembered across bundler invocations, which bundler will no longer do in future versions. Instead please use `bundle config set path '.bundle'`, and stop using this flag\nFetching gem metadata from https://rubygems.org/...........\nFetching gem metadata from https://rubygems.org/.\nResolving dependencies...\nFetching public_suffix 4.0.4\nInstalling public_suffix 4.0.4\nFetching addressable 2.7.0\nInstalling addressable 2.7.0\nUsing bundler 2.1.4\nFetching colorator 1.1.0\nInstalling colorator 1.1.0\nFetching concurrent-ruby 1.1.6\nInstalling concurrent-ruby 1.1.6\nFetching eventmachine 1.2.7\nInstalling eventmachine 1.2.7 with native extensions\nGem::Ext::BuildError: ERROR: Failed to build gem native extension.\n\ncurrent directory:\n/home/ondrej/repos/fortran-lang.github.io/.bundle/ruby/2.5.0/gems/eventmachine-1.2.7/ext\n/usr/bin/ruby2.5 -r ./siteconf20200424-23119-fxep5g.rb extconf.rb\nmkmf.rb can't find header files for ruby at /usr/lib/ruby/include/ruby.h\n\nextconf failed, exit code 1\n\nGem files will remain installed in\n/home/ondrej/repos/fortran-lang.github.io/.bundle/ruby/2.5.0/gems/eventmachine-1.2.7\nfor inspection.\nResults logged to\n/home/ondrej/repos/fortran-lang.github.io/.bundle/ruby/2.5.0/extensions/x86_64-linux/2.5.0/eventmachine-1.2.7/gem_make.out\n\nAn error occurred while installing eventmachine (1.2.7), and Bundler\ncannot continue.\nMake sure that `gem install eventmachine -v '1.2.7' --source\n'https://rubygems.org/'` succeeds before bundling.\n\nIn Gemfile:\n  jekyll was resolved to 3.8.6, which depends on\n    em-websocket was resolved to 0.5.1, which depends on\n      eventmachine\n\nI am using Ubuntu 18.04.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2020-04-24 21:02:21+00:00",
                    "text": "I think you need to install ruby-dev package.\nThis should be added to the README."
                },
                {
                    "user": "certik",
                    "date": "2020-04-24 21:03:27+00:00",
                    "text": "I figured it out: fc3a958"
                },
                {
                    "user": "certik",
                    "date": "2020-04-24 21:03:52+00:00",
                    "text": "@LKedward you are right. I figured it out right as you posted it."
                }
            ]
        },
        {
            "number": 31,
            "user": "certik",
            "date": "2020-04-24 20:59:53+00:00",
            "title": "Fix installation instructions",
            "text": "Fixes #32.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-04-24 21:28:24+00:00",
                    "text": "I am just going to merge this simple fix to get things done. If there are any objections, I can wait longer next time."
                }
            ]
        },
        {
            "number": 30,
            "user": "certik",
            "date": "2020-04-24 20:53:14+00:00",
            "title": "Meeting fixes",
            "text": "This was meant to be part of #29.",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 29,
            "user": "certik",
            "date": "2020-04-24 20:41:26+00:00",
            "title": "NEWS: Summarize the February J3 meeting",
            "text": "",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-04-24 20:55:43+00:00",
                    "text": "So this looks really ugly:\nhttps://fortran-lang.org/newsletter/2020/02/28/J3-february-meeting/\nPlease do not advertise this."
                },
                {
                    "user": "certik",
                    "date": "2020-04-24 21:33:22+00:00",
                    "text": "I fixed it up in #30 and #33. Looks much better now. But it still needs #34. Then I am happy."
                }
            ]
        },
        {
            "number": 28,
            "user": "milancurcic",
            "date": "2020-04-24 20:29:57+00:00",
            "title": "Should we list g95 in open source compilers?",
            "text": "http://g95.org/\nI'm torn. :)\nOn one side, I used this compiler briefly over 10 years ago and it's dear to me. \"It's free crunch time\" is an awesome tagline. Despite what its name implies, this compiler supports coarrays out of the box, at least to some capacity. Its status page has a long list of packages that work with g95.\nOn the other side, it looks like the project is not developed any more. The most recent update on the site that I can find is from 2013.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "jacobwilliams",
                    "date": "2020-04-24 20:46:17+00:00",
                    "text": "I would say no. It\u2019s defunct. I know people still use it but people still use g77 too. Best not to encourage that."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-04-24 20:50:21+00:00",
                    "text": "Indeed. From looking at the source, it seems that g95 was meant to be included as the Fortran frontend of GCC. I guess it continued as its own project once gfortran was released."
                },
                {
                    "user": "certik",
                    "date": "2020-04-24 20:50:41+00:00",
                    "text": "I vote no. I would only list actively maintained compilers. Otherwise we have to list every old F77 and other commercial compilers. Every old compiler can be used in principle. But the purpose of the page is to list compilers that are maintained today.\nIf, however, somebody forks g95 and starts maintaining it again, then we can list it."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-04-27 19:48:06+00:00",
                    "text": "The opinion is unanimous on this one, so I will close it."
                }
            ]
        },
        {
            "number": 27,
            "user": "certik",
            "date": "2020-04-24 19:30:09+00:00",
            "title": "Add more commercial Fortran compilers",
            "text": "And describe each of them using their own words as copied from their\nwebsites.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-04-24 20:06:57+00:00",
                    "text": "I merged it. Now the compiler page looks decent, and we can keep improving it with further PRs."
                }
            ]
        },
        {
            "number": 26,
            "user": "LKedward",
            "date": "2020-04-24 19:15:16+00:00",
            "title": "Start document for detailing package index guidelines.",
            "text": "@milancurcic and @certik I think this covers everything we discussed in #20 ?",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-04-30 15:51:10+00:00",
                    "text": "Let's merge this. People approved it and we can refine as we go later if needed."
                }
            ]
        },
        {
            "number": 25,
            "user": "certik",
            "date": "2020-04-24 19:02:51+00:00",
            "title": "Reorder open source compilers",
            "text": "I think the order now roughly reflects the maturity, community size and\nmind-share in that order.\nAs the author of LFortran, I approve this change.",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 24,
            "user": "gklimowicz",
            "date": "2020-04-24 18:32:28+00:00",
            "title": "Suggest some tweaks for Ond\u0159ej.",
            "text": "@certik I've written some proposed changes for F18 and current Flang.\nThis seemed like the easiest way to suggest the wording change.\nLet me know if you would like something else.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-04-24 18:57:31+00:00",
                    "text": "Thank you @gklimowicz, I appreciate it. This is perfect, and if you are ok with the wording, then so are we."
                }
            ]
        },
        {
            "number": 23,
            "user": "gklimowicz",
            "date": "2020-04-24 18:20:36+00:00",
            "title": "Suggest some tweaks for Ond\u0159ej.",
            "text": "Hi, @certik. I thought I would go through the exercise of generating a pull request with some tweaks to the language about current Flang and f18 for the compilers.md page.\nLet me know what you think and we can perhaps iterate on a change.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "gklimowicz",
                    "date": "2020-04-24 18:22:32+00:00",
                    "text": "Whoops. Link is wrong."
                },
                {
                    "user": "certik",
                    "date": "2020-04-24 18:23:36+00:00",
                    "text": "Perfect, thank you. Ping me once it is ready."
                }
            ]
        },
        {
            "number": 22,
            "user": "LKedward",
            "date": "2020-04-24 18:06:08+00:00",
            "title": "Add package: p-costa/CaNS",
            "text": "Fixes #21",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 21,
            "user": "p-costa",
            "date": "2020-04-24 16:46:03+00:00",
            "title": "addition to the list scientific codes",
            "text": "would it be possible to add CaNS to the list of scientific codes?\nthe repo on github: https://github.com/p-costa/CaNS",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2020-04-24 16:50:57+00:00",
                    "text": "This code looks good, I don't think there'll be an opposition to adding it.\nAre you happy with the following entry:\nname: Canonical Navier Stokes (CaNS)\ndescription: A code for fast, massively-parallel direct numerical simulations (DNS) of canonical flows\nLicense: MIT\n\nCan you suggest some tags to use for indexing?\nDo you have a version number or plan to release a version on github?"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-04-24 16:54:11+00:00",
                    "text": "@p-costa very nice project!\n@LKedward @certik we should design a PR template with a checklist for these submissions."
                },
                {
                    "user": "p-costa",
                    "date": "2020-04-24 16:59:18+00:00",
                    "text": "Thanks @LKedward :). The description is perfect. I would just change the name to just name: CaNS.\nIn terms of tags, I can suggest those of the GitHub repo:\nfluid-dynamics\nfluid-simulation\ncomputational-fluid-dynamics\nturbulence\nhigh-performance-computing\ncfd\nI do not have a release version on GitHub, and I was not planning to have it for the being; hope that is fine!"
                },
                {
                    "user": "certik",
                    "date": "2020-04-24 17:10:42+00:00",
                    "text": "@p-costa thanks! We missed this project I think in our initial list.\nWe are still figuring out the detailed criteria in #20, but I think you are satisfying them, so you have my +1."
                },
                {
                    "user": "LKedward",
                    "date": "2020-04-24 17:11:48+00:00",
                    "text": "Cheers @p-costa, that's great! Will put together the PR."
                }
            ]
        },
        {
            "number": 20,
            "user": "certik",
            "date": "2020-04-24 16:28:48+00:00",
            "title": "Write down criteria how to include a package",
            "text": "We should also setup criteria how to include a package there --- right now the criterion I think was at least 29 stars at GitHub and Fortran as the majority language (as determined by GitHub). I would be for lowering the number of stars, for example if we lower to 15, then one of my other 100% Fortran project would qualify: https://github.com/certik/hfsolver :), what is nice about this one is that it has all kinds of very good computational routines that could be useful for others. But if we lower the number of stars, then I want to do it in a systematic way, I want to see every single GitHub project included. I think we achieved it with the > 29 stars.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "LKedward",
                    "date": "2020-04-24 16:43:27+00:00",
                    "text": "Yes I think we need criteria - however having now been through a large list of projects I don't find number of stars to be a very good indicator of project quality or utility.\nI find they are much more like social media 'likes' and, as I think you've mentioned @certik, they are skewed towards projects which have been online for longer.\nI think more objective criteria should be used to include projects which importantly will allow new projects to gain good exposure and momentum. Such objective criteria could include:\n\nProject does not appear to be archived/abandoned\nProject includes open source license\nProject has a README clearly stating project purpose, dependencies and build process\nProject source can be browsed and cloned without registration\nProject permits issues/tickets to be raised\nProject has some form of documentation (however basic)\n\nA possible idea is to have a stricter set of criteria which earn the project a green 'Verified' flag in the package index and a higher ranking:\n\nProject contains complete documentation\nProject contains tests\nProject follows some standard best practices for portability"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-04-24 16:45:22+00:00",
                    "text": "I don't think we should use GitHub stars as a criterion. It was okay for the first step but we need something better now. I think we all agree that the number of GitHub stars is not a measure of relevence of a package.\nI also don't think we should include every GitHub Fortran project. Many repos could fall in that are either unusable or semi-usable, or they're a slight modification of another project.\nAs you say, we need to decide what makes a package relevant enough. I think some requirements should be:\n\nPure Fortran or mixed-language project where Fortran is the majority of the code (or > than some % of the code). This is somewhat arbitrary;\nEither installable by fpm (in the future) or includes install instructions in the repo;\nUnique: We shouldn't include packages that are a slight modification of an existing package. Including them could create confusion for the end user.\n\nMy guess is that based on these criteria, most packages that one would care submitting would be acceptable."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-04-24 16:48:15+00:00",
                    "text": "I agree with most ideas by @LKedward, except these:\n\nProject does not appear to be archived/abandoned\n\nI think we would be amiss to not include some mature legacy projects that aren't actively maintained. I can't think of any from the top of my head, but I'd bet there are.\n\nProject permits issues/tickets to be raised\n\nThis one may be too restrictive as it assumes a development platform. It would disqualify archived packages which I think may be important to list.\nBut of course, I'm yet to provide examples of worthwhile archived projects."
                },
                {
                    "user": "certik",
                    "date": "2020-04-24 17:06:08+00:00",
                    "text": "The proposed criteria from @LKedward and @milancurcic seem ok with me.\nI would like some criterion to exclude projects that literally just started and have no users and are not yet clear that they would be a good community project. As an example of such a project would be https://github.com/certik/allocate. I know that this project doesn't satisfy the other criteria either (e.g., doesn't have a README).\nHow about an additional criterion such as having at least 5 GitHub stars? A really low bar, but it would exclude some personal test projects such as the one I linked above."
                },
                {
                    "user": "certik",
                    "date": "2020-04-24 17:08:26+00:00",
                    "text": "An in addition, after we write down the criteria, I would say that it has to get at least 3 positive reviews from the fortran-lang community. That way we will simply judge each project on a case by case basis, and requiring 3 reviews should guarantee that we are fair."
                },
                {
                    "user": "LKedward",
                    "date": "2020-04-24 17:16:34+00:00",
                    "text": "I agree with all these points"
                },
                {
                    "user": "certik",
                    "date": "2020-04-24 17:19:11+00:00",
                    "text": "@LKedward if you have time, do you want to submit a PR with the document that has these rules?"
                },
                {
                    "user": "LKedward",
                    "date": "2020-04-24 17:23:44+00:00",
                    "text": "@certik yep I can do that."
                },
                {
                    "user": "certik",
                    "date": "2020-04-30 15:51:29+00:00",
                    "text": "This was fixed in #26."
                }
            ]
        },
        {
            "number": 19,
            "user": "LKedward",
            "date": "2020-04-24 15:49:45+00:00",
            "title": "Fortran Packages",
            "text": "@milancurcic  These are the final edits for #18  that I didn't push. Sorry!",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-04-24 16:10:02+00:00",
                    "text": "Excellent, I love the styling, thank you.\nThe categories of packages look great. You're right about using sub-pages over one long page--I didn't realize how many packages there would be. And these aren't even all of them."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-04-24 16:11:10+00:00",
                    "text": "@certik take a look at the preview."
                },
                {
                    "user": "certik",
                    "date": "2020-04-24 16:26:02+00:00",
                    "text": "This is really awesome. The GitHub info (stars, license, issues, ...) take a long time to load for me (but that's good enough for now).\n+1 to merge as is.\nWe should also setup criteria how to include a package there --- right now the criterion I think was at least 29 stars at GitHub and Fortran as the majority language (as determined by GitHub). I would be for lowering the number of stars, for example if we lower to 15, then one of my other 100% Fortran project would qualify: https://github.com/certik/hfsolver  :), what is nice about this one is that it has all kinds of very good computational routines that could be useful for others. But if we lower the number of stars, then I want to do it in a systematic way, I want to see every single GitHub project included. I think we achieved it with the > 29 stars. I made this #20."
                }
            ]
        },
        {
            "number": 18,
            "user": "LKedward",
            "date": "2020-04-23 15:37:47+00:00",
            "title": "Add explore page for listing community projects.",
            "text": "Inspired by your comment @certik, I've put together a very simple and (hopefully) user-friendly community project index page.\nThe 'Development' top-level page has been replaced with an 'Explore' page which lists foremost the stdlib and fpm projects followed by a searchable index of community code packages also broken down by category.\nPackages are listed centrally by metadata in a yaml file, everything else is generated.\nI've populated a few popular packages to start off with.\nEventually this could involve some integration with FPM.\nSearch functionality is fairly rudimentary based on substrings.\nI've included automated badges for github stars etc. as done here, though do note they take some time to load due to the API - there might be a way to cache them, but I can't think how exactly.\nFeedback welcome.\nPreview this pull request statically here",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-04-23 16:37:50+00:00",
                    "text": "This is great, thank you so much @LKedward !\nWe need to ensure all the codes from https://github.com/fortran-lang/stdlib/wiki/List-of-popular-open-source-Fortran-projects are there.\nIt's great that it's in the yaml format, that way we can write scripts to sort them by the number of stars."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-04-23 16:47:17+00:00",
                    "text": "I love this, thank you Laurence for taking the initiative.\nI have a few high-level suggestions for now:\n\nPage and tab name: \"Explore\" seems a little vague to me. I expected that it meant \"Explore Fortran language\" which would be more like a tutorial. Should we use a more specific word here, perhaps \"Packages\"?\nFortran-lang organisation projects: I'd like to de-empasize \"organization\" and emphasize community. I suggest rewording this header as \"Fortran-lang community projects\", and adding this website and repo as the 3rd project. I'd like us to encourage people to discover this website as an editable and contributable project in motion, rather than a static place on the internet.\nFeatured community projects: Considering point above, then we should reword this to avoid confusion with this specific community (fortran-lang.org) and because not all projects listed are community projects. Perhaps a broader header, Featured open source projects is more appropriate.\n\nCategory sub-pages: I recommend not navigating to a level 3 sub-page for each category, but to have one longer page (level 2) that lists all categories and projects, with a hyperlinked category TOC at the top. Then the visitor could easily browse all categories and packages without navigating away. I personally start to get lost when websites have level 3 sub-page.\nSpecific categories: I don't think these categories work well. Specifically, they're all broad and have overlap between each other. I suggest having more specific and narrowly defined categories, like Linear Algebra, Simulation, Graphics, General purpose, and perhaps others.\n\n\n\nThe rewording suggestions are probably easy to implement here. If you agree, you can include them as part of this PR.\nFor others I suggest we open specific follow-up PRs to improve each part of the page."
                },
                {
                    "user": "certik",
                    "date": "2020-04-23 16:53:03+00:00",
                    "text": "This will really help the Fortran community. Later on some of these become part of fpm registry, etc. But for now this is what is needed."
                },
                {
                    "user": "LKedward",
                    "date": "2020-04-24 10:09:43+00:00",
                    "text": "Thanks for the comments!\n@milancurcic I agree with you re rewording - I'll update with your suggestions.\n\n\nCategory sub-pages: I recommend not navigating to a level 3 sub-page for each category, but to have one longer page (level 2) that lists all categories and projects, with a hyperlinked category TOC at the top. Then the visitor could easily browse all categories and packages without navigating away. I personally start to get lost when websites have level 3 sub-page.\n\n\nUnfortunately I disagree here. I personally find long scrolling pages difficult to navigate efficiently and therefore poor design. I think your point can be easily remedied using appropriate signposting (e.g. breadcrumbs; I will attempt to demonstrate this better here. We can discuss this in a separate issue for the site as a whole?\n\n\nSpecific categories: I don't think these categories work well. Specifically, they're all broad and have overlap between each other. I suggest having more specific and narrowly defined categories, like Linear Algebra, Simulation, Graphics, General purpose, and perhaps others.\n\n\nYep this is true - as I've added more packages, it's become clearer which categories to use and they are now more distinct. The category system is very extensible, so future PRs can refine easily.\n\nThis is great, thank you so much @LKedward !\nWe need to ensure all the codes from https://github.com/fortran-lang/stdlib/wiki/List-of-popular-open-source-Fortran-projects are there.\n\nThanks @certik, I've been through that whole list now; for this initial PR I've prioritised adding libraries and modules that would be of use to Fortran programmers over large domain-specific scientific applications. Having been through the list (and as you note also) I find that the number of stars is actually a poor indicator of package utility IMHO. I find they are much more like social media 'likes' - we see this in the skew towards large scientific applications, which are domain-specific and hence of limited utility to the wider Fortran community. We can discuss criteria for indexing packages in another issue?"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-04-24 15:45:38+00:00",
                    "text": "This is good to go, I will merge. Great addition to the site!\nWe can discuss and refine any specifics in separate issues and PRs."
                },
                {
                    "user": "LKedward",
                    "date": "2020-04-24 15:48:06+00:00",
                    "text": "Hi @milancurcic , I didn't realise this had come out of draft status - I haven't pushed the final commits from my local repo!"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-04-24 16:22:32+00:00",
                    "text": "Sorry, my bad, I misunderstood!"
                }
            ]
        },
        {
            "number": 17,
            "user": "LKedward",
            "date": "2020-04-22 14:50:16+00:00",
            "title": "Add Gemfile.lock to repo",
            "text": "A minor point, and I will defer to those with more experience with Ruby, however my understanding is that for non-library projects (no dependents) the lock file should be committed to the repository so that all contributors are building within the same environment. Repo lock files are only then updated when updated dependencies have been tested.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-04-22 14:59:56+00:00",
                    "text": "My experience with Ruby is near zero, just enough to get by. What you say makes sense, Rust does similarly.\nThis is most likely inconsequential because the site is built by GitHub, but I agree with committing Gemfile.lock to the repo."
                },
                {
                    "user": "LKedward",
                    "date": "2020-04-22 17:29:05+00:00",
                    "text": "This is most likely inconsequential because the site is built by GitHub...\n\nThis is actually an issue I think because the build is not strictly reproducible between the local copy and the GitHub build; so theoretically a local build could succeed but fail to build with GitHub when pushed.\nI see now that this is recommended for bundler so I'll do a PR."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-04-22 17:38:26+00:00",
                    "text": "You're right, my bad. I see why it's important to have a Gemfile.lock now."
                }
            ]
        },
        {
            "number": 16,
            "user": "LKedward",
            "date": "2020-04-22 14:45:44+00:00",
            "title": "Update: compilers page with Flang information.",
            "text": "Fixes #6",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-04-22 15:01:36+00:00",
                    "text": "This looks good to me. @certik would you add anything to the description?"
                },
                {
                    "user": "ivan-pi",
                    "date": "2020-04-22 19:12:08+00:00",
                    "text": "I should point out, that it seems like only the F18 parser is complete. So to get an executable you would still have to use the \"old\" flang."
                },
                {
                    "user": "LKedward",
                    "date": "2020-04-22 19:33:05+00:00",
                    "text": "Good point. I'll update to re-include link to \"old\" flang."
                },
                {
                    "user": "certik",
                    "date": "2020-04-24 16:53:26+00:00",
                    "text": "@gklimowicz, is this a good wording for the Flang compilers?\nWe are trying list all Fortran compilers at https://fortran-lang.org/compilers/.\nRegarding the order, for open source compilers we should order based on the number of GitHub stars, so that should be this order:\nFlang https://github.com/llvm/llvm-project (4400)\nGFortran https://github.com/gcc-mirror/gcc (3700)\nLFortran https://github.com/lfortran/lfortran (131)\nYes, it's unfair to LFortran, as both Flang and GFortran are benefiting from being part of a large compiler collection, but I am ok with that for now.\nRegarding the commercial compilers, we should list them in the order of their relative usage, which we don't know, but we can do our best to estimate. (We plan to add all the commercial compilers eventually.)"
                },
                {
                    "user": "certik",
                    "date": "2020-04-24 19:00:28+00:00",
                    "text": "This was fixed in #24."
                },
                {
                    "user": "gklimowicz",
                    "date": "2020-04-24 19:03:55+00:00",
                    "text": "@certik Just as a comment after this issue was closed, I would suggest that, like the commercial compilers, you list the open source compilers in order of presumed use. That would suggest (for now), GFortran, Current Flang (it's Arm's commercial compiler), LFortran and new Flang."
                },
                {
                    "user": "certik",
                    "date": "2020-04-24 19:07:19+00:00",
                    "text": "@gklimowicz I've already done that here: #25. I listed both Flangs in front of LFortran (we can re-evaluate in a year). I agree that GFortran should be first, as I have done in #25."
                }
            ]
        },
        {
            "number": 15,
            "user": "jacobwilliams",
            "date": "2020-04-21 20:59:38+00:00",
            "title": "added updated favicon and the png used to create it.",
            "text": "",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-04-21 21:11:06+00:00",
                    "text": "I am little confused by the diff ---- there is already a favicon.ico file, and you are replacing it, and yet the diff shows your favicon.ico as a new file. I would expect it would show replacing it."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-04-21 21:43:10+00:00",
                    "text": "In my email I see it as modified:\nFile Changes\nA assets/img/fortran_logo_64x64.png (0)\nM favicon.ico (0)"
                },
                {
                    "user": "certik",
                    "date": "2020-04-21 21:44:01+00:00",
                    "text": "Ok. @milancurcic I'll let you merge this one."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-04-21 21:44:29+00:00",
                    "text": "https://raw.githubusercontent.com/jacobwilliams/fortran-lang.github.io/purple-favicon/favicon.ico\nLooks good! Thank you @jacobwilliams."
                }
            ]
        },
        {
            "number": 14,
            "user": "jacobwilliams",
            "date": "2020-04-21 02:59:43+00:00",
            "title": "added SVG file for purple logo",
            "text": "If you are interested, I added an Inkscape SVG file of the purple version of the logo. I also rerendered the png files so they look a bit less pixely now.\nI can make any other adjustments as necessary.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-04-21 03:26:15+00:00",
                    "text": "This is a big improvement, so I am going to merge it."
                },
                {
                    "user": "certik",
                    "date": "2020-04-21 03:27:34+00:00",
                    "text": "Can you also add a new version of https://github.com/fortran-lang/fortran-lang.github.io/blob/b1a92bee30a6b0454bc6ece006c1e1f8822a853d/favicon.ico ? That is what appears in the Tab in a browser and it would greatly help to have the white F instead of a transparent F for better visibility."
                },
                {
                    "user": "jacobwilliams",
                    "date": "2020-04-21 13:45:23+00:00",
                    "text": "Yes I can do that later today."
                },
                {
                    "user": "jacobwilliams",
                    "date": "2020-04-21 20:59:57+00:00",
                    "text": "see: #15"
                }
            ]
        },
        {
            "number": 13,
            "user": "milancurcic",
            "date": "2020-04-18 19:29:55+00:00",
            "title": "Change date format to %d %b %Y in news list",
            "text": "Currently the date in the news list on the landing page is formatted as %B %Y (example: \"February 2020\").\nFor multiple news items in a single month, it's helpful to see a day value as well.\nThis PR changes the date format to %d %b %Y so that we have something like:\n06 Apr 2020\n25 Feb 2020",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 12,
            "user": "milancurcic",
            "date": "2020-04-18 19:12:16+00:00",
            "title": "add Fortran webinar newsletter post",
            "text": "This PR adds a newsletter post about the Open Source Directions Fortran webinar.\n@certik please review, edit as needed, and merge.",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 11,
            "user": "Carreau",
            "date": "2020-04-18 04:41:40+00:00",
            "title": "Fix footer link to github site source.",
            "text": "",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-04-18 05:03:22+00:00",
                    "text": "Thank you Matthias!\n\u2026\nOn Fri, Apr 17, 2020, at 10:41 PM, Matthias Bussonnier wrote:\n\n You can view, comment on, or merge this pull request online at:\n\n #11\n\n Commit Summary\n\n  * Fix footer link to github site source.\n File Changes\n\n  * *M* _includes/footer.html\n <https://github.com/fortran-lang/fortran-lang.github.io/pull/11/files#diff-7693eb643e8fe8b8d46b407909b408ce> (2)\n Patch Links:\n\n  * https://github.com/fortran-lang/fortran-lang.github.io/pull/11.patch\n  * https://github.com/fortran-lang/fortran-lang.github.io/pull/11.diff\n \u2014\n You are receiving this because you are subscribed to this thread.\n Reply to this email directly, view it on GitHub\n <#11>, or\n unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAAFAWD3DZAGYSMALYMTFADRNEVQ7ANCNFSM4MLGM6MQ>."
                }
            ]
        },
        {
            "number": 10,
            "user": "milancurcic",
            "date": "2020-04-17 18:59:41+00:00",
            "title": "How to distribute newsletters?",
            "text": "See #3 first.\nHow should we distribute the newsletter, and specifically, should we have a mailing list?\nCurrently we have:\n\nFeed for RSS clients here: https://fortran-lang.org/news.xml\nTwitter: https://twitter.com/fortranlang, which we can further automate and have a GitHub bot post a tweet on a merged newsletter.\n\nRegarding mailing lists, I've used Google Groups (not sure if still exists) and Mailchimp (great features but a PITA to work with).\nUnless there's a really easy to set up and low maintenance mailing list solution, or we have a volunteer to do it, I'm not convinced that it's worthwhile doing this for the time being.\nWhat do you think?",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-04-17 19:15:03+00:00",
                    "text": "For LFortran we use groups.io, i.e. https://groups.io/g/lfortran.\nI agree Google Groups interface is really bad, especially if you do not use a gmail.\nThe GitHub issues work almost like a mailinglist.\nThe other options to use are Zulip: https://lfortran.zulipchat.com, or Gitter: https://gitter.im/sympy/sympy.\nThe advantage of a mailinglist is that you do not need to worry about closing an issue, so it's great for a general discussion or announcements. And you can use an email.\nI wondered for LFortran a lot, whether we need a mailinglist or not, initially we just setup Zulip. But later we created a mailinglist, so that I can post my updates there, and we can have a general discussion from time to time if needed.\nFor example: we should have a medium where we can announce the FortranCon, and other things and have means for people to discuss it. Twitter is one medium, but I think mailinglist is better than Twitter."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-04-17 19:22:43+00:00",
                    "text": "GitHub issues are great for developers with GitHub accounts and who want to follow everything about the development.\nZulip, Gitter, or Slack are good for development collaboration and building community, but they're not good for distributing newsletters and such.\nSo yes, for newsletters we need a low friction (just email signup) delivery like a mailing list.\nTwitter is better than mailing list for reaching people (non-subscribers can see it through the feed or retweets), but mailing list is better for discussion.\nHowever, would there be much discussion around news? It seems to me that the discussion would be centered more around a Chat (Zulip, Slack, etc.) or a Message Board (Discourse) format.\nGroups.io seems simple and no-nonsense on first look. If you like it, we should try using it."
                },
                {
                    "user": "certik",
                    "date": "2020-04-17 19:32:16+00:00",
                    "text": "If we decide to create a mailinglist, then groups.io is the best one I found.\nThe key question is:\n\nHowever, would there be much discussion around news? It seems to me that the discussion would be centered more around a Chat (Zulip, Slack, etc.) or a Message Board (Discourse) format.\n\nThat's what I didn't know initially either. The chat is less permanent, but the Discourse might be a good option. Discourse is probably the closest to a mailinglist.\nThe kind of discussions that people would have are visible e.g. here:\nhttps://groups.google.com/forum/#!forum/comp.lang.fortran\nYou can see that anyone can post an announcement of a new project or a new idea or a new conference, and then people can discuss and comment. I think it's very helpful in this respect.\nEssentially it would be the place to reach the Fortran community. Our CoC would apply to it, we would moderate it so that the discussions stay healthy."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-04-17 19:43:42+00:00",
                    "text": "We may be able to get a hosted Discourse instance for free: https://blog.discourse.org/2018/11/free-hosting-for-open-source-v2/"
                },
                {
                    "user": "LKedward",
                    "date": "2020-04-22 15:01:08+00:00",
                    "text": "I agree, I think Twitter makes the most sense as an easy way to distribute.\nIn terms of discussion it would be good to have a central moderated and modern place for Fortran.\n(comp.lang.fortran is not moderated and I not too amenable for non-experts).\nI don't have much experience with different discussion mediums - the free Discourse instance sounds like it's worth a try?"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-02 20:05:15+00:00",
                    "text": "The mailing list is in place thanks to @certik, and is now listed on the landing page.\nI also just applied for the free Discourse instance for open source projects. We should hear back about it in few days."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-05 20:16:29+00:00",
                    "text": "The Fortran Discourse instance is up: https://fortran-lang.discourse.group/\nIt's basically a self-managed, free instance of a modern message board.\nConsidering that in the meantime we also set up the mailing list, there's some overlap between the two as in that both facilitate discussion. Let's see how each works out and whether there's prevalent preference among the community for one or the other."
                },
                {
                    "user": "LKedward",
                    "date": "2020-05-05 20:22:31+00:00",
                    "text": "Awesome, cheers for setting it up @milancurcic!\nWe have RSS and twitter for distributing newsletters and mailing list and discourse for discussions - is this issue now resolved?"
                },
                {
                    "user": "certik",
                    "date": "2020-05-05 20:57:19+00:00",
                    "text": "I think we can close it now. We have enough avenues now to have good solid engagement with the public and among ourselves and let's see how this goes and how we are using things. We might end up using both the mailinglist and the discourse."
                }
            ]
        },
        {
            "number": 9,
            "user": "LKedward",
            "date": "2020-04-17 15:47:34+00:00",
            "title": "Fix: get started link on home page.",
            "text": "Fixes #8",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-04-17 16:05:27+00:00",
                    "text": "Perfect, thanks! :)"
                }
            ]
        },
        {
            "number": 8,
            "user": "LKedward",
            "date": "2020-04-17 15:46:00+00:00",
            "title": "Broken 'Get Started' link on home page.",
            "text": "Apologies, broken by my recent tutorials PR.\nSee PR for fix.",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 7,
            "user": "milancurcic",
            "date": "2020-04-16 15:41:12+00:00",
            "title": "Tutorial / Learn page",
            "text": "What should the learning page and tutorial look like?\nWhat should they cover?\nHow should they be organized?\nLet's discuss.\nFollow up from #5 .",
            "is_open": true,
            "labels": [
                "learn"
            ],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-04-16 16:12:47+00:00",
                    "text": "I like how Rust does it: https://www.rust-lang.org/learn\nThey have \"books\" on various subjects. So one book can be a general tutorial to Fortran, like at #5.\nAnother book can be the \"Best Practices\" from here:\nhttps://www.fortran90.org/src/best-practices.html\nwhere I collected some of the common idioms and how they should be done in the modern way.\nAnother book can be Python Fortran Rosetta Stone:\nhttps://www.fortran90.org/src/rosetta.html\nAnother can be FAQ:\nhttps://www.fortran90.org/src/faq.html\n..."
                },
                {
                    "user": "LKedward",
                    "date": "2020-04-19 09:34:06+00:00",
                    "text": "I agree, the Rust learn page is a very good example.\nI like the idea of having short online 'Books' for different topics.\nWe can easily add books as they are written and group them on the top-level Learn page by category.\nA possible structure:\n\n\nCategory: Getting started\n\nBook: Quickstart tutorial (existing tutorial)\nBook: Fortran FAQ (fortran90.org)\nBook: Fortran for Python programmers (fortran90.org)\nBook: Fortran for C/C++ programmers (see flang)\nBook: Fortran best practices (fortran90.org)\nBook: Fortran community style guide\n\n\n\nCategory: Core Language Documentation\n\nBook: Basic programming concepts (types, variables, constants, arrays, operators, expressions, character strings)\nBook: Program units (scoping units, programs, procedures, modules, submodules) and control flow (conditional and looping constructs)\nBook: Working with arrays (static, automatic, allocatable, pointer, passing/returning arrays to/from procedures)\nBook: Data input & output\n\n\n\nCategory Advanced Language Documentation\n\nBook: Object-oriented Fortran\nBook: Submodules\nBook: C interoperability\n\n\n\nThis makes it easy for people of different abilities to quickly find relevant documentation.\nGetting the structure perfect first time isn't important since we can adjust as content is added.\nThe core and advanced documentation should eventually cover the whole language in detail as a searchable and more accessible (easier-to-read) alternative to the standards documents.\nFinally there should be a section at the bottom of the learn page with links to external resources: books, standards documents, mailing lists, fortranwiki etc.\nWhat do you think?"
                },
                {
                    "user": "certik",
                    "date": "2020-04-19 13:09:10+00:00",
                    "text": "I agree.\n\u2026\nOn Sun, Apr 19, 2020, at 3:34 AM, LKedward wrote:\n\n\n I agree, the Rust learn page is a very good example.\n  I like the idea of having short online 'Books' for different topics.\n  We can easily add books as they are written and group them on the\n top-level Learn page by category.\n\n A possible structure:\n\n  * Category: Getting started\n\n    * Book: *Quickstart tutorial* (existing tutorial)\n    * Book: *Fortran FAQ* (fortran90.org)\n    * Book: *Fortran for Python programmers* (fortran90.org)\n    * Book: *Fortran for C/C++ programmers* (see flang)\n    * Book: *Fortran best practices* (fortran90.org)\n    * Book: *Fortran community style guide*\n  * Category: Core Language Documentation\n\n    * Book: *Basic programming concepts* (types, variables, constants,\n arrays, operators, expressions, character strings)\n    * Book: *Program units* (scoping units, programs, procedures,\n modules, submodules) and control flow (conditional and looping\n constructs)\n    * Book: *Working with arrays* (static, automatic, allocatable,\n pointer, passing/returning arrays to/from procedures)\n    * Book: *Data input & output*\n  * Category Advanced Language Documentation\n\n    * Book: *Object-oriented Fortran*\n    * Book: *Submodules*\n    * Book: *C interoperability*\n This makes it easy for people of different abilities to quickly find\n relevant documentation.\n  Getting the structure perfect first time isn't important since we can\n adjust as content is added.\n\n The core and advanced documentation should eventually cover the whole\n language *in detail* as a searchable and *more accessible*\n (easier-to-read) alternative to the standards documents.\n\n Finally there should be a section at the bottom of the learn page with\n links to external resources: books, standards documents, mailing lists,\n fortranwiki etc.\n\n What do you think?\n\n \u2014\n You are receiving this because you commented.\n Reply to this email directly, view it on GitHub\n <#7 (comment)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAAFAWGGDTDM23JYL5PED7TRNLARVANCNFSM4MJ2C3VQ>."
                },
                {
                    "user": "vansnyder",
                    "date": "2020-05-05 01:02:03+00:00",
                    "text": "I've never used GitHub. I can't find anything. A tutorial how to use GitHub in the Fortran project context would be useful."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-05 17:24:53+00:00",
                    "text": "Hi @vansnyder, I'm happy you joined. I assume you need help finding your way around GitHub and getting used to its interface. There is GitHub Help documentation, but to be honest I don't think it will be helpful. Instead, I recommend just exploring and trying to find your way through practice. It looks quite busy at first but you get used to it.\nIf you'd like, I'm happy to get on a Zoom video call with you to guide you via shared screen. Just let me know.\nOtherwise, the best place for you to start is the J3 Fortran proposals repo:\nhttps://github.com/j3-fortran/fortran_proposals/issues\nYou will find many discussion topics there, a few of them evolved into J3 papers. I suggest to read those, and post in whichever you want.\n\nBut your point also makes me think of this: We should probably have a dedicated \"Contributor's guide\" page on the website that would explain:\n\nWhat is where, e.g. proposals, standard library, package manager, website code etc.\nBasic workflow for each project. E.g. workflow for proposals is different from the workflow for stdlib or fpm, which is different from that of the website code;\nA list of items that we need help with the most from new contributors.\n\nThis info is basically already in each of the repositories. However, a dedicated single-page guide for all fortran-lang projects on the website would be helpful for people who aren't already proficient with GitHub. We want everybody who is willing to be able to join and participate.\nHow do we further lower barrier to entry?"
                },
                {
                    "user": "melissawm",
                    "date": "2020-05-14 18:50:35+00:00",
                    "text": "I'd like to link this issue from stdlib. I think many of the points I raised there are valid here.\nI'd also like to offer to write the Contributor's Guide."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-15 17:58:37+00:00",
                    "text": "Like what @arjenmarkus said on the mailing list. the quickstart tutorial needs work and is IMO the highest priority to get into a somewhat polished and complete state.\nI will open a dedicated issue for that later today so we can discuss the contents and style."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-16 19:40:59+00:00",
                    "text": "@melissawm Great, a contributor's guide is direly needed if we are to attract new contributors.\nAre you thinking of a contributor's guide specifically for this repo, or for fortran-lang projects as a whole?\nEach project should have its own contributor's guide. This repo has this. Can you please take a look at it and think of how it could be improved?\nFurther, what do you think about having an overall contributor's guide which would be a page on the website, basically a guide to contributing to the community project as a whole, and then linking to individual project contributor guides?"
                }
            ]
        },
        {
            "number": 6,
            "user": "ivan-pi",
            "date": "2020-04-15 14:50:14+00:00",
            "title": "F18 information outdated",
            "text": "It seems that the F18 front-end branch has been accepted as the brand new flang and is part of the official LLVM project. The former flang compiler still exists here.\nI can take a shot at updating the page in the upcoming days, if no one else does it first.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-04-15 18:20:41+00:00",
                    "text": "Absolutely, let's fix it!"
                },
                {
                    "user": "certik",
                    "date": "2020-04-15 19:36:39+00:00",
                    "text": "Yes, I think it should be just called Flang."
                },
                {
                    "user": "LKedward",
                    "date": "2020-04-25 09:03:45+00:00",
                    "text": "@ivan-pi I believe this was fixed with #16 and can be closed?"
                },
                {
                    "user": "ivan-pi",
                    "date": "2020-04-25 11:10:02+00:00",
                    "text": "Sure. Great work!"
                }
            ]
        },
        {
            "number": 5,
            "user": "LKedward",
            "date": "2020-04-15 14:36:22+00:00",
            "title": "Start tutorials",
            "text": "I've added a stylesheet to enable syntax highlighting and made a start on writing tutorials.\nI've put a static preview here to make it easier to view this draft pull request.\nMy idea is to have self-contained tutorials targeting three different programming abilities:\n\n\nFor beginners: quite common to see undergraduates with little programming experience asked to pick up Fortran for science//engineering degrees\n\n\nIntermediate: for those with basic programming experience using another language like c or python\n\n\nAdvanced: for those who just want to pick up the Fortran syntax and advanced features (OOP etc.)\n\n\nI also think the Learn section can contain other articles for things like best practices and advanced/niche topics etc.\nI'm happy to put work into filling this out since compared to other programming languages there are fewer good quality online tutorials and examples which makes it less accessible.\nHappy to hear feedback and ideas.\nThanks for work so far @milancurcic, the site is looking good!",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "milancurcic",
                    "date": "2020-04-15 18:19:16+00:00",
                    "text": "Super nice work, thank you! I like most of it. I have some doubts about the 3-level categories of tutorials. I will write more tonight."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-04-16 15:39:39+00:00",
                    "text": "@certik Yes, I think so."
                },
                {
                    "user": "LKedward",
                    "date": "2020-04-16 17:08:56+00:00",
                    "text": "Thanks for the comments @milancurcic; you make some very good points which I agree with.\nIt shouldn't take long for me to consolidate current content onto the top page by tomorrow morning ready for merging."
                },
                {
                    "user": "LKedward",
                    "date": "2020-04-17 11:33:36+00:00",
                    "text": "I have completed the consolidated content (preview).\nFor review I ask:\n\nIf I have missed out any fundamental Fortran features?\nWhat technique should be recommended for real kinds?\n\nkind(0.0), kind(0.0d0)\niso_c_binding, only: c_float, c_double\niso_fortran_env, only: real32, real64"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-04-17 14:00:34+00:00",
                    "text": "Regarding your question about kinds, here's what we're currently doing in stdlib. This may change in the future, of course.\nThe higher level issue related to this is the Style Guide. There's currently a very minimal style guide in the stdlib repo, however, I think we should work on a Style Guide here (like a PEP8 for Python) that would then apply to all fortran-lang community projects."
                }
            ]
        },
        {
            "number": 4,
            "user": "milancurcic",
            "date": "2020-04-12 22:26:06+00:00",
            "title": "begin may 2020 newsletter draft",
            "text": "Draft newsletter for May 2020.\nTo be merged into master on May 1. Work on it until then.",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-04-24 21:29:14+00:00",
                    "text": "This should list all the news items that happened since the last newsletter."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-04-29 16:50:43+00:00",
                    "text": "First draft of May newsletter is up. Please review and suggest edits and/or additions. If you add content, please also add your name to the author field in the preamble.\nThis will be merged into master on Friday, May 1."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-04-29 17:46:13+00:00",
                    "text": "@jacobwilliams Do you have any Fortran positions open in your company to list here?"
                },
                {
                    "user": "jvdp1",
                    "date": "2020-04-30 05:50:24+00:00",
                    "text": "Question: could projects like your Fortran-Keras Bridge project be mentioned in this news letter?"
                },
                {
                    "user": "milancurcic",
                    "date": "2020-04-30 16:25:36+00:00",
                    "text": "@certik I added a section on WG5 convenor candidates and minor updates to stdlib news. Please review and edit as you see fit. I'm otherwise happy with this newsletter."
                },
                {
                    "user": "certik",
                    "date": "2020-04-30 16:26:29+00:00",
                    "text": "I am ok with the wording for my WG5 run."
                },
                {
                    "user": "certik",
                    "date": "2020-04-30 16:27:41+00:00",
                    "text": "Please do not merge yet."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-04-30 16:39:22+00:00",
                    "text": "@jvdp1 Good question. We discussed the scope to a limited extent in #3 .\nI don't know the answer. Originally I thought that personal projects should be out of scope for the newsletter. On the other side, it would be useful for readers to learn of new projects. They would need to be submitted for consideration, i.e. we don't want to list small toy projects that don't build or have docs. There would need to be some criterion on how to do this, like we have for including packages in the registry. I'm curious to hear what other think. Please write in #3. We don't have to rush for this newsletter, obviously we don't have a good idea yet how to do this.\nThis makes me think of another question: Should we include relevant (Fortran) new papers? I think yes if they're open access. Again, write in #3"
                },
                {
                    "user": "certik",
                    "date": "2020-04-30 16:42:27+00:00",
                    "text": "I would not delay this first newsletter, and I would not include personal projects yet. Let's figure out a process for that, and then we can list them in future newsletters.\nThe same with the job postings, it's kind of arbitrary now, but I think it's fine to list what is in there now to get started. None of these are \"our\" postings, so nobody will feel that we are just pushing our pet projects."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-04-30 16:47:58+00:00",
                    "text": "Yes, conflict of interest (even non-financial kind) is my main concern for announcing personal projects or job postings. We need a well documented process for this."
                },
                {
                    "user": "certik",
                    "date": "2020-04-30 17:00:29+00:00",
                    "text": "Yes, our main goal and job is to create home for Fortran, a community, tools, a platform for everybody, so we have to be very careful about conflicts of interest. We are in agreement."
                },
                {
                    "user": "jvdp1",
                    "date": "2020-04-30 17:19:11+00:00",
                    "text": "I agree about conflicts of interest. Let see first how the people react to this newsletter."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-05-01 13:38:01+00:00",
                    "text": "Thank you all. The newsletter is up: https://fortran-lang.org/newsletter/2020/05/01/Fortran-Newsletter-May-2020/. Please share it."
                },
                {
                    "user": "certik",
                    "date": "2020-05-01 19:30:29+00:00",
                    "text": "Thanks @milancurcic !"
                }
            ]
        },
        {
            "number": 3,
            "user": "milancurcic",
            "date": "2020-04-11 12:17:09+00:00",
            "title": "Newsletter",
            "text": "Let's discuss what should the fortran-lang newsletters be and how we should work on them.\nI posted an example newsletter in #2 yesterday. You can see the post here and the source file here. With Jekyll, like with most popular static site generators, you write posts in plain markdown, with html for any extras.\nTopics\nFirst, what topics/news should be covered by the newsletter. Here's my idea:\n\nEvents: conferences, meetups, and similar. These could be either announcements for upcoming events or briefings/reports from events that happened. They should be related to Fortran. A NumPy or weather prediction conference is probably off-topic. Fortran or HPC meetings are on topic.\nUpdates from J3 and WG5 meetings and developments of the language. Highlight proposals discussed. Like what @certik has been posting directly in issues in j3-fortran/fortran_proposals.\nFortran compiler releases\nNew development in fortran-lang projects: For example, highlighting new modules or functions in stdlib, or new fpm capability.\nNew packages available in the fpm registry.\nLast but not least, new Fortran releases (202x, 202y...). This one's pretty obvious. :)\nAnything else?\n\nWhat I think should be off-topic and omitted in newsletters:\n\nPersonal (non-community) Fortran projects, except listing them when they're added to the fpm registry.\nNews not directly about Fortran but that could be interesting to Fortran developers. Stuff about other languages etc.\n\nFormat\nI think we could have two kinds of newsletters:\n\nOff-schedule, topic-specific. This kind of newsletter covers only one item that is noteworthy. Examples: Fortran meetings, language releases, perhaps even compiler releases.\nMonthly, recurring. This kind of newsletter comes out periodically at the beginning of each month, summarizing the Fortran development and news from the previous month. It's formatted more as a summary rather than an in-depth coverage of a topic, so it can include on-topic odds and ends.\n\nHow should we work on it\nHere's what I propose:\n\nAnybody can open a PR for a newsletter\nMust assign a reviewer/editor. Can assign more than one if desired, ideally not too many. You don't want to have to wait for 5 people to review if you want timely news to go out.\nOf course, anybody can comment. If somebody thinks a PR doesn't make appropriate newsletter, they should say so.\nFor a monthly recurring newsletter, I suggest we open a draft PR at the beginning of each month, and we work on it as the month goes and new stuff happens. At the end of the month, we clean it up and merge.\n\nObviously, my PR #2 was not an example of this workflow. I just wanted to get something up quickly to use as an example.\nWe can automate posting of new newsletters to the @fortranlang Twitter using this. For people who use RSS readers, we have a feed on the website.\nWhat do you think? @certik @jvdp1 @ivan-pi @everythingfunctional @jacobwilliams @marshallward @zbeekman",
            "is_open": true,
            "labels": [
                "news"
            ],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-04-11 14:53:07+00:00",
                    "text": "I agree with everything you wrote. This is a good start. As we go, we can further refine or relax some of the rules.\n\u2026\nOn Sat, Apr 11, 2020, at 6:17 AM, Milan Curcic wrote:\n\n\n Let's discuss what should the fortran-lang newsletters be and how we\n should work on them.\n\n I posted an example newsletter in #2\n <#2>\n yesterday. You can see the post here\n <https://fortran-lang.org/newsletter/2020/04/06/Announcing-FortranCon-2020/> and the source file here <https://raw.githubusercontent.com/fortran-lang/fortran-lang.github.io/master/_posts/2020-04-06-Announcing-FortranCon-2020.md>. With Jekyll, like with most popular static site generators, you write posts in plain markdown, with html for any extras.\n\n Topics\n\n First, what topics/news should be covered by the newsletter. Here's my idea:\n\n  * Events: conferences, meetups, and similar. These could be either\n announcements for upcoming events or briefings/reports from events that\n happened. They should be related to Fortran. A NumPy or weather\n prediction conference is probably off-topic. Fortran or HPC meetings\n are on topic.\n  * Updates from J3 and WG5 meetings and developments of the language.\n Highlight proposals discussed. Like what @certik\n <https://github.com/certik> has been posting directly in issues in\n j3-fortran/fortran_proposals.\n  * Fortran compiler releases\n  * New development in fortran-lang projects: For example, highlighting\n new modules or functions in stdlib, or new fpm capability.\n  * New packages available in the fpm registry.\n  * Last but not least, new Fortran releases (202x, 202y...). This one's\n pretty obvious. :)\n  * Anything else?\n What I think should be off-topic and omitted in newsletters:\n\n  * Personal (non-community) Fortran projects, except listing them when\n they're added to the fpm registry.\n  * News not directly about Fortran but that could be interesting to\n Fortran developers. Stuff about other languages etc.\n Format\n\n I think we could have two kinds of newsletters:\n\n  * Off-schedule, topic-specific. This kind of newsletter covers only\n one item that is noteworthy. Examples: Fortran meetings, language\n releases, perhaps even compiler releases.\n  * Monthly, recurring. This kind of newsletter comes out periodically\n at the beginning of each month, summarizing the Fortran development and\n news from the previous month. It's formatted more as a summary rather\n than an in-depth coverage of a topic, so it can include on-topic odds\n and ends.\n How should we work on it\n\n Here's what I propose:\n\n  * Anybody can open a PR for a newsletter\n  * Must assign a reviewer/editor. Can assign more than one if desired,\n ideally not too many. You don't want to have to wait for 5 people to\n review if you want timely news to go out.\n  * Of course, anybody can comment. If somebody thinks a PR doesn't make\n appropriate newsletter, they should say so.\n  * For a monthly recurring newsletter, I suggest we open a draft PR at\n the beginning of each month, and we work on it as the month goes and\n new stuff happens. At the end of the month, we clean it up and merge.\n Obviously, my PR #2\n <#2> was not\n an example of this workflow. I just wanted to get something up quickly\n to use as an example.\n\n I will do some research how we can automate posting of new newsletters\n to the @fortranlang Twitter automatically, perhaps via GitHub Actions.\n For people who use RSS readers, we have a feed on the website.\n\n What do you think? @certik <https://github.com/certik> @jvdp1\n <https://github.com/jvdp1> @ivan-pi <https://github.com/ivan-pi>\n @everythingfunctional <https://github.com/everythingfunctional>\n @jacobwilliams <https://github.com/jacobwilliams> @marshallward\n <https://github.com/marshallward> @zbeekman\n <https://github.com/zbeekman>\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#3>, or\n unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AAAFAWGVXFLSFXIVUCOQN43RMBNVDANCNFSM4MF7KBSQ>."
                },
                {
                    "user": "everythingfunctional",
                    "date": "2020-04-11 17:55:20+00:00",
                    "text": "That sounds well thought out and reasonable. I like it."
                },
                {
                    "user": "milancurcic",
                    "date": "2020-04-12 21:51:59+00:00",
                    "text": "I just thought it'd also be useful for the monthly newsletter to have a list of Fortran job postings."
                },
                {
                    "user": "certik",
                    "date": "2020-04-30 15:54:06+00:00",
                    "text": "The first newsletter is on the way at #4. Before we close this issue, let's create a document with information how the newsletter works. @milancurcic do you want to take a stab at that?"
                },
                {
                    "user": "awvwgk",
                    "date": "2021-05-22 09:59:03+00:00",
                    "text": "I created a wiki page on the monthly newsletter here. Summarizing parts of the workflow, contributions are welcome.\nDiscourse thread: https://fortran-lang.discourse.group/t/monthly-newsletter-organisation/1278"
                }
            ]
        },
        {
            "number": 2,
            "user": "milancurcic",
            "date": "2020-04-11 00:57:14+00:00",
            "title": "Update FortranCon post",
            "text": "",
            "is_open": false,
            "labels": [],
            "comments": []
        },
        {
            "number": 1,
            "user": "milancurcic",
            "date": "2020-04-10 15:13:45+00:00",
            "title": "Update J3 February meeting update",
            "text": "@certik When you have some time, can you please post your J3 February meeting update in this file:\nhttps://github.com/fortran-lang/fortran-lang.github.io/blob/master/_posts/2020-02-25-J3-february-meeting.md",
            "is_open": false,
            "labels": [],
            "comments": [
                {
                    "user": "certik",
                    "date": "2020-04-10 15:57:42+00:00",
                    "text": "Yes! Thank you. I'll do it very soon."
                },
                {
                    "user": "certik",
                    "date": "2020-04-30 15:55:39+00:00",
                    "text": "This has been fixed in #29, #30 and #42. The result is visible at:\nhttps://fortran-lang.org/newsletter/2020/02/28/J3-february-meeting/"
                }
            ]
        }
    ],
    "issue_labels": {
        "bug": "Something isn't working",
        "learn": "Related to the learning resources",
        "easy": "Difficulty level is easy and good for starting into this project",
        "news": "Related to announcements and newsletters on the webpage",
        "duplicate": "This issue or pull request already exists",
        "packages": "Related to the package index",
        "question": "Further information is requested",
        "dependencies": "Pull requests that update a dependency file",
        "help wanted": "Extra attention is needed",
        "compiler": "Issue regarding compiler specific information and data",
        "documentation": "Improvements or additions to documentation",
        "wontfix": "This will not be worked on",
        "enhancement": "New feature or request",
        "i18n": "Related to internationalisation and translations",
        "good first issue": "Good for newcomers",
        "spam": "This doesn't seem right"
    }
}