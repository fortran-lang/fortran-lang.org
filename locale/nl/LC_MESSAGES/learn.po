# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Fortran Community
# This file is distributed under the same license as the Fortran-lang.org
# website package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Fortran-lang.org website \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-07-24 15:42+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../source/learn.rst:4
msgid "Learn"
msgstr ""

#: ../../source/learn.rst:12
msgid "Learn Fortran"
msgstr ""

#: ../../source/learn.rst:16
msgid "Learning resources for beginners and experts alike"
msgstr ""

#: ../../source/learn.rst:20
msgid "Getting Started"
msgstr ""

#: ../../source/learn.rst:33
msgid ""
"Try the quickstart Fortran tutorial, to get an overview of the language "
"syntax and capabilities. |br|"
msgstr ""

#: ../../source/learn.rst:35
msgid ""
"<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon "
"sd-octicon-book sd-text-info\" viewBox=\"0 0 16 16\" aria-"
"hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M0 1.75A.75.75 0 01.75 "
"1h4.253c1.227 0 2.317.59 3 1.501A3.744 3.744 0 0111.006 1h4.245a.75.75 0 "
"01.75.75v10.5a.75.75 0 01-.75.75h-4.507a2.25 2.25 0 "
"00-1.591.659l-.622.621a.75.75 0 01-1.06 0l-.622-.621A2.25 2.25 0 005.258 "
"13H.75a.75.75 0 01-.75-.75V1.75zm8.755 3a2.25 2.25 0 "
"012.25-2.25H14.5v9h-3.757c-.71 0-1.4.201-1.992.572l.004-7.322zm-1.504 "
"7.324l.004-5.073-.002-2.253A2.25 2.25 0 005.003 2.5H1.5v9h3.757a3.75 3.75"
" 0 011.994.574z\"></path></svg> Quickstart tutorial"
msgstr ""

#: ../../source/learn.rst:53
msgid ""
"Ask a question in the Fortran-lang discourse - a forum for friendly "
"discussion of all things Fortran. |br|"
msgstr ""

#: ../../source/learn.rst:55
msgid ""
"<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon "
"sd-octicon-check-circle sd-text-info\" viewBox=\"0 0 16 16\" aria-"
"hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M1.5 8a6.5 6.5 0 1113 0 "
"6.5 6.5 0 01-13 0zM0 8a8 8 0 1116 0A8 8 0 010 8zm11.78-1.72a.75.75 0 "
"00-1.06-1.06L6.75 9.19 5.28 7.72a.75.75 0 00-1.06 1.06l2 2a.75.75 0 "
"001.06 0l4.5-4.5z\"></path></svg> Fortran-lang Discourse"
msgstr ""

#: ../../source/learn.rst:65
msgid "Mini-book Tutorials"
msgstr ""

#: ../../source/learn.rst:69
#: ../../source/learn/building_programs/project_make.md:38
msgid "Getting started"
msgstr ""

#: ../../source/learn.rst:83
msgid "Fortran Documentation"
msgstr ""

#: ../../source/learn.rst:97
msgid "Other Resources"
msgstr ""

#: ../../source/learn.rst:101
msgid "On the web"
msgstr ""

#: ../../source/learn.rst:116
msgid "Online Courses"
msgstr ""

#: ../../source/learn.rst:129
msgid "In print"
msgstr ""

#: ../../source/learn/best_practices/allocatable_arrays.md:8
msgid "Allocatable Arrays"
msgstr ""

#: ../../source/learn/best_practices/allocatable_arrays.md:10
msgid ""
"The ``allocatable`` attribute provides a safe way for memory handling. In"
" comparison to variables with ``pointer`` attribute the memory is managed"
" automatically and will be deallocated automatically once the variable "
"goes out-of-scope. Using ``allocatable`` variables removes the "
"possibility to create memory leaks in an application."
msgstr ""

#: ../../source/learn/best_practices/allocatable_arrays.md:16
msgid ""
"They can be used in subroutines to create scratch or work arrays, where "
"automatic arrays would become too large to fit on the stack."
msgstr ""

#: ../../source/learn/best_practices/allocatable_arrays.md:24
msgid ""
"The allocation status can be checked using the ``allocated`` intrinsic to"
" avoid uninitialized access"
msgstr ""

#: ../../source/learn/best_practices/allocatable_arrays.md:37
msgid ""
"To allocate variables inside a procedure the dummy argument has to carry "
"the ``allocatable`` attribute. Using it in combination with "
"``intent(out)`` will deallocate previous allocations before entering the "
"procedure:"
msgstr ""

#: ../../source/learn/best_practices/allocatable_arrays.md:48
msgid "The allocated array can be used afterwards like a normal array"
msgstr ""

#: ../../source/learn/best_practices/allocatable_arrays.md:55
msgid ""
"An already allocated array cannot be allocated again without prior "
"deallocation. Similarly, deallocation can only be invoked for allocated "
"arrays. To reallocate an array use"
msgstr ""

#: ../../source/learn/best_practices/allocatable_arrays.md:64
msgid ""
"Passing allocated arrays to procedures does not require the "
"``allocatable`` attribute for the dummy arguments anymore."
msgstr ""

#: ../../source/learn/best_practices/allocatable_arrays.md:87
msgid ""
"Passing an unallocated array in this context will lead to an invalid "
"memory access. Allocatable arrays can be passed to ``optional`` dummy "
"arguments -- if they are unallocated the argument will not be present. "
"The ``allocatable`` attribute is not limited to arrays and can also be "
"associated with scalars, which can be useful in combination with "
"``optional`` dummy arguments."
msgstr ""

#: ../../source/learn/best_practices/allocatable_arrays.md:93
msgid ""
"Allocations can be moved between different arrays with ``allocatable`` "
"attribute using the ``move_alloc`` intrinsic subroutine."
msgstr ""

#: ../../source/learn/best_practices/allocatable_arrays.md:125
msgid ""
"Finally, allocations do not initialize the array. The content of the "
"uninitialized array is most likely just the bytes of whatever was "
"previously at the respective address. The allocation supports "
"initialization using the source attribute:"
msgstr ""

#: ../../source/learn/best_practices/allocatable_arrays.md:134
msgid ""
"The ``source`` keyword supports scalar and array valued variables and "
"constants."
msgstr ""

#: ../../source/learn/best_practices/arrays.md:8
msgid "Arrays"
msgstr ""

#: ../../source/learn/best_practices/arrays.md:10
msgid ""
"Arrays are a central object in Fortran. The creation of dynamic sized "
"arrays is discussed in the [allocatable arrays "
"section](./allocatable_arrays.html)."
msgstr ""

#: ../../source/learn/best_practices/arrays.md:13
msgid "To pass arrays to procedures four ways are available"
msgstr ""

#: ../../source/learn/best_practices/arrays.md:15
msgid "*assumed-shape* arrays"
msgstr ""

#: ../../source/learn/best_practices/arrays.md:16
msgid "*assumed-rank* arrays"
msgstr ""

#: ../../source/learn/best_practices/arrays.md:17
#: ../../source/learn/best_practices/element_operations.md:13
msgid "*explicit-shape* arrays"
msgstr ""

#: ../../source/learn/best_practices/arrays.md:18
msgid "*assumed-size* arrays"
msgstr ""

#: ../../source/learn/best_practices/arrays.md:20
msgid ""
"The preferred way to pass arrays to procedures is as *assumed-shape* "
"arrays"
msgstr ""

#: ../../source/learn/best_practices/arrays.md:33
msgid "Higher-dimensional arrays can be passed in a similar way."
msgstr ""

#: ../../source/learn/best_practices/arrays.md:42
msgid "The array is simply passed by"
msgstr ""

#: ../../source/learn/best_practices/arrays.md:49
msgid ""
"In this case no array copy is done, which has the advantage that the "
"shape and size information is automatically passed along and checked at "
"compile and optionally at runtime. Similarly, array strides can be passed"
" without requiring a copy of the array but as *assumed-shape* descriptor:"
msgstr ""

#: ../../source/learn/best_practices/arrays.md:61
msgid ""
"This should always be your default way of passing arrays in and out of "
"subroutines. Avoid passing arrays as whole slices, as it obfuscates the "
"actual intent of the code:"
msgstr ""

#: ../../source/learn/best_practices/arrays.md:69
msgid ""
"In case more general arrays should be passed to a procedure the *assumed-"
"rank* functionality introduced in the Fortran 2018 standard can be used"
msgstr ""

#: ../../source/learn/best_practices/arrays.md:84
msgid ""
"The actual rank can be queried at runtime using the ``select rank`` "
"construct. This easily allows to create more generic functions that have "
"to deal with different array ranks."
msgstr ""

#: ../../source/learn/best_practices/arrays.md:88
msgid ""
"*Explicit-shape* arrays can be useful for returning data from functions. "
"Most of their functionality can be provided by *assumed-shape* and "
"*assumed-rank* arrays but they find frequent use for interfacing with C "
"or in legacy Fortran procedures, therefore they will be discussed briefly"
" here."
msgstr ""

#: ../../source/learn/best_practices/arrays.md:93
msgid ""
"To use *explicit-shape* arrays, the dimension has to be passed explicitly"
" as dummy argument like in the example below"
msgstr ""

#: ../../source/learn/best_practices/arrays.md:107
msgid "For high-dimensional arrays additional indices have to be passed."
msgstr ""

#: ../../source/learn/best_practices/arrays.md:117
msgid "The routines can be invoked by"
msgstr ""

#: ../../source/learn/best_practices/arrays.md:125
msgid ""
"Note that the shape is not checked, so the following would be legal code "
"that will potentially yield incorrect results:"
msgstr ""

#: ../../source/learn/best_practices/arrays.md:134
msgid ""
"In this case the memory layout is preserved but the shape is changed. "
"Also, *explicit-shape* arrays require contiguous memory and will create "
"temporary arrays in case non-contiguous array strides are passed."
msgstr ""

#: ../../source/learn/best_practices/arrays.md:138
msgid "To return an array from a function with *explicit-shape* use"
msgstr ""

#: ../../source/learn/best_practices/arrays.md:151
msgid ""
"Finally, there are *assumed-size* arrays, which provide the least "
"compile-time and run-time checking and can be found frequently in legacy "
"code. They should be avoided in favour of *assumed-shape* or *assumed-"
"rank* arrays. An *assumed-size* array dummy argument is identified by an "
"asterisk as the last dimension, this disables the usage of this array "
"with many intrinsic functions, like ``size`` or ``shape``."
msgstr ""

#: ../../source/learn/best_practices/arrays.md:158
msgid ""
"To check for the correct size and shape of an *assumed-shape* array the "
"``size`` and ``shape`` intrinsic functions can be used to query for those"
" properties"
msgstr ""

#: ../../source/learn/best_practices/arrays.md:166
msgid ""
"Note that ``size`` returns the total size of all dimensions. To obtain "
"the shape of a specific dimension add it as second argument to the "
"function."
msgstr ""

#: ../../source/learn/best_practices/arrays.md:169
msgid "Arrays can be initialized by using an array constructor"
msgstr ""

#: ../../source/learn/best_practices/arrays.md:176
msgid ""
"The array constructor can be annotated with the type of the constructed "
"array"
msgstr ""

#: ../../source/learn/best_practices/arrays.md:183
msgid "Implicit do loops can be used inside an array constructor as well"
msgstr ""

#: ../../source/learn/best_practices/arrays.md:191
msgid "In order for the array to start with different index than 1, do:"
msgstr ""

#: ../../source/learn/best_practices/callbacks.md:8
msgid "Callbacks"
msgstr ""

#: ../../source/learn/best_practices/callbacks.md:10
msgid ""
"A callback is a function that is passed as an argument to another "
"function."
msgstr ""

#: ../../source/learn/best_practices/callbacks.md:12
msgid ""
"The preferred way of creating such a callback is to provide an *abstract "
"interface* declaring the signature of the callback. This allows to use "
"compile time checks for the passed callback."
msgstr ""

#: ../../source/learn/best_practices/callbacks.md:44
msgid ""
"The function can then be used with a callback by importing the module as "
"shown in the following example"
msgstr ""

#: ../../source/learn/best_practices/callbacks.md:73
msgid ""
"Exporting the abstract interface allows you to create procedure pointers "
"with the correct signature and also to extend the callback further as "
"shown here"
msgstr ""

#: ../../source/learn/best_practices/element_operations.md:8
msgid "Element-wise Operations on Arrays"
msgstr ""

#: ../../source/learn/best_practices/element_operations.md:10
msgid ""
"There are three approaches to perform element-wise operations on arrays "
"when using subroutines and functions:"
msgstr ""

#: ../../source/learn/best_practices/element_operations.md:12
msgid "`elemental` procedures"
msgstr ""

#: ../../source/learn/best_practices/element_operations.md:14
msgid ""
"implementing the operation for vectors and write simple wrapper "
"subroutines (that use `reshape` internally) for each array shape"
msgstr ""

#: ../../source/learn/best_practices/element_operations.md:17
msgid ""
"In the first approach, one uses the `elemental` keyword to create a "
"function like this:"
msgstr ""

#: ../../source/learn/best_practices/element_operations.md:28
msgid ""
"All arguments (in and out) must be scalars. You can then use this "
"function with arrays of any (compatible) shape, for example:"
msgstr ""

#: ../../source/learn/best_practices/element_operations.md:39
msgid "The output will be:"
msgstr ""

#: ../../source/learn/best_practices/element_operations.md:49
msgid ""
"In the above, typically `n` is a parameter and `x` is the array of an "
"arbitrary shape, but as you can see, Fortran does not care as long as the"
" final operation makes sense (if one argument is an array, then the other"
" arguments must be either arrays of the same shape or scalars). If it "
"does not, you will get a compiler error."
msgstr ""

#: ../../source/learn/best_practices/element_operations.md:55
msgid ""
"The `elemental` keyword implies the `pure` keyword, so the procedure must"
" be pure. It results that `elemental procedures` can only use `pure` "
"procedures and have no side effects."
msgstr ""

#: ../../source/learn/best_practices/element_operations.md:58
msgid ""
"If the elemental procedure algorithm can be made faster using array "
"operations inside, or if for some reasons the arguments must be arrays of"
" incompatible shapes, then one should use the other two approaches. One "
"can make `nroot` operate on a vector and write a simple wrapper for other"
" array shapes, e.g.:"
msgstr ""

#: ../../source/learn/best_practices/element_operations.md:89
msgid "And use as follows:"
msgstr ""

#: ../../source/learn/best_practices/element_operations.md:97
msgid "This will print:"
msgstr ""

#: ../../source/learn/best_practices/element_operations.md:105
msgid "Or one can use *explicit-shape* arrays as follows:"
msgstr ""

#: ../../source/learn/best_practices/element_operations.md:117
msgid "Use as follows:"
msgstr ""

#: ../../source/learn/best_practices/element_operations.md:125
msgid "The output is the same as before:"
msgstr ""

#: ../../source/learn/best_practices/file_io.md:8
msgid "File Input/Output"
msgstr ""

#: ../../source/learn/best_practices/file_io.md:10
msgid ""
"In Fortran files are managed by unit identifiers. Interaction with the "
"filesystem mainly happens through the ``open`` and ``inquire`` built-in "
"procedures. Generally, the workflow is to open a file to a unit "
"identifier, read and/or write to it and close it again."
msgstr ""

#: ../../source/learn/best_practices/file_io.md:22
msgid ""
"By default the file will be created if it is not existing already and "
"opened for both reading and writing. Writing to an existing file will "
"start in the first record (line) and therefore overwrite the file by "
"default."
msgstr ""

#: ../../source/learn/best_practices/file_io.md:26
msgid ""
"To create a read-only access to a file the ``status`` and ``action`` have"
" to be specified with"
msgstr ""

#: ../../source/learn/best_practices/file_io.md:36
msgid ""
"In case the file is not present a runtime error will occur. To check for "
"the existence of a file prior to opening it the ``inquire`` function can "
"be used"
msgstr ""

#: ../../source/learn/best_practices/file_io.md:47
msgid ""
"Alternatively, the ``open`` procedure can return an optional *iostat* and"
" *iomsg*:"
msgstr ""

#: ../../source/learn/best_practices/file_io.md:59
msgid ""
"Note that *iomsg* requires a fixed-length character variable with "
"sufficient storage size to hold the error message."
msgstr ""

#: ../../source/learn/best_practices/file_io.md:62
msgid ""
"Similarly, writing to a file happens by using the *status* and *action* "
"keyword. To create a new file use"
msgstr ""

#: ../../source/learn/best_practices/file_io.md:72
msgid ""
"Alternatively, ``status=\"replace\"`` can be used to overwrite an "
"existing file. It is highly recommended to first check for the existence "
"of a file before deciding on the *status* to use. To append to an output "
"file the *position* keyword can be specified explicitly with"
msgstr ""

#: ../../source/learn/best_practices/file_io.md:86
msgid ""
"To reset the position in a file the built-in procedures ``rewind`` and "
"``backspace`` can be used. ``rewind`` will reset to the first record "
"(line), while ``backspace`` will return to the previous record (line)."
msgstr ""

#: ../../source/learn/best_practices/file_io.md:90
msgid ""
"Finally, to delete a file the file has to be opened and can be deleted "
"after closing with"
msgstr ""

#: ../../source/learn/best_practices/file_io.md:103
msgid ""
"A useful IO feature is scratch files, which can be opened with "
"``status=\"scratch\"``. They are automatically deleted after closing the "
"unit identifier."
msgstr ""

#: ../../source/learn/best_practices/floating_point.md:8
msgid "Floating Point Numbers"
msgstr ""

#: ../../source/learn/best_practices/floating_point.md:10
msgid ""
"The default representation of floating point numbers is using single "
"precision (usually 32 bits / 4 bytes). For most applications a higher "
"precision is required. For this purpose a custom kind parameter can be "
"defined. The recommended way of defining kind parameters is to use"
msgstr ""

#: ../../source/learn/best_practices/floating_point.md:19
msgid ""
"For many purposes it also suffices to directly infer the kind parameter "
"from a literal like here"
msgstr ""

#: ../../source/learn/best_practices/floating_point.md:26
msgid ""
"or to rename the imported kind parameter from the ``iso_fortran_env`` "
"module"
msgstr ""

#: ../../source/learn/best_practices/floating_point.md:32
msgid ""
"For some insightful thoughts on kind parameters see <a "
"href=\"https://web.archive.org/web/20200930090137/https://stevelionel.com/drfortran/2017/03/27"
"/doctor-fortran-in-it-takes-all-kinds/\">Doctor Fortran in it takes all "
"KINDs</a>."
msgstr ""

#: ../../source/learn/best_practices/floating_point.md:35
msgid ""
"It is recommended to have a central module to define kind parameters and "
"include them with use as necessary. An example for such a module is given"
" with"
msgstr ""

#: ../../source/learn/best_practices/floating_point.md:63
msgid ""
"Floating point constants should always be declared including a kind "
"parameter suffix:"
msgstr ""

#: ../../source/learn/best_practices/floating_point.md:72
msgid ""
"It is safe to assign integers to floating point numbers without losing "
"accuracy:"
msgstr ""

#: ../../source/learn/best_practices/floating_point.md:79
msgid ""
"In order to impose floating point division (as opposed to integer "
"division `3/4` equal to `0`), one can convert the integer to a floating "
"point number by:"
msgstr ""

#: ../../source/learn/best_practices/floating_point.md:88
msgid "or simply separate the integer division with multiplication by `1.0_dp`"
msgstr ""

#: ../../source/learn/best_practices/floating_point.md:95
msgid ""
"To print floating point numbers without losing precision use the "
"unlimited format specifier ``(g0)`` or the exponential representation "
"``(es24.16e3)``, which will give you 17 significant digits of printout."
msgstr ""

#: ../../source/learn/best_practices/index.md:17
msgid "allocatable arrays"
msgstr ""

#: ../../source/learn/best_practices/index.md:17
msgid "file io"
msgstr ""

#: ../../source/learn/best_practices/index.md:17
msgid "modules programs"
msgstr ""

#: ../../source/learn/best_practices/index.md:17
msgid "arrays"
msgstr ""

#: ../../source/learn/best_practices/index.md:17
msgid "floating point"
msgstr ""

#: ../../source/learn/best_practices/index.md:17
msgid "multidim arrays"
msgstr ""

#: ../../source/learn/best_practices/index.md:17
msgid "callbacks"
msgstr ""

#: ../../source/learn/best_practices/index.md:17
msgid "style guide"
msgstr ""

#: ../../source/learn/best_practices/index.md:17
msgid "element operations"
msgstr ""

#: ../../source/learn/best_practices/index.md:17
msgid "integer division"
msgstr ""

#: ../../source/learn/best_practices/index.md:17
msgid "type casting"
msgstr ""

#: ../../source/learn/best_practices/index.md:9
msgid "Fortran Best Practices"
msgstr ""

#: ../../source/learn/best_practices/index.md:11
msgid ""
"This mini-book collects a modern canonical way of doing things in "
"Fortran. It serves as a style guide and best practice recommendation for "
"popular topics and common tasks. Generally, a canonical solution or "
"pattern is presented and discussed. It is meant for programmers with "
"basic familiarity of the Fortran syntax and programming in general."
msgstr ""

#: ../../source/learn/best_practices/integer_division.md:8
msgid "Integer Division"
msgstr ""

#: ../../source/learn/best_practices/integer_division.md:10
msgid ""
"Fortran distinguishes between floating point and integer arithmetic.  It "
"is important to note that division for integers is always using integer "
"arithmetic. Furthermore, while Fortran uses the standard order-of-"
"operations (e.g. multiplication and division preceed addition and "
"subtraction, in the absence of parenthesis), operations of the same "
"precedence are evaluated from left to right.  Consider the following "
"example for integer division of an odd number:"
msgstr ""

#: ../../source/learn/best_practices/integer_division.md:28
msgid ""
"Be careful about whether you want to actually use integer arithmetic in "
"this context. If you want to use floating point arithmetic instead make "
"sure to cast to reals before using the division operator, or separate the"
" integers by multiplying by `1.0_dp`:"
msgstr ""

#: ../../source/learn/best_practices/modules_programs.md:8
msgid "Modules and Programs"
msgstr ""

#: ../../source/learn/best_practices/modules_programs.md:10
msgid ""
"Modules are the preferred way create modern Fortran libraries and "
"applications. As a convention, one source file should always contain only"
" one module, while the module name should match the filepath to allow "
"easy navigation in larger projects. It is also recommended to prefix "
"module names with the library name to avoid name clashes when used as "
"dependency in other projects."
msgstr ""

#: ../../source/learn/best_practices/modules_programs.md:16
msgid "An example for such a module file is given here"
msgstr ""

#: ../../source/learn/best_practices/modules_programs.md:52
msgid ""
"There are a few things in this example module to highlight. First, every "
"module starts with comments documenting the purpose and content of the "
"module. Similarly, every procedure starts with a comment briefly "
"describing its purpose and the intent of the dummy arguments. "
"Documentation is one of the most important parts of creating long-living "
"software, regardless of language."
msgstr ""

#: ../../source/learn/best_practices/modules_programs.md:58
msgid ""
"Second, imports (*use*) and exports (*public*) are explicitly given, this"
" allows on a glance at the module source to check the used and available "
"procedures, constants and derived types. The imports are usually limited "
"to the module scope rather than reimported in every procedure or "
"interface scope. Similarly, exports are made explicitly by adding a "
"*private* statement on a single line and explicitly listing all exported "
"symbols in *public* statements."
msgstr ""

#: ../../source/learn/best_practices/modules_programs.md:66
msgid ""
"Finally, the `implicit none` statement works for the whole module and "
"there is no need to repeat it within each procedure."
msgstr ""

#: ../../source/learn/best_practices/modules_programs.md:69
msgid ""
"Variables inside a module are static (*implicitly saved*). It is highly "
"recommended to limit the usage of module variables to constant "
"expressions, like parameters or enumerators only or export them as "
"*protected* rather than *public*."
msgstr ""

#: ../../source/learn/best_practices/modules_programs.md:74
msgid ""
"Submodules can be used to break long dependency chains and shorten "
"recompilation cascades in Fortran programs. They also offer the "
"possibility to provide specialized and optimized implementations without "
"requiring the use of preprocessor."
msgstr ""

#: ../../source/learn/best_practices/modules_programs.md:78
msgid ""
"An example from the Fortran standard library is the quadrature module, "
"which only defines interfaces to module procedures, but no "
"implementations"
msgstr ""

#: ../../source/learn/best_practices/modules_programs.md:111
msgid ""
"While the implementation is provided in separate submodules like the one "
"for the trapezoidal integration rule given here."
msgstr ""

#: ../../source/learn/best_practices/modules_programs.md:145
msgid ""
"Note that the module procedures do not have to be implemented in the same"
" submodule. Several submodules can be used to reduce the compilation load"
" for huge modules."
msgstr ""

#: ../../source/learn/best_practices/modules_programs.md:148
msgid ""
"Finally, when setting up a program, it is recommended to keep the actual "
"implementations in the program body at minimum. Reusing implementations "
"from modules allows you to write  reusable code and focus the program "
"unit on conveying user input to the respective library  functions and "
"objects."
msgstr ""

#: ../../source/learn/best_practices/multidim_arrays.md:8
msgid "Multidimensional Arrays"
msgstr ""

#: ../../source/learn/best_practices/multidim_arrays.md:10
msgid ""
"Multidimensional arrays are stored in column-major order. This means the "
"left-most (inner-most) index addresses elements contiguously. From a "
"practical point this means that the array slice ``V(:, 1)`` is "
"contiguous, while the stride between elements in the slice ``V(1, :)`` is"
" the dimension of the columns. This is important when passing array "
"slices to procedures which expect to work on contiguous data."
msgstr ""

#: ../../source/learn/best_practices/multidim_arrays.md:17
msgid ""
"The locality of the memory is important to consider depending on your "
"application, usually when performing operations on a multidimensional the"
" sequential access should always advance in unity strides."
msgstr ""

#: ../../source/learn/best_practices/multidim_arrays.md:21
msgid ""
"In the following example the inverse distance between two sets of points "
"is evaluated. Note that the points are stored contiguously in the arrays "
"``xyz1``/``xyz2``, while the inner-most loop is advancing the left-most "
"index of the matrix ``a``."
msgstr ""

#: ../../source/learn/best_practices/multidim_arrays.md:40
msgid ""
"Another example would be the contraction of the third dimension of a rank"
" three array:"
msgstr ""

#: ../../source/learn/best_practices/multidim_arrays.md:53
msgid ""
"Contiguous array slices can be used in array-bound remapping to allow "
"usage of higher rank arrays as lower rank arrays without requiring to "
"reshape and potentially create a temporary copy of the array."
msgstr ""

#: ../../source/learn/best_practices/multidim_arrays.md:57
msgid ""
"For example this can be used to contract the third dimension of a rank "
"three array using a matrix-vector operation:"
msgstr ""

#: ../../source/learn/best_practices/style_guide.md:8
msgid "Fortran Style Guide"
msgstr ""

#: ../../source/learn/best_practices/style_guide.md:10
msgid "Naming Convention"
msgstr ""

#: ../../source/learn/best_practices/style_guide.md:13
msgid ""
"Ultimately this is a matter of preference. Here is a style guide that we "
"like and that seems to be prevalent in most scientific codes (as well as "
"the Fortran standard library), and you are welcome to follow it."
msgstr ""

#: ../../source/learn/best_practices/style_guide.md:17
msgid ""
"Use lowercase for all Fortran constructs (`do`, `subroutine`, `module`, "
"...)."
msgstr ""

#: ../../source/learn/best_practices/style_guide.md:19
msgid ""
"Follow short mathematical notation for mathematical variables/functions "
"(`Ylm`, `Gamma`, `gamma`, `Enl`, `Rnl`, ...)."
msgstr ""

#: ../../source/learn/best_practices/style_guide.md:21
msgid ""
"For other names use all lowercase: try to keep names to one or two "
"syllables; if more are required, use underscores to clarify (`sortpair`, "
"`whitechar`, `meshexp`, `numstrings`, `linspace`, `meshgrid`, `argsort`, "
"`spline`, `spline_interp`, `spline_interpolate`, `stoperr`, `stop_error`,"
" `meshexp_der`)."
msgstr ""

#: ../../source/learn/best_practices/style_guide.md:27
msgid ""
"For example \"spline interpolation\" can be shortened to "
"`spline_interpolation`, `spline_interpolate`, `spline_interp`, `spline`, "
"but not to `splineint` (\"int\" could mean integration, integer, etc. ---"
" too much ambiguity, even in the clear context of a computational code). "
"This is in contrast to `get_argument()` where `getarg()` is perfectly "
"clean and clear."
msgstr ""

#: ../../source/learn/best_practices/style_guide.md:34
msgid ""
"The above are general guidelines. In general, choosing the right name "
"certainly depends on the word being truncated as to whether the first "
"syllable is sufficient. Usually it is but clearly not always. Thus some "
"thought should go into step \"try to keep names to 2 syllables or less\" "
"since it can really affect the indicativeness and simplicity. Simple "
"consistent naming rules are a real help in this regard -- for both "
"collaboration and for one's own sanity when going back to some old code "
"you haven't seen in while."
msgstr ""

#: ../../source/learn/best_practices/style_guide.md:43
msgid "Indentation"
msgstr ""

#: ../../source/learn/best_practices/style_guide.md:46
msgid ""
"Use a consistent indentation to make your code readable. The amount of "
"indentation is a matter of preference, the most common choices are two, "
"three or four spaces."
msgstr ""

#: ../../source/learn/best_practices/style_guide.md:50
msgid "Comparison to Other Languages"
msgstr ""

#: ../../source/learn/best_practices/style_guide.md:53
msgid ""
"On the other hand, in most of the rest of the programming world, where "
"the main focus is, in one form or another, on defining and using large "
"sets of complex objects, with tons of properties and behaviors, known "
"only in the code in which they are defined (as opposed to defined by the "
"same notation throughout the literature), it makes more sense to use "
"longer, more descriptive names. The naming conventions one sees used in "
"more general-purpose languages such as C++ and Python, therefore, are "
"perfectly consistent with their more general-purpose missions. But "
"Fortran has a different mission (numerical scientific computing)."
msgstr ""

#: ../../source/learn/best_practices/type_casting.md:8
msgid "Type Casting in Callbacks"
msgstr ""

#: ../../source/learn/best_practices/type_casting.md:10
msgid ""
"There are essentially five different ways to do type casting, each with "
"its own advantages and disadvantages."
msgstr ""

#: ../../source/learn/best_practices/type_casting.md:13
msgid ""
"The methods I, II and V can be used both in C and Fortran. The methods "
"III and IV are only available in Fortran. The method VI is obsolete and "
"should not be used."
msgstr ""

#: ../../source/learn/best_practices/type_casting.md:17
msgid "Work Arrays"
msgstr ""

#: ../../source/learn/best_practices/type_casting.md:20
msgid ""
"Pass a \"work array\" which is packed with everything needed by the "
"caller and unpacked by the called routine. This is the old way -- e.g., "
"how LAPACK does it."
msgstr ""

#: ../../source/learn/best_practices/type_casting.md:24
#: ../../source/learn/best_practices/type_casting.md:95
#: ../../source/learn/best_practices/type_casting.md:179
#: ../../source/learn/best_practices/type_casting.md:244
#: ../../source/learn/best_practices/type_casting.md:296
msgid "Integrator:"
msgstr ""

#: ../../source/learn/best_practices/type_casting.md:53
#: ../../source/learn/best_practices/type_casting.md:133
#: ../../source/learn/best_practices/type_casting.md:206
#: ../../source/learn/best_practices/type_casting.md:271
#: ../../source/learn/best_practices/type_casting.md:326
#: ../../source/learn/best_practices/type_casting.md:438
msgid "Usage:"
msgstr ""

#: ../../source/learn/best_practices/type_casting.md:86
msgid "General Structure"
msgstr ""

#: ../../source/learn/best_practices/type_casting.md:89
msgid ""
"Define a general structure which encompass the variations you actually "
"need (or are even remotely likely to need going forward). This single "
"structure type can then change if needed as future needs/ideas permit but"
" won't likely need to change from passing, say, real numbers to, say, and"
" instantiation of a text editor."
msgstr ""

#: ../../source/learn/best_practices/type_casting.md:166
msgid ""
"There is only so much flexibility really needed. For example, you could "
"define two structure types for this purpose, one for Schroedinger and one"
" for Dirac. Each would then be sufficiently general and contain all the "
"needed pieces with all the right labels."
msgstr ""

#: ../../source/learn/best_practices/type_casting.md:171
msgid ""
"Point is: it needn't be \"one abstract type to encompass all\" or bust. "
"There are natural and viable options between \"all\" and \"none\"."
msgstr ""

#: ../../source/learn/best_practices/type_casting.md:174
msgid "Private Module Variables"
msgstr ""

#: ../../source/learn/best_practices/type_casting.md:177
msgid "Hide the variable arguments completely by passing in module variables."
msgstr ""

#: ../../source/learn/best_practices/type_casting.md:236
msgid ""
"However it is best to avoid such global variables -- even though really "
"just semi-global -- if possible. But sometimes it may be the simplest "
"cleanest way. However, with a bit of thought, usually there is a better, "
"safer, more explicit way along the lines of II or IV."
msgstr ""

#: ../../source/learn/best_practices/type_casting.md:241
msgid "Nested functions"
msgstr ""

#: ../../source/learn/best_practices/type_casting.md:290
msgid "Using type(c\\_ptr) Pointer"
msgstr ""

#: ../../source/learn/best_practices/type_casting.md:293
msgid ""
"In C, one would use the `void *` pointer. In Fortran, one can use "
"`type(c_ptr)` for exactly the same purpose."
msgstr ""

#: ../../source/learn/best_practices/type_casting.md:364
msgid ""
"As always, with the advantages of such re-casting, as Fortran lets you do"
" if you really want to, come also the disadvantages that fewer compile- "
"and run-time checks are possible to catch errors; and with that, "
"inevitably more leaky, bug-prone code. So one always has to balance the "
"costs and benefits."
msgstr ""

#: ../../source/learn/best_practices/type_casting.md:370
msgid ""
"Usually, in the context of scientific programming, where the main thrust "
"is to represent and solve precise mathematical formulations (as opposed "
"to create a GUI with some untold number of buttons, drop-downs, and other"
" interface elements), simplest, least bug-prone, and fastest is to use "
"one of the previous approaches."
msgstr ""

#: ../../source/learn/best_practices/type_casting.md:376
msgid "transfer() Intrinsic Function"
msgstr ""

#: ../../source/learn/best_practices/type_casting.md:379
msgid ""
"Before Fortran 2003, the only way to do type casting was using the "
"`transfer` intrinsic function. It is functionally equivalent to the "
"method V, but more verbose and more error prone. It is now obsolete and "
"one should use the method V instead."
msgstr ""

#: ../../source/learn/best_practices/type_casting.md:384
msgid "Examples:"
msgstr ""

#: ../../source/learn/best_practices/type_casting.md:386
msgid "<http://jblevins.org/log/transfer>"
msgstr ""

#: ../../source/learn/best_practices/type_casting.md:388
msgid "<http://jblevins.org/research/generic-list.pdf>"
msgstr ""

#: ../../source/learn/best_practices/type_casting.md:390
msgid "<http://www.macresearch.org/advanced_fortran_90_callbacks_with_the_transfer_function>"
msgstr ""

#: ../../source/learn/best_practices/type_casting.md:392
msgid "Object Oriented Approach"
msgstr ""

#: ../../source/learn/best_practices/type_casting.md:395
msgid "The module:"
msgstr ""

#: ../../source/learn/best_practices/type_casting.md:432
msgid ""
"The abstract type prescribes exactly what the integration routine needs, "
"namely a method to evaluate the function, but imposes nothing else on the"
" user. The user extends this type, providing a concrete implementation of"
" the eval type bound procedure and adding necessary context data as "
"components of the extended type."
msgstr ""

#: ../../source/learn/best_practices/type_casting.md:477
msgid "Complete Example of void \\* vs type(c\\_ptr) and transfer()"
msgstr ""

#: ../../source/learn/best_practices/type_casting.md:480
msgid ""
"Here are three equivalent codes: one in C using `void *` and two codes in"
" Fortran using `type(c_ptr)` and `transfer()`:"
msgstr ""

#: ../../source/learn/best_practices/type_casting.md
msgid "Language &nbsp;"
msgstr ""

#: ../../source/learn/best_practices/type_casting.md
msgid "Method"
msgstr ""

#: ../../source/learn/best_practices/type_casting.md
msgid "Link"
msgstr ""

#: ../../source/learn/best_practices/type_casting.md
msgid "C"
msgstr ""

#: ../../source/learn/best_practices/type_casting.md
msgid "`void *`"
msgstr ""

#: ../../source/learn/best_practices/type_casting.md
msgid "<https://gist.github.com/1665641>"
msgstr ""

#: ../../source/learn/best_practices/type_casting.md
msgid "Fortran"
msgstr ""

#: ../../source/learn/best_practices/type_casting.md
msgid "`type(c_ptr)` &nbsp;"
msgstr ""

#: ../../source/learn/best_practices/type_casting.md
msgid "<https://gist.github.com/1665626>"
msgstr ""

#: ../../source/learn/best_practices/type_casting.md
msgid "`transfer()`"
msgstr ""

#: ../../source/learn/best_practices/type_casting.md
msgid "<https://gist.github.com/1665630>"
msgstr ""

#: ../../source/learn/best_practices/type_casting.md:489
msgid ""
"The C code uses the standard C approach for writing extensible libraries "
"that accept callbacks and contexts. The two Fortran codes show how to do "
"the same. The `type(c_ptr)` method is equivalent to the C version and "
"that is the approach that should be used."
msgstr ""

#: ../../source/learn/best_practices/type_casting.md:494
msgid ""
"The `transfer()` method is here for completeness only (before Fortran "
"2003, it was the only way) and it is a little cumbersome, because the "
"user needs to create auxiliary conversion functions for each of his "
"types. As such, the `type(c_ptr)` method should be used instead."
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:8
msgid "Build tools"
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:10
msgid ""
"Compiling your Fortran projects by hand can become quite complicated "
"depending on the number of source files and the interdependencies through"
" the module. Supporting different compilers and linkers or different "
"platforms can become increasingly complicated unless the right tools are "
"used to automatically perform those tasks."
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:16
msgid ""
"Depending on the size of your project and the purpose of project "
"different options for the build automation can be used."
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:19
msgid ""
"First, your integrated development environment probably provides a way to"
" build your program. A popular cross-platform  tool is Microsoft's <a "
"href=\"https://code.visualstudio.com/\" target=\"_blank\" "
"rel=\"noopener\">Visual Studio Code</a>, but others exist, such as <a "
"href=\"https://atom.io/\" target=\"_blank\" rel=\"noopener\">Atom</a>, <a"
" href=\"https://www.eclipse.org/photran/\" target=\"_blank\" "
"rel=\"noopener\">Eclipse Photran</a>, and <a "
"href=\"http://www.codeblocks.org/\" target=\"_blank\" "
"rel=\"noopener\">Code::Blocks</a>. They offer a graphical user-interface,"
" but are often very specific for the compiler and platform."
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:29
msgid ""
"For smaller projects, the rule based build system ``make`` is a common "
"choice. Based on the rules defined it can perform task like (re)compiling"
" object files from updated source files, creating libraries and linking "
"executables. To use ``make`` for your project you have to encode those "
"rules in ``Makefile``, which defines the interdependencies of all the "
"final program, the intermediary object files or libraries and the actual "
"source files. For a short introduction see [the guide on ``make"
"``](#using-make-as-build-tool)."
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:38
msgid ""
"Maintenance tools like autotools and CMake can generate Makefiles or "
"Visual Studio project files via a high-level description. They abstract "
"away from the compiler and platform specifics."
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:42
msgid ""
"Which of those tools are the best choice for your projects depends on "
"many factors. Choose a build tool you are comfortable working with, it "
"should not get in your way while developing. Spending more time on "
"working against your build tools than doing actual development work can "
"quickly become frustrating."
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:47
msgid ""
"Also, consider the accessibility of your build tools. If it is restricted"
" to a specific integrated development environment, can all developers on "
"your project access it? If you are using a specific build system, does it"
" work on all platforms you are developing for? How large is the entry "
"barrier of your build tools? Consider the learning curve for the build "
"tools, the perfect build tool will be of no use, if you have to learn a "
"complex programming language first to add a new source file. Finally, "
"consider what other project are using, those you are depending on and "
"those that use (or will use) your project as dependency."
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:59
msgid "Using make as build tool"
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:61
msgid ""
"The most well-known and commonly used build system is called ``make``. It"
" performs actions following rules defined in a configuration file called "
"``Makefile`` or ``makefile``, which usually leads to compiling a program "
"from the provided source code."
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:66
#, python-format
msgid ""
"{% include tip.html    content=\"For an in-depth ``make`` tutorial lookup"
" its info page. There is an online version of this <a "
"href=\\\"https://www.gnu.org/software/make/manual/make.html\\\" "
"target=\\\"_blank\\\" rel=\\\"noopener\\\">info page</a>, available.\""
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:70
msgid ""
"We will start with the basics from your clean source directory. Create "
"and open the file ``Makefile``, we start with a simple rule called *all*:"
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:78
msgid ""
"After saving the ``Makefile`` run it by executing ``make`` in the same "
"directory. You should see the following output:"
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:84
msgid ""
"First, we note that ``make`` is substituting ``$@`` for the name of the "
"rule, the second thing to note is that ``make`` is always printing the "
"command it is running, finally, we see the result of running ``echo "
"\"all\"``."
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:88
#, python-format
msgid ""
"{% include note.html    content=\"We call the entry point of our "
"``Makefile`` always *all* by convention, but you can choose whatever name"
" you like.\""
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:92
#: ../../source/learn/building_programs/build_tools.md:122
#: ../../source/learn/building_programs/build_tools.md:277
#: ../../source/learn/building_programs/build_tools.md:452
#: ../../source/learn/building_programs/build_tools.md:471
#: ../../source/learn/building_programs/build_tools.md:553
#: ../../source/learn/building_programs/project_make.md:285
#, python-format
msgid "{% capture note %}"
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:94
msgid ""
"You should not have noticed it if your editor is working correctly, but "
"you have to indent the content of a rule with a tab character. In case "
"you have problems running the above ``Makefile`` and see an error like"
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:100
msgid ""
"The indentation is probably not correct. In this case replace the "
"indentation in the second line with a tab character."
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:103
#, python-format
msgid "{% endcapture %} {% include note.html title=\"Note\" content=note %}"
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:106
msgid ""
"Now we want to make our rules more complicated, therefore we add another "
"rule:"
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:118
msgid ""
"Note how we declare variables in ``make``, you should always declare your"
" local variables with ``:=``. To access the content of a variable we use "
"the ``$(...)``, note that we have to enclose the variable name in "
"parenthesis."
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:124
#, python-format
msgid ""
"The declaration of variables is usually done with ``:=``, but ``make`` "
"does support *recursively expanded* variables as well with ``=``. "
"Normally, the first kind of declaration is wanted, as they are more "
"predictable and do not have a runtime overhead from the recursive "
"expansion. {% endcapture %} {% include note.html title=\"Note\" "
"content=note %}"
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:131
msgid ""
"We introduced a dependency of the rule all, namely the content of the "
"variable ``PROG``, also we modified the printout, we want to see all the "
"dependencies of this rule, which are stored in the variable ``$^``. Now "
"for the new rule which we name after the value of the variable ``PROG``, "
"it does the same thing we did before for the rule *all*, note how the "
"value of ``$@`` is dependent on the rule it is used in."
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:138
msgid "Again check by running the ``make``, you should see:"
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:145
msgid ""
"The dependency has been correctly resolved and evaluated before "
"performing any action on the rule *all*. Let's run only the second rule: "
"type ``make my_prog`` and you will only find the first two lines in your "
"terminal."
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:150
msgid ""
"The next step is to perform some real actions with ``make``, we take the "
"source code from the previous chapter here and add new rules to our "
"``Makefile``:"
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:167
msgid ""
"We define ``OBJS`` which stands for object files, our program depends on "
"those ``OBJS`` and for each object file we create a rule to make them "
"from a source file. The last rule we introduced is a pattern matching "
"rule, ``%`` is the common pattern between ``tabulate.o`` and "
"``tabulate.f90``, which connects our object file ``tabulate.o`` to the "
"source file ``tabulate.f90``. With this set, we run our compiler, here "
"``gfortran`` and translate the source file into an object file, we do not"
" create an executable yet due to the ``-c`` flag. Note the usage of the "
"``$<`` for the first element of the dependencies here."
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:178
msgid ""
"After compiling all the object files we attempt to link the program, we "
"do not use a linker directly, but ``gfortran`` to produce the executable."
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:181
msgid "Now we run the build script with ``make``:"
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:192
msgid ""
"We remember that we have dependencies between our source files, therefore"
" we add this dependency explicitly to the ``Makefile`` with"
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:199
msgid ""
"Now we can retry and find that the build is working correctly. The output"
" should look like"
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:206
msgid ""
"You should find *four* new files in the directory now. Run ``my_prog`` to"
" make sure everything works as expected. Let's run ``make`` again:"
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:212
msgid ""
"Using the timestamps of the executable ``make`` was able to determine, it"
" is newer than both ``tabulate.o`` and ``functions.o``, which in turn are"
" newer than ``tabulate.f90`` and ``functions.f90``. Therefore, the "
"program is already up-to-date with the latest code and no action has to "
"be performed."
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:218
msgid "In the end, we will have a look at a complete ``Makefile``."
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:252
msgid ""
"Since you are starting with ``make`` we highly recommend to always "
"include the first line, like with Fortran's ``implicit none`` we do not "
"want to have implicit rules messing up our ``Makefile`` in surprising and"
" harmful ways."
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:256
msgid ""
"Next, we have a configuration section where we define variables, in case "
"you want to switch out your compiler, it can be easily done here. We also"
" introduced the ``SRCS`` variable to hold all source files, which is more"
" intuitive than specifying object files. We can easily create the object "
"files by appending a ``.o`` suffix using the functions ``addsuffix``. The"
" ``.PHONY`` is a special rule, which should be used for all entry points "
"of your ``Makefile``, here we define two entry point, we already know "
"*all*, the new *clean* rule deletes all the build artifacts again such "
"that we indeed start with a clean directory."
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:267
msgid ""
"Also, we slightly changed the build rule for the object files to account "
"for appending the ``.o`` suffix instead of substituting it. Notice that "
"we still need to explicitly define the interdependencies in the "
"``Makefile``. We also added a dependency for the object files on the "
"``Makefile`` itself, in case you change the compiler, this will allow you"
" to safely rebuild."
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:273
msgid ""
"Now you know enough about ``make`` to use it for building small projects."
" If you plan to use ``make`` more extensively, we have compiled a few "
"tips for you as well."
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:279
msgid ""
"In this guide, we avoided and disabled a lot of the commonly used "
"``make`` features that can be particularly troublesome if not used "
"correctly, we highly recommend staying away from the builtin rules and "
"variables if you do not feel confident working with ``make``, but "
"explicitly declare all variables and rules."
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:284
#, python-format
msgid ""
"You will find that ``make`` is capable tool to automate short "
"interdependent workflows and to build small projects. But for larger "
"projects, you will probably soon run against some of it limitations. "
"Usually, ``make`` is therefore not used alone but combined with other "
"tools to generate the ``Makefile`` completely or in parts. {% endcapture "
"%} {% include note.html title=\"Note\" content=note %}"
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:293
msgid "Recursively expanded variables"
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:295
msgid ""
"Commonly seen in many projects are recursively expanded variables "
"(declared with ``=`` instead of ``:=``). Recursive expansion of your "
"variables allows out-of-order declaration and other neat tricks with "
"``make``, since they are defined as rules, which are expanded at runtime,"
" rather than being defined while parsing."
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:300
msgid ""
"For example, declaring and using your Fortran flags with this snippet "
"will work completely fine:"
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:312
msgid ""
"You should find the expected (or maybe unexpected) printout after running"
" ``make``"
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:317
#, python-format
msgid ""
"{% include note.html content=\"appending with ``+=`` to an undefined "
"variable will produce a recursively expanded variable with this state "
"being inherited for all further appending.\" %}"
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:319
msgid ""
"While, it seems like an interesting feature to use, it tends to lead to "
"surprising and unexpected outcomes. Usually, when defining variables like"
" your compiler, there is little reason to actually use the recursive "
"expansion at all."
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:323
msgid "The same can easily be archived using the ``:=`` declaration:"
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:334
#, python-format
msgid ""
"{% include important.html content=\"always think of a ``Makefile`` as a "
"whole set of rules, it must be parsed completely before any rule can be "
"evaluated.\" %}"
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:336
msgid ""
"You can use whatever kind of variables you like most, mixing them should "
"be done carefully, of course. It is important to be aware of the "
"differences between the two kinds and the respective implications."
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:341
msgid "Comments and whitespace"
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:343
msgid ""
"There are some caveats with whitespace and comments, which might pop up "
"from time to time when using ``make``. First, ``make`` does not know of "
"any data type except for strings and the default separator is just a "
"space. This means ``make`` will give a hard time trying to build a "
"project which has spaces in file names. If you encounter such case, "
"renaming the file is possibly the easiest solution at hand."
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:350
msgid ""
"Another common problem is leading and trailing whitespace, once "
"introduced, ``make`` will happily carry it along and it does in fact make"
" a difference when comparing strings in ``make``."
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:354
msgid "Those can be introduced by comments like"
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:362
msgid ""
"While the comment will be correctly removed by ``make``, the trailing two"
" spaces are now part of the variable content. Run ``make`` and check that"
" this is indeed the case:"
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:371
msgid ""
"To solve this issue, you can either move the comment, or strip the "
"whitespace with the ``strip`` function instead. Alternatively, you could "
"try to ``join`` the strings."
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:382
msgid ""
"All in all, none of this solutions will make your ``Makefile`` more "
"readable, therefore, it is prudent to pay extra attention to whitespace "
"and comments when writing and using ``make``."
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:387
msgid "The meson build system"
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:389
msgid ""
"After you have learned the basics of ``make``, which we call a low-level "
"build system, we will introduce ``meson``, a high-level build system. "
"While you specify in a low-level build system how to build your program, "
"you can use a high-level build system to specify what to build. A high-"
"level build system will deal for you with how and generate build files "
"for a low-level build system."
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:396
msgid ""
"There are plenty of high-level build systems available, but we will focus"
" on ``meson`` because it is constructed to be particularly user friendly."
" The default low-level build-system of ``meson`` is called ``ninja``."
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:400
msgid "Let's have a look at a complete ``meson.build`` file:"
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:408
msgid ""
"And we are already done, the next step is to configure our low-level "
"build system with ``meson setup build``, you should see output somewhat "
"similar to this"
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:426
msgid ""
"The provided information at this point is already more detailed than "
"anything we could have provided in a ``Makefile``, let's run the build "
"with ``ninja -C build``, which should show something like"
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:435
msgid ""
"Find and test your program at ``build/my_prog`` to ensure it works "
"correctly. We note the steps ``ninja`` performed are the same we would "
"have coded up in a ``Makefile`` (including the dependency), yet we did "
"not have to specify them, have a look at your ``meson.build`` file again:"
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:445
msgid ""
"We only specified that we have a Fortran project (which happens to "
"require a certain version of ``meson`` for the Fortran support) and told "
"``meson`` to build an executable ``my_prog`` from the files "
"``tabulate.f90`` and ``functions.f90``. We had not to tell ``meson`` how "
"to build the project, it figured this out by itself."
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:454
#, python-format
msgid ""
"``meson`` is a cross-platform build system, the project you just "
"specified for your program can be used to compile binaries for your "
"native operating system or to cross-compile your project for other "
"platforms. Similarly, the ``meson.build`` file is portable and will work "
"on different platforms as well. {% endcapture %} {% include note.html "
"title=\"Note\" content=note %}"
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:462
msgid ""
"The documentation of ``meson`` can be found at the <a "
"href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener"
"\">meson-build webpage</a>."
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:466
msgid "Creating a CMake project"
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:468
msgid ""
"Similar to ``meson`` CMake is a high-level build system as well and "
"commonly used to build Fortran projects."
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:473
#, python-format
msgid ""
"CMake follows a slightly different strategy and provides you with a "
"complete programming language to create your build files. This is has the"
" advantage that you can do almost everything with CMake, but your CMake "
"build files can also become as complex as the program you are building. "
"{% endcapture %} {% include note.html title=\"Note\" content=note %}"
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:481
msgid "Start by creating the file ``CMakeLists.txt`` with the content"
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:489
msgid ""
"Similar to ``meson`` we are already done with our CMake build file. We "
"configure our low-level build files with ``cmake -B build -G Ninja``, you"
" should see output similar to this"
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:503
msgid ""
"You might be surprised that CMake tries to use the compiler ``f95``, "
"fortunately this is just a symbolic link to ``gfortran`` on most systems "
"and not the actual ``f95`` compiler. To give CMake a better hint you can "
"export the environment variable ``FC=gfortran`` rerunning should show the"
" correct compiler name now"
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:519
msgid ""
"In a similar manner you could use your Intel Fortran compiler instead to "
"build your project (set ``FC=ifort``)."
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:522
msgid ""
"CMake provides support for several low-level build files, since the "
"default is platform specific, we will just use ``ninja`` since we already"
" used it together with ``meson``. As before, build your project with "
"``ninja -C build``:"
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:533
msgid ""
"Find and test your program at ``build/my_prog`` to ensure it works "
"correctly. The steps ``ninja`` performed are somewhat different, because "
"there is usually more than one way to write the low-level build files to "
"accomplish the task of building a project. Fortunately, we do not have to"
" concern ourselves but have our build system handle those details for us."
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:539
msgid ""
"Finally, we will shortly recap on our complete ``CMakeLists.txt`` to "
"specify our project:"
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:548
msgid ""
"We specified that we have a Fortran project and told CMake to create an "
"executable ``my_prog`` from  the files ``tabulate.f90`` and "
"``functions.f90``. CMake knows the details how to build the executable "
"from the specified sources, so we do not have to worry about the actual "
"steps in the build process."
msgstr ""

#: ../../source/learn/building_programs/build_tools.md:555
#, python-format
msgid ""
"CMake's offical reference can be found at the <a "
"href=\"https://cmake.org/cmake/help/latest/\", target=\"_blank\" "
"rel=\"noopener\">CMake webpage</a>. It is organised in manpages, which "
"are also available with your local CMake installation as well using ``man"
" cmake``. While it covers all functionality of CMake, it sometimes covers"
" them only very briefly. {% endcapture %} {% include note.html "
"title=\"Note\" content=note %}"
msgstr ""

#: ../../source/learn/building_programs/compiling_source.md:8
msgid "Compiling the source code"
msgstr ""

#: ../../source/learn/building_programs/compiling_source.md:10
msgid ""
"The first step in the build process is to compile the source code. The "
"output from this step is generally known as the object code — a set of "
"instructions for the computer generated from the human-readable source "
"code. Different compilers will produce different object codes from the "
"same source code and the naming conventions are different."
msgstr ""

#: ../../source/learn/building_programs/compiling_source.md:16
msgid "The consequences:"
msgstr ""

#: ../../source/learn/building_programs/compiling_source.md:18
msgid ""
"If you use a particular compiler for one source file, you need to use the"
" same compiler (or a compatible one) for all other pieces. After all, a "
"program may be built from many different source files and the compiled "
"pieces have to cooperate."
msgstr ""

#: ../../source/learn/building_programs/compiling_source.md:22
msgid ""
"Each source file will be compiled and the result is stored in a file with"
" an extension like \".o\" or \".obj\". It is these object files that are "
"the input for the next step: the link process."
msgstr ""

#: ../../source/learn/building_programs/compiling_source.md:26
msgid ""
"Compilers are complex pieces of software: they have to understand the "
"language in much more detail and depth than the average programmer. They "
"also need to understand the inner working of the computer. And then, over"
" the years they have been extended with numerous options to customise the"
" compilation process and the final program that will be built."
msgstr ""

#: ../../source/learn/building_programs/compiling_source.md:33
msgid ""
"But the basics are simple enough. Take the gfortran compiler, part of the"
" GNU compiler collection. To compile a simple program as the one above, "
"that consists of one source file, you run the following command, assuming"
" the source code is stored in the file \"hello.f90\":"
msgstr ""

#: ../../source/learn/building_programs/compiling_source.md:42
msgid ""
"This results in a file \"hello.o\" (as the gfortran compiler uses \".o\" "
"as the extension for the object files)."
msgstr ""

#: ../../source/learn/building_programs/compiling_source.md:45
msgid ""
"The option \"-c\" means: only compile the source files. If you were to "
"leave it out, then the default action of the compiler is to compile the "
"source file and start the linker to build the actual executable program. "
"The command:"
msgstr ""

#: ../../source/learn/building_programs/compiling_source.md:54
msgid "results in an executable file, \"a.out\" on Linux or \"a.exe\" on Windows."
msgstr ""

#: ../../source/learn/building_programs/compiling_source.md:57
msgid "Some remarks:"
msgstr ""

#: ../../source/learn/building_programs/compiling_source.md:59
msgid ""
"The compiler may complain about the contents of the source file, if it "
"finds something wrong with it — a typo for instance or an unknown "
"keyword. In that case the compilation process is broken off and you will "
"not get an object file or an executable program. For instance, if the "
"word \"program\" was inadvertently typed as \"prgoram\":"
msgstr ""

#: ../../source/learn/building_programs/compiling_source.md:80
msgid ""
"Using this compilation report you can correct the source code and try "
"again."
msgstr ""

#: ../../source/learn/building_programs/compiling_source.md:83
msgid ""
"The step without \"-c\" can only succeed if the source file contains a "
"main program — characterised by the `program` statement in Fortran. "
"Otherwise the link step will complain about a missing \"symbol\", "
"something along these lines:"
msgstr ""

#: ../../source/learn/building_programs/compiling_source.md:95
msgid ""
"The file \"hello2.f90\" is almost the same as the file \"hello.f90\", "
"except that the keyword `program` has been replaced by the keyword "
"`subroutine`."
msgstr ""

#: ../../source/learn/building_programs/compiling_source.md:98
msgid ""
"The above examples of output from the compiler will differ per compiler "
"and platform on which it runs. These examples come from the gfortran "
"compiler running in a Cygwin environment on Windows."
msgstr ""

#: ../../source/learn/building_programs/compiling_source.md:102
msgid "Compilers also differ in the options they support, but in general:"
msgstr ""

#: ../../source/learn/building_programs/compiling_source.md:104
msgid ""
"Options for optimising the code — resulting in faster programs or smaller"
" memory footprints;"
msgstr ""

#: ../../source/learn/building_programs/compiling_source.md:106
msgid ""
"Options for checking the source code — checks that a variable is not used"
" before it has been given a value, for instance or checks if some "
"extension to the language is used;"
msgstr ""

#: ../../source/learn/building_programs/compiling_source.md:109
msgid "Options for the location of include or module files, see below;"
msgstr ""

#: ../../source/learn/building_programs/compiling_source.md:110
msgid "Options for debugging."
msgstr ""

#: ../../source/learn/building_programs/distributing.md:8
msgid "Distributing your programs"
msgstr ""

#: ../../source/learn/building_programs/distributing.md:10
msgid ""
"When you distribute your programs, there are a number of options you can "
"choose from:"
msgstr ""

#: ../../source/learn/building_programs/distributing.md:13
msgid "Distribute the entire source code"
msgstr ""

#: ../../source/learn/building_programs/distributing.md:14
msgid "Distribute a pre-built executable program"
msgstr ""

#: ../../source/learn/building_programs/distributing.md:15
msgid "Distribute static or dynamic libraries that people can use"
msgstr ""

#: ../../source/learn/building_programs/distributing.md:17
msgid "__Option 1: Distribute the entire source code__"
msgstr ""

#: ../../source/learn/building_programs/distributing.md:19
msgid ""
"By far the simplest — for you as a programmer — is this one: you leave it"
" up to the user to build it on their own machine. Unfortunately, that "
"means you will have to have a user-friendly build system in place and the"
" user will have to have access to suitable compilers. For build systems: "
"see the previous section."
msgstr ""

#: ../../source/learn/building_programs/distributing.md:25
msgid "__Option 2: Distribute a pre-built executable program__"
msgstr ""

#: ../../source/learn/building_programs/distributing.md:27
msgid ""
"A pre-built program that does not need to be customised, other than via "
"its input, will still need to come with the various run-time libraries "
"and will be specific to the operating system/environment it was built "
"for."
msgstr ""

#: ../../source/learn/building_programs/distributing.md:31
msgid ""
"The set of run-time libraries differs per operating system and compiler "
"version. For a freely available compiler like gfortran, the easiest thing"
" is to ask the user to install that compiler on their system. In the case"
" of Windows: the Cygwin environment may be called for."
msgstr ""

#: ../../source/learn/building_programs/distributing.md:36
msgid ""
"Alternatively, you can supply copies of the run-time libraries together "
"with your program. Put them in the directory where they can be found at "
"run-time."
msgstr ""

#: ../../source/learn/building_programs/distributing.md:39
msgid ""
"Note: On Windows, the Intel Fortran comes with a set of _redistributable_"
" libraries. These will need to be made available."
msgstr ""

#: ../../source/learn/building_programs/distributing.md:42
msgid ""
"In general: use a tool like \"ldd\" or \"dependency walker\" to find out "
"what libraries are required and consult the documentation of the "
"compiler."
msgstr ""

#: ../../source/learn/building_programs/distributing.md:45
msgid ""
"If your program does allow customisation, consider using dynamic "
"libraries for this. More is said about this below."
msgstr ""

#: ../../source/learn/building_programs/distributing.md:48
msgid "__Option 3: Distribute static or dynamic libraries that people can use__"
msgstr ""

#: ../../source/learn/building_programs/distributing.md:50
msgid ""
"This option is a combination of the first two options. It does put some "
"burden on the user, as they must create a main program that calls your "
"routines in the proper way, but they do not need to know much about the "
"build system you used. You will have to deal with the run-time libraries,"
" though."
msgstr ""

#: ../../source/learn/building_programs/distributing.md:55
msgid ""
"If you choose this option, besides the compiled libraries, you will also "
"need to supply the module intermediate files. These files are compiler-"
"specific, but so are the static libraries you build."
msgstr ""

#: ../../source/learn/building_programs/distributing.md:59
msgid "Distributing the tabulation program"
msgstr ""

#: ../../source/learn/building_programs/distributing.md:60
msgid ""
"As shown above, the tabulation program can be built with the user-defined"
" function in a dynamic library. This enables you to:"
msgstr ""

#: ../../source/learn/building_programs/distributing.md:63
msgid "Ship the executable (with the appropriate run-time libraries)"
msgstr ""

#: ../../source/learn/building_programs/distributing.md:64
msgid "Provide a skeleton version of the module, something like:"
msgstr ""

#: ../../source/learn/building_programs/distributing.md:82
msgid "Provide a basic build script with a command like:"
msgstr ""

#: ../../source/learn/building_programs/distributing.md:88
msgid "or:"
msgstr ""

#: ../../source/learn/building_programs/distributing.md:94
msgid ""
"As said, you cannot control that the user has done the right thing — any "
"DLL \"functions.dll\" with a function `f` would be accepted, but not "
"necessarily lead to a successful run."
msgstr ""

#: ../../source/learn/building_programs/distributing.md:98
msgid ""
"An alternative set-up would be to change the main program into a "
"subroutine and have the function as an argument:"
msgstr ""

#: ../../source/learn/building_programs/distributing.md:120
msgid "Then provide a skeleton main program:"
msgstr ""

#: ../../source/learn/building_programs/distributing.md:140
msgid ""
"The advantage is that the compiler can check the interface of the "
"function that is passed and that the user has more freedom in the use of "
"the functionality provided by your library."
msgstr ""

#: ../../source/learn/building_programs/include_files.md:8
msgid "Include files and modules"
msgstr ""

#: ../../source/learn/building_programs/include_files.md:10
msgid ""
"Your program can be contained in various source files, all stored in the "
"same directory or organised in some convenient directory tree. The "
"details of the organisation depend on personal taste, arrangements made "
"by the group of developers you belong to, or simply the history of the "
"program. Whatever the directory structure is, you will encounter a "
"situation where the compiler needs assistence in order to compile a "
"particular source file:"
msgstr ""

#: ../../source/learn/building_programs/include_files.md:18
msgid ""
"Fortran (and other languages) has the possibility to include an external "
"file. While this feature has become a bit less useful with the advent of "
"modules, it still has its uses. Quite often, such \"include files\" are "
"stored in a directory separated from the directories containing the "
"source files, because they are used in several locations. Quite often the"
" name of that directory is \"include\"."
msgstr ""

#: ../../source/learn/building_programs/include_files.md:24
msgid ""
"As we have seen, compiling source code that defines one or more modules, "
"leads to the compiler generating so-called \"module intermediate files\" "
"(with the extension \".mod\"). The compiler needs access to these files "
"to be able to read the interfaces and variables and what not, and based "
"on this information, actually compile the source code that uses the "
"various modules."
msgstr ""

#: ../../source/learn/building_programs/include_files.md:30
msgid ""
"Compilers support options like `-I` to indicate where these include files"
" and module intermediate files are to be found. Suppose we store the two "
"files of our `tabulate` program in the following directory structure:"
msgstr ""

#: ../../source/learn/building_programs/include_files.md:43
msgid "Compiling the file \"functions.f90\" with the commands"
msgstr ""

#: ../../source/learn/building_programs/include_files.md:50
msgid "leads to this structure:"
msgstr ""

#: ../../source/learn/building_programs/include_files.md:62
msgid ""
"To successfully compile and subsequently build the program we need to "
"tell the compiler where it can find the file \"user\\_functions.mod\":"
msgstr ""

#: ../../source/learn/building_programs/include_files.md:71
msgid "The result:"
msgstr ""

#: ../../source/learn/building_programs/include_files.md:85
msgid "Notes:"
msgstr ""

#: ../../source/learn/building_programs/include_files.md:87
msgid ""
"The details differ per compiler. Sometimes the `-I` option should be "
"followed by a space and then the name of the directory, sometimes the "
"directory should come consecutively."
msgstr ""

#: ../../source/learn/building_programs/include_files.md:90
msgid ""
"By default the module intermediate files (.mod) are put in the same "
"directory as the object files. When your program code is organised in "
"different subdirectories, they will get scattered over the directory "
"tree, complicating the compilation process. Luckily, many compilers allow"
" you to specify the output location for these files. For gfortran this is"
" `-J`, for instance: `-J../include` (so that the .mod files could all "
"appear in the same directory)"
msgstr ""

#: ../../source/learn/building_programs/include_files.md:98
msgid ""
"For large programs, consisting of many source files, it is important to "
"think through what organisation to use."
msgstr ""

#: ../../source/learn/building_programs/index.md:55
msgid "build tools"
msgstr ""

#: ../../source/learn/building_programs/index.md:55
msgid "include files"
msgstr ""

#: ../../source/learn/building_programs/index.md:55
msgid "managing libraries"
msgstr ""

#: ../../source/learn/building_programs/index.md:55
msgid "compiling source"
msgstr ""

#: ../../source/learn/building_programs/index.md:55
msgid "project make"
msgstr ""

#: ../../source/learn/building_programs/index.md:55
msgid "distributing"
msgstr ""

#: ../../source/learn/building_programs/index.md:55
msgid "linking pieces"
msgstr ""

#: ../../source/learn/building_programs/index.md:55
msgid "runtime libraries"
msgstr ""

#: ../../source/learn/building_programs/index.md:9
msgid "Building programs"
msgstr ""

#: ../../source/learn/building_programs/index.md:11
msgid ""
"Languages like Fortran, C, C++ and Java, to name but a few, share certain"
" characteristics: you write code in your language of choice but then you "
"have to build an executable program from that source code. Other "
"languages are interpreted — the source code is analysed by a special "
"program and taken as direct instructions. Two very simple examples of "
"that type of language: Windows batch files and Linux shell scripts."
msgstr ""

#: ../../source/learn/building_programs/index.md:19
msgid ""
"In this tutorial we concentrate on the first type of languages, with "
"Fortran as the main example. One advantage of compiled languages is that "
"the build process that you need to build an executable program, is used "
"to transform the human-readable source code into an efficient program "
"that can be run on the computer."
msgstr ""

#: ../../source/learn/building_programs/index.md:25
msgid ""
"Remark: this tutorial gives examples for the Windows and Linux operating "
"systems, however the workflow and general principles still apply to "
"macOS."
msgstr ""

#: ../../source/learn/building_programs/index.md:28
msgid "Compiled languages"
msgstr ""

#: ../../source/learn/building_programs/index.md:30
msgid "Let us have a look at a simple example:"
msgstr ""

#: ../../source/learn/building_programs/index.md:38
msgid ""
"This is just about the simplest program you can write in Fortran and it "
"is certainly a variation on one of the most famous programs. Even though "
"it is simple to express in source code, a lot of things actually happen "
"when the executable that is built from this code runs:"
msgstr ""

#: ../../source/learn/building_programs/index.md:43
msgid ""
"A process is started on the computer in such a way that it can write to "
"the console — the window (DOS-box, xterm, ...) at which you type the "
"program's name."
msgstr ""

#: ../../source/learn/building_programs/index.md:46
msgid ""
"It writes the text \"Hello!\" to the console. To do so it must properly "
"interact with the console."
msgstr ""

#: ../../source/learn/building_programs/index.md:48
msgid ""
"When done, it finishes, cleaning up all the resources (memory, connection"
" to the console etc.) it took."
msgstr ""

#: ../../source/learn/building_programs/index.md:51
msgid ""
"Fortunately, as a programmer in a high-level language you do not need to "
"consider all these details. In fact, this is the sort of things that is "
"taken care of by the build process: the compiler and the linker."
msgstr ""

#: ../../source/learn/building_programs/linking_pieces.md:8
msgid "Linking the objects"
msgstr ""

#: ../../source/learn/building_programs/linking_pieces.md:10
msgid ""
"Almost all programs, except for the simplest, are built up from different"
" pieces. We are going to examine such a situation in more detail."
msgstr ""

#: ../../source/learn/building_programs/linking_pieces.md:14
msgid ""
"Here is a general program for tabulating a function (source code in "
"\"tabulate.f90\"):"
msgstr ""

#: ../../source/learn/building_programs/linking_pieces.md:35
msgid "Note the `use` statement — this will be where we define the function `f`."
msgstr ""

#: ../../source/learn/building_programs/linking_pieces.md:37
msgid ""
"We want to make the program general, so keep the specific source code — "
"the implementation of the function `f` — separated from the general "
"source code. There are several ways to achieve this, but one is to put it"
" in a different source file. We can give the general program to a user "
"and they provide a specific source code."
msgstr ""

#: ../../source/learn/building_programs/linking_pieces.md:43
msgid ""
"Assume for the sake of the example that the function is implemented in a "
"source file \"function.f90\" as:"
msgstr ""

#: ../../source/learn/building_programs/linking_pieces.md:59
msgid ""
"To build the program with this specific function, we need to compile two "
"source files and combine them via the link step into one executable "
"program. Because the program \"tabulate\" depends on the module "
"\"function\", we need to compile the source file containing our module "
"first. A sequence of commands to do this is:"
msgstr ""

#: ../../source/learn/building_programs/linking_pieces.md:70
msgid ""
"The first step compiles the module, resulting in an object file "
"\"functions.o\" and a module intermediate file, \"user\\_functions.mod\"."
" This module file contains all the information the compiler needs to "
"determine that the function `f` is defined in this module and what its "
"interface is. This information is important: it enables the compiler to "
"check that you call the function in the right way. It might be that you "
"made a mistake and called the function with two arguments instead of one."
" If the compiler does not know anything about the function's interface, "
"then it cannot check anything."
msgstr ""

#: ../../source/learn/building_programs/linking_pieces.md:80
msgid "The second step invokes the compiler in such a way that:"
msgstr ""

#: ../../source/learn/building_programs/linking_pieces.md:82
msgid "it compiles the file \"tabulate.f90\" (using the module file);"
msgstr ""

#: ../../source/learn/building_programs/linking_pieces.md:83
msgid ""
"it invokes the linker to combine the object files tabulate.o and "
"functions.o into an executable program — with the default name \"a.out\" "
"or \"a.exe\" (if you want a different name, use the option \"-o\")."
msgstr ""

#: ../../source/learn/building_programs/linking_pieces.md:87
msgid ""
"What you do not see in general is that the linker also adds a number of "
"extra files in this link step, the run-time libraries. These run-time "
"libraries contain all the \"standard\" stuff — low-level routines that do"
" the input and output to screen, the `sin` function and much more."
msgstr ""

#: ../../source/learn/building_programs/linking_pieces.md:92
msgid ""
"If you want to see the gory details, add the option \"-v\". This "
"instructs the compiler to report all the steps that are in detail."
msgstr ""

#: ../../source/learn/building_programs/linking_pieces.md:95
msgid ""
"The end result, the executable program, contains the compiled source code"
" and various auxiliary routines that make it work. It also contains "
"references to so-called dynamic run-time libraries (in Windows: DLLs, in "
"Linux: shared objects or shared libraries). Without these run-time "
"libraries the program will not start."
msgstr ""

#: ../../source/learn/building_programs/managing_libraries.md:8
msgid "Managing libraries (static and dynamic libraries)"
msgstr ""

#: ../../source/learn/building_programs/managing_libraries.md:10
msgid ""
"If you need to manage a program built of dozens of source files (and that"
" is not uncommon!), the command-line needed to specify all the object "
"files will be very long indeed. This soon becomes tedious or even "
"impossible to maintain. So a different solution is called for: create "
"your own libraries."
msgstr ""

#: ../../source/learn/building_programs/managing_libraries.md:16
msgid ""
"Libraries contain any number of object files in a compact form, so that "
"the command-line becomes far shorter:"
msgstr ""

#: ../../source/learn/building_programs/managing_libraries.md:23
msgid ""
"where \"supportlib.a\" is a collection of one, two or many object files, "
"all compiled and then put into a library. The extension \".a\" is used by"
" Linux and Linux-like platforms. On Windows the extension \".lib\" is "
"used."
msgstr ""

#: ../../source/learn/building_programs/managing_libraries.md:27
msgid ""
"Creating your own libraries is not that complicated:  on Linux, you can "
"achieve this using a utility like `ar`:"
msgstr ""

#: ../../source/learn/building_programs/managing_libraries.md:37
msgid "or on Windows using the `lib` utility:"
msgstr ""

#: ../../source/learn/building_programs/managing_libraries.md:46
msgid "Note:"
msgstr ""

#: ../../source/learn/building_programs/managing_libraries.md:48
msgid ""
"The command `ar` with the option `r` either creates the library (the name"
" appears after the option) or adds new object files to the library (or "
"replaces any existing ones)."
msgstr ""

#: ../../source/learn/building_programs/managing_libraries.md:51
msgid ""
"The command `lib` will create a new library if you use specify the option"
" `/out:` with the name of the new library next to it. To add object files"
" to an existing library, leave out the `/out:` bit."
msgstr ""

#: ../../source/learn/building_programs/managing_libraries.md:54
msgid ""
"On platforms like Linux there is a particular convention to name "
"libraries. If you name your library like \"libname.a\" (note the \"lib\" "
"prefix), then you can refer to it as `-lname` in the link step."
msgstr ""

#: ../../source/learn/building_programs/managing_libraries.md:57
msgid ""
"Libraries are often sought in directories indicated by an option `-L` or "
"`/LIBPATH`. This saves you from having to specify the exact path for "
"every library."
msgstr ""

#: ../../source/learn/building_programs/managing_libraries.md:61
msgid ""
"Using libraries you can build very large programs without having to "
"resort to extremely long command lines."
msgstr ""

#: ../../source/learn/building_programs/managing_libraries.md:65
msgid "Static versus dynamic libraries"
msgstr ""

#: ../../source/learn/building_programs/managing_libraries.md:67
msgid ""
"The above discussion is tacitly assuming that you are using the so-called"
" static libraries. Static libraries (or at least parts of their contents)"
" become an integral part of the executable program. The only way to "
"change the routines incorporated in the program is by rebuilding the "
"program with a new version of the library."
msgstr ""

#: ../../source/learn/building_programs/managing_libraries.md:73
msgid ""
"A flexible alternative is to use the so-called dynamic libraries. These "
"libraries remain outside the executable program and as a consequence can "
"be replaced without rebulding the entire program. Compilers and indeed "
"the operating system itself rely heavily on such dynamic libraries. You "
"could consider dynamic libraries as a sort of executable programs that "
"need a bit of help to be run."
msgstr ""

#: ../../source/learn/building_programs/managing_libraries.md:80
msgid ""
"Building dynamic libraries works slightly differently from building "
"static libraries: you use the compiler/linker instead of a tool like `ar`"
" or `lib`."
msgstr ""

#: ../../source/learn/building_programs/managing_libraries.md:84
msgid "On Linux:"
msgstr ""

#: ../../source/learn/building_programs/managing_libraries.md:92
msgid "On Windows, with the Intel Fortran compiler:"
msgstr ""

#: ../../source/learn/building_programs/managing_libraries.md:100
msgid "The differences are that:"
msgstr ""

#: ../../source/learn/building_programs/managing_libraries.md:102
msgid ""
"You need to specify a compile option on Linux, for gfortran that is "
"`-fpic`, because the object code is slightly different."
msgstr ""

#: ../../source/learn/building_programs/managing_libraries.md:104
msgid ""
"You need to tell in the link step that you want a dynamic library (on "
"Linux: a shared object/library, hence the extension \".so\"; on Windows: "
"a dynamic link library)"
msgstr ""

#: ../../source/learn/building_programs/managing_libraries.md:108
msgid ""
"There is one more thing to be aware of: On Windows you must explicitly "
"specify that a procedure is to be _exported_, i.e. is visible in the "
"dynamic library. There are several ways — depending on the compiler you "
"use — to achieve this. One method is via a so-called compiler directive:"
msgstr ""

#: ../../source/learn/building_programs/managing_libraries.md:119
msgid "Or, with the Intel Fortran compiler:"
msgstr ""

#: ../../source/learn/building_programs/managing_libraries.md:126
msgid ""
"Besides a dynamic library (DLL), a so-called import library may be "
"generated."
msgstr ""

#: ../../source/learn/building_programs/managing_libraries.md:129
msgid ""
"Because the details differ per compiler, here are two examples: gfortran "
"on Cygwin and Intel Fortran on Windows. In both cases we look at the "
"`tabulate` program in the file \"tabulate.f90\"."
msgstr ""

#: ../../source/learn/building_programs/managing_libraries.md:133
msgid "GNU/Linux and gfortran"
msgstr ""

#: ../../source/learn/building_programs/managing_libraries.md:134
msgid ""
"The `tabulate` program requires a user-defined routine `f`. If we let it "
"reside in a dynamic library, say \"functions.dll\", we can simply replace"
" the implementation of the function by putting another dynamic library in"
" the directory. No need to rebuild the program as such."
msgstr ""

#: ../../source/learn/building_programs/managing_libraries.md:139
msgid ""
"On Cygwin it is not necessary to explicitly export a procedure — all "
"publically visible routines are exported when you build a dynamic "
"library. Also, no import library is generated."
msgstr ""

#: ../../source/learn/building_programs/managing_libraries.md:143
msgid ""
"Since our dynamic library can be built from a single source file, we can "
"take a shortcut:"
msgstr ""

#: ../../source/learn/building_programs/managing_libraries.md:150
msgid ""
"This produces the files \"functions.dll\" and \"user\\_functions.mod\". "
"The utility `nm` tells us the exact name of the function `f`:"
msgstr ""

#: ../../source/learn/building_programs/managing_libraries.md:165
msgid ""
"It has received a prefix `__function_MOD_` to distinguish it from any "
"other routine \"f\" that might be defined in another module."
msgstr ""

#: ../../source/learn/building_programs/managing_libraries.md:168
msgid "The next step is to build the program:"
msgstr ""

#: ../../source/learn/building_programs/managing_libraries.md:174
msgid ""
"The DLL and the .mod file are used to build the executable program with "
"checks on the function's interface, the right name and the reference to "
"\"a\" DLL, called \"functions.dll\"."
msgstr ""

#: ../../source/learn/building_programs/managing_libraries.md:178
msgid ""
"You can replace the shared library \"functions.dll\" by another one, "
"implementing a different function \"f\". Of course, you need to be "
"careful to use the correct interface for this function. The "
"compiler/linker are not invoked anymore, so they can do no checking."
msgstr ""

#: ../../source/learn/building_programs/managing_libraries.md:183
msgid "Windows and Intel Fortran"
msgstr ""

#: ../../source/learn/building_programs/managing_libraries.md:184
msgid ""
"The setup is the same as with Linux, but on Windows it is necessary to "
"explicitly export the routines. And an import library is generated — this"
" is the library that should be used in the link step."
msgstr ""

#: ../../source/learn/building_programs/managing_libraries.md:188
msgid ""
"The source file must contain the compiler directive, otherwise the "
"function `f` is not exported:"
msgstr ""

#: ../../source/learn/building_programs/managing_libraries.md:196
msgid "Again we take a shortcut:"
msgstr ""

#: ../../source/learn/building_programs/managing_libraries.md:202
msgid ""
"This produces the files \"functions.dll\", \"user\\_functions.mod\" as "
"well as \"functions.lib\" (and two other files of no importance here). "
"The \"dependency walker\" program tells us that the exact name of the "
"function \"f\" is `FUNCTION_mp_F`. It is also exported, so that it can be"
" found by the linker in the next step:"
msgstr ""

#: ../../source/learn/building_programs/managing_libraries.md:211
msgid "Note that we need to specify the name of the export library, not the DLL!"
msgstr ""

#: ../../source/learn/building_programs/managing_libraries.md:213
msgid ""
"(Note also: the Intel Fortran compiler uses the name of the first source "
"file as the name for the executable — here we do without the `-exe` "
"option.)"
msgstr ""

#: ../../source/learn/building_programs/managing_libraries.md:216
msgid ""
"Just as under Cygwin, the DLL and the .mod file are used to build the "
"executable program with checks on the function's interface, the right "
"name and the reference to \"a\" DLL, called \"functions.dll\"."
msgstr ""

#: ../../source/learn/building_programs/managing_libraries.md:220
msgid ""
"You can replace the shared library \"functions.dll\" by another one, but "
"the same caution is required: while the implementation can be quite "
"different, the function's interface must be the same."
msgstr ""

#: ../../source/learn/building_programs/project_make.md:8
msgid "An introduction to make"
msgstr ""

#: ../../source/learn/building_programs/project_make.md:10
msgid ""
"We briefly discussed the basics of ``make``. This chapter gives ideas and"
" strategies to scale ``make`` for larger projects."
msgstr ""

#: ../../source/learn/building_programs/project_make.md:13
msgid "Before going into detail with ``make``, consider a few points:"
msgstr ""

#: ../../source/learn/building_programs/project_make.md:14
msgid ""
"``make`` is a Unix tool and might give you a hard time when porting to "
"non-Unix platforms. That said, there are also different flavors of "
"``make`` available, not all might support the features you want to use."
msgstr ""

#: ../../source/learn/building_programs/project_make.md:17
msgid ""
"While ``make`` gives you full control over the build process, it also "
"means you are responsible for the entire build process, and you have to "
"specify the rules for every detail of your project. You might find "
"yourself spending a significant amount of time writing and maintaining "
"your ``Makefile`` instead of developing your source code."
msgstr ""

#: ../../source/learn/building_programs/project_make.md:21
msgid ""
"You can work with your ``Makefile``, but think about other developers on "
"your project who may not be familiar with ``make``. How much time do you "
"expect them to spend learning your ``Makefile`` and would they be able to"
" debug or add features?"
msgstr ""

#: ../../source/learn/building_programs/project_make.md:24
msgid ""
"Pure ``make`` will not scale. You will soon add auxiliary programs to "
"dynamically or statically generate your ``Makefile``. Those introduce "
"dependencies and possible sources of errors. The effort needed to test "
"and document those tools should not be underestimated."
msgstr ""

#: ../../source/learn/building_programs/project_make.md:29
msgid ""
"If you think ``make`` is suitable for your needs, than you can start "
"writing your ``Makefile``. For this course we will use real world "
"examples from the package index, which (at the time of writing) use build"
" systems other than ``make``. This guide should present a general "
"recommended style to write ``make``, but also serve as demonstration of "
"useful and interesting features."
msgstr ""

#: ../../source/learn/building_programs/project_make.md:35
#, python-format
msgid ""
"{% include tip.html content=\"Even if you find ``make`` unsuitable to "
"build your project, it is *the* tool to automate workflows defined by "
"files. Maybe you can leverage its power in a different context.\" %}"
msgstr ""

#: ../../source/learn/building_programs/project_make.md:40
msgid ""
"For this part we will work with <a "
"href=\"https://github.com/jacobwilliams/fortran-csv-module/tree/1.2.0\" "
"target=\"_blank\" rel=\"noopener\"> the Fortran CSV module (v1.2.0)</a>. "
"Our goal is to write a ``Makefile`` to compile this project to a static "
"library. Start by cloning the repository"
msgstr ""

#: ../../source/learn/building_programs/project_make.md:50
#, python-format
msgid ""
"{% include note.html content=\"For this part we will work with the code "
"from tag ``1.2.0``, to make it as reproducible as possible. Feel free to "
"use the latest version or another project instead.\" %}"
msgstr ""

#: ../../source/learn/building_programs/project_make.md:52
msgid ""
"This project uses FoBiS as build system, and you can check the "
"``build.sh`` for options used with FoBiS. We are about to write a "
"``Makefile`` for this project. First, we check the directory structure "
"and the source files"
msgstr ""

#: ../../source/learn/building_programs/project_make.md:74
msgid ""
"We find seven different Fortran source files; the four in ``src`` should "
"be compiled and added to a static library while the three in "
"``src/tests`` contain individual programs that depend on this static "
"library."
msgstr ""

#: ../../source/learn/building_programs/project_make.md:78
msgid "Start by creating a simple ``Makefile``:"
msgstr ""

#: ../../source/learn/building_programs/project_make.md:144
msgid ""
"Invoking ``make`` should build the static library and the test "
"executables as expected:"
msgstr ""

#: ../../source/learn/building_programs/project_make.md:159
msgid ""
"There are a few things to note there, a ``make`` build usually interlaces"
" the build artifacts and the source code, unless you put extra effort "
"into implementing a build directory. Also, right now the the source files"
" and dependencies are specified explicitly, which results in several "
"additional lines even for such a simple project."
msgstr ""

#: ../../source/learn/building_programs/project_make.md:166
msgid "Automatically generated dependencies"
msgstr ""

#: ../../source/learn/building_programs/project_make.md:168
msgid ""
"The main drawback of ``make`` for Fortran is the missing capability to "
"determine module dependencies. This is usually solved by either adding "
"those by hand or automatically scanning the source code with an external "
"tool. Some compilers (like the Intel Fortran compiler) also offer to "
"generate dependencies in ``make`` format."
msgstr ""

#: ../../source/learn/building_programs/project_make.md:173
msgid ""
"Before diving into the dependency generation, we will outline the concept"
" of a robust take on the dependency problem. First, we want an approach "
"that can process all source files independently, while each source file "
"provides (``module``) or requires (``use``) modules. When generating the "
"dependencies only the name of the source file and the module files are "
"known, and no information on the object file names should be required."
msgstr ""

#: ../../source/learn/building_programs/project_make.md:181
msgid ""
"If you check the dependency section above you will note that all "
"dependencies are defined between object files rather than source files. "
"To change this, we can generate a map from the source files their "
"respective object files:"
msgstr ""

#: ../../source/learn/building_programs/project_make.md:191
msgid ""
"Note the declaration of ``obj`` as recursively expanded variable, we "
"effectively use this mechanism to define a function in ``make``. The "
"``foreach`` function allows us to loop over all source files, while the "
"``eval`` function allows us to generate ``make`` statements and evaluate "
"them for this ``Makefile``."
msgstr ""

#: ../../source/learn/building_programs/project_make.md:196
msgid ""
"We adjust the dependencies accordingly as we can now define the name of "
"the object files through the source file names:"
msgstr ""

#: ../../source/learn/building_programs/project_make.md:216
msgid ""
"The same strategy of creating a map is already used for the module files,"
" now it is just expanded to the object files as well."
msgstr ""

#: ../../source/learn/building_programs/project_make.md:219
msgid ""
"To generate the respective dependency map automatically we will use an "
"``awk`` script here"
msgstr ""

#: ../../source/learn/building_programs/project_make.md:281
msgid ""
"This script makes a few assumptions about the source code it parses, so "
"it will not work with all Fortran code (namely submodules are not "
"supported), but for this example it will suffice."
msgstr ""

#: ../../source/learn/building_programs/project_make.md:287
msgid ""
"The above script uses the ``awk`` language, which is designed for the "
"purpose of text stream processing and uses a C-like syntax. In ``awk`` "
"you can define groups which are evaluated on certain events, *e.g.* when "
"a line matches a specific pattern, usually expressed by a <a "
"href=\"https://en.wikipedia.org/wiki/Regular_expression\" "
"target=\"_blank\" rel=\"noopener\"> regular expression</a>."
msgstr ""

#: ../../source/learn/building_programs/project_make.md:293
msgid ""
"This ``awk`` script defines five groups, two of them use the special "
"pattern ``BEGIN`` and ``END`` which are run before the script starts and "
"after the script finishes, respectively. Before the script starts we make"
" the script case-insensitive since we are dealing with Fortran source "
"code here. We also use the special variable ``FILENAME`` to determine "
"which file we are currently parsing and to allow processing multiple "
"files at once."
msgstr ""

#: ../../source/learn/building_programs/project_make.md:301
msgid ""
"With the three patterns defined we are looking for ``module``, ``use`` "
"and ``include`` statements as the first space delimited entry. With the "
"used pattern not all valid Fortran code will be parsed correctly. A "
"failing example would be:"
msgstr ""

#: ../../source/learn/building_programs/project_make.md:310
msgid ""
"To make this parsable by the ``awk`` script we can add another group "
"directly after the ``BEGIN`` group, modifying the stream while processing"
" it with"
msgstr ""

#: ../../source/learn/building_programs/project_make.md:319
msgid ""
"In theory you would need a full Fortran parser to deal with continuation "
"lines and other difficulties. This might be possible to implement in "
"``awk`` but would require a huge script in the end."
msgstr ""

#: ../../source/learn/building_programs/project_make.md:323
msgid ""
"Also, keep in mind that generating the dependencies should be fast, an "
"expensive parser can produce a significant overhead when generating "
"dependencies for a large code base. Making reasonable assumptions can "
"simplify and speed up this step, but also introduces an error source in "
"your build tools."
msgstr ""

#: ../../source/learn/building_programs/project_make.md:328
#, python-format
msgid "{% endcapture %} {% include tip.html title=\"Using awk\" content=note %}"
msgstr ""

#: ../../source/learn/building_programs/project_make.md:331
msgid ""
"Make the script executable (``chmod +x gen-deps.awk``) and test it with "
"``./gen-deps.awk $(find src -name '*.[fF]90')``. You should see output "
"like this:"
msgstr ""

#: ../../source/learn/building_programs/project_make.md:353
msgid ""
"Note that the scripts output will use recursively expanded variables and "
"not define any dependencies yet, because out-of-order declaration of "
"variables might be necessary and we do not want to create any target by "
"accident. You can verify that the same information as in the above "
"handwritten snippet is present. The only exception is the additional "
"dependency on the ``iso_fortran_env.mod``, since it is an undefined "
"variable it will just expand to an empty string and not introduce any "
"further dependencies."
msgstr ""

#: ../../source/learn/building_programs/project_make.md:361
msgid ""
"Now, you can finally include this piece in your ``Makefile`` to automate "
"the dependency generation:"
msgstr ""

#: ../../source/learn/building_programs/project_make.md:428
msgid ""
"Here additional dependency files are generated for each source file "
"individually and than included into the main ``Makefile``. Also, the "
"dependency files are added as dependency to the object files to ensure "
"they are generated before the object is compiled. The pipe character in "
"the dependencies defines an order of the rules without a timestamp "
"dependency, because it is not necessary to recompile an object file in "
"case dependencies are regenerated and potentially unchanged."
msgstr ""

#: ../../source/learn/building_programs/project_make.md:436
msgid ""
"Again, we make use of the ``eval`` function to generate the dependencies "
"in a ``foreach`` loop over all object files. Note that we created a map "
"between the object files in the dependency files, expanding ``dep`` once "
"yields the object file name, expanding it again yields the object files "
"it depends on."
msgstr ""

#: ../../source/learn/building_programs/project_make.md:441
msgid "Building your project with ``make`` should give an output similar to"
msgstr ""

#: ../../source/learn/building_programs/project_make.md:462
msgid ""
"Once the dependency files are generated, ``make`` will only update them "
"if the source changes and not require to rebuild them again for every "
"invocation."
msgstr ""

#: ../../source/learn/building_programs/project_make.md:465
#, python-format
msgid ""
"{% include tip.html content=\"With correct dependencies you can leverage "
"parallel execution of your ``Makefile``, just use the ``-j`` flag to "
"create multiple ``make`` processes.\" %}"
msgstr ""

#: ../../source/learn/building_programs/project_make.md:467
msgid ""
"Since dependencies can now be generated automatically, there is no need "
"to specify the source files explicitly, the ``wildcard`` function can be "
"used to determine them dynamically:"
msgstr ""

#: ../../source/learn/building_programs/runtime_libraries.md:8
msgid "Run-time libraries"
msgstr ""

#: ../../source/learn/building_programs/runtime_libraries.md:10
msgid ""
"To illustrate that even a simple program depends on external run-time "
"libraries, here is the output from the `ldd` utility that reports such "
"dependencies:"
msgstr ""

#: ../../source/learn/building_programs/runtime_libraries.md:25
msgid ""
"Other compilers or other versions of the same compiler will probably "
"require different dynamic libraries. As long as you run the program on "
"the same computer — or, more accurately, within the same environment — "
"there should be no problem. However, when such a library cannot be found,"
" you will get (hopefully) an error message and the program stops "
"immediately."
msgstr ""

#: ../../source/learn/building_programs/runtime_libraries.md:32
msgid ""
"Therefore it is good to know what libraries are required. On Linux and "
"Linux-like environments, the `ldd` utility is a great help. On Windows, "
"you may want to use the `dependency walker` (the latest version, which "
"works very nicely with Windows 10, is found here: "
"<https://github.com/lucasg/Dependencies>)"
msgstr ""

#: ../../source/learn/building_programs/runtime_libraries.md:37
msgid ""
"Another thing you should know is where the program tries to find these "
"libraries. That is a vast subject in its own right and full of "
"complications and history. Here we merely scratch the surface:"
msgstr ""

#: ../../source/learn/building_programs/runtime_libraries.md:41
msgid "_On Linux:_"
msgstr ""

#: ../../source/learn/building_programs/runtime_libraries.md:43
msgid ""
"The environment variable `LD_LIBRARY_PATH` is used. It consists of a list"
" of directories to be searched, each directory separated via colons (:) "
"from the others. For instance: `/usr/lib:/usr/local/lib` — typical system"
" directories."
msgstr ""

#: ../../source/learn/building_programs/runtime_libraries.md:47
msgid ""
"At the link step you can also use an option to set `RPATH`, a list of "
"directories that is put into the executable file itself."
msgstr ""

#: ../../source/learn/building_programs/runtime_libraries.md:49
msgid "Then there are several system directories that are searched."
msgstr ""

#: ../../source/learn/building_programs/runtime_libraries.md:51
msgid "_On Windows:_"
msgstr ""

#: ../../source/learn/building_programs/runtime_libraries.md:53
msgid ""
"The directory containing the executable program may also contain dynamic "
"libraries."
msgstr ""

#: ../../source/learn/building_programs/runtime_libraries.md:55
msgid ""
"The environment variable \"PATH\" is used. Again a list of directories to"
" be searched, but now the separating character is the semicolon (;)."
msgstr ""

#: ../../source/learn/building_programs/runtime_libraries.md:57
msgid "A set of system directories is searched."
msgstr ""

#: ../../source/learn/building_programs/runtime_libraries.md:59
msgid ""
"Unfortunately, the details can change from one version of the operating "
"system to the next. The above is merely an indication — use tools like "
"\"ldd\" or \"dependency walker\" to find out what libraries are loaded "
"and where they are found."
msgstr ""

#: ../../source/learn/building_programs/runtime_libraries.md:64
msgid ""
"If you want to share your program with colleagues or clients or simply "
"users all over the world, you will have to take care that, besides the "
"program, you also distribute the libraries it depends on. For more "
"information: see below."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1
#: ../../source/learn/intrinsics/index.md:139
msgid "ARRAY_index"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:2
#: ../../source/learn/intrinsics/index.md:15
msgid "Properties and attributes of arrays"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:4
msgid "MERGE"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:5
#: ../../source/learn/intrinsics/ARRAY_index.md:161
#: ../../source/learn/intrinsics/ARRAY_index.md:272
#: ../../source/learn/intrinsics/ARRAY_index.md:399
#: ../../source/learn/intrinsics/ARRAY_index.md:465
#: ../../source/learn/intrinsics/ARRAY_index.md:551
#: ../../source/learn/intrinsics/ARRAY_index.md:665
#: ../../source/learn/intrinsics/ARRAY_index.md:781
#: ../../source/learn/intrinsics/ARRAY_index.md:827
#: ../../source/learn/intrinsics/ARRAY_index.md:893
#: ../../source/learn/intrinsics/ARRAY_index.md:1080
#: ../../source/learn/intrinsics/ARRAY_index.md:1196
#: ../../source/learn/intrinsics/ARRAY_index.md:1298
#: ../../source/learn/intrinsics/ARRAY_index.md:1387
#: ../../source/learn/intrinsics/ARRAY_index.md:1580
#: ../../source/learn/intrinsics/ARRAY_index.md:1666
#: ../../source/learn/intrinsics/ARRAY_index.md:1793
#: ../../source/learn/intrinsics/ARRAY_index.md:1865
#: ../../source/learn/intrinsics/ARRAY_index.md:1952
#: ../../source/learn/intrinsics/ARRAY_index.md:2038
#: ../../source/learn/intrinsics/ARRAY_index.md:2184
#: ../../source/learn/intrinsics/ARRAY_index.md:2413
#: ../../source/learn/intrinsics/ARRAY_index.md:2501
#: ../../source/learn/intrinsics/BIT_index.md:5
#: ../../source/learn/intrinsics/BIT_index.md:44
#: ../../source/learn/intrinsics/BIT_index.md:84
#: ../../source/learn/intrinsics/BIT_index.md:121
#: ../../source/learn/intrinsics/BIT_index.md:158
#: ../../source/learn/intrinsics/BIT_index.md:225
#: ../../source/learn/intrinsics/BIT_index.md:355
#: ../../source/learn/intrinsics/BIT_index.md:415
#: ../../source/learn/intrinsics/BIT_index.md:545
#: ../../source/learn/intrinsics/BIT_index.md:606
#: ../../source/learn/intrinsics/BIT_index.md:668
#: ../../source/learn/intrinsics/BIT_index.md:782
#: ../../source/learn/intrinsics/BIT_index.md:822
#: ../../source/learn/intrinsics/BIT_index.md:862
#: ../../source/learn/intrinsics/BIT_index.md:978
#: ../../source/learn/intrinsics/BIT_index.md:1123
#: ../../source/learn/intrinsics/BIT_index.md:1175
#: ../../source/learn/intrinsics/BIT_index.md:1222
#: ../../source/learn/intrinsics/BIT_index.md:1269
#: ../../source/learn/intrinsics/BIT_index.md:1363
#: ../../source/learn/intrinsics/BIT_index.md:1466
#: ../../source/learn/intrinsics/BIT_index.md:1539
#: ../../source/learn/intrinsics/BIT_index.md:1614
#: ../../source/learn/intrinsics/BIT_index.md:1675
#: ../../source/learn/intrinsics/BIT_index.md:1748
#: ../../source/learn/intrinsics/BIT_index.md:1793
#: ../../source/learn/intrinsics/BIT_index.md:1863
#: ../../source/learn/intrinsics/BIT_index.md:1922
#: ../../source/learn/intrinsics/BIT_index.md:1967
#: ../../source/learn/intrinsics/BIT_index.md:2008
#: ../../source/learn/intrinsics/BIT_index.md:2049
#: ../../source/learn/intrinsics/BIT_index.md:2088
#: ../../source/learn/intrinsics/CHARACTER_index.md:5
#: ../../source/learn/intrinsics/CHARACTER_index.md:133
#: ../../source/learn/intrinsics/CHARACTER_index.md:208
#: ../../source/learn/intrinsics/CHARACTER_index.md:286
#: ../../source/learn/intrinsics/CHARACTER_index.md:450
#: ../../source/learn/intrinsics/CHARACTER_index.md:527
#: ../../source/learn/intrinsics/CHARACTER_index.md:617
#: ../../source/learn/intrinsics/CHARACTER_index.md:744
#: ../../source/learn/intrinsics/CHARACTER_index.md:830
#: ../../source/learn/intrinsics/CHARACTER_index.md:906
#: ../../source/learn/intrinsics/CHARACTER_index.md:1170
#: ../../source/learn/intrinsics/CHARACTER_index.md:1233
#: ../../source/learn/intrinsics/CHARACTER_index.md:1298
#: ../../source/learn/intrinsics/CHARACTER_index.md:1409
#: ../../source/learn/intrinsics/CHARACTER_index.md:1469
#: ../../source/learn/intrinsics/CHARACTER_index.md:1534
#: ../../source/learn/intrinsics/CHARACTER_index.md:1612
#: ../../source/learn/intrinsics/CHARACTER_index.md:1700
#: ../../source/learn/intrinsics/COMPILER_index.md:5
#: ../../source/learn/intrinsics/COMPILER_index.md:63
#: ../../source/learn/intrinsics/C_index.md:5
#: ../../source/learn/intrinsics/C_index.md:67
#: ../../source/learn/intrinsics/C_index.md:127
#: ../../source/learn/intrinsics/C_index.md:189
#: ../../source/learn/intrinsics/C_index.md:258
#: ../../source/learn/intrinsics/C_index.md:314
#: ../../source/learn/intrinsics/MATH_index.md:5
#: ../../source/learn/intrinsics/MATH_index.md:72
#: ../../source/learn/intrinsics/MATH_index.md:133
#: ../../source/learn/intrinsics/MATH_index.md:230
#: ../../source/learn/intrinsics/MATH_index.md:290
#: ../../source/learn/intrinsics/MATH_index.md:371
#: ../../source/learn/intrinsics/MATH_index.md:435
#: ../../source/learn/intrinsics/MATH_index.md:489
#: ../../source/learn/intrinsics/MATH_index.md:564
#: ../../source/learn/intrinsics/MATH_index.md:622
#: ../../source/learn/intrinsics/MATH_index.md:753
#: ../../source/learn/intrinsics/MATH_index.md:842
#: ../../source/learn/intrinsics/MATH_index.md:893
#: ../../source/learn/intrinsics/MATH_index.md:948
#: ../../source/learn/intrinsics/MATH_index.md:1036
#: ../../source/learn/intrinsics/MATH_index.md:1103
#: ../../source/learn/intrinsics/MATH_index.md:1196
#: ../../source/learn/intrinsics/MATH_index.md:1246
#: ../../source/learn/intrinsics/MATH_index.md:1304
#: ../../source/learn/intrinsics/MATH_index.md:1392
#: ../../source/learn/intrinsics/MATH_index.md:1486
#: ../../source/learn/intrinsics/MATH_index.md:1543
#: ../../source/learn/intrinsics/MATH_index.md:1599
#: ../../source/learn/intrinsics/MATH_index.md:1671
#: ../../source/learn/intrinsics/MATH_index.md:1727
#: ../../source/learn/intrinsics/MATH_index.md:1778
#: ../../source/learn/intrinsics/MATH_index.md:1848
#: ../../source/learn/intrinsics/MATH_index.md:1903
#: ../../source/learn/intrinsics/MATH_index.md:1975
#: ../../source/learn/intrinsics/MATH_index.md:2026
#: ../../source/learn/intrinsics/MATH_index.md:2153
#: ../../source/learn/intrinsics/MATH_index.md:2200
#: ../../source/learn/intrinsics/MATH_index.md:2247
#: ../../source/learn/intrinsics/MODEL_index.md:5
#: ../../source/learn/intrinsics/MODEL_index.md:72
#: ../../source/learn/intrinsics/MODEL_index.md:139
#: ../../source/learn/intrinsics/MODEL_index.md:222
#: ../../source/learn/intrinsics/MODEL_index.md:271
#: ../../source/learn/intrinsics/MODEL_index.md:344
#: ../../source/learn/intrinsics/MODEL_index.md:413
#: ../../source/learn/intrinsics/MODEL_index.md:480
#: ../../source/learn/intrinsics/MODEL_index.md:558
#: ../../source/learn/intrinsics/MODEL_index.md:685
#: ../../source/learn/intrinsics/MODEL_index.md:792
#: ../../source/learn/intrinsics/MODEL_index.md:860
#: ../../source/learn/intrinsics/MODEL_index.md:927
#: ../../source/learn/intrinsics/MODEL_index.md:995
#: ../../source/learn/intrinsics/MODEL_index.md:1062
#: ../../source/learn/intrinsics/MODEL_index.md:1135
#: ../../source/learn/intrinsics/NUMERIC_index.md:6
#: ../../source/learn/intrinsics/NUMERIC_index.md:131
#: ../../source/learn/intrinsics/NUMERIC_index.md:222
#: ../../source/learn/intrinsics/NUMERIC_index.md:303
#: ../../source/learn/intrinsics/NUMERIC_index.md:380
#: ../../source/learn/intrinsics/NUMERIC_index.md:479
#: ../../source/learn/intrinsics/NUMERIC_index.md:544
#: ../../source/learn/intrinsics/NUMERIC_index.md:629
#: ../../source/learn/intrinsics/NUMERIC_index.md:718
#: ../../source/learn/intrinsics/NUMERIC_index.md:836
#: ../../source/learn/intrinsics/NUMERIC_index.md:891
#: ../../source/learn/intrinsics/NUMERIC_index.md:968
#: ../../source/learn/intrinsics/NUMERIC_index.md:1039
#: ../../source/learn/intrinsics/NUMERIC_index.md:1114
#: ../../source/learn/intrinsics/NUMERIC_index.md:1184
#: ../../source/learn/intrinsics/NUMERIC_index.md:1250
#: ../../source/learn/intrinsics/NUMERIC_index.md:1333
#: ../../source/learn/intrinsics/NUMERIC_index.md:1370
#: ../../source/learn/intrinsics/NUMERIC_index.md:1432
#: ../../source/learn/intrinsics/PARALLEL_index.md:5
#: ../../source/learn/intrinsics/PARALLEL_index.md:65
#: ../../source/learn/intrinsics/PARALLEL_index.md:110
#: ../../source/learn/intrinsics/PARALLEL_index.md:180
#: ../../source/learn/intrinsics/PARALLEL_index.md:246
#: ../../source/learn/intrinsics/PARALLEL_index.md:346
#: ../../source/learn/intrinsics/PARALLEL_index.md:417
#: ../../source/learn/intrinsics/PARALLEL_index.md:463
#: ../../source/learn/intrinsics/PARALLEL_index.md:518
#: ../../source/learn/intrinsics/PARALLEL_index.md:570
#: ../../source/learn/intrinsics/PARALLEL_index.md:635
#: ../../source/learn/intrinsics/PARALLEL_index.md:777
#: ../../source/learn/intrinsics/PARALLEL_index.md:843
#: ../../source/learn/intrinsics/PARALLEL_index.md:909
#: ../../source/learn/intrinsics/PARALLEL_index.md:975
#: ../../source/learn/intrinsics/PARALLEL_index.md:1037
#: ../../source/learn/intrinsics/PARALLEL_index.md:1097
#: ../../source/learn/intrinsics/PARALLEL_index.md:1156
#: ../../source/learn/intrinsics/PARALLEL_index.md:1222
#: ../../source/learn/intrinsics/PARALLEL_index.md:1288
#: ../../source/learn/intrinsics/PARALLEL_index.md:1354
#: ../../source/learn/intrinsics/STATE_index.md:5
#: ../../source/learn/intrinsics/STATE_index.md:92
#: ../../source/learn/intrinsics/STATE_index.md:136
#: ../../source/learn/intrinsics/STATE_index.md:198
#: ../../source/learn/intrinsics/STATE_index.md:248
#: ../../source/learn/intrinsics/STATE_index.md:319
#: ../../source/learn/intrinsics/STATE_index.md:379
#: ../../source/learn/intrinsics/SYSTEM_index.md:5
#: ../../source/learn/intrinsics/SYSTEM_index.md:67
#: ../../source/learn/intrinsics/SYSTEM_index.md:152
#: ../../source/learn/intrinsics/SYSTEM_index.md:279
#: ../../source/learn/intrinsics/SYSTEM_index.md:352
#: ../../source/learn/intrinsics/SYSTEM_index.md:464
#: ../../source/learn/intrinsics/SYSTEM_index.md:566
#: ../../source/learn/intrinsics/SYSTEM_index.md:670
#: ../../source/learn/intrinsics/TRANSFORM_index.md:5
#: ../../source/learn/intrinsics/TRANSFORM_index.md:75
#: ../../source/learn/intrinsics/TRANSFORM_index.md:141
#: ../../source/learn/intrinsics/TRANSFORM_index.md:224
#: ../../source/learn/intrinsics/TRANSFORM_index.md:261
#: ../../source/learn/intrinsics/TRANSFORM_index.md:323
#: ../../source/learn/intrinsics/TYPE_index.md:58
#: ../../source/learn/intrinsics/TYPE_index.md:121
#: ../../source/learn/intrinsics/TYPE_index.md:285
#: ../../source/learn/intrinsics/TYPE_index.md:409
#: ../../source/learn/intrinsics/TYPE_index.md:531
#: ../../source/learn/intrinsics/TYPE_index.md:604
#: ../../source/learn/intrinsics/TYPE_index.md:662
#: ../../source/learn/intrinsics/TYPE_index.md:766
#: ../../source/learn/intrinsics/TYPE_index.md:834
#: ../../source/learn/intrinsics/TYPE_index.md:883
#: ../../source/learn/intrinsics/TYPE_index.md:941
#: ../../source/learn/intrinsics/TYPE_index.md:1002
msgid "__Name__"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:7
msgid "__merge__(3) - \\[ARRAY CONSTRUCTION\\] Merge variables"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:9
#: ../../source/learn/intrinsics/ARRAY_index.md:165
#: ../../source/learn/intrinsics/ARRAY_index.md:277
#: ../../source/learn/intrinsics/ARRAY_index.md:404
#: ../../source/learn/intrinsics/ARRAY_index.md:470
#: ../../source/learn/intrinsics/ARRAY_index.md:556
#: ../../source/learn/intrinsics/ARRAY_index.md:669
#: ../../source/learn/intrinsics/ARRAY_index.md:786
#: ../../source/learn/intrinsics/ARRAY_index.md:832
#: ../../source/learn/intrinsics/ARRAY_index.md:898
#: ../../source/learn/intrinsics/ARRAY_index.md:1084
#: ../../source/learn/intrinsics/ARRAY_index.md:1201
#: ../../source/learn/intrinsics/ARRAY_index.md:1303
#: ../../source/learn/intrinsics/ARRAY_index.md:1392
#: ../../source/learn/intrinsics/ARRAY_index.md:1585
#: ../../source/learn/intrinsics/ARRAY_index.md:1671
#: ../../source/learn/intrinsics/ARRAY_index.md:1798
#: ../../source/learn/intrinsics/ARRAY_index.md:1870
#: ../../source/learn/intrinsics/ARRAY_index.md:1957
#: ../../source/learn/intrinsics/ARRAY_index.md:2042
#: ../../source/learn/intrinsics/ARRAY_index.md:2188
#: ../../source/learn/intrinsics/ARRAY_index.md:2418
#: ../../source/learn/intrinsics/ARRAY_index.md:2506
#: ../../source/learn/intrinsics/BIT_index.md:10
#: ../../source/learn/intrinsics/BIT_index.md:49
#: ../../source/learn/intrinsics/BIT_index.md:89
#: ../../source/learn/intrinsics/BIT_index.md:126
#: ../../source/learn/intrinsics/BIT_index.md:162
#: ../../source/learn/intrinsics/BIT_index.md:229
#: ../../source/learn/intrinsics/BIT_index.md:360
#: ../../source/learn/intrinsics/BIT_index.md:420
#: ../../source/learn/intrinsics/BIT_index.md:550
#: ../../source/learn/intrinsics/BIT_index.md:611
#: ../../source/learn/intrinsics/BIT_index.md:672
#: ../../source/learn/intrinsics/BIT_index.md:787
#: ../../source/learn/intrinsics/BIT_index.md:827
#: ../../source/learn/intrinsics/BIT_index.md:866
#: ../../source/learn/intrinsics/BIT_index.md:983
#: ../../source/learn/intrinsics/BIT_index.md:1128
#: ../../source/learn/intrinsics/BIT_index.md:1180
#: ../../source/learn/intrinsics/BIT_index.md:1227
#: ../../source/learn/intrinsics/BIT_index.md:1273
#: ../../source/learn/intrinsics/BIT_index.md:1367
#: ../../source/learn/intrinsics/BIT_index.md:1471
#: ../../source/learn/intrinsics/BIT_index.md:1544
#: ../../source/learn/intrinsics/BIT_index.md:1619
#: ../../source/learn/intrinsics/BIT_index.md:1680
#: ../../source/learn/intrinsics/BIT_index.md:1753
#: ../../source/learn/intrinsics/BIT_index.md:1798
#: ../../source/learn/intrinsics/BIT_index.md:1866
#: ../../source/learn/intrinsics/BIT_index.md:1927
#: ../../source/learn/intrinsics/BIT_index.md:1972
#: ../../source/learn/intrinsics/BIT_index.md:2013
#: ../../source/learn/intrinsics/BIT_index.md:2054
#: ../../source/learn/intrinsics/BIT_index.md:2093
#: ../../source/learn/intrinsics/CHARACTER_index.md:9
#: ../../source/learn/intrinsics/CHARACTER_index.md:137
#: ../../source/learn/intrinsics/CHARACTER_index.md:213
#: ../../source/learn/intrinsics/CHARACTER_index.md:290
#: ../../source/learn/intrinsics/CHARACTER_index.md:455
#: ../../source/learn/intrinsics/CHARACTER_index.md:532
#: ../../source/learn/intrinsics/CHARACTER_index.md:622
#: ../../source/learn/intrinsics/CHARACTER_index.md:749
#: ../../source/learn/intrinsics/CHARACTER_index.md:835
#: ../../source/learn/intrinsics/CHARACTER_index.md:910
#: ../../source/learn/intrinsics/CHARACTER_index.md:1175
#: ../../source/learn/intrinsics/CHARACTER_index.md:1238
#: ../../source/learn/intrinsics/CHARACTER_index.md:1303
#: ../../source/learn/intrinsics/CHARACTER_index.md:1414
#: ../../source/learn/intrinsics/CHARACTER_index.md:1473
#: ../../source/learn/intrinsics/CHARACTER_index.md:1538
#: ../../source/learn/intrinsics/CHARACTER_index.md:1616
#: ../../source/learn/intrinsics/CHARACTER_index.md:1705
#: ../../source/learn/intrinsics/COMPILER_index.md:10
#: ../../source/learn/intrinsics/COMPILER_index.md:68
#: ../../source/learn/intrinsics/C_index.md:10
#: ../../source/learn/intrinsics/C_index.md:72
#: ../../source/learn/intrinsics/C_index.md:132
#: ../../source/learn/intrinsics/C_index.md:194
#: ../../source/learn/intrinsics/C_index.md:263
#: ../../source/learn/intrinsics/C_index.md:319
#: ../../source/learn/intrinsics/MATH_index.md:8
#: ../../source/learn/intrinsics/MATH_index.md:76
#: ../../source/learn/intrinsics/MATH_index.md:137
#: ../../source/learn/intrinsics/MATH_index.md:235
#: ../../source/learn/intrinsics/MATH_index.md:294
#: ../../source/learn/intrinsics/MATH_index.md:375
#: ../../source/learn/intrinsics/MATH_index.md:440
#: ../../source/learn/intrinsics/MATH_index.md:493
#: ../../source/learn/intrinsics/MATH_index.md:569
#: ../../source/learn/intrinsics/MATH_index.md:626
#: ../../source/learn/intrinsics/MATH_index.md:757
#: ../../source/learn/intrinsics/MATH_index.md:847
#: ../../source/learn/intrinsics/MATH_index.md:898
#: ../../source/learn/intrinsics/MATH_index.md:953
#: ../../source/learn/intrinsics/MATH_index.md:1041
#: ../../source/learn/intrinsics/MATH_index.md:1107
#: ../../source/learn/intrinsics/MATH_index.md:1201
#: ../../source/learn/intrinsics/MATH_index.md:1250
#: ../../source/learn/intrinsics/MATH_index.md:1308
#: ../../source/learn/intrinsics/MATH_index.md:1396
#: ../../source/learn/intrinsics/MATH_index.md:1491
#: ../../source/learn/intrinsics/MATH_index.md:1548
#: ../../source/learn/intrinsics/MATH_index.md:1604
#: ../../source/learn/intrinsics/MATH_index.md:1676
#: ../../source/learn/intrinsics/MATH_index.md:1732
#: ../../source/learn/intrinsics/MATH_index.md:1783
#: ../../source/learn/intrinsics/MATH_index.md:1853
#: ../../source/learn/intrinsics/MATH_index.md:1908
#: ../../source/learn/intrinsics/MATH_index.md:1980
#: ../../source/learn/intrinsics/MATH_index.md:2030
#: ../../source/learn/intrinsics/MATH_index.md:2158
#: ../../source/learn/intrinsics/MATH_index.md:2205
#: ../../source/learn/intrinsics/MATH_index.md:2252
#: ../../source/learn/intrinsics/MODEL_index.md:10
#: ../../source/learn/intrinsics/MODEL_index.md:77
#: ../../source/learn/intrinsics/MODEL_index.md:144
#: ../../source/learn/intrinsics/MODEL_index.md:227
#: ../../source/learn/intrinsics/MODEL_index.md:276
#: ../../source/learn/intrinsics/MODEL_index.md:349
#: ../../source/learn/intrinsics/MODEL_index.md:418
#: ../../source/learn/intrinsics/MODEL_index.md:484
#: ../../source/learn/intrinsics/MODEL_index.md:562
#: ../../source/learn/intrinsics/MODEL_index.md:689
#: ../../source/learn/intrinsics/MODEL_index.md:797
#: ../../source/learn/intrinsics/MODEL_index.md:865
#: ../../source/learn/intrinsics/MODEL_index.md:932
#: ../../source/learn/intrinsics/MODEL_index.md:1000
#: ../../source/learn/intrinsics/MODEL_index.md:1067
#: ../../source/learn/intrinsics/MODEL_index.md:1140
#: ../../source/learn/intrinsics/NUMERIC_index.md:10
#: ../../source/learn/intrinsics/NUMERIC_index.md:136
#: ../../source/learn/intrinsics/NUMERIC_index.md:227
#: ../../source/learn/intrinsics/NUMERIC_index.md:308
#: ../../source/learn/intrinsics/NUMERIC_index.md:384
#: ../../source/learn/intrinsics/NUMERIC_index.md:484
#: ../../source/learn/intrinsics/NUMERIC_index.md:549
#: ../../source/learn/intrinsics/NUMERIC_index.md:633
#: ../../source/learn/intrinsics/NUMERIC_index.md:722
#: ../../source/learn/intrinsics/NUMERIC_index.md:841
#: ../../source/learn/intrinsics/NUMERIC_index.md:896
#: ../../source/learn/intrinsics/NUMERIC_index.md:973
#: ../../source/learn/intrinsics/NUMERIC_index.md:1044
#: ../../source/learn/intrinsics/NUMERIC_index.md:1119
#: ../../source/learn/intrinsics/NUMERIC_index.md:1189
#: ../../source/learn/intrinsics/NUMERIC_index.md:1255
#: ../../source/learn/intrinsics/NUMERIC_index.md:1338
#: ../../source/learn/intrinsics/NUMERIC_index.md:1375
#: ../../source/learn/intrinsics/NUMERIC_index.md:1437
#: ../../source/learn/intrinsics/PARALLEL_index.md:10
#: ../../source/learn/intrinsics/PARALLEL_index.md:70
#: ../../source/learn/intrinsics/PARALLEL_index.md:115
#: ../../source/learn/intrinsics/PARALLEL_index.md:185
#: ../../source/learn/intrinsics/PARALLEL_index.md:251
#: ../../source/learn/intrinsics/PARALLEL_index.md:351
#: ../../source/learn/intrinsics/PARALLEL_index.md:422
#: ../../source/learn/intrinsics/PARALLEL_index.md:468
#: ../../source/learn/intrinsics/PARALLEL_index.md:523
#: ../../source/learn/intrinsics/PARALLEL_index.md:575
#: ../../source/learn/intrinsics/PARALLEL_index.md:640
#: ../../source/learn/intrinsics/PARALLEL_index.md:782
#: ../../source/learn/intrinsics/PARALLEL_index.md:848
#: ../../source/learn/intrinsics/PARALLEL_index.md:914
#: ../../source/learn/intrinsics/PARALLEL_index.md:980
#: ../../source/learn/intrinsics/PARALLEL_index.md:1042
#: ../../source/learn/intrinsics/PARALLEL_index.md:1101
#: ../../source/learn/intrinsics/PARALLEL_index.md:1161
#: ../../source/learn/intrinsics/PARALLEL_index.md:1227
#: ../../source/learn/intrinsics/PARALLEL_index.md:1293
#: ../../source/learn/intrinsics/PARALLEL_index.md:1359
#: ../../source/learn/intrinsics/STATE_index.md:10
#: ../../source/learn/intrinsics/STATE_index.md:97
#: ../../source/learn/intrinsics/STATE_index.md:141
#: ../../source/learn/intrinsics/STATE_index.md:203
#: ../../source/learn/intrinsics/STATE_index.md:253
#: ../../source/learn/intrinsics/STATE_index.md:324
#: ../../source/learn/intrinsics/STATE_index.md:384
#: ../../source/learn/intrinsics/SYSTEM_index.md:9
#: ../../source/learn/intrinsics/SYSTEM_index.md:71
#: ../../source/learn/intrinsics/SYSTEM_index.md:156
#: ../../source/learn/intrinsics/SYSTEM_index.md:283
#: ../../source/learn/intrinsics/SYSTEM_index.md:356
#: ../../source/learn/intrinsics/SYSTEM_index.md:469
#: ../../source/learn/intrinsics/SYSTEM_index.md:571
#: ../../source/learn/intrinsics/SYSTEM_index.md:674
#: ../../source/learn/intrinsics/TRANSFORM_index.md:10
#: ../../source/learn/intrinsics/TRANSFORM_index.md:80
#: ../../source/learn/intrinsics/TRANSFORM_index.md:146
#: ../../source/learn/intrinsics/TRANSFORM_index.md:229
#: ../../source/learn/intrinsics/TRANSFORM_index.md:266
#: ../../source/learn/intrinsics/TRANSFORM_index.md:328
#: ../../source/learn/intrinsics/TYPE_index.md:63
#: ../../source/learn/intrinsics/TYPE_index.md:126
#: ../../source/learn/intrinsics/TYPE_index.md:288
#: ../../source/learn/intrinsics/TYPE_index.md:413
#: ../../source/learn/intrinsics/TYPE_index.md:535
#: ../../source/learn/intrinsics/TYPE_index.md:609
#: ../../source/learn/intrinsics/TYPE_index.md:667
#: ../../source/learn/intrinsics/TYPE_index.md:771
#: ../../source/learn/intrinsics/TYPE_index.md:839
#: ../../source/learn/intrinsics/TYPE_index.md:888
#: ../../source/learn/intrinsics/TYPE_index.md:946
#: ../../source/learn/intrinsics/TYPE_index.md:1007
msgid "__Syntax__"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:13
#: ../../source/learn/intrinsics/ARRAY_index.md:178
#: ../../source/learn/intrinsics/ARRAY_index.md:287
#: ../../source/learn/intrinsics/ARRAY_index.md:408
#: ../../source/learn/intrinsics/ARRAY_index.md:478
#: ../../source/learn/intrinsics/ARRAY_index.md:560
#: ../../source/learn/intrinsics/ARRAY_index.md:678
#: ../../source/learn/intrinsics/ARRAY_index.md:790
#: ../../source/learn/intrinsics/ARRAY_index.md:836
#: ../../source/learn/intrinsics/ARRAY_index.md:902
#: ../../source/learn/intrinsics/ARRAY_index.md:1088
#: ../../source/learn/intrinsics/ARRAY_index.md:1205
#: ../../source/learn/intrinsics/ARRAY_index.md:1311
#: ../../source/learn/intrinsics/ARRAY_index.md:1400
#: ../../source/learn/intrinsics/ARRAY_index.md:1589
#: ../../source/learn/intrinsics/ARRAY_index.md:1675
#: ../../source/learn/intrinsics/ARRAY_index.md:1802
#: ../../source/learn/intrinsics/ARRAY_index.md:1874
#: ../../source/learn/intrinsics/ARRAY_index.md:1965
#: ../../source/learn/intrinsics/ARRAY_index.md:2046
#: ../../source/learn/intrinsics/ARRAY_index.md:2198
#: ../../source/learn/intrinsics/ARRAY_index.md:2423
#: ../../source/learn/intrinsics/ARRAY_index.md:2510
#: ../../source/learn/intrinsics/BIT_index.md:14
#: ../../source/learn/intrinsics/BIT_index.md:53
#: ../../source/learn/intrinsics/BIT_index.md:93
#: ../../source/learn/intrinsics/BIT_index.md:130
#: ../../source/learn/intrinsics/BIT_index.md:169
#: ../../source/learn/intrinsics/BIT_index.md:239
#: ../../source/learn/intrinsics/BIT_index.md:364
#: ../../source/learn/intrinsics/BIT_index.md:424
#: ../../source/learn/intrinsics/BIT_index.md:554
#: ../../source/learn/intrinsics/BIT_index.md:615
#: ../../source/learn/intrinsics/BIT_index.md:677
#: ../../source/learn/intrinsics/BIT_index.md:791
#: ../../source/learn/intrinsics/BIT_index.md:831
#: ../../source/learn/intrinsics/BIT_index.md:878
#: ../../source/learn/intrinsics/BIT_index.md:987
#: ../../source/learn/intrinsics/BIT_index.md:1132
#: ../../source/learn/intrinsics/BIT_index.md:1184
#: ../../source/learn/intrinsics/BIT_index.md:1231
#: ../../source/learn/intrinsics/BIT_index.md:1280
#: ../../source/learn/intrinsics/BIT_index.md:1374
#: ../../source/learn/intrinsics/BIT_index.md:1479
#: ../../source/learn/intrinsics/BIT_index.md:1552
#: ../../source/learn/intrinsics/BIT_index.md:1623
#: ../../source/learn/intrinsics/BIT_index.md:1688
#: ../../source/learn/intrinsics/BIT_index.md:1757
#: ../../source/learn/intrinsics/BIT_index.md:1804
#: ../../source/learn/intrinsics/BIT_index.md:1870
#: ../../source/learn/intrinsics/BIT_index.md:1931
#: ../../source/learn/intrinsics/BIT_index.md:1976
#: ../../source/learn/intrinsics/BIT_index.md:2017
#: ../../source/learn/intrinsics/BIT_index.md:2058
#: ../../source/learn/intrinsics/BIT_index.md:2097
#: ../../source/learn/intrinsics/CHARACTER_index.md:21
#: ../../source/learn/intrinsics/CHARACTER_index.md:144
#: ../../source/learn/intrinsics/CHARACTER_index.md:221
#: ../../source/learn/intrinsics/CHARACTER_index.md:301
#: ../../source/learn/intrinsics/CHARACTER_index.md:463
#: ../../source/learn/intrinsics/CHARACTER_index.md:536
#: ../../source/learn/intrinsics/CHARACTER_index.md:629
#: ../../source/learn/intrinsics/CHARACTER_index.md:759
#: ../../source/learn/intrinsics/CHARACTER_index.md:839
#: ../../source/learn/intrinsics/CHARACTER_index.md:921
#: ../../source/learn/intrinsics/CHARACTER_index.md:1179
#: ../../source/learn/intrinsics/CHARACTER_index.md:1242
#: ../../source/learn/intrinsics/CHARACTER_index.md:1313
#: ../../source/learn/intrinsics/CHARACTER_index.md:1418
#: ../../source/learn/intrinsics/CHARACTER_index.md:1481
#: ../../source/learn/intrinsics/CHARACTER_index.md:1546
#: ../../source/learn/intrinsics/CHARACTER_index.md:1625
#: ../../source/learn/intrinsics/CHARACTER_index.md:1709
#: ../../source/learn/intrinsics/COMPILER_index.md:14
#: ../../source/learn/intrinsics/COMPILER_index.md:74
#: ../../source/learn/intrinsics/C_index.md:14
#: ../../source/learn/intrinsics/C_index.md:76
#: ../../source/learn/intrinsics/C_index.md:136
#: ../../source/learn/intrinsics/C_index.md:198
#: ../../source/learn/intrinsics/C_index.md:267
#: ../../source/learn/intrinsics/C_index.md:323
#: ../../source/learn/intrinsics/MATH_index.md:19
#: ../../source/learn/intrinsics/MATH_index.md:87
#: ../../source/learn/intrinsics/MATH_index.md:147
#: ../../source/learn/intrinsics/MATH_index.md:245
#: ../../source/learn/intrinsics/MATH_index.md:305
#: ../../source/learn/intrinsics/MATH_index.md:379
#: ../../source/learn/intrinsics/MATH_index.md:444
#: ../../source/learn/intrinsics/MATH_index.md:503
#: ../../source/learn/intrinsics/MATH_index.md:580
#: ../../source/learn/intrinsics/MATH_index.md:636
#: ../../source/learn/intrinsics/MATH_index.md:767
#: ../../source/learn/intrinsics/MATH_index.md:851
#: ../../source/learn/intrinsics/MATH_index.md:902
#: ../../source/learn/intrinsics/MATH_index.md:957
#: ../../source/learn/intrinsics/MATH_index.md:1045
#: ../../source/learn/intrinsics/MATH_index.md:1111
#: ../../source/learn/intrinsics/MATH_index.md:1205
#: ../../source/learn/intrinsics/MATH_index.md:1257
#: ../../source/learn/intrinsics/MATH_index.md:1319
#: ../../source/learn/intrinsics/MATH_index.md:1405
#: ../../source/learn/intrinsics/MATH_index.md:1495
#: ../../source/learn/intrinsics/MATH_index.md:1552
#: ../../source/learn/intrinsics/MATH_index.md:1610
#: ../../source/learn/intrinsics/MATH_index.md:1680
#: ../../source/learn/intrinsics/MATH_index.md:1736
#: ../../source/learn/intrinsics/MATH_index.md:1789
#: ../../source/learn/intrinsics/MATH_index.md:1857
#: ../../source/learn/intrinsics/MATH_index.md:1916
#: ../../source/learn/intrinsics/MATH_index.md:1984
#: ../../source/learn/intrinsics/MATH_index.md:2034
#: ../../source/learn/intrinsics/MATH_index.md:2162
#: ../../source/learn/intrinsics/MATH_index.md:2209
#: ../../source/learn/intrinsics/MATH_index.md:2261
#: ../../source/learn/intrinsics/MODEL_index.md:14
#: ../../source/learn/intrinsics/MODEL_index.md:81
#: ../../source/learn/intrinsics/MODEL_index.md:148
#: ../../source/learn/intrinsics/MODEL_index.md:231
#: ../../source/learn/intrinsics/MODEL_index.md:283
#: ../../source/learn/intrinsics/MODEL_index.md:353
#: ../../source/learn/intrinsics/MODEL_index.md:422
#: ../../source/learn/intrinsics/MODEL_index.md:494
#: ../../source/learn/intrinsics/MODEL_index.md:566
#: ../../source/learn/intrinsics/MODEL_index.md:700
#: ../../source/learn/intrinsics/MODEL_index.md:801
#: ../../source/learn/intrinsics/MODEL_index.md:869
#: ../../source/learn/intrinsics/MODEL_index.md:936
#: ../../source/learn/intrinsics/MODEL_index.md:1004
#: ../../source/learn/intrinsics/MODEL_index.md:1077
#: ../../source/learn/intrinsics/MODEL_index.md:1148
#: ../../source/learn/intrinsics/NUMERIC_index.md:26
#: ../../source/learn/intrinsics/NUMERIC_index.md:153
#: ../../source/learn/intrinsics/NUMERIC_index.md:231
#: ../../source/learn/intrinsics/NUMERIC_index.md:316
#: ../../source/learn/intrinsics/NUMERIC_index.md:393
#: ../../source/learn/intrinsics/NUMERIC_index.md:493
#: ../../source/learn/intrinsics/NUMERIC_index.md:553
#: ../../source/learn/intrinsics/NUMERIC_index.md:643
#: ../../source/learn/intrinsics/NUMERIC_index.md:726
#: ../../source/learn/intrinsics/NUMERIC_index.md:845
#: ../../source/learn/intrinsics/NUMERIC_index.md:900
#: ../../source/learn/intrinsics/NUMERIC_index.md:977
#: ../../source/learn/intrinsics/NUMERIC_index.md:1123
#: ../../source/learn/intrinsics/NUMERIC_index.md:1193
#: ../../source/learn/intrinsics/NUMERIC_index.md:1259
#: ../../source/learn/intrinsics/NUMERIC_index.md:1342
#: ../../source/learn/intrinsics/NUMERIC_index.md:1442
#: ../../source/learn/intrinsics/PARALLEL_index.md:14
#: ../../source/learn/intrinsics/PARALLEL_index.md:74
#: ../../source/learn/intrinsics/PARALLEL_index.md:119
#: ../../source/learn/intrinsics/PARALLEL_index.md:189
#: ../../source/learn/intrinsics/PARALLEL_index.md:255
#: ../../source/learn/intrinsics/PARALLEL_index.md:355
#: ../../source/learn/intrinsics/PARALLEL_index.md:426
#: ../../source/learn/intrinsics/PARALLEL_index.md:472
#: ../../source/learn/intrinsics/PARALLEL_index.md:527
#: ../../source/learn/intrinsics/PARALLEL_index.md:579
#: ../../source/learn/intrinsics/PARALLEL_index.md:645
#: ../../source/learn/intrinsics/PARALLEL_index.md:725
#: ../../source/learn/intrinsics/PARALLEL_index.md:786
#: ../../source/learn/intrinsics/PARALLEL_index.md:852
#: ../../source/learn/intrinsics/PARALLEL_index.md:918
#: ../../source/learn/intrinsics/PARALLEL_index.md:984
#: ../../source/learn/intrinsics/PARALLEL_index.md:1046
#: ../../source/learn/intrinsics/PARALLEL_index.md:1105
#: ../../source/learn/intrinsics/PARALLEL_index.md:1165
#: ../../source/learn/intrinsics/PARALLEL_index.md:1236
#: ../../source/learn/intrinsics/PARALLEL_index.md:1297
#: ../../source/learn/intrinsics/PARALLEL_index.md:1363
#: ../../source/learn/intrinsics/STATE_index.md:14
#: ../../source/learn/intrinsics/STATE_index.md:101
#: ../../source/learn/intrinsics/STATE_index.md:148
#: ../../source/learn/intrinsics/STATE_index.md:207
#: ../../source/learn/intrinsics/STATE_index.md:257
#: ../../source/learn/intrinsics/STATE_index.md:331
#: ../../source/learn/intrinsics/STATE_index.md:388
#: ../../source/learn/intrinsics/SYSTEM_index.md:16
#: ../../source/learn/intrinsics/SYSTEM_index.md:80
#: ../../source/learn/intrinsics/SYSTEM_index.md:166
#: ../../source/learn/intrinsics/SYSTEM_index.md:288
#: ../../source/learn/intrinsics/SYSTEM_index.md:365
#: ../../source/learn/intrinsics/SYSTEM_index.md:479
#: ../../source/learn/intrinsics/SYSTEM_index.md:581
#: ../../source/learn/intrinsics/SYSTEM_index.md:684
#: ../../source/learn/intrinsics/TRANSFORM_index.md:14
#: ../../source/learn/intrinsics/TRANSFORM_index.md:84
#: ../../source/learn/intrinsics/TRANSFORM_index.md:150
#: ../../source/learn/intrinsics/TRANSFORM_index.md:233
#: ../../source/learn/intrinsics/TRANSFORM_index.md:333
#: ../../source/learn/intrinsics/TYPE_index.md:71
#: ../../source/learn/intrinsics/TYPE_index.md:135
#: ../../source/learn/intrinsics/TYPE_index.md:296
#: ../../source/learn/intrinsics/TYPE_index.md:419
#: ../../source/learn/intrinsics/TYPE_index.md:539
#: ../../source/learn/intrinsics/TYPE_index.md:619
#: ../../source/learn/intrinsics/TYPE_index.md:671
#: ../../source/learn/intrinsics/TYPE_index.md:779
#: ../../source/learn/intrinsics/TYPE_index.md:843
#: ../../source/learn/intrinsics/TYPE_index.md:892
#: ../../source/learn/intrinsics/TYPE_index.md:950
#: ../../source/learn/intrinsics/TYPE_index.md:1011
msgid "__Description__"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:15
msgid ""
"The elemental function __merge__(3) selects values from two arrays or "
"scalars according to a logical mask. The result is equal to an element of"
" __tsource__ where the corresponding element of __mask__ is __.true.__, "
"or an element of __fsource__ when it is .false. ."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:20
msgid "Multi-dimensional arrays are supported."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:22
msgid ""
"Note that argument expressions to __merge__(3) are not required to be "
"short-circuited so (as an example) if the array __x__ contains zero "
"values in the statement below the standard does not prevent floating "
"point divide by zero being generated; as __1.0/x__ may be evaluated for "
"all values of __x__ before the mask is used to select which value to "
"retain:"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:32
msgid ""
"Note the compiler is also free to short-circuit or to generate an "
"infinity so this may work in many programming environments but is not "
"recommended."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:36
msgid ""
"For cases like this one may instead use masked assignment via the "
"__where__ construct:"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:47
msgid "instead of the more obscure"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:53
#: ../../source/learn/intrinsics/ARRAY_index.md:186
#: ../../source/learn/intrinsics/ARRAY_index.md:295
#: ../../source/learn/intrinsics/ARRAY_index.md:412
#: ../../source/learn/intrinsics/ARRAY_index.md:483
#: ../../source/learn/intrinsics/ARRAY_index.md:624
#: ../../source/learn/intrinsics/ARRAY_index.md:683
#: ../../source/learn/intrinsics/ARRAY_index.md:794
#: ../../source/learn/intrinsics/ARRAY_index.md:840
#: ../../source/learn/intrinsics/ARRAY_index.md:907
#: ../../source/learn/intrinsics/ARRAY_index.md:1093
#: ../../source/learn/intrinsics/ARRAY_index.md:1218
#: ../../source/learn/intrinsics/ARRAY_index.md:1324
#: ../../source/learn/intrinsics/ARRAY_index.md:1594
#: ../../source/learn/intrinsics/ARRAY_index.md:1682
#: ../../source/learn/intrinsics/ARRAY_index.md:1807
#: ../../source/learn/intrinsics/ARRAY_index.md:1881
#: ../../source/learn/intrinsics/ARRAY_index.md:1975
#: ../../source/learn/intrinsics/ARRAY_index.md:2059
#: ../../source/learn/intrinsics/ARRAY_index.md:2211
#: ../../source/learn/intrinsics/ARRAY_index.md:2428
#: ../../source/learn/intrinsics/ARRAY_index.md:2516
#: ../../source/learn/intrinsics/BIT_index.md:19
#: ../../source/learn/intrinsics/BIT_index.md:57
#: ../../source/learn/intrinsics/BIT_index.md:97
#: ../../source/learn/intrinsics/BIT_index.md:134
#: ../../source/learn/intrinsics/BIT_index.md:177
#: ../../source/learn/intrinsics/BIT_index.md:243
#: ../../source/learn/intrinsics/BIT_index.md:368
#: ../../source/learn/intrinsics/BIT_index.md:428
#: ../../source/learn/intrinsics/BIT_index.md:559
#: ../../source/learn/intrinsics/BIT_index.md:620
#: ../../source/learn/intrinsics/BIT_index.md:681
#: ../../source/learn/intrinsics/BIT_index.md:797
#: ../../source/learn/intrinsics/BIT_index.md:837
#: ../../source/learn/intrinsics/BIT_index.md:902
#: ../../source/learn/intrinsics/BIT_index.md:1000
#: ../../source/learn/intrinsics/BIT_index.md:1139
#: ../../source/learn/intrinsics/BIT_index.md:1188
#: ../../source/learn/intrinsics/BIT_index.md:1235
#: ../../source/learn/intrinsics/BIT_index.md:1285
#: ../../source/learn/intrinsics/BIT_index.md:1379
#: ../../source/learn/intrinsics/BIT_index.md:1484
#: ../../source/learn/intrinsics/BIT_index.md:1557
#: ../../source/learn/intrinsics/BIT_index.md:1627
#: ../../source/learn/intrinsics/BIT_index.md:1693
#: ../../source/learn/intrinsics/BIT_index.md:1761
#: ../../source/learn/intrinsics/BIT_index.md:1808
#: ../../source/learn/intrinsics/BIT_index.md:1874
#: ../../source/learn/intrinsics/BIT_index.md:1941
#: ../../source/learn/intrinsics/BIT_index.md:1986
#: ../../source/learn/intrinsics/BIT_index.md:2026
#: ../../source/learn/intrinsics/BIT_index.md:2065
#: ../../source/learn/intrinsics/BIT_index.md:2104
#: ../../source/learn/intrinsics/CHARACTER_index.md:31
#: ../../source/learn/intrinsics/CHARACTER_index.md:165
#: ../../source/learn/intrinsics/CHARACTER_index.md:225
#: ../../source/learn/intrinsics/CHARACTER_index.md:314
#: ../../source/learn/intrinsics/CHARACTER_index.md:467
#: ../../source/learn/intrinsics/CHARACTER_index.md:541
#: ../../source/learn/intrinsics/CHARACTER_index.md:640
#: ../../source/learn/intrinsics/CHARACTER_index.md:765
#: ../../source/learn/intrinsics/CHARACTER_index.md:848
#: ../../source/learn/intrinsics/CHARACTER_index.md:943
#: ../../source/learn/intrinsics/CHARACTER_index.md:1193
#: ../../source/learn/intrinsics/CHARACTER_index.md:1256
#: ../../source/learn/intrinsics/CHARACTER_index.md:1327
#: ../../source/learn/intrinsics/CHARACTER_index.md:1432
#: ../../source/learn/intrinsics/CHARACTER_index.md:1486
#: ../../source/learn/intrinsics/CHARACTER_index.md:1552
#: ../../source/learn/intrinsics/CHARACTER_index.md:1629
#: ../../source/learn/intrinsics/CHARACTER_index.md:1713
#: ../../source/learn/intrinsics/COMPILER_index.md:18
#: ../../source/learn/intrinsics/COMPILER_index.md:79
#: ../../source/learn/intrinsics/C_index.md:20
#: ../../source/learn/intrinsics/C_index.md:81
#: ../../source/learn/intrinsics/C_index.md:141
#: ../../source/learn/intrinsics/C_index.md:202
#: ../../source/learn/intrinsics/C_index.md:271
#: ../../source/learn/intrinsics/C_index.md:328
#: ../../source/learn/intrinsics/MATH_index.md:23
#: ../../source/learn/intrinsics/MATH_index.md:91
#: ../../source/learn/intrinsics/MATH_index.md:155
#: ../../source/learn/intrinsics/MATH_index.md:249
#: ../../source/learn/intrinsics/MATH_index.md:309
#: ../../source/learn/intrinsics/MATH_index.md:391
#: ../../source/learn/intrinsics/MATH_index.md:448
#: ../../source/learn/intrinsics/MATH_index.md:511
#: ../../source/learn/intrinsics/MATH_index.md:584
#: ../../source/learn/intrinsics/MATH_index.md:645
#: ../../source/learn/intrinsics/MATH_index.md:778
#: ../../source/learn/intrinsics/MATH_index.md:855
#: ../../source/learn/intrinsics/MATH_index.md:906
#: ../../source/learn/intrinsics/MATH_index.md:962
#: ../../source/learn/intrinsics/MATH_index.md:1053
#: ../../source/learn/intrinsics/MATH_index.md:1127
#: ../../source/learn/intrinsics/MATH_index.md:1210
#: ../../source/learn/intrinsics/MATH_index.md:1262
#: ../../source/learn/intrinsics/MATH_index.md:1342
#: ../../source/learn/intrinsics/MATH_index.md:1415
#: ../../source/learn/intrinsics/MATH_index.md:1500
#: ../../source/learn/intrinsics/MATH_index.md:1557
#: ../../source/learn/intrinsics/MATH_index.md:1619
#: ../../source/learn/intrinsics/MATH_index.md:1685
#: ../../source/learn/intrinsics/MATH_index.md:1741
#: ../../source/learn/intrinsics/MATH_index.md:1798
#: ../../source/learn/intrinsics/MATH_index.md:1864
#: ../../source/learn/intrinsics/MATH_index.md:1935
#: ../../source/learn/intrinsics/MATH_index.md:1994
#: ../../source/learn/intrinsics/MATH_index.md:2046
#: ../../source/learn/intrinsics/MATH_index.md:2166
#: ../../source/learn/intrinsics/MATH_index.md:2213
#: ../../source/learn/intrinsics/MATH_index.md:2266
#: ../../source/learn/intrinsics/MODEL_index.md:19
#: ../../source/learn/intrinsics/MODEL_index.md:87
#: ../../source/learn/intrinsics/MODEL_index.md:153
#: ../../source/learn/intrinsics/MODEL_index.md:236
#: ../../source/learn/intrinsics/MODEL_index.md:287
#: ../../source/learn/intrinsics/MODEL_index.md:358
#: ../../source/learn/intrinsics/MODEL_index.md:427
#: ../../source/learn/intrinsics/MODEL_index.md:501
#: ../../source/learn/intrinsics/MODEL_index.md:585
#: ../../source/learn/intrinsics/MODEL_index.md:705
#: ../../source/learn/intrinsics/MODEL_index.md:806
#: ../../source/learn/intrinsics/MODEL_index.md:874
#: ../../source/learn/intrinsics/MODEL_index.md:941
#: ../../source/learn/intrinsics/MODEL_index.md:1008
#: ../../source/learn/intrinsics/MODEL_index.md:1082
#: ../../source/learn/intrinsics/MODEL_index.md:1153
#: ../../source/learn/intrinsics/NUMERIC_index.md:37
#: ../../source/learn/intrinsics/NUMERIC_index.md:157
#: ../../source/learn/intrinsics/NUMERIC_index.md:235
#: ../../source/learn/intrinsics/NUMERIC_index.md:320
#: ../../source/learn/intrinsics/NUMERIC_index.md:407
#: ../../source/learn/intrinsics/NUMERIC_index.md:498
#: ../../source/learn/intrinsics/NUMERIC_index.md:572
#: ../../source/learn/intrinsics/NUMERIC_index.md:649
#: ../../source/learn/intrinsics/NUMERIC_index.md:730
#: ../../source/learn/intrinsics/NUMERIC_index.md:849
#: ../../source/learn/intrinsics/NUMERIC_index.md:904
#: ../../source/learn/intrinsics/NUMERIC_index.md:981
#: ../../source/learn/intrinsics/NUMERIC_index.md:1134
#: ../../source/learn/intrinsics/NUMERIC_index.md:1203
#: ../../source/learn/intrinsics/NUMERIC_index.md:1280
#: ../../source/learn/intrinsics/NUMERIC_index.md:1346
#: ../../source/learn/intrinsics/NUMERIC_index.md:1451
#: ../../source/learn/intrinsics/PARALLEL_index.md:23
#: ../../source/learn/intrinsics/PARALLEL_index.md:79
#: ../../source/learn/intrinsics/PARALLEL_index.md:130
#: ../../source/learn/intrinsics/PARALLEL_index.md:200
#: ../../source/learn/intrinsics/PARALLEL_index.md:270
#: ../../source/learn/intrinsics/PARALLEL_index.md:366
#: ../../source/learn/intrinsics/PARALLEL_index.md:431
#: ../../source/learn/intrinsics/PARALLEL_index.md:480
#: ../../source/learn/intrinsics/PARALLEL_index.md:531
#: ../../source/learn/intrinsics/PARALLEL_index.md:583
#: ../../source/learn/intrinsics/PARALLEL_index.md:649
#: ../../source/learn/intrinsics/PARALLEL_index.md:735
#: ../../source/learn/intrinsics/PARALLEL_index.md:797
#: ../../source/learn/intrinsics/PARALLEL_index.md:863
#: ../../source/learn/intrinsics/PARALLEL_index.md:929
#: ../../source/learn/intrinsics/PARALLEL_index.md:994
#: ../../source/learn/intrinsics/PARALLEL_index.md:1056
#: ../../source/learn/intrinsics/PARALLEL_index.md:1115
#: ../../source/learn/intrinsics/PARALLEL_index.md:1177
#: ../../source/learn/intrinsics/PARALLEL_index.md:1246
#: ../../source/learn/intrinsics/PARALLEL_index.md:1308
#: ../../source/learn/intrinsics/PARALLEL_index.md:1373
#: ../../source/learn/intrinsics/STATE_index.md:19
#: ../../source/learn/intrinsics/STATE_index.md:156
#: ../../source/learn/intrinsics/STATE_index.md:214
#: ../../source/learn/intrinsics/STATE_index.md:262
#: ../../source/learn/intrinsics/STATE_index.md:335
#: ../../source/learn/intrinsics/STATE_index.md:392
#: ../../source/learn/intrinsics/SYSTEM_index.md:21
#: ../../source/learn/intrinsics/SYSTEM_index.md:372
#: ../../source/learn/intrinsics/SYSTEM_index.md:501
#: ../../source/learn/intrinsics/SYSTEM_index.md:603
#: ../../source/learn/intrinsics/TRANSFORM_index.md:25
#: ../../source/learn/intrinsics/TRANSFORM_index.md:94
#: ../../source/learn/intrinsics/TRANSFORM_index.md:171
#: ../../source/learn/intrinsics/TRANSFORM_index.md:237
#: ../../source/learn/intrinsics/TRANSFORM_index.md:342
#: ../../source/learn/intrinsics/TYPE_index.md:75
#: ../../source/learn/intrinsics/TYPE_index.md:219
#: ../../source/learn/intrinsics/TYPE_index.md:300
#: ../../source/learn/intrinsics/TYPE_index.md:433
#: ../../source/learn/intrinsics/TYPE_index.md:543
#: ../../source/learn/intrinsics/TYPE_index.md:623
#: ../../source/learn/intrinsics/TYPE_index.md:680
#: ../../source/learn/intrinsics/TYPE_index.md:783
#: ../../source/learn/intrinsics/TYPE_index.md:847
#: ../../source/learn/intrinsics/TYPE_index.md:900
#: ../../source/learn/intrinsics/TYPE_index.md:957
#: ../../source/learn/intrinsics/TYPE_index.md:1017
msgid "__Arguments__"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:55
msgid "__tsource__"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:56
msgid "May be of any type, including user-defined."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:58
msgid "__fsource__"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:59
msgid "Shall be of the same type and type parameters as __tsource__."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:61
#: ../../source/learn/intrinsics/ARRAY_index.md:191
#: ../../source/learn/intrinsics/ARRAY_index.md:418
#: ../../source/learn/intrinsics/ARRAY_index.md:1228
#: ../../source/learn/intrinsics/ARRAY_index.md:1334
#: ../../source/learn/intrinsics/ARRAY_index.md:1432
#: ../../source/learn/intrinsics/ARRAY_index.md:1684
#: ../../source/learn/intrinsics/ARRAY_index.md:1809
#: ../../source/learn/intrinsics/ARRAY_index.md:1883
#: ../../source/learn/intrinsics/ARRAY_index.md:1985
#: ../../source/learn/intrinsics/ARRAY_index.md:2069
#: ../../source/learn/intrinsics/ARRAY_index.md:2220
#: ../../source/learn/intrinsics/ARRAY_index.md:2437
#: ../../source/learn/intrinsics/BIT_index.md:1493
#: ../../source/learn/intrinsics/BIT_index.md:1566
#: ../../source/learn/intrinsics/BIT_index.md:1702
msgid "__mask__"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:62
msgid "Shall be of type _logical_."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:64
msgid "Note that (currently) _character_ values must be of the same length."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:66
#: ../../source/learn/intrinsics/ARRAY_index.md:202
#: ../../source/learn/intrinsics/ARRAY_index.md:308
#: ../../source/learn/intrinsics/ARRAY_index.md:424
#: ../../source/learn/intrinsics/ARRAY_index.md:491
#: ../../source/learn/intrinsics/ARRAY_index.md:630
#: ../../source/learn/intrinsics/ARRAY_index.md:695
#: ../../source/learn/intrinsics/ARRAY_index.md:799
#: ../../source/learn/intrinsics/ARRAY_index.md:850
#: ../../source/learn/intrinsics/ARRAY_index.md:921
#: ../../source/learn/intrinsics/ARRAY_index.md:1105
#: ../../source/learn/intrinsics/ARRAY_index.md:1231
#: ../../source/learn/intrinsics/ARRAY_index.md:1337
#: ../../source/learn/intrinsics/ARRAY_index.md:1442
#: ../../source/learn/intrinsics/ARRAY_index.md:1462
#: ../../source/learn/intrinsics/ARRAY_index.md:1599
#: ../../source/learn/intrinsics/ARRAY_index.md:1693
#: ../../source/learn/intrinsics/ARRAY_index.md:1817
#: ../../source/learn/intrinsics/ARRAY_index.md:1893
#: ../../source/learn/intrinsics/ARRAY_index.md:1989
#: ../../source/learn/intrinsics/ARRAY_index.md:2072
#: ../../source/learn/intrinsics/ARRAY_index.md:2224
#: ../../source/learn/intrinsics/ARRAY_index.md:2441
#: ../../source/learn/intrinsics/ARRAY_index.md:2534
#: ../../source/learn/intrinsics/BIT_index.md:27
#: ../../source/learn/intrinsics/BIT_index.md:66
#: ../../source/learn/intrinsics/BIT_index.md:105
#: ../../source/learn/intrinsics/BIT_index.md:142
#: ../../source/learn/intrinsics/BIT_index.md:184
#: ../../source/learn/intrinsics/BIT_index.md:254
#: ../../source/learn/intrinsics/BIT_index.md:376
#: ../../source/learn/intrinsics/BIT_index.md:433
#: ../../source/learn/intrinsics/BIT_index.md:564
#: ../../source/learn/intrinsics/BIT_index.md:625
#: ../../source/learn/intrinsics/BIT_index.md:686
#: ../../source/learn/intrinsics/BIT_index.md:808
#: ../../source/learn/intrinsics/BIT_index.md:848
#: ../../source/learn/intrinsics/BIT_index.md:913
#: ../../source/learn/intrinsics/BIT_index.md:1151
#: ../../source/learn/intrinsics/BIT_index.md:1199
#: ../../source/learn/intrinsics/BIT_index.md:1246
#: ../../source/learn/intrinsics/BIT_index.md:1295
#: ../../source/learn/intrinsics/BIT_index.md:1389
#: ../../source/learn/intrinsics/BIT_index.md:1497
#: ../../source/learn/intrinsics/BIT_index.md:1570
#: ../../source/learn/intrinsics/BIT_index.md:1635
#: ../../source/learn/intrinsics/BIT_index.md:1706
#: ../../source/learn/intrinsics/BIT_index.md:1769
#: ../../source/learn/intrinsics/BIT_index.md:1816
#: ../../source/learn/intrinsics/BIT_index.md:1879
#: ../../source/learn/intrinsics/BIT_index.md:1953
#: ../../source/learn/intrinsics/BIT_index.md:1994
#: ../../source/learn/intrinsics/BIT_index.md:2034
#: ../../source/learn/intrinsics/BIT_index.md:2073
#: ../../source/learn/intrinsics/BIT_index.md:2112
#: ../../source/learn/intrinsics/CHARACTER_index.md:40
#: ../../source/learn/intrinsics/CHARACTER_index.md:170
#: ../../source/learn/intrinsics/CHARACTER_index.md:235
#: ../../source/learn/intrinsics/CHARACTER_index.md:324
#: ../../source/learn/intrinsics/CHARACTER_index.md:476
#: ../../source/learn/intrinsics/CHARACTER_index.md:550
#: ../../source/learn/intrinsics/CHARACTER_index.md:649
#: ../../source/learn/intrinsics/CHARACTER_index.md:781
#: ../../source/learn/intrinsics/CHARACTER_index.md:863
#: ../../source/learn/intrinsics/CHARACTER_index.md:958
#: ../../source/learn/intrinsics/CHARACTER_index.md:1201
#: ../../source/learn/intrinsics/CHARACTER_index.md:1264
#: ../../source/learn/intrinsics/CHARACTER_index.md:1338
#: ../../source/learn/intrinsics/CHARACTER_index.md:1440
#: ../../source/learn/intrinsics/CHARACTER_index.md:1491
#: ../../source/learn/intrinsics/CHARACTER_index.md:1557
#: ../../source/learn/intrinsics/CHARACTER_index.md:1639
#: ../../source/learn/intrinsics/CHARACTER_index.md:1718
#: ../../source/learn/intrinsics/COMPILER_index.md:22
#: ../../source/learn/intrinsics/COMPILER_index.md:83
#: ../../source/learn/intrinsics/C_index.md:28
#: ../../source/learn/intrinsics/C_index.md:207
#: ../../source/learn/intrinsics/C_index.md:279
#: ../../source/learn/intrinsics/C_index.md:333
#: ../../source/learn/intrinsics/MATH_index.md:29
#: ../../source/learn/intrinsics/MATH_index.md:96
#: ../../source/learn/intrinsics/MATH_index.md:161
#: ../../source/learn/intrinsics/MATH_index.md:254
#: ../../source/learn/intrinsics/MATH_index.md:319
#: ../../source/learn/intrinsics/MATH_index.md:400
#: ../../source/learn/intrinsics/MATH_index.md:453
#: ../../source/learn/intrinsics/MATH_index.md:517
#: ../../source/learn/intrinsics/MATH_index.md:589
#: ../../source/learn/intrinsics/MATH_index.md:650
#: ../../source/learn/intrinsics/MATH_index.md:783
#: ../../source/learn/intrinsics/MATH_index.md:860
#: ../../source/learn/intrinsics/MATH_index.md:911
#: ../../source/learn/intrinsics/MATH_index.md:1132
#: ../../source/learn/intrinsics/MATH_index.md:1215
#: ../../source/learn/intrinsics/MATH_index.md:1267
#: ../../source/learn/intrinsics/MATH_index.md:1348
#: ../../source/learn/intrinsics/MATH_index.md:1423
#: ../../source/learn/intrinsics/MATH_index.md:1505
#: ../../source/learn/intrinsics/MATH_index.md:1562
#: ../../source/learn/intrinsics/MATH_index.md:1634
#: ../../source/learn/intrinsics/MATH_index.md:1690
#: ../../source/learn/intrinsics/MATH_index.md:1746
#: ../../source/learn/intrinsics/MATH_index.md:1813
#: ../../source/learn/intrinsics/MATH_index.md:1869
#: ../../source/learn/intrinsics/MATH_index.md:1940
#: ../../source/learn/intrinsics/MATH_index.md:1999
#: ../../source/learn/intrinsics/MATH_index.md:2051
#: ../../source/learn/intrinsics/MATH_index.md:2171
#: ../../source/learn/intrinsics/MATH_index.md:2218
#: ../../source/learn/intrinsics/MATH_index.md:2275
#: ../../source/learn/intrinsics/MODEL_index.md:24
#: ../../source/learn/intrinsics/MODEL_index.md:92
#: ../../source/learn/intrinsics/MODEL_index.md:161
#: ../../source/learn/intrinsics/MODEL_index.md:241
#: ../../source/learn/intrinsics/MODEL_index.md:295
#: ../../source/learn/intrinsics/MODEL_index.md:366
#: ../../source/learn/intrinsics/MODEL_index.md:432
#: ../../source/learn/intrinsics/MODEL_index.md:506
#: ../../source/learn/intrinsics/MODEL_index.md:590
#: ../../source/learn/intrinsics/MODEL_index.md:712
#: ../../source/learn/intrinsics/MODEL_index.md:811
#: ../../source/learn/intrinsics/MODEL_index.md:879
#: ../../source/learn/intrinsics/MODEL_index.md:946
#: ../../source/learn/intrinsics/MODEL_index.md:1013
#: ../../source/learn/intrinsics/MODEL_index.md:1087
#: ../../source/learn/intrinsics/MODEL_index.md:1158
#: ../../source/learn/intrinsics/NUMERIC_index.md:43
#: ../../source/learn/intrinsics/NUMERIC_index.md:166
#: ../../source/learn/intrinsics/NUMERIC_index.md:244
#: ../../source/learn/intrinsics/NUMERIC_index.md:329
#: ../../source/learn/intrinsics/NUMERIC_index.md:412
#: ../../source/learn/intrinsics/NUMERIC_index.md:506
#: ../../source/learn/intrinsics/NUMERIC_index.md:580
#: ../../source/learn/intrinsics/NUMERIC_index.md:658
#: ../../source/learn/intrinsics/NUMERIC_index.md:738
#: ../../source/learn/intrinsics/NUMERIC_index.md:857
#: ../../source/learn/intrinsics/NUMERIC_index.md:913
#: ../../source/learn/intrinsics/NUMERIC_index.md:990
#: ../../source/learn/intrinsics/NUMERIC_index.md:1145
#: ../../source/learn/intrinsics/NUMERIC_index.md:1213
#: ../../source/learn/intrinsics/NUMERIC_index.md:1294
#: ../../source/learn/intrinsics/NUMERIC_index.md:1358
#: ../../source/learn/intrinsics/NUMERIC_index.md:1457
#: ../../source/learn/intrinsics/PARALLEL_index.md:91
#: ../../source/learn/intrinsics/PARALLEL_index.md:443
#: ../../source/learn/intrinsics/PARALLEL_index.md:540
#: ../../source/learn/intrinsics/PARALLEL_index.md:591
#: ../../source/learn/intrinsics/PARALLEL_index.md:662
#: ../../source/learn/intrinsics/STATE_index.md:30
#: ../../source/learn/intrinsics/STATE_index.md:116
#: ../../source/learn/intrinsics/STATE_index.md:161
#: ../../source/learn/intrinsics/STATE_index.md:219
#: ../../source/learn/intrinsics/STATE_index.md:342
#: ../../source/learn/intrinsics/STATE_index.md:402
#: ../../source/learn/intrinsics/SYSTEM_index.md:25
#: ../../source/learn/intrinsics/SYSTEM_index.md:91
#: ../../source/learn/intrinsics/SYSTEM_index.md:183
#: ../../source/learn/intrinsics/SYSTEM_index.md:307
#: ../../source/learn/intrinsics/SYSTEM_index.md:699
#: ../../source/learn/intrinsics/TRANSFORM_index.md:36
#: ../../source/learn/intrinsics/TRANSFORM_index.md:104
#: ../../source/learn/intrinsics/TRANSFORM_index.md:185
#: ../../source/learn/intrinsics/TRANSFORM_index.md:249
#: ../../source/learn/intrinsics/TRANSFORM_index.md:348
#: ../../source/learn/intrinsics/TYPE_index.md:80
#: ../../source/learn/intrinsics/TYPE_index.md:232
#: ../../source/learn/intrinsics/TYPE_index.md:311
#: ../../source/learn/intrinsics/TYPE_index.md:443
#: ../../source/learn/intrinsics/TYPE_index.md:552
#: ../../source/learn/intrinsics/TYPE_index.md:628
#: ../../source/learn/intrinsics/TYPE_index.md:691
#: ../../source/learn/intrinsics/TYPE_index.md:793
#: ../../source/learn/intrinsics/TYPE_index.md:852
#: ../../source/learn/intrinsics/TYPE_index.md:1032
msgid "__Returns__"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:68
msgid ""
"The result is of the same type and type parameters as __tsource__. For "
"any element the result is __tsource__ if __mask__ is true and __fsource__"
" otherwise."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:71
#: ../../source/learn/intrinsics/ARRAY_index.md:208
#: ../../source/learn/intrinsics/ARRAY_index.md:314
#: ../../source/learn/intrinsics/ARRAY_index.md:429
#: ../../source/learn/intrinsics/ARRAY_index.md:497
#: ../../source/learn/intrinsics/ARRAY_index.md:636
#: ../../source/learn/intrinsics/ARRAY_index.md:705
#: ../../source/learn/intrinsics/ARRAY_index.md:804
#: ../../source/learn/intrinsics/ARRAY_index.md:858
#: ../../source/learn/intrinsics/ARRAY_index.md:926
#: ../../source/learn/intrinsics/ARRAY_index.md:1121
#: ../../source/learn/intrinsics/ARRAY_index.md:1244
#: ../../source/learn/intrinsics/ARRAY_index.md:1346
#: ../../source/learn/intrinsics/ARRAY_index.md:1508
#: ../../source/learn/intrinsics/ARRAY_index.md:1604
#: ../../source/learn/intrinsics/ARRAY_index.md:1729
#: ../../source/learn/intrinsics/ARRAY_index.md:1832
#: ../../source/learn/intrinsics/ARRAY_index.md:1900
#: ../../source/learn/intrinsics/ARRAY_index.md:1997
#: ../../source/learn/intrinsics/ARRAY_index.md:2081
#: ../../source/learn/intrinsics/ARRAY_index.md:2229
#: ../../source/learn/intrinsics/ARRAY_index.md:2450
#: ../../source/learn/intrinsics/ARRAY_index.md:2538
#: ../../source/learn/intrinsics/BIT_index.md:188
#: ../../source/learn/intrinsics/BIT_index.md:260
#: ../../source/learn/intrinsics/BIT_index.md:383
#: ../../source/learn/intrinsics/BIT_index.md:438
#: ../../source/learn/intrinsics/BIT_index.md:568
#: ../../source/learn/intrinsics/BIT_index.md:632
#: ../../source/learn/intrinsics/BIT_index.md:691
#: ../../source/learn/intrinsics/BIT_index.md:1303
#: ../../source/learn/intrinsics/BIT_index.md:1506
#: ../../source/learn/intrinsics/BIT_index.md:1579
#: ../../source/learn/intrinsics/BIT_index.md:1640
#: ../../source/learn/intrinsics/BIT_index.md:1715
#: ../../source/learn/intrinsics/BIT_index.md:1821
#: ../../source/learn/intrinsics/BIT_index.md:1883
#: ../../source/learn/intrinsics/CHARACTER_index.md:49
#: ../../source/learn/intrinsics/CHARACTER_index.md:176
#: ../../source/learn/intrinsics/CHARACTER_index.md:239
#: ../../source/learn/intrinsics/CHARACTER_index.md:330
#: ../../source/learn/intrinsics/CHARACTER_index.md:480
#: ../../source/learn/intrinsics/CHARACTER_index.md:555
#: ../../source/learn/intrinsics/CHARACTER_index.md:654
#: ../../source/learn/intrinsics/CHARACTER_index.md:787
#: ../../source/learn/intrinsics/CHARACTER_index.md:868
#: ../../source/learn/intrinsics/CHARACTER_index.md:963
#: ../../source/learn/intrinsics/CHARACTER_index.md:1344
#: ../../source/learn/intrinsics/CHARACTER_index.md:1497
#: ../../source/learn/intrinsics/CHARACTER_index.md:1563
#: ../../source/learn/intrinsics/CHARACTER_index.md:1644
#: ../../source/learn/intrinsics/CHARACTER_index.md:1723
#: ../../source/learn/intrinsics/COMPILER_index.md:28
#: ../../source/learn/intrinsics/COMPILER_index.md:88
#: ../../source/learn/intrinsics/C_index.md:34
#: ../../source/learn/intrinsics/C_index.md:94
#: ../../source/learn/intrinsics/C_index.md:149
#: ../../source/learn/intrinsics/C_index.md:212
#: ../../source/learn/intrinsics/C_index.md:284
#: ../../source/learn/intrinsics/C_index.md:343
#: ../../source/learn/intrinsics/MATH_index.md:34
#: ../../source/learn/intrinsics/MATH_index.md:105
#: ../../source/learn/intrinsics/MATH_index.md:168
#: ../../source/learn/intrinsics/MATH_index.md:260
#: ../../source/learn/intrinsics/MATH_index.md:327
#: ../../source/learn/intrinsics/MATH_index.md:411
#: ../../source/learn/intrinsics/MATH_index.md:460
#: ../../source/learn/intrinsics/MATH_index.md:524
#: ../../source/learn/intrinsics/MATH_index.md:597
#: ../../source/learn/intrinsics/MATH_index.md:655
#: ../../source/learn/intrinsics/MATH_index.md:787
#: ../../source/learn/intrinsics/MATH_index.md:864
#: ../../source/learn/intrinsics/MATH_index.md:920
#: ../../source/learn/intrinsics/MATH_index.md:967
#: ../../source/learn/intrinsics/MATH_index.md:1070
#: ../../source/learn/intrinsics/MATH_index.md:1138
#: ../../source/learn/intrinsics/MATH_index.md:1222
#: ../../source/learn/intrinsics/MATH_index.md:1272
#: ../../source/learn/intrinsics/MATH_index.md:1353
#: ../../source/learn/intrinsics/MATH_index.md:1430
#: ../../source/learn/intrinsics/MATH_index.md:1510
#: ../../source/learn/intrinsics/MATH_index.md:1567
#: ../../source/learn/intrinsics/MATH_index.md:1638
#: ../../source/learn/intrinsics/MATH_index.md:1694
#: ../../source/learn/intrinsics/MATH_index.md:1750
#: ../../source/learn/intrinsics/MATH_index.md:1817
#: ../../source/learn/intrinsics/MATH_index.md:1874
#: ../../source/learn/intrinsics/MATH_index.md:1947
#: ../../source/learn/intrinsics/MATH_index.md:2003
#: ../../source/learn/intrinsics/MATH_index.md:2055
#: ../../source/learn/intrinsics/MATH_index.md:2175
#: ../../source/learn/intrinsics/MATH_index.md:2222
#: ../../source/learn/intrinsics/MATH_index.md:2286
#: ../../source/learn/intrinsics/MODEL_index.md:28
#: ../../source/learn/intrinsics/MODEL_index.md:98
#: ../../source/learn/intrinsics/MODEL_index.md:168
#: ../../source/learn/intrinsics/MODEL_index.md:300
#: ../../source/learn/intrinsics/MODEL_index.md:372
#: ../../source/learn/intrinsics/MODEL_index.md:436
#: ../../source/learn/intrinsics/MODEL_index.md:510
#: ../../source/learn/intrinsics/MODEL_index.md:594
#: ../../source/learn/intrinsics/MODEL_index.md:717
#: ../../source/learn/intrinsics/MODEL_index.md:815
#: ../../source/learn/intrinsics/MODEL_index.md:883
#: ../../source/learn/intrinsics/MODEL_index.md:950
#: ../../source/learn/intrinsics/MODEL_index.md:1018
#: ../../source/learn/intrinsics/MODEL_index.md:1091
#: ../../source/learn/intrinsics/MODEL_index.md:1164
#: ../../source/learn/intrinsics/NUMERIC_index.md:53
#: ../../source/learn/intrinsics/NUMERIC_index.md:175
#: ../../source/learn/intrinsics/NUMERIC_index.md:252
#: ../../source/learn/intrinsics/NUMERIC_index.md:337
#: ../../source/learn/intrinsics/NUMERIC_index.md:416
#: ../../source/learn/intrinsics/NUMERIC_index.md:510
#: ../../source/learn/intrinsics/NUMERIC_index.md:584
#: ../../source/learn/intrinsics/NUMERIC_index.md:666
#: ../../source/learn/intrinsics/NUMERIC_index.md:752
#: ../../source/learn/intrinsics/NUMERIC_index.md:862
#: ../../source/learn/intrinsics/NUMERIC_index.md:920
#: ../../source/learn/intrinsics/NUMERIC_index.md:1003
#: ../../source/learn/intrinsics/NUMERIC_index.md:1149
#: ../../source/learn/intrinsics/NUMERIC_index.md:1219
#: ../../source/learn/intrinsics/NUMERIC_index.md:1298
#: ../../source/learn/intrinsics/NUMERIC_index.md:1461
#: ../../source/learn/intrinsics/PARALLEL_index.md:40
#: ../../source/learn/intrinsics/PARALLEL_index.md:147
#: ../../source/learn/intrinsics/PARALLEL_index.md:217
#: ../../source/learn/intrinsics/PARALLEL_index.md:300
#: ../../source/learn/intrinsics/PARALLEL_index.md:383
#: ../../source/learn/intrinsics/PARALLEL_index.md:493
#: ../../source/learn/intrinsics/PARALLEL_index.md:546
#: ../../source/learn/intrinsics/PARALLEL_index.md:603
#: ../../source/learn/intrinsics/PARALLEL_index.md:676
#: ../../source/learn/intrinsics/PARALLEL_index.md:748
#: ../../source/learn/intrinsics/PARALLEL_index.md:813
#: ../../source/learn/intrinsics/PARALLEL_index.md:879
#: ../../source/learn/intrinsics/PARALLEL_index.md:945
#: ../../source/learn/intrinsics/PARALLEL_index.md:1007
#: ../../source/learn/intrinsics/PARALLEL_index.md:1069
#: ../../source/learn/intrinsics/PARALLEL_index.md:1128
#: ../../source/learn/intrinsics/PARALLEL_index.md:1197
#: ../../source/learn/intrinsics/PARALLEL_index.md:1260
#: ../../source/learn/intrinsics/PARALLEL_index.md:1324
#: ../../source/learn/intrinsics/PARALLEL_index.md:1387
#: ../../source/learn/intrinsics/STATE_index.md:66
#: ../../source/learn/intrinsics/STATE_index.md:132
#: ../../source/learn/intrinsics/STATE_index.md:167
#: ../../source/learn/intrinsics/STATE_index.md:225
#: ../../source/learn/intrinsics/STATE_index.md:271
#: ../../source/learn/intrinsics/STATE_index.md:347
#: ../../source/learn/intrinsics/SYSTEM_index.md:31
#: ../../source/learn/intrinsics/SYSTEM_index.md:108
#: ../../source/learn/intrinsics/SYSTEM_index.md:203
#: ../../source/learn/intrinsics/SYSTEM_index.md:320
#: ../../source/learn/intrinsics/SYSTEM_index.md:404
#: ../../source/learn/intrinsics/SYSTEM_index.md:521
#: ../../source/learn/intrinsics/SYSTEM_index.md:638
#: ../../source/learn/intrinsics/SYSTEM_index.md:730
#: ../../source/learn/intrinsics/TRANSFORM_index.md:40
#: ../../source/learn/intrinsics/TRANSFORM_index.md:110
#: ../../source/learn/intrinsics/TRANSFORM_index.md:189
#: ../../source/learn/intrinsics/TRANSFORM_index.md:352
#: ../../source/learn/intrinsics/TYPE_index.md:85
#: ../../source/learn/intrinsics/TYPE_index.md:238
#: ../../source/learn/intrinsics/TYPE_index.md:333
#: ../../source/learn/intrinsics/TYPE_index.md:453
#: ../../source/learn/intrinsics/TYPE_index.md:566
#: ../../source/learn/intrinsics/TYPE_index.md:634
#: ../../source/learn/intrinsics/TYPE_index.md:710
#: ../../source/learn/intrinsics/TYPE_index.md:799
#: ../../source/learn/intrinsics/TYPE_index.md:857
#: ../../source/learn/intrinsics/TYPE_index.md:905
#: ../../source/learn/intrinsics/TYPE_index.md:962
#: ../../source/learn/intrinsics/TYPE_index.md:1056
msgid "__Examples__"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:73
msgid "The value of"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:79
msgid "is 1.0 for K=5 and 0.0 for K=__-2__."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:128
#: ../../source/learn/intrinsics/ARRAY_index.md:1928
#: ../../source/learn/intrinsics/CHARACTER_index.md:805
#: ../../source/learn/intrinsics/MODEL_index.md:898
msgid "Expected Results:"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:147
#: ../../source/learn/intrinsics/ARRAY_index.md:258
#: ../../source/learn/intrinsics/ARRAY_index.md:385
#: ../../source/learn/intrinsics/ARRAY_index.md:451
#: ../../source/learn/intrinsics/ARRAY_index.md:540
#: ../../source/learn/intrinsics/ARRAY_index.md:659
#: ../../source/learn/intrinsics/ARRAY_index.md:770
#: ../../source/learn/intrinsics/ARRAY_index.md:821
#: ../../source/learn/intrinsics/ARRAY_index.md:882
#: ../../source/learn/intrinsics/ARRAY_index.md:1069
#: ../../source/learn/intrinsics/ARRAY_index.md:1183
#: ../../source/learn/intrinsics/ARRAY_index.md:1287
#: ../../source/learn/intrinsics/ARRAY_index.md:1376
#: ../../source/learn/intrinsics/ARRAY_index.md:1660
#: ../../source/learn/intrinsics/ARRAY_index.md:1787
#: ../../source/learn/intrinsics/ARRAY_index.md:1859
#: ../../source/learn/intrinsics/ARRAY_index.md:1945
#: ../../source/learn/intrinsics/ARRAY_index.md:2027
#: ../../source/learn/intrinsics/ARRAY_index.md:2173
#: ../../source/learn/intrinsics/ARRAY_index.md:2402
#: ../../source/learn/intrinsics/ARRAY_index.md:2491
#: ../../source/learn/intrinsics/ARRAY_index.md:2565
#: ../../source/learn/intrinsics/BIT_index.md:31
#: ../../source/learn/intrinsics/BIT_index.md:72
#: ../../source/learn/intrinsics/BIT_index.md:109
#: ../../source/learn/intrinsics/BIT_index.md:146
#: ../../source/learn/intrinsics/BIT_index.md:219
#: ../../source/learn/intrinsics/BIT_index.md:336
#: ../../source/learn/intrinsics/BIT_index.md:405
#: ../../source/learn/intrinsics/BIT_index.md:532
#: ../../source/learn/intrinsics/BIT_index.md:594
#: ../../source/learn/intrinsics/BIT_index.md:656
#: ../../source/learn/intrinsics/BIT_index.md:769
#: ../../source/learn/intrinsics/BIT_index.md:812
#: ../../source/learn/intrinsics/BIT_index.md:852
#: ../../source/learn/intrinsics/BIT_index.md:972
#: ../../source/learn/intrinsics/BIT_index.md:1103
#: ../../source/learn/intrinsics/BIT_index.md:1155
#: ../../source/learn/intrinsics/BIT_index.md:1203
#: ../../source/learn/intrinsics/BIT_index.md:1250
#: ../../source/learn/intrinsics/BIT_index.md:1353
#: ../../source/learn/intrinsics/BIT_index.md:1456
#: ../../source/learn/intrinsics/BIT_index.md:1526
#: ../../source/learn/intrinsics/BIT_index.md:1602
#: ../../source/learn/intrinsics/BIT_index.md:1656
#: ../../source/learn/intrinsics/BIT_index.md:1736
#: ../../source/learn/intrinsics/BIT_index.md:1774
#: ../../source/learn/intrinsics/BIT_index.md:1844
#: ../../source/learn/intrinsics/BIT_index.md:1906
#: ../../source/learn/intrinsics/BIT_index.md:1957
#: ../../source/learn/intrinsics/BIT_index.md:1998
#: ../../source/learn/intrinsics/BIT_index.md:2038
#: ../../source/learn/intrinsics/BIT_index.md:2077
#: ../../source/learn/intrinsics/BIT_index.md:2116
#: ../../source/learn/intrinsics/CHARACTER_index.md:45
#: ../../source/learn/intrinsics/CHARACTER_index.md:202
#: ../../source/learn/intrinsics/CHARACTER_index.md:263
#: ../../source/learn/intrinsics/CHARACTER_index.md:432
#: ../../source/learn/intrinsics/CHARACTER_index.md:503
#: ../../source/learn/intrinsics/CHARACTER_index.md:593
#: ../../source/learn/intrinsics/CHARACTER_index.md:715
#: ../../source/learn/intrinsics/CHARACTER_index.md:809
#: ../../source/learn/intrinsics/CHARACTER_index.md:886
#: ../../source/learn/intrinsics/CHARACTER_index.md:1146
#: ../../source/learn/intrinsics/CHARACTER_index.md:1206
#: ../../source/learn/intrinsics/CHARACTER_index.md:1269
#: ../../source/learn/intrinsics/CHARACTER_index.md:1380
#: ../../source/learn/intrinsics/CHARACTER_index.md:1445
#: ../../source/learn/intrinsics/CHARACTER_index.md:1524
#: ../../source/learn/intrinsics/CHARACTER_index.md:1602
#: ../../source/learn/intrinsics/CHARACTER_index.md:1676
#: ../../source/learn/intrinsics/CHARACTER_index.md:1747
#: ../../source/learn/intrinsics/COMPILER_index.md:52
#: ../../source/learn/intrinsics/COMPILER_index.md:113
#: ../../source/learn/intrinsics/C_index.md:55
#: ../../source/learn/intrinsics/C_index.md:115
#: ../../source/learn/intrinsics/C_index.md:177
#: ../../source/learn/intrinsics/C_index.md:243
#: ../../source/learn/intrinsics/C_index.md:299
#: ../../source/learn/intrinsics/C_index.md:362
#: ../../source/learn/intrinsics/MATH_index.md:61
#: ../../source/learn/intrinsics/MATH_index.md:122
#: ../../source/learn/intrinsics/MATH_index.md:218
#: ../../source/learn/intrinsics/MATH_index.md:279
#: ../../source/learn/intrinsics/MATH_index.md:358
#: ../../source/learn/intrinsics/MATH_index.md:429
#: ../../source/learn/intrinsics/MATH_index.md:478
#: ../../source/learn/intrinsics/MATH_index.md:551
#: ../../source/learn/intrinsics/MATH_index.md:611
#: ../../source/learn/intrinsics/MATH_index.md:740
#: ../../source/learn/intrinsics/MATH_index.md:831
#: ../../source/learn/intrinsics/MATH_index.md:881
#: ../../source/learn/intrinsics/MATH_index.md:937
#: ../../source/learn/intrinsics/MATH_index.md:1026
#: ../../source/learn/intrinsics/MATH_index.md:1093
#: ../../source/learn/intrinsics/MATH_index.md:1182
#: ../../source/learn/intrinsics/MATH_index.md:1240
#: ../../source/learn/intrinsics/MATH_index.md:1298
#: ../../source/learn/intrinsics/MATH_index.md:1386
#: ../../source/learn/intrinsics/MATH_index.md:1480
#: ../../source/learn/intrinsics/MATH_index.md:1529
#: ../../source/learn/intrinsics/MATH_index.md:1585
#: ../../source/learn/intrinsics/MATH_index.md:1657
#: ../../source/learn/intrinsics/MATH_index.md:1713
#: ../../source/learn/intrinsics/MATH_index.md:1764
#: ../../source/learn/intrinsics/MATH_index.md:1834
#: ../../source/learn/intrinsics/MATH_index.md:1891
#: ../../source/learn/intrinsics/MATH_index.md:1964
#: ../../source/learn/intrinsics/MATH_index.md:2020
#: ../../source/learn/intrinsics/MATH_index.md:2141
#: ../../source/learn/intrinsics/MATH_index.md:2190
#: ../../source/learn/intrinsics/MATH_index.md:2237
#: ../../source/learn/intrinsics/MATH_index.md:2325
#: ../../source/learn/intrinsics/MODEL_index.md:47
#: ../../source/learn/intrinsics/MODEL_index.md:114
#: ../../source/learn/intrinsics/MODEL_index.md:197
#: ../../source/learn/intrinsics/MODEL_index.md:246
#: ../../source/learn/intrinsics/MODEL_index.md:319
#: ../../source/learn/intrinsics/MODEL_index.md:388
#: ../../source/learn/intrinsics/MODEL_index.md:455
#: ../../source/learn/intrinsics/MODEL_index.md:534
#: ../../source/learn/intrinsics/MODEL_index.md:661
#: ../../source/learn/intrinsics/MODEL_index.md:767
#: ../../source/learn/intrinsics/MODEL_index.md:835
#: ../../source/learn/intrinsics/MODEL_index.md:903
#: ../../source/learn/intrinsics/MODEL_index.md:970
#: ../../source/learn/intrinsics/MODEL_index.md:1037
#: ../../source/learn/intrinsics/MODEL_index.md:1111
#: ../../source/learn/intrinsics/MODEL_index.md:1180
#: ../../source/learn/intrinsics/NUMERIC_index.md:124
#: ../../source/learn/intrinsics/NUMERIC_index.md:207
#: ../../source/learn/intrinsics/NUMERIC_index.md:288
#: ../../source/learn/intrinsics/NUMERIC_index.md:363
#: ../../source/learn/intrinsics/NUMERIC_index.md:473
#: ../../source/learn/intrinsics/NUMERIC_index.md:538
#: ../../source/learn/intrinsics/NUMERIC_index.md:623
#: ../../source/learn/intrinsics/NUMERIC_index.md:701
#: ../../source/learn/intrinsics/NUMERIC_index.md:824
#: ../../source/learn/intrinsics/NUMERIC_index.md:879
#: ../../source/learn/intrinsics/NUMERIC_index.md:958
#: ../../source/learn/intrinsics/NUMERIC_index.md:1029
#: ../../source/learn/intrinsics/NUMERIC_index.md:1108
#: ../../source/learn/intrinsics/NUMERIC_index.md:1178
#: ../../source/learn/intrinsics/NUMERIC_index.md:1244
#: ../../source/learn/intrinsics/NUMERIC_index.md:1327
#: ../../source/learn/intrinsics/NUMERIC_index.md:1364
#: ../../source/learn/intrinsics/NUMERIC_index.md:1426
#: ../../source/learn/intrinsics/NUMERIC_index.md:1539
#: ../../source/learn/intrinsics/PARALLEL_index.md:99
#: ../../source/learn/intrinsics/PARALLEL_index.md:167
#: ../../source/learn/intrinsics/PARALLEL_index.md:233
#: ../../source/learn/intrinsics/PARALLEL_index.md:333
#: ../../source/learn/intrinsics/PARALLEL_index.md:404
#: ../../source/learn/intrinsics/PARALLEL_index.md:451
#: ../../source/learn/intrinsics/PARALLEL_index.md:512
#: ../../source/learn/intrinsics/PARALLEL_index.md:559
#: ../../source/learn/intrinsics/PARALLEL_index.md:624
#: ../../source/learn/intrinsics/PARALLEL_index.md:760
#: ../../source/learn/intrinsics/PARALLEL_index.md:826
#: ../../source/learn/intrinsics/PARALLEL_index.md:892
#: ../../source/learn/intrinsics/PARALLEL_index.md:958
#: ../../source/learn/intrinsics/PARALLEL_index.md:1020
#: ../../source/learn/intrinsics/PARALLEL_index.md:1082
#: ../../source/learn/intrinsics/PARALLEL_index.md:1141
#: ../../source/learn/intrinsics/PARALLEL_index.md:1210
#: ../../source/learn/intrinsics/PARALLEL_index.md:1272
#: ../../source/learn/intrinsics/PARALLEL_index.md:1337
#: ../../source/learn/intrinsics/PARALLEL_index.md:1406
#: ../../source/learn/intrinsics/STATE_index.md:82
#: ../../source/learn/intrinsics/STATE_index.md:192
#: ../../source/learn/intrinsics/STATE_index.md:242
#: ../../source/learn/intrinsics/STATE_index.md:309
#: ../../source/learn/intrinsics/STATE_index.md:373
#: ../../source/learn/intrinsics/STATE_index.md:407
#: ../../source/learn/intrinsics/SYSTEM_index.md:56
#: ../../source/learn/intrinsics/SYSTEM_index.md:141
#: ../../source/learn/intrinsics/SYSTEM_index.md:268
#: ../../source/learn/intrinsics/SYSTEM_index.md:341
#: ../../source/learn/intrinsics/SYSTEM_index.md:446
#: ../../source/learn/intrinsics/SYSTEM_index.md:555
#: ../../source/learn/intrinsics/SYSTEM_index.md:664
#: ../../source/learn/intrinsics/SYSTEM_index.md:790
#: ../../source/learn/intrinsics/TRANSFORM_index.md:69
#: ../../source/learn/intrinsics/TRANSFORM_index.md:135
#: ../../source/learn/intrinsics/TRANSFORM_index.md:218
#: ../../source/learn/intrinsics/TRANSFORM_index.md:255
#: ../../source/learn/intrinsics/TRANSFORM_index.md:317
#: ../../source/learn/intrinsics/TRANSFORM_index.md:430
#: ../../source/learn/intrinsics/TYPE_index.md:115
#: ../../source/learn/intrinsics/TYPE_index.md:279
#: ../../source/learn/intrinsics/TYPE_index.md:394
#: ../../source/learn/intrinsics/TYPE_index.md:516
#: ../../source/learn/intrinsics/TYPE_index.md:593
#: ../../source/learn/intrinsics/TYPE_index.md:651
#: ../../source/learn/intrinsics/TYPE_index.md:760
#: ../../source/learn/intrinsics/TYPE_index.md:822
#: ../../source/learn/intrinsics/TYPE_index.md:877
#: ../../source/learn/intrinsics/TYPE_index.md:935
#: ../../source/learn/intrinsics/TYPE_index.md:987
#: ../../source/learn/intrinsics/TYPE_index.md:1081
msgid "__Standard__"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:149
#: ../../source/learn/intrinsics/ARRAY_index.md:260
#: ../../source/learn/intrinsics/ARRAY_index.md:387
#: ../../source/learn/intrinsics/ARRAY_index.md:453
#: ../../source/learn/intrinsics/ARRAY_index.md:1289
#: ../../source/learn/intrinsics/ARRAY_index.md:1378
#: ../../source/learn/intrinsics/ARRAY_index.md:1662
#: ../../source/learn/intrinsics/ARRAY_index.md:1789
#: ../../source/learn/intrinsics/ARRAY_index.md:1861
#: ../../source/learn/intrinsics/ARRAY_index.md:2029
#: ../../source/learn/intrinsics/ARRAY_index.md:2175
#: ../../source/learn/intrinsics/ARRAY_index.md:2404
#: ../../source/learn/intrinsics/ARRAY_index.md:2493
#: ../../source/learn/intrinsics/ARRAY_index.md:2567
#: ../../source/learn/intrinsics/BIT_index.md:221
#: ../../source/learn/intrinsics/BIT_index.md:338
#: ../../source/learn/intrinsics/BIT_index.md:1105
#: ../../source/learn/intrinsics/BIT_index.md:1157
#: ../../source/learn/intrinsics/BIT_index.md:1205
#: ../../source/learn/intrinsics/BIT_index.md:1252
#: ../../source/learn/intrinsics/BIT_index.md:1658
#: ../../source/learn/intrinsics/BIT_index.md:1776
#: ../../source/learn/intrinsics/BIT_index.md:1846
#: ../../source/learn/intrinsics/BIT_index.md:1908
#: ../../source/learn/intrinsics/BIT_index.md:1959
#: ../../source/learn/intrinsics/BIT_index.md:2000
#: ../../source/learn/intrinsics/CHARACTER_index.md:265
#: ../../source/learn/intrinsics/CHARACTER_index.md:1526
#: ../../source/learn/intrinsics/CHARACTER_index.md:1604
#: ../../source/learn/intrinsics/CHARACTER_index.md:1749
#: ../../source/learn/intrinsics/MATH_index.md:1028
#: ../../source/learn/intrinsics/MATH_index.md:1095
#: ../../source/learn/intrinsics/MODEL_index.md:49
#: ../../source/learn/intrinsics/MODEL_index.md:116
#: ../../source/learn/intrinsics/MODEL_index.md:199
#: ../../source/learn/intrinsics/MODEL_index.md:248
#: ../../source/learn/intrinsics/MODEL_index.md:321
#: ../../source/learn/intrinsics/MODEL_index.md:390
#: ../../source/learn/intrinsics/MODEL_index.md:457
#: ../../source/learn/intrinsics/MODEL_index.md:536
#: ../../source/learn/intrinsics/MODEL_index.md:663
#: ../../source/learn/intrinsics/MODEL_index.md:769
#: ../../source/learn/intrinsics/MODEL_index.md:837
#: ../../source/learn/intrinsics/MODEL_index.md:905
#: ../../source/learn/intrinsics/MODEL_index.md:972
#: ../../source/learn/intrinsics/MODEL_index.md:1039
#: ../../source/learn/intrinsics/MODEL_index.md:1113
#: ../../source/learn/intrinsics/MODEL_index.md:1182
#: ../../source/learn/intrinsics/NUMERIC_index.md:365
#: ../../source/learn/intrinsics/NUMERIC_index.md:703
#: ../../source/learn/intrinsics/NUMERIC_index.md:1031
#: ../../source/learn/intrinsics/NUMERIC_index.md:1180
#: ../../source/learn/intrinsics/NUMERIC_index.md:1246
#: ../../source/learn/intrinsics/NUMERIC_index.md:1329
#: ../../source/learn/intrinsics/NUMERIC_index.md:1366
#: ../../source/learn/intrinsics/NUMERIC_index.md:1541
#: ../../source/learn/intrinsics/STATE_index.md:84
#: ../../source/learn/intrinsics/STATE_index.md:375
#: ../../source/learn/intrinsics/SYSTEM_index.md:343
#: ../../source/learn/intrinsics/SYSTEM_index.md:448
#: ../../source/learn/intrinsics/SYSTEM_index.md:557
#: ../../source/learn/intrinsics/TRANSFORM_index.md:71
#: ../../source/learn/intrinsics/TRANSFORM_index.md:137
#: ../../source/learn/intrinsics/TRANSFORM_index.md:220
#: ../../source/learn/intrinsics/TRANSFORM_index.md:257
#: ../../source/learn/intrinsics/TRANSFORM_index.md:432
#: ../../source/learn/intrinsics/TYPE_index.md:879
#: ../../source/learn/intrinsics/TYPE_index.md:989
msgid "Fortran 95 and later"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:151
#: ../../source/learn/intrinsics/ARRAY_index.md:262
#: ../../source/learn/intrinsics/ARRAY_index.md:389
#: ../../source/learn/intrinsics/ARRAY_index.md:455
#: ../../source/learn/intrinsics/ARRAY_index.md:545
#: ../../source/learn/intrinsics/ARRAY_index.md:774
#: ../../source/learn/intrinsics/ARRAY_index.md:886
#: ../../source/learn/intrinsics/ARRAY_index.md:1073
#: ../../source/learn/intrinsics/ARRAY_index.md:1188
#: ../../source/learn/intrinsics/ARRAY_index.md:1291
#: ../../source/learn/intrinsics/ARRAY_index.md:1380
#: ../../source/learn/intrinsics/ARRAY_index.md:2031
#: ../../source/learn/intrinsics/ARRAY_index.md:2177
#: ../../source/learn/intrinsics/ARRAY_index.md:2406
#: ../../source/learn/intrinsics/ARRAY_index.md:2495
#: ../../source/learn/intrinsics/ARRAY_index.md:2569
#: ../../source/learn/intrinsics/BIT_index.md:35
#: ../../source/learn/intrinsics/BIT_index.md:76
#: ../../source/learn/intrinsics/BIT_index.md:113
#: ../../source/learn/intrinsics/BIT_index.md:150
#: ../../source/learn/intrinsics/BIT_index.md:340
#: ../../source/learn/intrinsics/BIT_index.md:409
#: ../../source/learn/intrinsics/BIT_index.md:536
#: ../../source/learn/intrinsics/BIT_index.md:598
#: ../../source/learn/intrinsics/BIT_index.md:660
#: ../../source/learn/intrinsics/BIT_index.md:773
#: ../../source/learn/intrinsics/BIT_index.md:816
#: ../../source/learn/intrinsics/BIT_index.md:856
#: ../../source/learn/intrinsics/BIT_index.md:1107
#: ../../source/learn/intrinsics/BIT_index.md:1159
#: ../../source/learn/intrinsics/BIT_index.md:1207
#: ../../source/learn/intrinsics/BIT_index.md:1254
#: ../../source/learn/intrinsics/BIT_index.md:1357
#: ../../source/learn/intrinsics/BIT_index.md:1460
#: ../../source/learn/intrinsics/BIT_index.md:1530
#: ../../source/learn/intrinsics/BIT_index.md:1606
#: ../../source/learn/intrinsics/BIT_index.md:1660
#: ../../source/learn/intrinsics/BIT_index.md:1740
#: ../../source/learn/intrinsics/BIT_index.md:1778
#: ../../source/learn/intrinsics/BIT_index.md:1848
#: ../../source/learn/intrinsics/BIT_index.md:1910
#: ../../source/learn/intrinsics/BIT_index.md:1961
#: ../../source/learn/intrinsics/BIT_index.md:2002
#: ../../source/learn/intrinsics/BIT_index.md:2042
#: ../../source/learn/intrinsics/BIT_index.md:2081
#: ../../source/learn/intrinsics/BIT_index.md:2120
#: ../../source/learn/intrinsics/CHARACTER_index.md:110
#: ../../source/learn/intrinsics/CHARACTER_index.md:267
#: ../../source/learn/intrinsics/CHARACTER_index.md:436
#: ../../source/learn/intrinsics/CHARACTER_index.md:507
#: ../../source/learn/intrinsics/CHARACTER_index.md:597
#: ../../source/learn/intrinsics/CHARACTER_index.md:719
#: ../../source/learn/intrinsics/CHARACTER_index.md:814
#: ../../source/learn/intrinsics/CHARACTER_index.md:890
#: ../../source/learn/intrinsics/CHARACTER_index.md:1150
#: ../../source/learn/intrinsics/CHARACTER_index.md:1210
#: ../../source/learn/intrinsics/CHARACTER_index.md:1273
#: ../../source/learn/intrinsics/CHARACTER_index.md:1384
#: ../../source/learn/intrinsics/CHARACTER_index.md:1449
#: ../../source/learn/intrinsics/CHARACTER_index.md:1528
#: ../../source/learn/intrinsics/CHARACTER_index.md:1606
#: ../../source/learn/intrinsics/CHARACTER_index.md:1681
#: ../../source/learn/intrinsics/CHARACTER_index.md:1751
#: ../../source/learn/intrinsics/COMPILER_index.md:56
#: ../../source/learn/intrinsics/COMPILER_index.md:117
#: ../../source/learn/intrinsics/C_index.md:59
#: ../../source/learn/intrinsics/C_index.md:119
#: ../../source/learn/intrinsics/C_index.md:181
#: ../../source/learn/intrinsics/C_index.md:247
#: ../../source/learn/intrinsics/C_index.md:303
#: ../../source/learn/intrinsics/C_index.md:366
#: ../../source/learn/intrinsics/MATH_index.md:64
#: ../../source/learn/intrinsics/MATH_index.md:126
#: ../../source/learn/intrinsics/MATH_index.md:222
#: ../../source/learn/intrinsics/MATH_index.md:283
#: ../../source/learn/intrinsics/MATH_index.md:363
#: ../../source/learn/intrinsics/MATH_index.md:482
#: ../../source/learn/intrinsics/MATH_index.md:555
#: ../../source/learn/intrinsics/MATH_index.md:615
#: ../../source/learn/intrinsics/MATH_index.md:744
#: ../../source/learn/intrinsics/MATH_index.md:835
#: ../../source/learn/intrinsics/MATH_index.md:885
#: ../../source/learn/intrinsics/MATH_index.md:941
#: ../../source/learn/intrinsics/MATH_index.md:1030
#: ../../source/learn/intrinsics/MATH_index.md:1097
#: ../../source/learn/intrinsics/MATH_index.md:1186
#: ../../source/learn/intrinsics/MATH_index.md:1533
#: ../../source/learn/intrinsics/MATH_index.md:1589
#: ../../source/learn/intrinsics/MATH_index.md:1661
#: ../../source/learn/intrinsics/MATH_index.md:1717
#: ../../source/learn/intrinsics/MATH_index.md:1768
#: ../../source/learn/intrinsics/MATH_index.md:1838
#: ../../source/learn/intrinsics/MATH_index.md:2145
#: ../../source/learn/intrinsics/MATH_index.md:2194
#: ../../source/learn/intrinsics/MATH_index.md:2241
#: ../../source/learn/intrinsics/MATH_index.md:2329
#: ../../source/learn/intrinsics/MODEL_index.md:51
#: ../../source/learn/intrinsics/MODEL_index.md:118
#: ../../source/learn/intrinsics/MODEL_index.md:201
#: ../../source/learn/intrinsics/MODEL_index.md:250
#: ../../source/learn/intrinsics/MODEL_index.md:323
#: ../../source/learn/intrinsics/MODEL_index.md:392
#: ../../source/learn/intrinsics/MODEL_index.md:459
#: ../../source/learn/intrinsics/MODEL_index.md:538
#: ../../source/learn/intrinsics/MODEL_index.md:665
#: ../../source/learn/intrinsics/MODEL_index.md:771
#: ../../source/learn/intrinsics/MODEL_index.md:839
#: ../../source/learn/intrinsics/MODEL_index.md:907
#: ../../source/learn/intrinsics/MODEL_index.md:974
#: ../../source/learn/intrinsics/MODEL_index.md:1041
#: ../../source/learn/intrinsics/MODEL_index.md:1115
#: ../../source/learn/intrinsics/MODEL_index.md:1184
#: ../../source/learn/intrinsics/NUMERIC_index.md:211
#: ../../source/learn/intrinsics/NUMERIC_index.md:292
#: ../../source/learn/intrinsics/NUMERIC_index.md:367
#: ../../source/learn/intrinsics/NUMERIC_index.md:705
#: ../../source/learn/intrinsics/NUMERIC_index.md:828
#: ../../source/learn/intrinsics/NUMERIC_index.md:883
#: ../../source/learn/intrinsics/NUMERIC_index.md:962
#: ../../source/learn/intrinsics/NUMERIC_index.md:1033
#: ../../source/learn/intrinsics/NUMERIC_index.md:1543
#: ../../source/learn/intrinsics/PARALLEL_index.md:56
#: ../../source/learn/intrinsics/PARALLEL_index.md:103
#: ../../source/learn/intrinsics/PARALLEL_index.md:171
#: ../../source/learn/intrinsics/PARALLEL_index.md:237
#: ../../source/learn/intrinsics/PARALLEL_index.md:337
#: ../../source/learn/intrinsics/PARALLEL_index.md:408
#: ../../source/learn/intrinsics/PARALLEL_index.md:455
#: ../../source/learn/intrinsics/PARALLEL_index.md:563
#: ../../source/learn/intrinsics/PARALLEL_index.md:628
#: ../../source/learn/intrinsics/PARALLEL_index.md:764
#: ../../source/learn/intrinsics/PARALLEL_index.md:830
#: ../../source/learn/intrinsics/PARALLEL_index.md:896
#: ../../source/learn/intrinsics/PARALLEL_index.md:962
#: ../../source/learn/intrinsics/PARALLEL_index.md:1024
#: ../../source/learn/intrinsics/PARALLEL_index.md:1086
#: ../../source/learn/intrinsics/PARALLEL_index.md:1145
#: ../../source/learn/intrinsics/PARALLEL_index.md:1214
#: ../../source/learn/intrinsics/PARALLEL_index.md:1276
#: ../../source/learn/intrinsics/PARALLEL_index.md:1341
#: ../../source/learn/intrinsics/PARALLEL_index.md:1410
#: ../../source/learn/intrinsics/STATE_index.md:86
#: ../../source/learn/intrinsics/STATE_index.md:313
#: ../../source/learn/intrinsics/STATE_index.md:411
#: ../../source/learn/intrinsics/SYSTEM_index.md:60
#: ../../source/learn/intrinsics/SYSTEM_index.md:145
#: ../../source/learn/intrinsics/SYSTEM_index.md:272
#: ../../source/learn/intrinsics/SYSTEM_index.md:345
#: ../../source/learn/intrinsics/SYSTEM_index.md:450
#: ../../source/learn/intrinsics/SYSTEM_index.md:559
#: ../../source/learn/intrinsics/TRANSFORM_index.md:434
#: ../../source/learn/intrinsics/TYPE_index.md:269
#: ../../source/learn/intrinsics/TYPE_index.md:398
#: ../../source/learn/intrinsics/TYPE_index.md:520
#: ../../source/learn/intrinsics/TYPE_index.md:597
#: ../../source/learn/intrinsics/TYPE_index.md:655
#: ../../source/learn/intrinsics/TYPE_index.md:826
#: ../../source/learn/intrinsics/TYPE_index.md:991
#: ../../source/learn/intrinsics/TYPE_index.md:1085
msgid "__See Also__"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:153
msgid ""
"[__pack__(3)](PACK), [__unpack__(3)](UNPACK), [__pack__(3)](PACK), "
"[__spread__(3)](SPREAD), [__unpack__(3)](UNPACK)"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:159
#: ../../source/learn/intrinsics/ARRAY_index.md:270
#: ../../source/learn/intrinsics/ARRAY_index.md:2182
#: ../../source/learn/intrinsics/ARRAY_index.md:2411
#: ../../source/learn/intrinsics/BIT_index.md:353
#: ../../source/learn/intrinsics/BIT_index.md:780
#: ../../source/learn/intrinsics/BIT_index.md:1361
#: ../../source/learn/intrinsics/BIT_index.md:1464
#: ../../source/learn/intrinsics/BIT_index.md:1920
#: ../../source/learn/intrinsics/CHARACTER_index.md:131
#: ../../source/learn/intrinsics/CHARACTER_index.md:206
#: ../../source/learn/intrinsics/CHARACTER_index.md:448
#: ../../source/learn/intrinsics/CHARACTER_index.md:1168
#: ../../source/learn/intrinsics/CHARACTER_index.md:1532
#: ../../source/learn/intrinsics/CHARACTER_index.md:1610
#: ../../source/learn/intrinsics/CHARACTER_index.md:1698
#: ../../source/learn/intrinsics/MATH_index.md:70
#: ../../source/learn/intrinsics/MATH_index.md:131
#: ../../source/learn/intrinsics/MATH_index.md:228
#: ../../source/learn/intrinsics/MATH_index.md:369
#: ../../source/learn/intrinsics/MATH_index.md:751
#: ../../source/learn/intrinsics/MATH_index.md:1194
#: ../../source/learn/intrinsics/MATH_index.md:1390
#: ../../source/learn/intrinsics/MATH_index.md:1484
#: ../../source/learn/intrinsics/MODEL_index.md:556
#: ../../source/learn/intrinsics/MODEL_index.md:683
#: ../../source/learn/intrinsics/MODEL_index.md:789
#: ../../source/learn/intrinsics/NUMERIC_index.md:128
#: ../../source/learn/intrinsics/NUMERIC_index.md:477
#: ../../source/learn/intrinsics/NUMERIC_index.md:542
#: ../../source/learn/intrinsics/NUMERIC_index.md:716
#: ../../source/learn/intrinsics/STATE_index.md:196
#: ../../source/learn/intrinsics/SYSTEM_index.md:65
#: ../../source/learn/intrinsics/SYSTEM_index.md:150
#: ../../source/learn/intrinsics/SYSTEM_index.md:277
#: ../../source/learn/intrinsics/SYSTEM_index.md:350
#: ../../source/learn/intrinsics/SYSTEM_index.md:462
#: ../../source/learn/intrinsics/SYSTEM_index.md:794
#: ../../source/learn/intrinsics/TYPE_index.md:407
#: ../../source/learn/intrinsics/TYPE_index.md:529
#: ../../source/learn/intrinsics/TYPE_index.md:660
msgid "fortran-lang intrinsic descriptions (license: MIT) @urbanjost"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:160
msgid "PACK"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:163
msgid ""
"__pack__(3) - \\[ARRAY CONSTRUCTION\\] Pack an array into an array of "
"rank one"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:174
msgid ""
"where TYPE(kind=KIND) may be any type, where __array__ and __vector__    "
"and the returned value must by of the same type. __mask__ may be a    "
"scalar as well an an array."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:180
msgid "Stores the elements of ARRAY in an array of rank one."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:182
msgid ""
"The beginning of the resulting array is made up of elements whose "
"__mask__ equals __.true.__. Afterwards, positions are filled with "
"elements taken from __vector__."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:188
#: ../../source/learn/intrinsics/ARRAY_index.md:485
#: ../../source/learn/intrinsics/ARRAY_index.md:685
#: ../../source/learn/intrinsics/ARRAY_index.md:909
#: ../../source/learn/intrinsics/ARRAY_index.md:1095
#: ../../source/learn/intrinsics/ARRAY_index.md:1220
#: ../../source/learn/intrinsics/ARRAY_index.md:1326
#: ../../source/learn/intrinsics/ARRAY_index.md:1420
#: ../../source/learn/intrinsics/ARRAY_index.md:1977
#: ../../source/learn/intrinsics/ARRAY_index.md:2061
#: ../../source/learn/intrinsics/ARRAY_index.md:2213
#: ../../source/learn/intrinsics/ARRAY_index.md:2430
#: ../../source/learn/intrinsics/BIT_index.md:1486
#: ../../source/learn/intrinsics/BIT_index.md:1559
#: ../../source/learn/intrinsics/BIT_index.md:1695
#: ../../source/learn/intrinsics/MATH_index.md:2268
#: ../../source/learn/intrinsics/NUMERIC_index.md:1136
#: ../../source/learn/intrinsics/NUMERIC_index.md:1282
#: ../../source/learn/intrinsics/PARALLEL_index.md:81
#: ../../source/learn/intrinsics/PARALLEL_index.md:433
#: ../../source/learn/intrinsics/TRANSFORM_index.md:27
#: ../../source/learn/intrinsics/TRANSFORM_index.md:173
msgid "__array__"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:189
#: ../../source/learn/intrinsics/NUMERIC_index.md:1137
#: ../../source/learn/intrinsics/TRANSFORM_index.md:28
msgid "Shall be an array of any type."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:192
msgid ""
"Shall be an array of type _logical_ and of the same size as __array__. "
"Alternatively, it may be a _logical_ scalar."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:195
#: ../../source/learn/intrinsics/ARRAY_index.md:414
msgid "__vector__"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:196
msgid ""
"(Optional) shall be an array of the same type as __array__ and of rank "
"one. If present, the number of elements in __vector__ shall be equal to "
"or greater than the number of true elements in __mask__. If __mask__ is "
"scalar, the number of elements in __vector__ shall be equal to or greater"
" than the number of elements in __array__."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:204
msgid ""
"The result is an array of rank one and the same type as that of "
"__array__. If __vector__ is present, the result size is that of "
"__vector__, the number of __.true.__ values in __mask__ otherwise."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:210
#: ../../source/learn/intrinsics/ARRAY_index.md:316
#: ../../source/learn/intrinsics/ARRAY_index.md:431
#: ../../source/learn/intrinsics/ARRAY_index.md:499
#: ../../source/learn/intrinsics/ARRAY_index.md:638
#: ../../source/learn/intrinsics/ARRAY_index.md:806
#: ../../source/learn/intrinsics/ARRAY_index.md:860
#: ../../source/learn/intrinsics/ARRAY_index.md:928
#: ../../source/learn/intrinsics/ARRAY_index.md:1606
#: ../../source/learn/intrinsics/ARRAY_index.md:1731
#: ../../source/learn/intrinsics/ARRAY_index.md:1834
#: ../../source/learn/intrinsics/ARRAY_index.md:1902
#: ../../source/learn/intrinsics/ARRAY_index.md:2231
#: ../../source/learn/intrinsics/ARRAY_index.md:2452
#: ../../source/learn/intrinsics/ARRAY_index.md:2540
#: ../../source/learn/intrinsics/BIT_index.md:190
#: ../../source/learn/intrinsics/BIT_index.md:262
#: ../../source/learn/intrinsics/BIT_index.md:440
#: ../../source/learn/intrinsics/BIT_index.md:570
#: ../../source/learn/intrinsics/BIT_index.md:634
#: ../../source/learn/intrinsics/BIT_index.md:693
#: ../../source/learn/intrinsics/BIT_index.md:1304
#: ../../source/learn/intrinsics/BIT_index.md:1399
#: ../../source/learn/intrinsics/BIT_index.md:1508
#: ../../source/learn/intrinsics/BIT_index.md:1581
#: ../../source/learn/intrinsics/BIT_index.md:1642
#: ../../source/learn/intrinsics/BIT_index.md:1717
#: ../../source/learn/intrinsics/BIT_index.md:1823
#: ../../source/learn/intrinsics/CHARACTER_index.md:178
#: ../../source/learn/intrinsics/CHARACTER_index.md:241
#: ../../source/learn/intrinsics/CHARACTER_index.md:482
#: ../../source/learn/intrinsics/CHARACTER_index.md:557
#: ../../source/learn/intrinsics/CHARACTER_index.md:656
#: ../../source/learn/intrinsics/CHARACTER_index.md:870
#: ../../source/learn/intrinsics/CHARACTER_index.md:1346
#: ../../source/learn/intrinsics/CHARACTER_index.md:1499
#: ../../source/learn/intrinsics/CHARACTER_index.md:1565
#: ../../source/learn/intrinsics/CHARACTER_index.md:1725
#: ../../source/learn/intrinsics/COMPILER_index.md:30
#: ../../source/learn/intrinsics/COMPILER_index.md:90
#: ../../source/learn/intrinsics/C_index.md:36
#: ../../source/learn/intrinsics/C_index.md:96
#: ../../source/learn/intrinsics/C_index.md:151
#: ../../source/learn/intrinsics/C_index.md:214
#: ../../source/learn/intrinsics/C_index.md:286
#: ../../source/learn/intrinsics/C_index.md:345
#: ../../source/learn/intrinsics/MATH_index.md:35
#: ../../source/learn/intrinsics/MATH_index.md:107
#: ../../source/learn/intrinsics/MATH_index.md:262
#: ../../source/learn/intrinsics/MATH_index.md:329
#: ../../source/learn/intrinsics/MATH_index.md:413
#: ../../source/learn/intrinsics/MATH_index.md:462
#: ../../source/learn/intrinsics/MATH_index.md:526
#: ../../source/learn/intrinsics/MATH_index.md:599
#: ../../source/learn/intrinsics/MATH_index.md:657
#: ../../source/learn/intrinsics/MATH_index.md:702
#: ../../source/learn/intrinsics/MATH_index.md:789
#: ../../source/learn/intrinsics/MATH_index.md:866
#: ../../source/learn/intrinsics/MATH_index.md:922
#: ../../source/learn/intrinsics/MATH_index.md:969
#: ../../source/learn/intrinsics/MATH_index.md:1072
#: ../../source/learn/intrinsics/MATH_index.md:1140
#: ../../source/learn/intrinsics/MATH_index.md:1224
#: ../../source/learn/intrinsics/MATH_index.md:1274
#: ../../source/learn/intrinsics/MATH_index.md:1355
#: ../../source/learn/intrinsics/MATH_index.md:1432
#: ../../source/learn/intrinsics/MATH_index.md:1512
#: ../../source/learn/intrinsics/MATH_index.md:1569
#: ../../source/learn/intrinsics/MATH_index.md:1640
#: ../../source/learn/intrinsics/MATH_index.md:1696
#: ../../source/learn/intrinsics/MATH_index.md:1752
#: ../../source/learn/intrinsics/MATH_index.md:1819
#: ../../source/learn/intrinsics/MATH_index.md:1876
#: ../../source/learn/intrinsics/MATH_index.md:1949
#: ../../source/learn/intrinsics/MATH_index.md:2005
#: ../../source/learn/intrinsics/MATH_index.md:2057
#: ../../source/learn/intrinsics/MATH_index.md:2177
#: ../../source/learn/intrinsics/MATH_index.md:2224
#: ../../source/learn/intrinsics/MATH_index.md:2288
#: ../../source/learn/intrinsics/MODEL_index.md:30
#: ../../source/learn/intrinsics/MODEL_index.md:100
#: ../../source/learn/intrinsics/MODEL_index.md:170
#: ../../source/learn/intrinsics/MODEL_index.md:302
#: ../../source/learn/intrinsics/MODEL_index.md:374
#: ../../source/learn/intrinsics/MODEL_index.md:438
#: ../../source/learn/intrinsics/MODEL_index.md:512
#: ../../source/learn/intrinsics/MODEL_index.md:596
#: ../../source/learn/intrinsics/MODEL_index.md:719
#: ../../source/learn/intrinsics/MODEL_index.md:817
#: ../../source/learn/intrinsics/MODEL_index.md:885
#: ../../source/learn/intrinsics/MODEL_index.md:952
#: ../../source/learn/intrinsics/MODEL_index.md:1020
#: ../../source/learn/intrinsics/MODEL_index.md:1093
#: ../../source/learn/intrinsics/MODEL_index.md:1166
#: ../../source/learn/intrinsics/NUMERIC_index.md:55
#: ../../source/learn/intrinsics/NUMERIC_index.md:177
#: ../../source/learn/intrinsics/NUMERIC_index.md:254
#: ../../source/learn/intrinsics/NUMERIC_index.md:339
#: ../../source/learn/intrinsics/NUMERIC_index.md:418
#: ../../source/learn/intrinsics/NUMERIC_index.md:512
#: ../../source/learn/intrinsics/NUMERIC_index.md:586
#: ../../source/learn/intrinsics/NUMERIC_index.md:668
#: ../../source/learn/intrinsics/NUMERIC_index.md:922
#: ../../source/learn/intrinsics/NUMERIC_index.md:1005
#: ../../source/learn/intrinsics/NUMERIC_index.md:1151
#: ../../source/learn/intrinsics/NUMERIC_index.md:1221
#: ../../source/learn/intrinsics/NUMERIC_index.md:1300
#: ../../source/learn/intrinsics/NUMERIC_index.md:1463
#: ../../source/learn/intrinsics/PARALLEL_index.md:42
#: ../../source/learn/intrinsics/PARALLEL_index.md:149
#: ../../source/learn/intrinsics/PARALLEL_index.md:219
#: ../../source/learn/intrinsics/PARALLEL_index.md:302
#: ../../source/learn/intrinsics/PARALLEL_index.md:385
#: ../../source/learn/intrinsics/PARALLEL_index.md:495
#: ../../source/learn/intrinsics/PARALLEL_index.md:548
#: ../../source/learn/intrinsics/PARALLEL_index.md:605
#: ../../source/learn/intrinsics/PARALLEL_index.md:678
#: ../../source/learn/intrinsics/PARALLEL_index.md:750
#: ../../source/learn/intrinsics/PARALLEL_index.md:815
#: ../../source/learn/intrinsics/PARALLEL_index.md:881
#: ../../source/learn/intrinsics/PARALLEL_index.md:947
#: ../../source/learn/intrinsics/PARALLEL_index.md:1009
#: ../../source/learn/intrinsics/PARALLEL_index.md:1071
#: ../../source/learn/intrinsics/PARALLEL_index.md:1130
#: ../../source/learn/intrinsics/PARALLEL_index.md:1199
#: ../../source/learn/intrinsics/PARALLEL_index.md:1262
#: ../../source/learn/intrinsics/PARALLEL_index.md:1326
#: ../../source/learn/intrinsics/PARALLEL_index.md:1389
#: ../../source/learn/intrinsics/STATE_index.md:68
#: ../../source/learn/intrinsics/STATE_index.md:169
#: ../../source/learn/intrinsics/STATE_index.md:227
#: ../../source/learn/intrinsics/STATE_index.md:349
#: ../../source/learn/intrinsics/SYSTEM_index.md:33
#: ../../source/learn/intrinsics/SYSTEM_index.md:110
#: ../../source/learn/intrinsics/SYSTEM_index.md:205
#: ../../source/learn/intrinsics/SYSTEM_index.md:322
#: ../../source/learn/intrinsics/SYSTEM_index.md:406
#: ../../source/learn/intrinsics/SYSTEM_index.md:523
#: ../../source/learn/intrinsics/SYSTEM_index.md:640
#: ../../source/learn/intrinsics/SYSTEM_index.md:732
#: ../../source/learn/intrinsics/TRANSFORM_index.md:42
#: ../../source/learn/intrinsics/TRANSFORM_index.md:112
#: ../../source/learn/intrinsics/TRANSFORM_index.md:191
#: ../../source/learn/intrinsics/TRANSFORM_index.md:354
#: ../../source/learn/intrinsics/TYPE_index.md:87
#: ../../source/learn/intrinsics/TYPE_index.md:240
#: ../../source/learn/intrinsics/TYPE_index.md:335
#: ../../source/learn/intrinsics/TYPE_index.md:455
#: ../../source/learn/intrinsics/TYPE_index.md:568
#: ../../source/learn/intrinsics/TYPE_index.md:636
#: ../../source/learn/intrinsics/TYPE_index.md:712
#: ../../source/learn/intrinsics/TYPE_index.md:859
#: ../../source/learn/intrinsics/TYPE_index.md:907
#: ../../source/learn/intrinsics/TYPE_index.md:964
#: ../../source/learn/intrinsics/TYPE_index.md:1058
msgid "Sample program:"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:251
#: ../../source/learn/intrinsics/ARRAY_index.md:446
#: ../../source/learn/intrinsics/ARRAY_index.md:532
#: ../../source/learn/intrinsics/ARRAY_index.md:654
#: ../../source/learn/intrinsics/ARRAY_index.md:761
#: ../../source/learn/intrinsics/ARRAY_index.md:817
#: ../../source/learn/intrinsics/ARRAY_index.md:874
#: ../../source/learn/intrinsics/ARRAY_index.md:1025
#: ../../source/learn/intrinsics/ARRAY_index.md:1176
#: ../../source/learn/intrinsics/ARRAY_index.md:1274
#: ../../source/learn/intrinsics/ARRAY_index.md:1367
#: ../../source/learn/intrinsics/ARRAY_index.md:1645
#: ../../source/learn/intrinsics/ARRAY_index.md:1753
#: ../../source/learn/intrinsics/ARRAY_index.md:1853
#: ../../source/learn/intrinsics/ARRAY_index.md:2018
#: ../../source/learn/intrinsics/ARRAY_index.md:2142
#: ../../source/learn/intrinsics/ARRAY_index.md:2341
#: ../../source/learn/intrinsics/ARRAY_index.md:2483
#: ../../source/learn/intrinsics/ARRAY_index.md:2559
#: ../../source/learn/intrinsics/BIT_index.md:305
#: ../../source/learn/intrinsics/BIT_index.md:397
#: ../../source/learn/intrinsics/BIT_index.md:462
#: ../../source/learn/intrinsics/BIT_index.md:585
#: ../../source/learn/intrinsics/BIT_index.md:648
#: ../../source/learn/intrinsics/BIT_index.md:728
#: ../../source/learn/intrinsics/BIT_index.md:962
#: ../../source/learn/intrinsics/BIT_index.md:1315
#: ../../source/learn/intrinsics/BIT_index.md:1414
#: ../../source/learn/intrinsics/BIT_index.md:1520
#: ../../source/learn/intrinsics/BIT_index.md:1597
#: ../../source/learn/intrinsics/BIT_index.md:1652
#: ../../source/learn/intrinsics/BIT_index.md:1730
#: ../../source/learn/intrinsics/BIT_index.md:1836
#: ../../source/learn/intrinsics/BIT_index.md:1899
#: ../../source/learn/intrinsics/CHARACTER_index.md:107
#: ../../source/learn/intrinsics/CHARACTER_index.md:194
#: ../../source/learn/intrinsics/CHARACTER_index.md:257
#: ../../source/learn/intrinsics/CHARACTER_index.md:375
#: ../../source/learn/intrinsics/CHARACTER_index.md:493
#: ../../source/learn/intrinsics/CHARACTER_index.md:584
#: ../../source/learn/intrinsics/CHARACTER_index.md:709
#: ../../source/learn/intrinsics/CHARACTER_index.md:880
#: ../../source/learn/intrinsics/CHARACTER_index.md:1028
#: ../../source/learn/intrinsics/CHARACTER_index.md:1084
#: ../../source/learn/intrinsics/CHARACTER_index.md:1139
#: ../../source/learn/intrinsics/CHARACTER_index.md:1365
#: ../../source/learn/intrinsics/CHARACTER_index.md:1518
#: ../../source/learn/intrinsics/CHARACTER_index.md:1593
#: ../../source/learn/intrinsics/CHARACTER_index.md:1668
#: ../../source/learn/intrinsics/CHARACTER_index.md:1740
#: ../../source/learn/intrinsics/COMPILER_index.md:43
#: ../../source/learn/intrinsics/COMPILER_index.md:103
#: ../../source/learn/intrinsics/C_index.md:355
#: ../../source/learn/intrinsics/MATH_index.md:53
#: ../../source/learn/intrinsics/MATH_index.md:117
#: ../../source/learn/intrinsics/MATH_index.md:201
#: ../../source/learn/intrinsics/MATH_index.md:274
#: ../../source/learn/intrinsics/MATH_index.md:350
#: ../../source/learn/intrinsics/MATH_index.md:424
#: ../../source/learn/intrinsics/MATH_index.md:473
#: ../../source/learn/intrinsics/MATH_index.md:541
#: ../../source/learn/intrinsics/MATH_index.md:734
#: ../../source/learn/intrinsics/MATH_index.md:822
#: ../../source/learn/intrinsics/MATH_index.md:877
#: ../../source/learn/intrinsics/MATH_index.md:933
#: ../../source/learn/intrinsics/MATH_index.md:1013
#: ../../source/learn/intrinsics/MATH_index.md:1087
#: ../../source/learn/intrinsics/MATH_index.md:1173
#: ../../source/learn/intrinsics/MATH_index.md:1235
#: ../../source/learn/intrinsics/MATH_index.md:1292
#: ../../source/learn/intrinsics/MATH_index.md:1379
#: ../../source/learn/intrinsics/MATH_index.md:1462
#: ../../source/learn/intrinsics/MATH_index.md:1524
#: ../../source/learn/intrinsics/MATH_index.md:1581
#: ../../source/learn/intrinsics/MATH_index.md:1652
#: ../../source/learn/intrinsics/MATH_index.md:1708
#: ../../source/learn/intrinsics/MATH_index.md:1830
#: ../../source/learn/intrinsics/MATH_index.md:1887
#: ../../source/learn/intrinsics/MATH_index.md:1960
#: ../../source/learn/intrinsics/MATH_index.md:2015
#: ../../source/learn/intrinsics/MATH_index.md:2109
#: ../../source/learn/intrinsics/MATH_index.md:2186
#: ../../source/learn/intrinsics/MATH_index.md:2233
#: ../../source/learn/intrinsics/MATH_index.md:2312
#: ../../source/learn/intrinsics/MODEL_index.md:42
#: ../../source/learn/intrinsics/MODEL_index.md:110
#: ../../source/learn/intrinsics/MODEL_index.md:193
#: ../../source/learn/intrinsics/MODEL_index.md:313
#: ../../source/learn/intrinsics/MODEL_index.md:384
#: ../../source/learn/intrinsics/MODEL_index.md:450
#: ../../source/learn/intrinsics/MODEL_index.md:649
#: ../../source/learn/intrinsics/MODEL_index.md:747
#: ../../source/learn/intrinsics/MODEL_index.md:830
#: ../../source/learn/intrinsics/MODEL_index.md:965
#: ../../source/learn/intrinsics/MODEL_index.md:1030
#: ../../source/learn/intrinsics/MODEL_index.md:1105
#: ../../source/learn/intrinsics/MODEL_index.md:1175
#: ../../source/learn/intrinsics/NUMERIC_index.md:106
#: ../../source/learn/intrinsics/NUMERIC_index.md:198
#: ../../source/learn/intrinsics/NUMERIC_index.md:278
#: ../../source/learn/intrinsics/NUMERIC_index.md:355
#: ../../source/learn/intrinsics/NUMERIC_index.md:455
#: ../../source/learn/intrinsics/NUMERIC_index.md:530
#: ../../source/learn/intrinsics/NUMERIC_index.md:616
#: ../../source/learn/intrinsics/NUMERIC_index.md:690
#: ../../source/learn/intrinsics/NUMERIC_index.md:815
#: ../../source/learn/intrinsics/NUMERIC_index.md:873
#: ../../source/learn/intrinsics/NUMERIC_index.md:943
#: ../../source/learn/intrinsics/NUMERIC_index.md:1020
#: ../../source/learn/intrinsics/NUMERIC_index.md:1100
#: ../../source/learn/intrinsics/NUMERIC_index.md:1168
#: ../../source/learn/intrinsics/NUMERIC_index.md:1236
#: ../../source/learn/intrinsics/NUMERIC_index.md:1317
#: ../../source/learn/intrinsics/NUMERIC_index.md:1422
#: ../../source/learn/intrinsics/NUMERIC_index.md:1532
#: ../../source/learn/intrinsics/PARALLEL_index.md:162
#: ../../source/learn/intrinsics/PARALLEL_index.md:399
#: ../../source/learn/intrinsics/PARALLEL_index.md:694
#: ../../source/learn/intrinsics/STATE_index.md:304
#: ../../source/learn/intrinsics/STATE_index.md:368
#: ../../source/learn/intrinsics/SYSTEM_index.md:128
#: ../../source/learn/intrinsics/SYSTEM_index.md:256
#: ../../source/learn/intrinsics/SYSTEM_index.md:337
#: ../../source/learn/intrinsics/SYSTEM_index.md:434
#: ../../source/learn/intrinsics/TRANSFORM_index.md:59
#: ../../source/learn/intrinsics/TRANSFORM_index.md:127
#: ../../source/learn/intrinsics/TRANSFORM_index.md:208
#: ../../source/learn/intrinsics/TRANSFORM_index.md:313
#: ../../source/learn/intrinsics/TRANSFORM_index.md:423
#: ../../source/learn/intrinsics/TYPE_index.md:106
#: ../../source/learn/intrinsics/TYPE_index.md:378
#: ../../source/learn/intrinsics/TYPE_index.md:497
#: ../../source/learn/intrinsics/TYPE_index.md:585
#: ../../source/learn/intrinsics/TYPE_index.md:647
#: ../../source/learn/intrinsics/TYPE_index.md:732
#: ../../source/learn/intrinsics/TYPE_index.md:814
#: ../../source/learn/intrinsics/TYPE_index.md:872
#: ../../source/learn/intrinsics/TYPE_index.md:930
#: ../../source/learn/intrinsics/TYPE_index.md:981
#: ../../source/learn/intrinsics/TYPE_index.md:1075
msgid "Results:"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:264
msgid ""
"[__unpack__(3)](UNPACK), [__merge__(3)](MERGE), [__pack__(3)](PACK), "
"[__spread__(3)](SPREAD), [__unpack__(3)](UNPACK)"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:271
msgid "SPREAD"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:274
msgid "__spread__(3) - \\[ARRAY CONSTRUCTION\\] Add a dimension to an array"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:289
msgid ""
"Replicates a __source__ array __ncopies__ times along a specified "
"dimension __dim__."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:292
msgid ""
"If SOURCE is scalar, the shape of the result is (MAX (NCOPIES, 0)). and "
"each element of the result has a value equal to SOURCE."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:297
#: ../../source/learn/intrinsics/ARRAY_index.md:842
#: ../../source/learn/intrinsics/ARRAY_index.md:2518
#: ../../source/learn/intrinsics/TYPE_index.md:682
msgid "__source__"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:298
msgid "Shall be a scalar or an array of any type and a rank less than fifteen."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:301
#: ../../source/learn/intrinsics/ARRAY_index.md:688
#: ../../source/learn/intrinsics/ARRAY_index.md:913
#: ../../source/learn/intrinsics/ARRAY_index.md:1098
#: ../../source/learn/intrinsics/ARRAY_index.md:1223
#: ../../source/learn/intrinsics/ARRAY_index.md:1329
#: ../../source/learn/intrinsics/ARRAY_index.md:1427
#: ../../source/learn/intrinsics/ARRAY_index.md:1688
#: ../../source/learn/intrinsics/ARRAY_index.md:1813
#: ../../source/learn/intrinsics/ARRAY_index.md:1886
#: ../../source/learn/intrinsics/ARRAY_index.md:1980
#: ../../source/learn/intrinsics/ARRAY_index.md:2064
#: ../../source/learn/intrinsics/ARRAY_index.md:2216
#: ../../source/learn/intrinsics/ARRAY_index.md:2433
#: ../../source/learn/intrinsics/BIT_index.md:1489
#: ../../source/learn/intrinsics/BIT_index.md:1562
#: ../../source/learn/intrinsics/BIT_index.md:1698
#: ../../source/learn/intrinsics/MATH_index.md:2271
#: ../../source/learn/intrinsics/NUMERIC_index.md:1142
#: ../../source/learn/intrinsics/NUMERIC_index.md:1291
#: ../../source/learn/intrinsics/PARALLEL_index.md:84
#: ../../source/learn/intrinsics/PARALLEL_index.md:436
#: ../../source/learn/intrinsics/PARALLEL_index.md:658
#: ../../source/learn/intrinsics/TRANSFORM_index.md:33
#: ../../source/learn/intrinsics/TRANSFORM_index.md:182
msgid "__dim__"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:302
msgid ""
"Shall be a scalar of type _integer_ with a value in the range from __1__ "
"to __n+1__, where __n__ equals the rank of __source__."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:305
#: ../../source/learn/intrinsics/CHARACTER_index.md:231
msgid "__ncopies__"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:306
msgid "Shall be a scalar of type _integer_."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:310
msgid ""
"The result is an array of the same type as __source__ and has rank "
"__n+1__ where __n__ equals the rank of __source__."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:391
msgid ""
"[__pack__(3)](PACK), [__unpack__(3)](UNPACK), [__merge__(3)](MERGE), "
"[__pack__(3)](PACK), [__unpack__(3)](UNPACK)"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:397
#: ../../source/learn/intrinsics/ARRAY_index.md:463
#: ../../source/learn/intrinsics/ARRAY_index.md:549
#: ../../source/learn/intrinsics/ARRAY_index.md:663
#: ../../source/learn/intrinsics/ARRAY_index.md:779
#: ../../source/learn/intrinsics/ARRAY_index.md:825
#: ../../source/learn/intrinsics/ARRAY_index.md:891
#: ../../source/learn/intrinsics/ARRAY_index.md:1078
#: ../../source/learn/intrinsics/ARRAY_index.md:1194
#: ../../source/learn/intrinsics/ARRAY_index.md:1296
#: ../../source/learn/intrinsics/ARRAY_index.md:1385
#: ../../source/learn/intrinsics/ARRAY_index.md:1578
#: ../../source/learn/intrinsics/ARRAY_index.md:1664
#: ../../source/learn/intrinsics/ARRAY_index.md:1791
#: ../../source/learn/intrinsics/ARRAY_index.md:1863
#: ../../source/learn/intrinsics/ARRAY_index.md:1950
#: ../../source/learn/intrinsics/ARRAY_index.md:2036
#: ../../source/learn/intrinsics/ARRAY_index.md:2499
#: ../../source/learn/intrinsics/ARRAY_index.md:2573
#: ../../source/learn/intrinsics/BIT_index.md:41
#: ../../source/learn/intrinsics/BIT_index.md:82
#: ../../source/learn/intrinsics/BIT_index.md:119
#: ../../source/learn/intrinsics/BIT_index.md:156
#: ../../source/learn/intrinsics/BIT_index.md:413
#: ../../source/learn/intrinsics/BIT_index.md:543
#: ../../source/learn/intrinsics/BIT_index.md:604
#: ../../source/learn/intrinsics/BIT_index.md:666
#: ../../source/learn/intrinsics/BIT_index.md:820
#: ../../source/learn/intrinsics/BIT_index.md:860
#: ../../source/learn/intrinsics/BIT_index.md:1173
#: ../../source/learn/intrinsics/BIT_index.md:1220
#: ../../source/learn/intrinsics/BIT_index.md:1267
#: ../../source/learn/intrinsics/BIT_index.md:1537
#: ../../source/learn/intrinsics/BIT_index.md:1612
#: ../../source/learn/intrinsics/BIT_index.md:1673
#: ../../source/learn/intrinsics/BIT_index.md:1746
#: ../../source/learn/intrinsics/BIT_index.md:1791
#: ../../source/learn/intrinsics/BIT_index.md:1861
#: ../../source/learn/intrinsics/BIT_index.md:1965
#: ../../source/learn/intrinsics/BIT_index.md:2006
#: ../../source/learn/intrinsics/BIT_index.md:2047
#: ../../source/learn/intrinsics/BIT_index.md:2086
#: ../../source/learn/intrinsics/BIT_index.md:2125
#: ../../source/learn/intrinsics/CHARACTER_index.md:284
#: ../../source/learn/intrinsics/CHARACTER_index.md:525
#: ../../source/learn/intrinsics/CHARACTER_index.md:615
#: ../../source/learn/intrinsics/CHARACTER_index.md:742
#: ../../source/learn/intrinsics/CHARACTER_index.md:828
#: ../../source/learn/intrinsics/CHARACTER_index.md:904
#: ../../source/learn/intrinsics/CHARACTER_index.md:1231
#: ../../source/learn/intrinsics/CHARACTER_index.md:1296
#: ../../source/learn/intrinsics/CHARACTER_index.md:1407
#: ../../source/learn/intrinsics/CHARACTER_index.md:1467
#: ../../source/learn/intrinsics/CHARACTER_index.md:1770
#: ../../source/learn/intrinsics/COMPILER_index.md:61
#: ../../source/learn/intrinsics/COMPILER_index.md:122
#: ../../source/learn/intrinsics/C_index.md:65
#: ../../source/learn/intrinsics/C_index.md:125
#: ../../source/learn/intrinsics/C_index.md:187
#: ../../source/learn/intrinsics/C_index.md:256
#: ../../source/learn/intrinsics/C_index.md:312
#: ../../source/learn/intrinsics/C_index.md:370
#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:402
#: ../../source/learn/intrinsics/MATH_index.md:288
#: ../../source/learn/intrinsics/MATH_index.md:433
#: ../../source/learn/intrinsics/MATH_index.md:487
#: ../../source/learn/intrinsics/MATH_index.md:562
#: ../../source/learn/intrinsics/MATH_index.md:620
#: ../../source/learn/intrinsics/MATH_index.md:840
#: ../../source/learn/intrinsics/MATH_index.md:891
#: ../../source/learn/intrinsics/MATH_index.md:946
#: ../../source/learn/intrinsics/MATH_index.md:1034
#: ../../source/learn/intrinsics/MATH_index.md:1101
#: ../../source/learn/intrinsics/MATH_index.md:1244
#: ../../source/learn/intrinsics/MATH_index.md:1302
#: ../../source/learn/intrinsics/MATH_index.md:1541
#: ../../source/learn/intrinsics/MATH_index.md:1597
#: ../../source/learn/intrinsics/MATH_index.md:1669
#: ../../source/learn/intrinsics/MATH_index.md:1725
#: ../../source/learn/intrinsics/MATH_index.md:1776
#: ../../source/learn/intrinsics/MATH_index.md:1846
#: ../../source/learn/intrinsics/MATH_index.md:1901
#: ../../source/learn/intrinsics/MATH_index.md:2024
#: ../../source/learn/intrinsics/MATH_index.md:2151
#: ../../source/learn/intrinsics/MATH_index.md:2198
#: ../../source/learn/intrinsics/MATH_index.md:2245
#: ../../source/learn/intrinsics/MATH_index.md:2335
#: ../../source/learn/intrinsics/MODEL_index.md:70
#: ../../source/learn/intrinsics/MODEL_index.md:137
#: ../../source/learn/intrinsics/MODEL_index.md:220
#: ../../source/learn/intrinsics/MODEL_index.md:269
#: ../../source/learn/intrinsics/MODEL_index.md:342
#: ../../source/learn/intrinsics/MODEL_index.md:411
#: ../../source/learn/intrinsics/MODEL_index.md:478
#: ../../source/learn/intrinsics/MODEL_index.md:858
#: ../../source/learn/intrinsics/MODEL_index.md:925
#: ../../source/learn/intrinsics/MODEL_index.md:993
#: ../../source/learn/intrinsics/MODEL_index.md:1060
#: ../../source/learn/intrinsics/MODEL_index.md:1133
#: ../../source/learn/intrinsics/MODEL_index.md:1202
#: ../../source/learn/intrinsics/NUMERIC_index.md:220
#: ../../source/learn/intrinsics/NUMERIC_index.md:301
#: ../../source/learn/intrinsics/NUMERIC_index.md:378
#: ../../source/learn/intrinsics/NUMERIC_index.md:627
#: ../../source/learn/intrinsics/NUMERIC_index.md:834
#: ../../source/learn/intrinsics/NUMERIC_index.md:889
#: ../../source/learn/intrinsics/NUMERIC_index.md:966
#: ../../source/learn/intrinsics/NUMERIC_index.md:1037
#: ../../source/learn/intrinsics/NUMERIC_index.md:1182
#: ../../source/learn/intrinsics/NUMERIC_index.md:1248
#: ../../source/learn/intrinsics/NUMERIC_index.md:1331
#: ../../source/learn/intrinsics/NUMERIC_index.md:1368
#: ../../source/learn/intrinsics/NUMERIC_index.md:1430
#: ../../source/learn/intrinsics/NUMERIC_index.md:1547
#: ../../source/learn/intrinsics/PARALLEL_index.md:63
#: ../../source/learn/intrinsics/PARALLEL_index.md:108
#: ../../source/learn/intrinsics/PARALLEL_index.md:178
#: ../../source/learn/intrinsics/PARALLEL_index.md:244
#: ../../source/learn/intrinsics/PARALLEL_index.md:344
#: ../../source/learn/intrinsics/PARALLEL_index.md:415
#: ../../source/learn/intrinsics/PARALLEL_index.md:461
#: ../../source/learn/intrinsics/PARALLEL_index.md:516
#: ../../source/learn/intrinsics/PARALLEL_index.md:568
#: ../../source/learn/intrinsics/PARALLEL_index.md:633
#: ../../source/learn/intrinsics/PARALLEL_index.md:775
#: ../../source/learn/intrinsics/PARALLEL_index.md:841
#: ../../source/learn/intrinsics/PARALLEL_index.md:907
#: ../../source/learn/intrinsics/PARALLEL_index.md:973
#: ../../source/learn/intrinsics/PARALLEL_index.md:1035
#: ../../source/learn/intrinsics/PARALLEL_index.md:1095
#: ../../source/learn/intrinsics/PARALLEL_index.md:1154
#: ../../source/learn/intrinsics/PARALLEL_index.md:1220
#: ../../source/learn/intrinsics/PARALLEL_index.md:1286
#: ../../source/learn/intrinsics/PARALLEL_index.md:1352
#: ../../source/learn/intrinsics/PARALLEL_index.md:1422
#: ../../source/learn/intrinsics/STATE_index.md:90
#: ../../source/learn/intrinsics/STATE_index.md:134
#: ../../source/learn/intrinsics/STATE_index.md:246
#: ../../source/learn/intrinsics/STATE_index.md:317
#: ../../source/learn/intrinsics/STATE_index.md:377
#: ../../source/learn/intrinsics/STATE_index.md:415
#: ../../source/learn/intrinsics/SYSTEM_index.md:564
#: ../../source/learn/intrinsics/SYSTEM_index.md:668
#: ../../source/learn/intrinsics/TRANSFORM_index.md:73
#: ../../source/learn/intrinsics/TRANSFORM_index.md:139
#: ../../source/learn/intrinsics/TRANSFORM_index.md:222
#: ../../source/learn/intrinsics/TRANSFORM_index.md:259
#: ../../source/learn/intrinsics/TRANSFORM_index.md:321
#: ../../source/learn/intrinsics/TRANSFORM_index.md:438
#: ../../source/learn/intrinsics/TYPE_index.md:55
#: ../../source/learn/intrinsics/TYPE_index.md:119
#: ../../source/learn/intrinsics/TYPE_index.md:283
#: ../../source/learn/intrinsics/TYPE_index.md:602
#: ../../source/learn/intrinsics/TYPE_index.md:764
#: ../../source/learn/intrinsics/TYPE_index.md:832
#: ../../source/learn/intrinsics/TYPE_index.md:881
#: ../../source/learn/intrinsics/TYPE_index.md:939
#: ../../source/learn/intrinsics/TYPE_index.md:1000
#: ../../source/learn/intrinsics/TYPE_index.md:1091
msgid "fortran-lang intrinsic descriptions"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:398
msgid "UNPACK"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:401
msgid ""
"__unpack__(3) - \\[ARRAY CONSTRUCTION\\] Store the elements of a vector "
"in an array of higher rank"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:410
msgid "Store the elements of __vector__ in an array of higher rank."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:415
msgid ""
"Shall be an array of any type and rank one. It shall have at least as "
"many elements as __mask__ has __.true.__ values."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:419
msgid "Shall be an array of type _logical_."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:421
msgid "__field__"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:422
msgid ""
"Shall be of the same type as __vector__ and have the same shape as "
"__mask__."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:426
msgid ""
"The resulting array corresponds to __field__ with __.true.__ elements of "
"__mask__ replaced by values from __vector__ in array element order."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:457
msgid ""
"[__pack__(3)](PACK), [__merge__(3)](MERGE), [__pack__(3)](PACK), "
"[__spread__(3)](SPREAD), [__unpack__(3)](UNPACK)"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:464
msgid "ALLOCATED"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:467
msgid "__allocated__(3) - \\[ARRAY INQUIRY\\] Status of an allocatable entity"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:474
#: ../../source/learn/intrinsics/ARRAY_index.md:1307
#: ../../source/learn/intrinsics/ARRAY_index.md:1961
#: ../../source/learn/intrinsics/NUMERIC_index.md:144
msgid "or"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:480
msgid ""
"__allocated(array)__ and __allocated(scalar)__ check the allocation "
"status of __array__ and __scalar__, respectively."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:486
msgid "the argument shall be an _allocatable_ array."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:488
msgid "__scalar__"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:489
msgid "the argument shall be an _allocatable_ scalar."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:493
msgid ""
"The return value is a scalar _logical_ with the default logical kind type"
" parameter. If the argument is allocated then the result is .true.; "
"otherwise, it returns .false.."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:542
msgid ""
"Fortran 95 and later. Note, the scalar= keyword and allocatable scalar "
"entities are available in Fortran 2003 and later."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:547
msgid "[__move\\_alloc__(3)](MOVE_ALLOC)"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:550
msgid "IS_CONTIGUOUS"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:553
msgid "__is\\_contiguous__(3) - \\[ARRAY INQUIRY\\] test if object is contiguous"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:562
msgid "True if and only if an object is contiguous."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:564
msgid "An object is contiguous if it is"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:566
msgid "__(1)__ an object with the CONTIGUOUS attribute,"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:569
msgid "__(2)__ a nonpointer whole array that is not assumed-shape,"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:572
msgid ""
"__(3)__ an assumed-shape array that is argument associated with an array "
"that is contiguous,"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:576
msgid "__(4)__ an array allocated by an ALLOCATE statement,"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:579
msgid "__(5)__ a pointer associated with a contiguous target, or"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:582
msgid "__(6)__ a nonzero-sized array section provided that"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:585
msgid "__(a)__ its base object is contiguous,"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:588
msgid "__(b)__ it does not have a vector subscript,"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:591
msgid ""
"__(c)__ the elements of the section, in array element order, are a subset"
" of the base object elements that are consecutive in array element order,"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:596
msgid ""
"__(d)__ if the array is of type character and a substring-range appears, "
"the substring-range specifies all of the characters of the parent-string,"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:601
msgid "__(e)__ only its final part-ref has nonzero rank, and"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:604
msgid "__(f)__ it is not the real or imaginary part of an array of type complex."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:608
msgid "An object is not contiguous if it is an array subobject, and"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:610
msgid "the object has two or more elements,"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:612
msgid ""
"the elements of the object in array element order are not consecutive in "
"the elements of the base object,"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:615
msgid "the object is not of type character with length zero, and"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:617
msgid ""
"the object is not of a derived type that has no ultimate components other"
" than zero-sized arrays and"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:620
msgid "characters with length zero."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:622
msgid "It is processor-dependent whether any other object is contiguous."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:626
#: ../../source/learn/intrinsics/ARRAY_index.md:796
#: ../../source/learn/intrinsics/BIT_index.md:370
#: ../../source/learn/intrinsics/NUMERIC_index.md:39
#: ../../source/learn/intrinsics/NUMERIC_index.md:237
#: ../../source/learn/intrinsics/NUMERIC_index.md:322
#: ../../source/learn/intrinsics/NUMERIC_index.md:651
#: ../../source/learn/intrinsics/NUMERIC_index.md:906
#: ../../source/learn/intrinsics/NUMERIC_index.md:983
#: ../../source/learn/intrinsics/PARALLEL_index.md:25
#: ../../source/learn/intrinsics/PARALLEL_index.md:132
#: ../../source/learn/intrinsics/PARALLEL_index.md:202
#: ../../source/learn/intrinsics/PARALLEL_index.md:272
#: ../../source/learn/intrinsics/PARALLEL_index.md:368
#: ../../source/learn/intrinsics/STATE_index.md:108
#: ../../source/learn/intrinsics/STATE_index.md:337
#: ../../source/learn/intrinsics/STATE_index.md:394
#: ../../source/learn/intrinsics/TYPE_index.md:302
#: ../../source/learn/intrinsics/TYPE_index.md:625
msgid "__a__"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:627
msgid ""
"may be of any type. It shall be an array. If it is a pointer it shall be "
"associated."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:632
msgid "__Result__"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:633
msgid ""
"of type Default logical scalar. The result has the value true if __a__ is"
" contiguous, and false otherwise."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:661
#: ../../source/learn/intrinsics/BIT_index.md:33
#: ../../source/learn/intrinsics/BIT_index.md:74
#: ../../source/learn/intrinsics/BIT_index.md:111
#: ../../source/learn/intrinsics/BIT_index.md:148
#: ../../source/learn/intrinsics/BIT_index.md:407
#: ../../source/learn/intrinsics/BIT_index.md:534
#: ../../source/learn/intrinsics/BIT_index.md:596
#: ../../source/learn/intrinsics/BIT_index.md:658
#: ../../source/learn/intrinsics/BIT_index.md:771
#: ../../source/learn/intrinsics/BIT_index.md:814
#: ../../source/learn/intrinsics/BIT_index.md:854
#: ../../source/learn/intrinsics/BIT_index.md:974
#: ../../source/learn/intrinsics/BIT_index.md:1355
#: ../../source/learn/intrinsics/BIT_index.md:1458
#: ../../source/learn/intrinsics/BIT_index.md:1528
#: ../../source/learn/intrinsics/BIT_index.md:1604
#: ../../source/learn/intrinsics/BIT_index.md:1738
#: ../../source/learn/intrinsics/BIT_index.md:2040
#: ../../source/learn/intrinsics/BIT_index.md:2079
#: ../../source/learn/intrinsics/BIT_index.md:2118
#: ../../source/learn/intrinsics/MATH_index.md:124
#: ../../source/learn/intrinsics/MATH_index.md:281
#: ../../source/learn/intrinsics/MATH_index.md:480
#: ../../source/learn/intrinsics/MATH_index.md:1482
#: ../../source/learn/intrinsics/MATH_index.md:1531
#: ../../source/learn/intrinsics/MATH_index.md:1587
#: ../../source/learn/intrinsics/MATH_index.md:1659
#: ../../source/learn/intrinsics/MATH_index.md:1715
#: ../../source/learn/intrinsics/MATH_index.md:1766
#: ../../source/learn/intrinsics/MATH_index.md:1836
#: ../../source/learn/intrinsics/MATH_index.md:1893
#: ../../source/learn/intrinsics/MATH_index.md:1966
#: ../../source/learn/intrinsics/MATH_index.md:2022
#: ../../source/learn/intrinsics/MATH_index.md:2143
#: ../../source/learn/intrinsics/MATH_index.md:2192
#: ../../source/learn/intrinsics/MATH_index.md:2239
#: ../../source/learn/intrinsics/MATH_index.md:2327
#: ../../source/learn/intrinsics/NUMERIC_index.md:1428
#: ../../source/learn/intrinsics/PARALLEL_index.md:101
#: ../../source/learn/intrinsics/PARALLEL_index.md:453
#: ../../source/learn/intrinsics/PARALLEL_index.md:561
#: ../../source/learn/intrinsics/SYSTEM_index.md:666
#: ../../source/learn/intrinsics/TRANSFORM_index.md:319
msgid "Fortran 2008 and later"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:664
msgid "LBOUND"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:667
msgid "__lbound__(3) - \\[ARRAY INQUIRY\\] Lower dimension bounds of an array"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:680
msgid ""
"Returns the lower bounds of an array, or a single lower bound along the "
"__dim__ dimension."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:686
#: ../../source/learn/intrinsics/ARRAY_index.md:1096
msgid "Shall be an array, of any type."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:689
msgid "Shall be a scalar _integer_."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:691
#: ../../source/learn/intrinsics/ARRAY_index.md:846
#: ../../source/learn/intrinsics/ARRAY_index.md:917
#: ../../source/learn/intrinsics/ARRAY_index.md:1101
#: ../../source/learn/intrinsics/ARRAY_index.md:1436
#: ../../source/learn/intrinsics/ARRAY_index.md:1889
#: ../../source/learn/intrinsics/BIT_index.md:373
#: ../../source/learn/intrinsics/BIT_index.md:1292
#: ../../source/learn/intrinsics/BIT_index.md:1386
#: ../../source/learn/intrinsics/CHARACTER_index.md:36
#: ../../source/learn/intrinsics/CHARACTER_index.md:320
#: ../../source/learn/intrinsics/CHARACTER_index.md:472
#: ../../source/learn/intrinsics/CHARACTER_index.md:546
#: ../../source/learn/intrinsics/CHARACTER_index.md:645
#: ../../source/learn/intrinsics/CHARACTER_index.md:777
#: ../../source/learn/intrinsics/CHARACTER_index.md:859
#: ../../source/learn/intrinsics/CHARACTER_index.md:954
#: ../../source/learn/intrinsics/CHARACTER_index.md:1635
#: ../../source/learn/intrinsics/NUMERIC_index.md:162
#: ../../source/learn/intrinsics/NUMERIC_index.md:240
#: ../../source/learn/intrinsics/NUMERIC_index.md:325
#: ../../source/learn/intrinsics/NUMERIC_index.md:654
#: ../../source/learn/intrinsics/PARALLEL_index.md:87
#: ../../source/learn/intrinsics/PARALLEL_index.md:439
#: ../../source/learn/intrinsics/TYPE_index.md:305
#: ../../source/learn/intrinsics/TYPE_index.md:438
#: ../../source/learn/intrinsics/TYPE_index.md:548
#: ../../source/learn/intrinsics/TYPE_index.md:789
msgid "__kind__"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:692
#: ../../source/learn/intrinsics/ARRAY_index.md:918
#: ../../source/learn/intrinsics/CHARACTER_index.md:37
#: ../../source/learn/intrinsics/CHARACTER_index.md:778
#: ../../source/learn/intrinsics/CHARACTER_index.md:955
#: ../../source/learn/intrinsics/NUMERIC_index.md:326
#: ../../source/learn/intrinsics/TYPE_index.md:306
msgid ""
"An _integer_ initialization expression indicating the kind parameter of "
"the result."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:697
msgid ""
"The return value is of type _integer_ and of kind __kind__. If __kind__ "
"is absent, the return value is of default integer kind. If __dim__ is "
"absent, the result is an array of the lower bounds of __array__. If "
"__dim__ is present, the result is a scalar corresponding to the lower "
"bound of the array along that dimension. If __array__ is an expression "
"rather than a whole array or array structure component, or if it has a "
"zero extent along the relevant dimension, the lower bound is taken to be "
"1."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:707
msgid ""
"Note that in my opinion this function should not be used on assumed-size "
"arrays or in any function without an explicit interface. Errors can occur"
" if there is no interface defined."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:711
#: ../../source/learn/intrinsics/ARRAY_index.md:1127
#: ../../source/learn/intrinsics/BIT_index.md:385
#: ../../source/learn/intrinsics/BIT_index.md:1885
#: ../../source/learn/intrinsics/CHARACTER_index.md:51
#: ../../source/learn/intrinsics/CHARACTER_index.md:1646
#: ../../source/learn/intrinsics/NUMERIC_index.md:754
#: ../../source/learn/intrinsics/NUMERIC_index.md:864
msgid "Sample program"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:772
#: ../../source/learn/intrinsics/ARRAY_index.md:1947
#: ../../source/learn/intrinsics/CHARACTER_index.md:595
#: ../../source/learn/intrinsics/CHARACTER_index.md:888
msgid "Fortran 95 and later, with KIND argument - Fortran 2003 and later"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:776
msgid "[__ubound__(3)](UBOUND), [__co\\_lbound__(3)](CO_LBOUND)"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:780
msgid "RANK"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:783
msgid "__rank__(3) - \\[ARRAY INQUIRY\\] Rank of a data object"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:792
msgid "__rank(a)__ returns the rank of a scalar or array data object."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:797
msgid "can be of any type"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:801
msgid ""
"The return value is of type _integer_ and of the default integer kind. "
"For arrays, their rank is returned; for scalars zero is returned."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:823
msgid "TS 29113"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:826
msgid "SHAPE"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:829
msgid "__shape__(3) - \\[ARRAY INQUIRY\\] Determine the shape of an array"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:838
msgid "Determines the shape of an array."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:843
msgid ""
"Shall be an array or scalar of any type. If __source__ is a pointer it "
"must be associated and allocatable arrays must be allocated."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:847
#: ../../source/learn/intrinsics/ARRAY_index.md:1102
#: ../../source/learn/intrinsics/ARRAY_index.md:1890
#: ../../source/learn/intrinsics/CHARACTER_index.md:473
#: ../../source/learn/intrinsics/CHARACTER_index.md:547
#: ../../source/learn/intrinsics/CHARACTER_index.md:646
#: ../../source/learn/intrinsics/CHARACTER_index.md:860
#: ../../source/learn/intrinsics/CHARACTER_index.md:1636
#: ../../source/learn/intrinsics/PARALLEL_index.md:88
#: ../../source/learn/intrinsics/PARALLEL_index.md:440
#: ../../source/learn/intrinsics/TYPE_index.md:549
#: ../../source/learn/intrinsics/TYPE_index.md:790
msgid ""
"(Optional) An _integer_ initialization expression indicating the kind "
"parameter of the result."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:852
msgid ""
"An _integer_ array of rank one with as many elements as __source__ has "
"dimensions. The elements of the resulting array correspond to the extend "
"of __source__ along the respective dimensions. If __source__ is a scalar,"
" the result is the rank one array of size zero. If __kind__ is absent, "
"the return value has the default integer kind otherwise the specified "
"kind."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:884
msgid "Fortran 95 and later; with KIND argument Fortran 2003 and later"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:888
msgid "[__reshape__(3)](RESHAPE), [__size__(3)](SIZE)"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:892
msgid "SIZE"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:895
msgid "__size__(3) - \\[ARRAY INQUIRY\\] Determine the size of an array"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:904
msgid ""
"Determine the extent of __array__ along a specified dimension __dim__, or"
" the total number of elements in __array__ if __dim__ is absent."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:910
msgid ""
"be an array of any type. If __array__ is a pointer it must be associated "
"and allocatable arrays must be allocated."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:914
msgid ""
"shall be a scalar of type _integer_ and its value shall be in the range "
"from 1 to n, where n equals the rank of __array__."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:923
#: ../../source/learn/intrinsics/CHARACTER_index.md:651
#: ../../source/learn/intrinsics/CHARACTER_index.md:1641
msgid ""
"The return value is of type _integer_ and of kind __kind__. If __kind__ "
"is absent, the return value is of default _integer_ kind."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1071
#: ../../source/learn/intrinsics/CHARACTER_index.md:1148
#: ../../source/learn/intrinsics/CHARACTER_index.md:1678
msgid "Fortran 95 and later, with __kind__ argument - Fortran 2003 and later"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1075
msgid "[__shape__(3)](SHAPE), [__reshape__(3)])(RESHAPE)"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1079
msgid "UBOUND"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1082
msgid "__ubound__(3) - \\[ARRAY INQUIRY\\] Upper dimension bounds of an array"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1090
msgid ""
"Returns the upper bounds of an array, or a single upper bound along the "
"__dim__ dimension."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1099
#: ../../source/learn/intrinsics/PARALLEL_index.md:85
#: ../../source/learn/intrinsics/PARALLEL_index.md:437
msgid "(Optional) Shall be a scalar _integer_."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1107
#: ../../source/learn/intrinsics/CHARACTER_index.md:42
#: ../../source/learn/intrinsics/CHARACTER_index.md:552
#: ../../source/learn/intrinsics/CHARACTER_index.md:784
#: ../../source/learn/intrinsics/CHARACTER_index.md:865
#: ../../source/learn/intrinsics/CHARACTER_index.md:960
msgid ""
"The return value is of type _integer_ and of kind __kind__. If __kind__ "
"is absent, the return value is of default integer kind."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1110
msgid ""
"If __dim__ is absent, the result is an array of the upper bounds of "
"__array__."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1113
msgid ""
"If __dim__ is present, the result is a scalar corresponding to the upper "
"bound of the array along that dimension."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1116
msgid ""
"If __array__ is an expression rather than a whole array or array "
"structure component, or if it has a zero extent along the relevant "
"dimension, the upper bound is taken to be the number of elements along "
"the relevant dimension."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1123
msgid ""
"Note this function should not be used on assumed-size arrays or in any "
"function without an explicit interface. Errors can occur if there is no "
"interface defined."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1185
msgid "Fortran 95 and later, with KIND argument Fortran 2003 and later"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1190
msgid ""
"[__lbound__(3)](LBOUND), [__co\\_ubound__(3)](CO_UBOUND), "
"[__co\\_lbound__(3)(CO_LBOUND)]"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1195
msgid "MAXLOC"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1198
msgid ""
"__maxloc__(3) - \\[ARRAY:LOCATION\\] Location of the maximum value within"
" an array"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1207
msgid ""
"Determines the location of the element in the array with the maximum "
"value, or, if the __dim__ argument is supplied, determines the locations "
"of the maximum element along each row of the array in the __dim__ "
"direction. If __mask__ is present, only the elements for which __mask__ "
"is __.true.__ are considered. If more than one element in the array has "
"the maximum value, the location returned is that of the first such "
"element in array element order. If the array has zero size, or all of the"
" elements of __mask__ are .false., then the result is an array of zeroes."
" Similarly, if __dim__ is supplied and all of the elements of __mask__ "
"along a given row are zero, the result value for that row is zero."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1221
#: ../../source/learn/intrinsics/ARRAY_index.md:1327
#: ../../source/learn/intrinsics/ARRAY_index.md:1978
#: ../../source/learn/intrinsics/ARRAY_index.md:2062
msgid "Shall be an array of type _integer_, _real_, or _character_."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1224
#: ../../source/learn/intrinsics/ARRAY_index.md:1330
#: ../../source/learn/intrinsics/ARRAY_index.md:1981
msgid ""
"(Optional) Shall be a scalar of type _integer_, with a value between one "
"and the rank of __array__, inclusive. It may not be an optional dummy "
"argument."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1229
#: ../../source/learn/intrinsics/ARRAY_index.md:1335
#: ../../source/learn/intrinsics/ARRAY_index.md:2070
msgid "Shall be an array of type _logical_, and conformable with __array__."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1233
#: ../../source/learn/intrinsics/ARRAY_index.md:1339
msgid ""
"If __dim__ is absent, the result is a rank-one array with a length equal "
"to the rank of __array__. If __dim__ is present, the result is an array "
"with a rank one less than the rank of __array__, and a size corresponding"
" to the size of __array__ with the __dim__ dimension removed. If __dim__ "
"is present and __array__ has a rank of one, the result is a scalar. In "
"all cases, the result is of default _integer_ type."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1240
msgid ""
"The value returned is reference to the offset from the beginning of the "
"array, not necessarily the subscript value if the array subscripts do not"
" start with one."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1246
msgid "sample program"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1293
msgid "[__max__(3)](MAX), [__maxval__(3)](MAXVAL)"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1297
msgid "MINLOC"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1300
msgid ""
"__minloc__(3) - \\[ARRAY:LOCATION\\] Location of the minimum value within"
" an array"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1313
msgid ""
"Determines the location of the element in the array with the minimum "
"value, or, if the __dim__ argument is supplied, determines the locations "
"of the minimum element along each row of the array in the __dim__ "
"direction. If __mask__ is present, only the elements for which __mask__ "
"is __.true.__ are considered. If more than one element in the array has "
"the minimum value, the location returned is that of the first such "
"element in array element order. If the array has zero size, or all of the"
" elements of __mask__ are .false., then the result is an array of zeroes."
" Similarly, if __dim__ is supplied and all of the elements of __mask__ "
"along a given row are zero, the result value for that row is zero."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1348
#: ../../source/learn/intrinsics/ARRAY_index.md:1999
#: ../../source/learn/intrinsics/ARRAY_index.md:2083
msgid "sample program:"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1382
msgid "[__min__(3)](MIN), [__minval__(3)](MINVAL)"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1386
msgid "FINDLOC"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1389
msgid ""
"__findloc__(3) - \\[ARRAY:LOCATION\\] Location of first element of ARRAY "
"identified by MASK along dimension DIM having a value"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1402
msgid ""
"Location of the first element of __array__ identified by __mask__ along "
"dimension __dim__ having a value equal to __value__."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1405
msgid ""
"If both __array__ and __value__ are of type logical, the comparison is "
"performed with the __.eqv.__ operator; otherwise, the comparison is "
"performed with the == operator. If the value of the comparison is true, "
"that element of __array__ matches __value__."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1410
msgid ""
"If only one element matches __value__, that element's subscripts are "
"returned. Otherwise, if more than one element matches __value__ and "
"__back__ is absent or present with the value false, the element whose "
"subscripts are returned is the first such element, taken in array element"
" order. If __back__ is present with the value true, the element whose "
"subscripts are returned is the last such element, taken in array element "
"order."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1418
#: ../../source/learn/intrinsics/STATE_index.md:106
#: ../../source/learn/intrinsics/SYSTEM_index.md:176
#: ../../source/learn/intrinsics/SYSTEM_index.md:692
msgid "__Options__"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1421
msgid "shall be an array of intrinsic type."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1423
#: ../../source/learn/intrinsics/PARALLEL_index.md:741
#: ../../source/learn/intrinsics/PARALLEL_index.md:803
#: ../../source/learn/intrinsics/PARALLEL_index.md:869
#: ../../source/learn/intrinsics/PARALLEL_index.md:935
#: ../../source/learn/intrinsics/PARALLEL_index.md:1000
#: ../../source/learn/intrinsics/PARALLEL_index.md:1062
#: ../../source/learn/intrinsics/PARALLEL_index.md:1121
#: ../../source/learn/intrinsics/PARALLEL_index.md:1253
#: ../../source/learn/intrinsics/PARALLEL_index.md:1314
#: ../../source/learn/intrinsics/PARALLEL_index.md:1375
#: ../../source/learn/intrinsics/STATE_index.md:121
#: ../../source/learn/intrinsics/SYSTEM_index.md:701
msgid "__value__"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1424
msgid ""
"shall be scalar and in type conformance with __array__, as specified in "
"Table 7.3 for relational intrinsic operations 7.1.5.5.2)."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1428
msgid ""
"shall be an integer scalar with a value in the range 1 __DIM__ n, where n"
" is the rank of __array__. The corresponding actual argument shall not be"
" an optional dummy argument."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1433
msgid ""
"(optional) shall be of type logical and shall be conformable with "
"__array__."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1437
msgid "(optional) shall be a scalar integer initialization expression."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1439
#: ../../source/learn/intrinsics/CHARACTER_index.md:773
#: ../../source/learn/intrinsics/CHARACTER_index.md:856
#: ../../source/learn/intrinsics/CHARACTER_index.md:951
msgid "__back__"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1440
msgid "(optional) shall be a logical scalar."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1444
msgid ""
"Result Characteristics. Integer. If __kind__ is present, the kind type "
"parameter is that specified by the value of __kind__; otherwise the kind "
"type parameter is that of default integer type. If __dim__ does not "
"appear, the result is an array of rank one and of size equal to the rank "
"of __array__; otherwise, the result is of rank n - 1 and shape"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1454
msgid "where"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1460
msgid "is the shape of __array__."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1464
msgid ""
"__Case (i):__ The result of __findloc (array, value)__ is a rank-one "
"array whose element values are the values of the subscripts of an element"
" of __array__ whose value matches __value__. If there is such a value, "
"the ith subscript returned lies in the range 1 to ei , where ei is the "
"extent of the ith dimension of __array__. If no elements match __value__ "
"or __array__ has size zero, all elements of the result are zero."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1472
msgid ""
"__Case (ii):__ the result of __findloc (array, value, mask = mask)__ is a"
" rank-one array whose element values are the values of the subscripts of "
"an element of __array__, corresponding to a true element of __mask__, "
"whose value matches __value__. If there is such a value, the ith "
"subscript returned lies in the range 1 to ei , where ei is the extent of "
"the ith dimension of __array__. If no elements match __value__, __array__"
" has size zero, or every element of __mask__ has the value false, all "
"elements of the result are zero."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1482
msgid "__Case (iii):__ If __array__ has rank one, the result of"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1489
msgid "is a scalar whose value is equal to that of the first element of"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1495
msgid "Otherwise, the value of element"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1501
msgid "of the result is equal to"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1510
msgid "__Case (i):__ The value of"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1517
msgid "is \\[2\\], and the value of"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1523
msgid "is \\[4\\]."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1525
msgid "__Case (ii):__ If __a__ has the value"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1534
msgid "and __m__ has the value"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1544
msgid "has the value \\[1, 4\\] and"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1550
msgid ""
"has the value \\[3, 4\\]. This is independent of the declared lower "
"bounds for __a__ ."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1553
msgid "__Case (iii):__ The value of"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1560
msgid "is 2. If __b__ has the value"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1567
msgid "findloc (b, __value__ = 2, dim = 1)"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1569
msgid "has the value \\[2, 1, 0\\] and"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1575
msgid ""
"has the value \\[2, 1\\]. This is independent of the declared lower "
"bounds for __b__."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1579
msgid "TRANSPOSE"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1582
msgid "__transpose__(3) - \\[ARRAY MANIPULATION\\] Transpose an array of rank two"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1591
msgid ""
"Transpose an array of rank two. Element (i, j) of the result has the "
"value __matrix(j, i)__, for all i, j."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1596
msgid "__matrix__"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1597
msgid "Shall be an array of any type and have a rank of two."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1601
msgid ""
"The result has the same type as __matrix__, and has shape \\[ m, n \\] if"
" __matrix__ has shape \\[ n, m \\]."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1665
msgid "ALL"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1668
msgid "__all__(3) - \\[ARRAY REDUCTION\\] determines if all the values are true"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1677
msgid "Logical conjunction of elements of __mask__ along dimension __dim__."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1679
msgid ""
"\"__all(mask, dim)__\" determines if all the values are true in __mask__ "
"in the array along dimension __dim__."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1685
msgid ""
"shall be a logical array. That is, the type of the argument shall be "
"_logical_ and it shall not be scalar."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1689
msgid ""
"(optional) __dim__ shall be a scalar integer with a value that lies "
"between one and the rank of __mask__. The corresponding actual argument "
"shall not be an optional dummy argument."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1695
msgid ""
"\"__all(mask)__\" returns a scalar value of type _logical_ where the kind"
" type parameter is the same as the kind type parameter of __mask__. If "
"__dim__ is present, then __all(mask, dim)__ returns an array with the "
"rank of __mask__ minus 1. The shape is determined from the shape of "
"__mask__ where the __dim__ dimension is elided."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1701
msgid ""
"__all(mask)__ is true if all elements of __mask__ are true. It also is "
"true if __mask__ has zero size; otherwise, it is false."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1704
msgid ""
"If the rank of __mask__ is one, then __all(mask, dim)__ is equivalent to "
"__all(mask)__. If the rank is greater than one, then __all(mask, dim)__ "
"is determined by applying __all()__ to the array sections."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1708
msgid ""
"Result Characteristics. The result is of type _logical_ with the same "
"kind type parameter as __mask__. It is scalar if __dim__ is absent or __n"
" = 1__; otherwise, the result has rank __n - 1__ and shape __\\[d1 , d2 ,"
" . . . , dDIM-1 , dDIM+1 , . . . , dn \\]__ where __\\[d1 , d2 , . . . , "
"dn \\]__ is the shape of __mask__."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1714
msgid "Result Value."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1716
#: ../../source/learn/intrinsics/ARRAY_index.md:1759
msgid "Case (i):"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1717
msgid ""
"The result of __all(mask)__ has the value true if all elements of "
"__mask__ are true or if __mask__ has size zero, and the result has value "
"false if any element of __mask__ is false."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1722
#: ../../source/learn/intrinsics/ARRAY_index.md:1765
msgid "Case (ii):"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1723
msgid ""
"If __mask__ has rank one, __all(mask,dim)__ is equal to __all(mask)__. "
"Otherwise, the value of element __(s1 , s2 , . . . , sdim-1 , sdim+1 , . "
". . , sn )__ of all __(mask, dim)__ is equal to __all(mask (s1 , s2 , . ."
" . , sdim-1 , :, sdim+1 , . . . , sn ))__."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1781
msgid "and __all(B /= C, DIM = 2)__ is"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1792
msgid "ANY"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1795
msgid ""
"__any__(3) - \\[ARRAY REDUCTION\\] determines if any of the values in the"
" logical array are true."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1804
msgid ""
"__any(mask, dim)__ determines if any of the values in the logical array "
"__mask__ along dimension __dim__ are __.true.__."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1810
msgid "the type of the argument shall be _logical_ and it shall not be scalar."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1814
msgid ""
"(optional) dim shall be a scalar integer with a value that lies between "
"one and the rank of mask."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1819
msgid ""
"__any(mask)__ returns a scalar value of type _logical_ where the kind "
"type parameter is the same as the kind type parameter of __mask__. If "
"__dim__ is present, then __any(mask, dim)__ returns an array with the "
"rank of __mask__ minus 1. The shape is determined from the shape of "
"__mask__ where the __dim__ dimension is elided."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1825
msgid ""
"__any(mask)__ is true if any element of __mask__ is true; otherwise, it "
"is __.false.__. It also is false if __mask__ has zero size."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1828
msgid ""
"If the rank of __mask__ is one, then __any(mask, dim)__ is equivalent to "
"__any(mask)__. If the rank is greater than one, then __any(mask, dim)__ "
"is determined by applying __any()__ to the array sections."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1864
msgid "COUNT"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1867
msgid "__count__(3) - \\[ARRAY REDUCTION\\] Count function"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1876
msgid ""
"Counts the number of __.true.__ elements in a logical __mask__, or, if "
"the __dim__ argument is supplied, counts the number of elements along "
"each row of the array in the __dim__ direction. If the array has zero "
"size, or all of the elements of __mask__ are false, then the result is "
"__0__."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1884
#: ../../source/learn/intrinsics/TYPE_index.md:787
msgid "The type shall be _logical_."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1887
msgid "(Optional) The type shall be _integer_."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1895
msgid ""
"The return value is of type _integer_ and of kind __kind__. If __kind__ "
"is absent, the return value is of default integer kind. If __dim__ is "
"present, the result is an array with a rank one less than the rank of "
"__array__, and a size corresponding to the shape of __array__ with the "
"__dim__ dimension removed."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1951
msgid "MAXVAL"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1954
msgid ""
"__maxval__(3) - \\[ARRAY REDUCTION\\] determines the maximum value in an "
"array or row"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1967
msgid ""
"Determines the maximum value of the elements in an array value, or, if "
"the __dim__ argument is supplied, determines the maximum value along each"
" row of the array in the __dim__ direction. If __mask__ is present, only "
"the elements for which __mask__ is __.true.__ are considered. If the "
"array has zero size, or all of the elements of __mask__ are .false., then"
" the result is the most negative number of the type and kind of __array__"
" if __array__ is numeric, or a string of nulls if __array__ is of "
"character type."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1986
msgid ""
"(Optional) Shall be an array of type _logical_, and conformable with "
"__array__."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:1991
msgid ""
"If __dim__ is absent, or if __array__ has a rank of one, the result is a "
"scalar. If __dim__ is present, the result is an array with a rank one "
"less than the rank of __array__, and a size corresponding to the size of "
"__array__ with the __dim__ dimension removed. In all cases, the result is"
" of the same type and kind as __array__."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:2033
msgid "[__max__(3)](MAX), [__maxloc__(3)](MAXLOC)"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:2037
msgid "MINVAL"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:2040
msgid "__minval__(3) - \\[ARRAY REDUCTION\\] Minimum value of an array"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:2048
msgid ""
"Determines the minimum value of the elements in an array value, or, if "
"the __dim__ argument is supplied, determines the minimum value along each"
" row of the array in the __dim__ direction."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:2052
msgid ""
"If __mask__ is present, only the elements for which __mask__ is "
"__.true.__ are considered."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:2055
msgid ""
"If the array has zero size, or all of the elements of __mask__ are "
".false., then the result is __huge(array)__ if __array__ is numeric, or a"
" string of __char(len=255)__ characters if __array__ is of character "
"type."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:2065
msgid ""
"(Optional) Shall be a scalar of type _integer_, with a value between one "
"and the rank of ARRAY, inclusive. It may not be an optional dummy "
"argument."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:2074
msgid ""
"If __dim__ is absent, or if __array__ has a rank of one, the result is a "
"scalar."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:2076
msgid ""
"If __dim__ is present, the result is an array with a rank one less than "
"the rank of __array__, and a size corresponding to the size of __array__ "
"with the __dim__ dimension removed. In all cases, the result is of the "
"same type and kind as __array__."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:2179
msgid "[__min__(3)](MIN), [__minloc__(3)](MINLOC)"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:2183
msgid "PRODUCT"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:2186
msgid "__product__(3) - \\[ARRAY REDUCTION\\] Product of array elements"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:2196
msgid "where __NUMERIC__ is any numeric type"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:2200
msgid ""
"Multiplies together all the selected elements of __array__, or along "
"dimension __dim__ if the corresponding element in __mask__ is __.true.__."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:2203
msgid ""
"If __dim__ is absent, a scalar with the product of all elements in "
"__array__ is returned. (Note a zero-sized __array__ returns __1__)."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:2206
msgid ""
"When __dim__ is present, If the masked array has a dimension of one (ie. "
"is a vector) the result is a scalar.  Otherwise, an array of rank "
"__n-1__, where __n__ equals the rank of __array__, and a shape similar to"
" that of __array__ with dimension __dim__ dropped is returned."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:2214
#: ../../source/learn/intrinsics/ARRAY_index.md:2431
msgid "Shall be an array of type _integer_, _real_ or _complex_."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:2217
msgid ""
"shall be a scalar of type _integer_ with a value in the range from __1 to"
" n__, where __n__ equals the rank of __array__."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:2221
msgid ""
"shall be of type _logical_ and either be a scalar or an array of the same"
" shape as __array__."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:2226
#: ../../source/learn/intrinsics/BIT_index.md:1499
#: ../../source/learn/intrinsics/BIT_index.md:1572
#: ../../source/learn/intrinsics/BIT_index.md:1708
#: ../../source/learn/intrinsics/MATH_index.md:2277
msgid "The result is of the same type as __array__."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:2408
msgid ""
"[__sum__(3)](SUM), note that an element by element multiplication is done"
" directly using the star character."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:2412
msgid "SUM"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:2415
msgid "__sum__(3) - \\[ARRAY REDUCTION\\] sum the elements of an array"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:2425
msgid ""
"Adds the elements of ARRAY along dimension DIM if the corresponding "
"element in MASK is TRUE."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:2434
msgid ""
"(Optional) shall be a scalar of type _integer_ with a value in the range "
"from 1 to n, where n equals the rank of ARRAY."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:2438
msgid ""
"(Optional) shall be of type _logical_ and either be a scalar or an array "
"of the same shape as ARRAY."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:2443
msgid "The result is of the same type as ARRAY."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:2445
msgid ""
"If __dim__(3) is absent, a scalar with the sum of all elements in ARRAY "
"is returned. Otherwise, an array of rank n-1, where n equals the rank of "
"ARRAY, and a shape similar to that of ARRAY with dimension DIM dropped is"
" returned."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:2462
msgid "Demonstrate Fortran 90 SUM function with MASK option"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:2497
msgid "intrinsics"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:2500
msgid "RESHAPE"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:2503
msgid "__reshape__(3) - \\[ARRAY RESHAPE\\] Function to reshape an array"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:2512
msgid ""
"Reshapes array __source__ to correspond to __shape__. If necessary, the "
"new array may be padded with elements from __pad__ or permuted as defined"
" by __order__."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:2519
msgid "an array of any type."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:2521
#: ../../source/learn/intrinsics/C_index.md:89
msgid "__shape__"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:2522
msgid ""
"an array of rank one and type _integer_. Its values must be positive or "
"zero."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:2525
msgid "__pad__"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:2526
msgid "(Optional) an array of the same type as __source__."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:2528
msgid "__order__"
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:2529
msgid ""
"(Optional) an array of type _integer_ and the same shape as __shape__. "
"Its values shall be a permutation of the numbers from 1 to n, where n is "
"the size of __shape__. If __order__ is absent, the natural ordering shall"
" be assumed."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:2536
msgid ""
"The result is an array of shape __shape__ with the same type as "
"__source__."
msgstr ""

#: ../../source/learn/intrinsics/ARRAY_index.md:2571
msgid "[__shape__(3)](SHAPE)"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1
#: ../../source/learn/intrinsics/index.md:139
msgid "BIT_index"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:2
msgid "bit-level inquiry and manipulation"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:4
msgid "BGE"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:7
msgid "__bge__(3) - \\[BIT:COMPARE\\] Bitwise greater than or equal to"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:16
msgid "Determines whether an integer is bitwise greater than or equal to another."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:21
#: ../../source/learn/intrinsics/BIT_index.md:59
#: ../../source/learn/intrinsics/BIT_index.md:99
#: ../../source/learn/intrinsics/BIT_index.md:136
#: ../../source/learn/intrinsics/BIT_index.md:179
#: ../../source/learn/intrinsics/BIT_index.md:245
#: ../../source/learn/intrinsics/BIT_index.md:430
#: ../../source/learn/intrinsics/BIT_index.md:561
#: ../../source/learn/intrinsics/BIT_index.md:622
#: ../../source/learn/intrinsics/BIT_index.md:683
#: ../../source/learn/intrinsics/BIT_index.md:799
#: ../../source/learn/intrinsics/BIT_index.md:839
#: ../../source/learn/intrinsics/BIT_index.md:1141
#: ../../source/learn/intrinsics/BIT_index.md:1190
#: ../../source/learn/intrinsics/BIT_index.md:1237
#: ../../source/learn/intrinsics/BIT_index.md:1287
#: ../../source/learn/intrinsics/BIT_index.md:1381
#: ../../source/learn/intrinsics/BIT_index.md:1629
#: ../../source/learn/intrinsics/BIT_index.md:1763
#: ../../source/learn/intrinsics/BIT_index.md:1810
#: ../../source/learn/intrinsics/BIT_index.md:1876
#: ../../source/learn/intrinsics/BIT_index.md:1943
#: ../../source/learn/intrinsics/BIT_index.md:1988
#: ../../source/learn/intrinsics/BIT_index.md:2028
#: ../../source/learn/intrinsics/BIT_index.md:2067
#: ../../source/learn/intrinsics/BIT_index.md:2106
#: ../../source/learn/intrinsics/CHARACTER_index.md:316
#: ../../source/learn/intrinsics/CHARACTER_index.md:469
#: ../../source/learn/intrinsics/MODEL_index.md:292
#: ../../source/learn/intrinsics/MODEL_index.md:363
#: ../../source/learn/intrinsics/STATE_index.md:158
#: ../../source/learn/intrinsics/STATE_index.md:216
msgid "__i__"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:22
#: ../../source/learn/intrinsics/BIT_index.md:100
#: ../../source/learn/intrinsics/BIT_index.md:137
msgid "Shall be of _integer_ type."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:24
#: ../../source/learn/intrinsics/BIT_index.md:62
#: ../../source/learn/intrinsics/BIT_index.md:102
#: ../../source/learn/intrinsics/BIT_index.md:139
#: ../../source/learn/intrinsics/BIT_index.md:802
#: ../../source/learn/intrinsics/BIT_index.md:842
#: ../../source/learn/intrinsics/BIT_index.md:1632
#: ../../source/learn/intrinsics/BIT_index.md:1766
#: ../../source/learn/intrinsics/BIT_index.md:1813
msgid "__j__"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:25
#: ../../source/learn/intrinsics/BIT_index.md:103
#: ../../source/learn/intrinsics/BIT_index.md:140
msgid "Shall be of _integer_ type, and of the same kind as __i__."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:29
#: ../../source/learn/intrinsics/BIT_index.md:107
#: ../../source/learn/intrinsics/BIT_index.md:144
msgid "The return value is of type _logical_ and of the default kind."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:37
msgid "[__bgt__(3)](BGT), [__ble__(3)](BLE), [__blt__(3)](BIT)"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:42
msgid "BGT"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:46
msgid "__bgt__(3) - \\[BIT:COMPARE\\] Bitwise greater than"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:55
msgid "Determines whether an integer is bitwise greater than another."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:60
msgid "Shall be of _integer_ type or a BOZ literal constant."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:63
msgid ""
"Shall be of _integer_ type, and of the same kind as __i__; or a BOZ "
"literal constant."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:68
msgid ""
"The return value is of type _logical_ and of the default kind. The result"
" is true if the sequence of bits represented by _i_ is greater than the "
"sequence of bits represented by _j_, otherwise the result is false."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:78
msgid "[__bge__(3),](BGE), [__ble__(3),](BLE), [__blt__(3)](BLT)"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:83
msgid "BLE"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:86
msgid "__ble__(3) - \\[BIT:COMPARE\\] Bitwise less than or equal to"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:95
msgid "Determines whether an integer is bitwise less than or equal to another."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:115
msgid "[__bge__(3),](BGE), [__bgt__(3),](BGT), [__blt__(3)](BLT)"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:120
msgid "BLT"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:123
msgid "__blt__(3) - \\[BIT:COMPARE\\] Bitwise less than"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:132
msgid "Determines whether an integer is bitwise less than another."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:152
msgid "[__bge__(3)](BGE), [__bgt__(3)](BGT), [__ble__(3)](BLE)"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:157
msgid "BIT_SIZE"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:160
msgid "__bit\\_size__(3) - \\[BIT:INQUIRY\\] Bit size inquiry function"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:171
msgid ""
"__bit\\_size(i)__ returns the number of bits (integer precision plus sign"
" bit) represented by the type of the _integer_ __i__.  __i__ can be a "
"scalar or an array."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:180
msgid ""
"An _integer_ value of any kind to determine the size of in bits. Because "
"only the type of the argument is examined, the argument need not be "
"defined."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:209
#: ../../source/learn/intrinsics/MODEL_index.md:526
#: ../../source/learn/intrinsics/SYSTEM_index.md:784
#: ../../source/learn/intrinsics/TYPE_index.md:261
msgid "Typical Results:"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:223
#: ../../source/learn/intrinsics/BIT_index.md:976
#: ../../source/learn/intrinsics/BIT_index.md:1120
msgid "fortran-lang intrinsic descriptions (license MIT) @urbanjost"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:224
msgid "BTEST"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:227
msgid "__btest__(3) - \\[BIT:INQUIRY\\] Tests a bit of an _integer_ value."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:237
msgid ""
"where __KIND__ is any _integer_ kind supported by the programming "
"environment."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:241
msgid ""
"__btest(i,pos)__ returns logical __.true.__ if the bit at __pos__ in "
"__i__ is set."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:246
#: ../../source/learn/intrinsics/BIT_index.md:1142
#: ../../source/learn/intrinsics/BIT_index.md:1149
#: ../../source/learn/intrinsics/BIT_index.md:1191
#: ../../source/learn/intrinsics/BIT_index.md:1238
#: ../../source/learn/intrinsics/BIT_index.md:1630
#: ../../source/learn/intrinsics/BIT_index.md:1764
#: ../../source/learn/intrinsics/BIT_index.md:1877
#: ../../source/learn/intrinsics/BIT_index.md:1944
#: ../../source/learn/intrinsics/BIT_index.md:1947
#: ../../source/learn/intrinsics/BIT_index.md:1989
#: ../../source/learn/intrinsics/BIT_index.md:1992
#: ../../source/learn/intrinsics/BIT_index.md:2029
#: ../../source/learn/intrinsics/BIT_index.md:2032
#: ../../source/learn/intrinsics/BIT_index.md:2068
#: ../../source/learn/intrinsics/BIT_index.md:2071
#: ../../source/learn/intrinsics/BIT_index.md:2107
#: ../../source/learn/intrinsics/BIT_index.md:2110
#: ../../source/learn/intrinsics/CHARACTER_index.md:470
#: ../../source/learn/intrinsics/NUMERIC_index.md:1140
#: ../../source/learn/intrinsics/NUMERIC_index.md:1143
#: ../../source/learn/intrinsics/NUMERIC_index.md:1286
#: ../../source/learn/intrinsics/NUMERIC_index.md:1292
#: ../../source/learn/intrinsics/TRANSFORM_index.md:31
#: ../../source/learn/intrinsics/TRANSFORM_index.md:34
#: ../../source/learn/intrinsics/TRANSFORM_index.md:177
#: ../../source/learn/intrinsics/TRANSFORM_index.md:183
msgid "The type shall be _integer_."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:248
#: ../../source/learn/intrinsics/BIT_index.md:1144
#: ../../source/learn/intrinsics/BIT_index.md:1193
#: ../../source/learn/intrinsics/BIT_index.md:1240
msgid "__pos__"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:249
msgid ""
"The bit position to query. it must be a valid position for the value "
"__i__; ie.  __0 <= pos <= bit_size(i)__ ."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:252
msgid "A value of zero refers to the least significant bit."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:256
msgid ""
"The result is a _logical_ that has the value __.true.__ if bit    "
"position __pos__ of __i__ has the value __1__ and the value    "
"__.false.__ if bit __pos__ of __i__ has the value __0__."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:342
msgid ""
"[__ieor__(3)](IEOR), [__ibclr__(3)](IBCLR), [__not__(3)](NOT), "
"[__ibclr__(3)](IBCLR), [__ibits__(3)](IBITS), [__ibset__(3)](IBSET), "
"[__iand__(3)](IAND), [__ior__(3)](IOR), [__ieor__(3)](IEOR), "
"[__mvbits__(3)](MVBITS)"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:354
msgid "STORAGE_SIZE"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:357
msgid "__storage\\_size__(3) - \\[BIT:INQUIRY\\] Storage size in bits"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:366
msgid "Returns the storage size of argument __a__ in bits."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:371
msgid "Shall be a scalar or array of any type."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:374
msgid "(Optional) shall be a scalar integer constant expression."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:378
msgid ""
"The result is a scalar integer with the kind type parameter specified by "
"__kind__ (or default integer type if __kind__ is missing). The result "
"value is the size expressed in bits for an element of an array that has "
"the dynamic type and type parameters of __a__."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:411
msgid "[__c\\_sizeof__(3)](C_SIZEOF)"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:414
msgid "LEADZ"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:417
msgid "__leadz__(3) - \\[BIT:COUNT\\] Number of leading zero bits of an integer"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:426
msgid "__leadz__ returns the number of leading zero bits of an integer."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:431
#: ../../source/learn/intrinsics/BIT_index.md:562
#: ../../source/learn/intrinsics/BIT_index.md:623
#: ../../source/learn/intrinsics/BIT_index.md:684
#: ../../source/learn/intrinsics/BIT_index.md:800
#: ../../source/learn/intrinsics/BIT_index.md:806
#: ../../source/learn/intrinsics/BIT_index.md:840
#: ../../source/learn/intrinsics/BIT_index.md:846
#: ../../source/learn/intrinsics/MODEL_index.md:364
msgid "Shall be of type _integer_."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:435
msgid ""
"The type of the return value is the same as a default _integer_. If all "
"the bits of __i__ are zero, the result value is __bit\\_size(i)__."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:538
msgid ""
"[__bit\\_size__(3)](BIT_SIZE), [__popcnt__(3)](POPCNT), "
"[__poppar__(3)](POPPAR), [__trailz__(3)](TRAILZ)"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:544
msgid "POPCNT"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:547
msgid "__popcnt__(3) - \\[BIT:COUNT\\] Number of bits set"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:556
msgid ""
"Returns the number of bits set in the binary representation of an "
"_integer_."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:566
#: ../../source/learn/intrinsics/MODEL_index.md:813
#: ../../source/learn/intrinsics/MODEL_index.md:881
#: ../../source/learn/intrinsics/MODEL_index.md:948
#: ../../source/learn/intrinsics/MODEL_index.md:1089
msgid "The return value is of type _integer_ and of the default integer kind."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:600
msgid "[__poppar__(3)](POPPAR), [__leadz__(3)](LEADZ), [__trailz__(3)](TRAILZ)"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:605
msgid "POPPAR"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:608
msgid "__poppar__(3) - \\[BIT:COUNT\\] Parity of the number of bits set"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:617
msgid ""
"Returns the parity of an integer's binary representation (i.e., the "
"parity of the number of bits set)."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:627
msgid ""
"The return value is equal to __0__ if __i__ has an even number of bits "
"set and 1 if an odd number of bits are set."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:630
msgid "It is of type _integer_ and of the default _integer_ kind."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:662
msgid "[__popcnt__(3)](POPCNT), [__leadz__(3)](LEADZ), [__trailz__(3)](TRAILZ)"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:667
msgid "TRAILZ"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:670
msgid "__trailz__(3) - \\[BIT:COUNT\\] Number of trailing zero bits of an integer"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:679
msgid ""
"__trailz(3)__ returns the number of trailing zero bits of an _integer_ "
"value"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:688
msgid ""
"The type of the return value is the default _integer_. If all the bits of"
" I are zero, the result value is __bit\\_size(i)__."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:775
msgid ""
"[__bit\\_size__(3)](BIT_SIZE), [__popcnt__(3)](POPCNT), "
"[__poppar__(3)](POPPAR), [__leadz__(3)](LEADZ)"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:781
msgid "DSHIFTL"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:784
msgid "__dshiftl__(3) - \\[BIT:COPY\\] combines bits of arguments __i__ and __j__"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:793
msgid ""
"__dshiftl(i, j, shift)__ combines bits of __i__ and __j__. The rightmost "
"__shift__ bits of the result are the leftmost __shift__ bits of __j__, "
"and the remaining bits are the rightmost bits of __i__."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:803
#: ../../source/learn/intrinsics/BIT_index.md:843
msgid "Shall be of type _integer_, and of the same kind as __i__."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:805
#: ../../source/learn/intrinsics/BIT_index.md:845
#: ../../source/learn/intrinsics/BIT_index.md:1946
#: ../../source/learn/intrinsics/BIT_index.md:1991
#: ../../source/learn/intrinsics/BIT_index.md:2031
#: ../../source/learn/intrinsics/BIT_index.md:2070
#: ../../source/learn/intrinsics/BIT_index.md:2109
#: ../../source/learn/intrinsics/NUMERIC_index.md:1139
#: ../../source/learn/intrinsics/NUMERIC_index.md:1285
#: ../../source/learn/intrinsics/TRANSFORM_index.md:30
#: ../../source/learn/intrinsics/TRANSFORM_index.md:176
msgid "__shift__"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:810
#: ../../source/learn/intrinsics/BIT_index.md:850
msgid "The return value has same type and kind as __i__."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:818
msgid "[__dshiftr__(3)](DSHIFTR)"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:821
msgid "DSHIFTR"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:824
msgid "__dshiftr__(3) - \\[BIT:COPY\\] combines bits of arguments __i__ and __j__"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:833
msgid ""
"__dshiftr(i, j, shift)__ combines bits of __i__ and __j__. The leftmost "
"__shift__ bits of the result are the rightmost __shift__ bits of __i__, "
"and the remaining bits are the leftmost bits of __j__."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:858
msgid "[__dshiftl__(3)](DSHIFTL)"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:861
msgid "MERGE_BITS"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:864
msgid "__merge\\_bits__(3) - \\[BIT:COPY\\] Merge bits using a mask"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:874
msgid ""
"where the result and all input values have the same _integer_ type and "
"KIND with the exception that the mask and either __i__ or __j__ may be a "
"BOZ constant."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:880
msgid ""
"A common graphics operation in Ternary Raster Operations is to combine "
"bits from two different sources, generally referred to as bit-blending. "
"__merge\\_bits__ performs a masked bit-blend of __i__ and __j__ using the"
" bits of the __mask__ value to determine which of the input values to "
"copy bits from."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:886
msgid ""
"Specifically, The k-th bit of the result is equal to the k-th bit of "
"__i__ if the k-th bit of __mask__ is __1__; it is equal to the k-th bit "
"of __j__ otherwise (so all three input values must have the same number "
"of bits)."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:891
msgid "The resulting value is the same as would result from"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:895
msgid ""
"An exception to all values being of the same _integer_ type is that __i__"
" or __j__ and/or the mask may be a BOZ constant (A BOZ constant means it "
"is either a Binary, Octal, or Hexadecimal literal constant).  The BOZ "
"values are converted to the _integer_ type of the non-BOZ value(s) as if "
"called by the intrinsic function __int()__ with the kind of the non-BOZ "
"value(s), so the BOZ values must be in the range of the type of the "
"result."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:904
msgid ""
"__i__  : value to select bits from when the associated bit in the mask is"
" __1__."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:907
msgid ""
"__j__ : value to select bits from when the associated bit in the mask is "
"__0__."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:910
msgid ""
"__mask__ : a value whose bits are used as a mask to select bits from "
"__i__ and __j__"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:915
msgid ""
"The bits blended from __i__ and __j__ using the mask __mask__. It is the "
"same type as __i__ if __i__ is of type _integer_, otherwise the same type"
" as __j__."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:919
#: ../../source/learn/intrinsics/BIT_index.md:1029
#: ../../source/learn/intrinsics/BIT_index.md:1397
msgid "__Example__"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:977
msgid "MVBITS"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:980
msgid ""
"__mvbits__(3) - \\[BIT:COPY\\] reproduce bit patterns found in one "
"integer in another"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:989
msgid ""
"__mvbits(3f)__ copies a bit pattern found in a range of adjacent bits in "
"the _integer_ __from__ to a specified position in another integer __to__ "
"(which is of the same kind as __from__).  It otherwise leaves the bits in"
" __to__ as-is."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:994
msgid ""
"The bit positions copied must exist within the value of __from__. That "
"is, the values of __frompos+len-1__ and __topos+len-1__ must be "
"nonnegative and less than __bit\\_size__(from)."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:998
msgid "The bits are numbered __0__ to __bit_size(i)-1__, from right to left."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1002
msgid "__from__"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1003
msgid "An _integer_ to read bits from."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1004
msgid "__frompos__"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1005
msgid ""
"__frompos__ is the position of the first bit to copy. It is a nonnegative"
" _integer_ value < __bit_size(from)__."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1007
#: ../../source/learn/intrinsics/BIT_index.md:1148
msgid "__len__"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1008
msgid ""
"A nonnegative _integer_ value that indicates how many bits to copy from "
"__from__. It must not specify copying bits past the end of __from__. That"
" is, __frompos + len__ must be less than or equal to __bit_size(from)__."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1012
#: ../../source/learn/intrinsics/BIT_index.md:1017
msgid "__to__"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1013
msgid ""
"The _integer_ variable to place the copied bits into. It must be of the "
"same kind as __from__ and may even be the same variable as __from__."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1018
msgid ""
"is set by copying the sequence of bits of length __len__, starting at "
"position __frompos__ of __from__ to position __topos__ of __to__. No "
"other bits of __to__ are altered. On return, the __len__ bits of __to__ "
"starting at __topos__ are equal to the value that the __len__ bits of "
"__from__ starting at __frompos__ had on entry."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1024
msgid "__topos__"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1025
msgid ""
"A nonnegative _integer_ value indicating the starting location in __to__ "
"to place the specified copy of bits from __from__.  __topos + len__ must "
"be less than or equal to __bit_size(to)__."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1030
msgid ""
"Sample program that populates a new 32-bit integer with its bytes in   "
"reverse order (ie. changes the Endian of the integer)."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1109
msgid ""
"[__ieor__(3)](IEOR),  [__ibclr__(3)](IBCLR), [__not__(3)](NOT), "
"[__btest__(3)](BTEST), [__ibclr__(3)](IBCLR), [__ibits__(3)](IBITS), "
"[__ibset__(3)](IBSET), [__iand__(3)](IAND), [__ior__(3)](IOR), "
"[__ieor__(3)](IEOR)"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1122
msgid "IBITS"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1125
msgid "__ibits__(3) - \\[BIT:COPY\\] Bit extraction"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1134
msgid ""
"__ibits__ extracts a field of length __len__ from __i__, starting from "
"bit position __pos__ and extending left for __len__ bits. The result is "
"right-justified and the remaining bits are zeroed. The value of pos+len "
"must be less than or equal to the value __bit\\_size(i)__."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1145
msgid ""
"The type shall be _integer_. A value of zero refers to the least "
"significant bit."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1153
#: ../../source/learn/intrinsics/BIT_index.md:1201
#: ../../source/learn/intrinsics/BIT_index.md:1248
#: ../../source/learn/intrinsics/BIT_index.md:1955
#: ../../source/learn/intrinsics/BIT_index.md:1996
#: ../../source/learn/intrinsics/BIT_index.md:2036
#: ../../source/learn/intrinsics/BIT_index.md:2075
#: ../../source/learn/intrinsics/BIT_index.md:2114
msgid "The return value is of type _integer_ and of the same kind as __i__."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1161
msgid ""
"[__ieor__(3)](IEOR),  [__ibclr__(3)](IBCLR), [__not__(3)](NOT), "
"[__btest__(3)](BTEST), [__ibclr__(3)](IBCLR), [__ibset__(3)](IBSET), "
"[__iand__(3)](IAND), [__ior__(3)](IOR), [__ieor__(3)](IEOR), "
"[__mvbits__(3)](MVBITS)"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1174
msgid "IBCLR"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1177
msgid "__ibclr__(3) - \\[BIT:SET\\] Clear bit"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1186
msgid ""
"__ibclr__ returns the value of __i__ with the bit at position __pos__ set"
" to zero."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1194
msgid ""
"The type shall be _integer_. A value of zero refers to the least "
"significant bit. __pos__ is an __intent(in)__ scalar or array of type "
"_integer_. The value of __pos__ must be within the range zero to "
"__(bit\\_size(i)-1__)."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1209
msgid ""
"[__ieor__(3)](IEOR),  [__not__(3)](NOT), [__btest__(3)](BTEST), "
"[__ibclr__(3)](IBCLR), [__ibits__(3)](IBITS), [__ibset__(3)](IBSET), "
"[__iand__(3)](IAND), [__ior__(3)](IOR), [__ieor__(3)](IEOR), "
"[__mvbits__(3)](MVBITS)"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1221
msgid "IBSET"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1224
msgid "__ibset__(3) - \\[BIT:SET\\] Set bit"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1233
msgid ""
"__ibset__ returns the value of __i__ with the bit at position __pos__ set"
" to one."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1241
msgid ""
"The type shall be _integer_. A value of zero refers to the least "
"significant bit. pos is an __intent(in)__ scalar or array of type "
"_integer_. The value of pos must be within the range zero to "
"__(bit\\_size(i)-1__)."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1256
msgid ""
"[__ieor__(3)](IEOR),  [__ibclr__(3)](IBCLR), [__not__(3)](NOT), "
"[__btest__(3)](BTEST), [__ibclr__(3)](IBCLR), [__ibits__(3)](IBITS), "
"[__iand__(3)](IAND), [__ior__(3)](IOR), [__ieor__(3)](IEOR), "
"[__mvbits__(3)](MVBITS)"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1268
msgid "MASKL"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1271
msgid "__maskl__(3) - \\[BIT:SET\\] Generates a left justified mask"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1282
msgid ""
"__maskl(i\\[, *kind*\\])__ has its leftmost __i__ bits set to __1__, and "
"the remaining bits set to __0__."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1288
#: ../../source/learn/intrinsics/BIT_index.md:1382
msgid ""
"Shall be of type _integer_. Its value must be non-negative, and less than"
" or equal to the number of bits for the kind of the result."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1293
#: ../../source/learn/intrinsics/BIT_index.md:1387
msgid "Shall be a scalar constant expression of type _integer_."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1297
#: ../../source/learn/intrinsics/BIT_index.md:1391
msgid ""
"The return value is of type _integer_. If __kind__ is present, it "
"specifies the kind value of the return type; otherwise, it is of the "
"default integer kind."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1301
msgid "The leftmost __i__ bits are set to 1 and the other bits are set to 0."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1359
msgid "[__maskr__(3)](MASKR)"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1362
msgid "MASKR"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1365
msgid "__maskr__(3) - \\[BIT:SET\\] Generates a right-justified mask"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1376
msgid ""
"__maskr(i\\[, kind\\])__ has its rightmost __i__ bits set to 1, and the "
"remaining bits set to 0."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1395
msgid "It has its rightmost __i__ bits set to 1, and the remaining bits set to 0."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1462
msgid "[__maskl__(3)](MASKL)"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1465
msgid "IPARITY"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1468
msgid "__iparity__(3) - \\[BIT:LOGICAL\\] Bitwise exclusive or of array elements"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1481
msgid ""
"Reduces with bitwise _xor_ (exclusive _or_) the elements of __array__ "
"along dimension __dim__ if the corresponding element in __mask__ is "
"__.true.__."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1487
#: ../../source/learn/intrinsics/BIT_index.md:1560
#: ../../source/learn/intrinsics/BIT_index.md:1696
msgid "Shall be an array of type _integer_"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1490
msgid ""
"(Optional) shall be a scalar of type _integer_ with a value in the range "
"from __\"1\" to \"n\"__, where __\"n\"__ equals the rank of __array__."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1494
#: ../../source/learn/intrinsics/BIT_index.md:1567
#: ../../source/learn/intrinsics/BIT_index.md:1703
msgid ""
"(Optional) shall be of type _logical_ and either be a scalar or an array "
"of the same shape as __array__."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1501
msgid ""
"If __dim__ is absent, a scalar with the bitwise _xor_ of all elements in "
"__array__ is returned. Otherwise, an array of rank __n-1__, where __n__ "
"equals the rank of __array__, and a shape similar to that of __array__ "
"with dimension __dim__ dropped is returned."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1532
msgid ""
"[__iany__(3)](IANY), [__iall__(3)](IALL), [__ieor__(3)](IEOR), "
"[__parity__(3)](PARITY)"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1538
msgid "IALL"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1541
msgid "__iall__(3) - \\[BIT:LOGICAL\\] Bitwise and of array elements"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1554
msgid ""
"Reduces with bitwise _and_ the elements of __array__ along dimension "
"__dim__ if the corresponding element in __mask__ is __.true.__."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1563
#: ../../source/learn/intrinsics/BIT_index.md:1699
msgid ""
"(Optional) shall be a scalar of type _integer_ with a value in the range "
"from __1 to n__, where __n__ equals the rank of __array__."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1574
msgid ""
"If __dim__ is absent, a scalar with the bitwise _all_ of all elements in "
"__array__ is returned. Otherwise, an array of rank __n-1__, where __n__ "
"equals the rank of __array__, and a shape similar to that of __array__ "
"with dimension __dim__ dropped is returned."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1608
msgid "[__iany__(3)](IANY), [__iparity__(3)](IPARITY), [__iand__(3)](IAND)"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1613
msgid "IAND"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1616
msgid "__iand__(3) - \\[BIT:LOGICAL\\] Bitwise logical and"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1625
msgid "Bitwise logical __and__."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1633
#: ../../source/learn/intrinsics/BIT_index.md:1767
msgid "The type shall be _integer_, of the same kind as __i__."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1637
#: ../../source/learn/intrinsics/BIT_index.md:1771
#: ../../source/learn/intrinsics/BIT_index.md:1818
msgid ""
"The return type is _integer_, of the same kind as the arguments. (If the "
"argument kinds differ, it is of the same kind as the larger argument.)"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1662
msgid ""
"[__ieor__(3)](IEOR),  [__ibclr__(3)](IBCLR), [__not__(3)](NOT), "
"[__btest__(3)](BTEST), [__ibclr__(3)](IBCLR), [__ibits__(3)](IBITS), "
"[__ibset__(3)](IBSET), [__ior__(3)](IOR), [__ieor__(3)](IEOR), "
"[__mvbits__(3)](MVBITS)"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1674
msgid "IANY"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1677
msgid "__iany__(3) - \\[BIT:LOGICAL\\] Bitwise or of array elements"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1690
msgid ""
"Reduces with bitwise or (inclusive or) the elements of __array__ along "
"dimension __dim__ if the corresponding element in __mask__ is __.true.__."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1710
msgid ""
"If __dim__ is absent, a scalar with the bitwise _or_ of all elements in "
"__array__ is returned. Otherwise, an array of rank __n-1__, where __n__ "
"equals the rank of __array__, and a shape similar to that of __array__ "
"with dimension __dim__ dropped is returned."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1742
msgid "[__iparity__(3)](IPARITY), [__iall__(3)](IALL), [__ior__(3)](IOR)"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1747
msgid "IEOR"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1750
msgid "__ieor__(3) - \\[BIT:LOGICAL\\] Bitwise logical exclusive or"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1759
msgid "__ieor__ returns the bitwise Boolean exclusive-__or__ of __i__ and __j__."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1780
msgid ""
"[__ieor__(3)](IEOR),  [__ibclr__(3)](IBCLR), [__not__(3)](NOT), "
"[__btest__(3)](BTEST), [__ibclr__(3)](IBCLR), [__ibits__(3)](IBITS), "
"[__ibset__(3)](IBSET), [__iand__(3)](IAND), [__ior__(3)](IOR), "
"[__mvbits__(3)](MVBITS)"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1792
msgid "IOR"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1795
msgid "__ior__(3) - \\[BIT:LOGICAL\\] Bitwise logical inclusive or"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1806
msgid "__ior__ returns the bit-wise Boolean inclusive-__or__ of __i__ and __j__."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1811
msgid "an _integer_ scalar or array."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1814
msgid "_integer_ scalar or array, of the same kind as __i__."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1850
msgid ""
"[__ieor__(3)](IEOR),  [__ibclr__(3)](IBCLR), [__not__(3)](NOT), "
"[__btest__(3)](BTEST), [__ibclr__(3)](IBCLR), [__ibits__(3)](IBITS), "
"[__ibset__(3)](IBSET), [__iand__(3)](IAND), [__ieor__(3)](IEOR), "
"[__mvbits__(3)](MVBITS)"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1862
msgid "NOT"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1864
msgid "__not__(3) - \\[BIT:LOGICAL\\] Logical negation"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1872
msgid "NOT returns the bitwise Boolean inverse of I."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1881
msgid "The return type is _integer_, of the same kind as the argument."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1912
msgid ""
"[__iand__(3)](IAND), [__ior__(3)](IOR), [__ieor__(3)](IEOR), "
"[__ibits__(3)](IBITS), [__ibset__(3)](IBSET),"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1918
msgid "[__ibclr__(3)](IBCLR)"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1921
msgid "ISHFTC"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1924
msgid "__ishftc__(3) - \\[BIT:SHIFT\\] Shift bits circularly"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1933
msgid ""
"__ishftc__(3) returns a value corresponding to __i__ with the rightmost "
"__size__ bits shifted circularly __shift__ places; that is, bits shifted "
"out one end are shifted into the opposite end. A value of __shift__ "
"greater than zero corresponds to a left shift, a value of zero "
"corresponds to no shift, and a value less than zero corresponds to a "
"right shift. The absolute value of __shift__ must be less than __size__. "
"If the __size__ argument is omitted, it is taken to be equivalent to "
"__bit\\_size(i)__."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1949
#: ../../source/learn/intrinsics/MATH_index.md:1055
#: ../../source/learn/intrinsics/TYPE_index.md:688
msgid "__size__"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1950
msgid ""
"(Optional) The type shall be _integer_; the value must be greater than "
"zero and less than or equal to __bit\\_size__(i)."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1963
msgid "[__ishft__(3)](ISHFT)"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1966
msgid "ISHFT"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1969
msgid "__ishft__(3) - \\[BIT:SHIFT\\] Shift bits"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:1978
msgid ""
"__ishft__(3) returns a value corresponding to __i__ with all of the bits "
"shifted __shift__ places. A value of __shift__ greater than zero "
"corresponds to a left shift, a value of zero corresponds to no shift, and"
" a value less than zero corresponds to a right shift. If the absolute "
"value of __shift__ is greater than __bit\\_size(i)__, the value is "
"undefined. Bits shifted out from the left end or right end are lost; "
"zeros are shifted in from the opposite end."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:2004
msgid "[__ishftc__(3)](ISHFTC)"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:2007
msgid "SHIFTA"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:2010
msgid "__shifta__(3) - \\[BIT:SHIFT\\] shift bits right with fill"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:2019
msgid ""
"Returns a value corresponding to __i__ with all of the bits shifted right"
" by __shift__ places. If the absolute value of __shift__ is greater than "
"__bit\\_size(i)__, the value is undefined. Bits shifted out from the "
"right end are lost. The fill is arithmetic: the bits shifted in from the "
"left end are equal to the leftmost bit, which in two's complement "
"representation is the sign bit."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:2044
msgid "[__shiftl__(3)](SHIFTL), [__shiftr__(3)](SHIFTR)"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:2048
msgid "SHIFTL"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:2051
msgid "__shiftl__(3) - \\[BIT:SHIFT\\] shift bits left"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:2060
msgid ""
"Returns a value corresponding to __i__ with all of the bits shifted left "
"by __shift__ places. If the absolute value of __shift__ is greater than "
"__bit\\_size(i)__, the value is undefined. Bits shifted out from the left"
" end are lost, and bits shifted in from the right end are set to __0__."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:2083
msgid "[__shifta__(3)](SHIFTA), [__shiftr__(3)](SHIFTR)"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:2087
msgid "SHIFTR"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:2090
msgid "__shiftr__(3) - \\[BIT:SHIFT\\] shift bits right"
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:2099
msgid ""
"Returns a value corresponding to __i__ with all of the bits shifted right"
" by __shift__ places. If the absolute value of __shift__ is greater than "
"__bit\\_size(i)__, the value is undefined. Bits shifted out from the "
"right end are lost, and bits shifted in from the left end are set to 0."
msgstr ""

#: ../../source/learn/intrinsics/BIT_index.md:2122
msgid "[__shifta__(3)](SHIFTA), [__shiftl__(3)](SHIFTL)"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1
#: ../../source/learn/intrinsics/index.md:139
msgid "CHARACTER_index"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:2
#: ../../source/learn/intrinsics/index.md:26
msgid "basic procedures specifically for manipulating _character_ variables"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:4
msgid "LEN"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:7
msgid "__len__(3) - \\[CHARACTER\\] Length of a character entity"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:18
msgid ""
"where the returned value is the same kind as the __KIND__, or of the "
"default kind if __KIND__ is not specified."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:23
msgid "__len(3)__ Returns the length of a _character_ string."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:25
msgid ""
"If __string__ is an array, the length of an element of __string__ is "
"returned."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:28
msgid ""
"Note that __string__ need not be defined when this intrinsic is invoked, "
"as only the length (not the content) of __string__ is needed."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:33
#: ../../source/learn/intrinsics/CHARACTER_index.md:227
#: ../../source/learn/intrinsics/CHARACTER_index.md:767
#: ../../source/learn/intrinsics/CHARACTER_index.md:850
#: ../../source/learn/intrinsics/CHARACTER_index.md:945
#: ../../source/learn/intrinsics/CHARACTER_index.md:1488
#: ../../source/learn/intrinsics/CHARACTER_index.md:1554
#: ../../source/learn/intrinsics/CHARACTER_index.md:1631
#: ../../source/learn/intrinsics/CHARACTER_index.md:1715
msgid "__string__"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:34
msgid "Shall be a scalar or array of type _character_."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:47
msgid "FORTRAN 77 and later; with __kind__ argument - Fortran 2003 and later"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:112
msgid ""
"len_trim(3), adjustr(3), trim(3), and adjustl(3) are related routines "
"that allow you to deal with leading and trailing blanks."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:115
#: ../../source/learn/intrinsics/CHARACTER_index.md:513
#: ../../source/learn/intrinsics/CHARACTER_index.md:603
#: ../../source/learn/intrinsics/CHARACTER_index.md:725
#: ../../source/learn/intrinsics/CHARACTER_index.md:816
#: ../../source/learn/intrinsics/CHARACTER_index.md:892
#: ../../source/learn/intrinsics/CHARACTER_index.md:1152
#: ../../source/learn/intrinsics/CHARACTER_index.md:1214
#: ../../source/learn/intrinsics/CHARACTER_index.md:1279
#: ../../source/learn/intrinsics/CHARACTER_index.md:1390
#: ../../source/learn/intrinsics/CHARACTER_index.md:1455
#: ../../source/learn/intrinsics/CHARACTER_index.md:1683
#: ../../source/learn/intrinsics/CHARACTER_index.md:1753
msgid ""
"Functions that perform operations on character strings, return lengths of"
" arguments, and search for certain arguments:"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:118
#: ../../source/learn/intrinsics/CHARACTER_index.md:271
#: ../../source/learn/intrinsics/CHARACTER_index.md:819
#: ../../source/learn/intrinsics/CHARACTER_index.md:895
#: ../../source/learn/intrinsics/CHARACTER_index.md:1458
#: ../../source/learn/intrinsics/CHARACTER_index.md:1686
msgid ""
"__Elemental:__ [__adjustl__(3)](ADJUSTL), [__adjustr__(3)](ADJUSTR), "
"[__index__(3)](INDEX), [__scan__(3)](SCAN), [__verify__(3)](VERIFY)"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:125
#: ../../source/learn/intrinsics/CHARACTER_index.md:520
#: ../../source/learn/intrinsics/CHARACTER_index.md:610
#: ../../source/learn/intrinsics/CHARACTER_index.md:736
#: ../../source/learn/intrinsics/CHARACTER_index.md:823
#: ../../source/learn/intrinsics/CHARACTER_index.md:899
#: ../../source/learn/intrinsics/CHARACTER_index.md:1225
#: ../../source/learn/intrinsics/CHARACTER_index.md:1290
#: ../../source/learn/intrinsics/CHARACTER_index.md:1401
#: ../../source/learn/intrinsics/CHARACTER_index.md:1462
#: ../../source/learn/intrinsics/CHARACTER_index.md:1764
msgid ""
"__Nonelemental:__ [__len\\_trim__(3)](LEN_TRIM), [__len__(3)](LEN), "
"[__repeat__(3)](REPEAT), [__trim__(3)](TRIM)"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:132
msgid "NEW_LINE"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:135
msgid "__new\\_line__(3) - \\[CHARACTER\\] new-line character"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:146
msgid "__new\\_line(c)__ returns the new-line character."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:148
msgid "Case (i)"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:149
msgid ""
"If __a__ is default _character_ and the character in position __10__ of "
"the ASCII collating sequence is representable in the default character "
"set, then the result is __achar(10)__."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:153
msgid "Case (ii)"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:154
msgid ""
"If __a__ is an ASCII character or an ISO 10646 character, then the result"
" is __char(10, kind (a))__."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:157
msgid "Case (iii)"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:158
msgid ""
"Otherwise, the result is a processor-dependent character that represents "
"a newline in output to files connected for formatted stream output if "
"there is such a character."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:162
msgid "Case (iv)"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:163
msgid "Otherwise, the result is the blank character."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:167
msgid "__C__"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:168
msgid "The argument shall be a scalar or array of the type _character_."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:172
msgid ""
"Returns a _character_ scalar of length one with the new-line character of"
" the same kind as parameter __c__."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:204
#: ../../source/learn/intrinsics/C_index.md:57
#: ../../source/learn/intrinsics/C_index.md:117
#: ../../source/learn/intrinsics/C_index.md:179
#: ../../source/learn/intrinsics/C_index.md:245
#: ../../source/learn/intrinsics/C_index.md:301
#: ../../source/learn/intrinsics/STATE_index.md:194
#: ../../source/learn/intrinsics/STATE_index.md:244
#: ../../source/learn/intrinsics/STATE_index.md:311
#: ../../source/learn/intrinsics/STATE_index.md:409
#: ../../source/learn/intrinsics/SYSTEM_index.md:58
#: ../../source/learn/intrinsics/SYSTEM_index.md:143
#: ../../source/learn/intrinsics/SYSTEM_index.md:270
#: ../../source/learn/intrinsics/SYSTEM_index.md:792
#: ../../source/learn/intrinsics/TYPE_index.md:937
msgid "Fortran 2003 and later"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:207
msgid "REPEAT"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:210
msgid "__repeat__(3) - \\[CHARACTER\\] Repeated string concatenation"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:223
msgid "Concatenates __ncopies__ copies of a string."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:228
msgid ""
"The input string to repeatedly generate. Shall be scalar and of type "
"_character_."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:232
msgid ""
"Number of copies to make of _string_, greater than or equal to zero (0). "
"Shall be scalar and of type _integer_."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:237
msgid ""
"A new scalar of type _character_ built up from __ncopies__ copies of "
"__string__."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:269
msgid "Functions that perform operations on character strings:"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:278
msgid ""
"__Non-elemental:__ [__len\\_trim__(3)](LEN_TRIM), [__len__(3)](LEN), "
"[__repeat__(3)](REPEAT), [__trim__(3)](TRIM)"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:285
msgid "ACHAR"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:288
msgid ""
"__achar__(3) - \\[CHARACTER:CONVERSION\\] returns a character in a "
"specified position in the ASCII collating sequence"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:299
msgid "where KIND may be any supported kind value for _integer_ types."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:303
msgid ""
"__achar(i)__ returns the character located at position __i__ (commonly "
"called the _ADE_ or ASCII Decimal Equivalent) in the ASCII collating "
"sequence."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:306
msgid ""
"The __achar__(3) function is often used for generating in-band escape "
"sequences to control terminal attributes."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:311
msgid "will clear the screen on an ANSI-compatible terminal display, for example."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:317
msgid ""
"the _integer_ value to convert to an ASCII character, in the range 0 to "
"127."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:321
#: ../../source/learn/intrinsics/NUMERIC_index.md:163
#: ../../source/learn/intrinsics/NUMERIC_index.md:241
msgid ""
"(optional) an _integer_ initialization expression indicating the kind "
"parameter of the result."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:326
msgid ""
"The return value is the requested character of type _character_ with a "
"length of one. If the __kind__ argument is present, the return value is "
"of the specified kind and of the default kind otherwise."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:407
#: ../../source/learn/intrinsics/CHARACTER_index.md:498
#: ../../source/learn/intrinsics/CHARACTER_index.md:588
#: ../../source/learn/intrinsics/CHARACTER_index.md:686
#: ../../source/learn/intrinsics/PARALLEL_index.md:326
#: ../../source/learn/intrinsics/SYSTEM_index.md:655
msgid "__Note__"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:409
msgid "The ADEs (ASCII Decimal Equivalents) for ASCII are"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:434
#: ../../source/learn/intrinsics/CHARACTER_index.md:811
msgid "FORTRAN 77 and later, with KIND argument Fortran 2003 and later"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:438
msgid "[__char__(3)](CHAR), [__iachar__(3)](IACHAR), [__ichar__(3)](ICHAR)"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:442
#: ../../source/learn/intrinsics/SYSTEM_index.md:455
msgid "__Resources__"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:444
msgid "[ANSI escape sequences](https://en.wikipedia.org/wiki/ANSI_escape_code)"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:445
msgid ""
"[M_attr module](https://github.com/urbanjost/M_attr) for controlling "
"ANSI-compatible terminals"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:449
msgid "CHAR"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:452
msgid "__char__(3) - \\[CHARACTER\\] Character conversion function"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:465
msgid "__char(i, kind)__ returns the character represented by the integer __i__."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:478
msgid "The return value is of type _character_"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:500
msgid ""
"See [__ichar__(3)](CHAR) for a discussion of converting between numerical"
" values and formatted string representations."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:505
#: ../../source/learn/intrinsics/CHARACTER_index.md:1208
#: ../../source/learn/intrinsics/CHARACTER_index.md:1271
#: ../../source/learn/intrinsics/CHARACTER_index.md:1382
#: ../../source/learn/intrinsics/CHARACTER_index.md:1447
#: ../../source/learn/intrinsics/MATH_index.md:431
#: ../../source/learn/intrinsics/MATH_index.md:553
#: ../../source/learn/intrinsics/MATH_index.md:742
#: ../../source/learn/intrinsics/MATH_index.md:1184
#: ../../source/learn/intrinsics/MATH_index.md:1242
#: ../../source/learn/intrinsics/MATH_index.md:1300
#: ../../source/learn/intrinsics/MATH_index.md:1388
#: ../../source/learn/intrinsics/NUMERIC_index.md:126
#: ../../source/learn/intrinsics/NUMERIC_index.md:209
#: ../../source/learn/intrinsics/NUMERIC_index.md:290
#: ../../source/learn/intrinsics/NUMERIC_index.md:475
#: ../../source/learn/intrinsics/NUMERIC_index.md:540
#: ../../source/learn/intrinsics/NUMERIC_index.md:625
#: ../../source/learn/intrinsics/NUMERIC_index.md:826
#: ../../source/learn/intrinsics/NUMERIC_index.md:881
#: ../../source/learn/intrinsics/NUMERIC_index.md:960
#: ../../source/learn/intrinsics/NUMERIC_index.md:1110
#: ../../source/learn/intrinsics/TYPE_index.md:117
#: ../../source/learn/intrinsics/TYPE_index.md:281
#: ../../source/learn/intrinsics/TYPE_index.md:396
#: ../../source/learn/intrinsics/TYPE_index.md:595
#: ../../source/learn/intrinsics/TYPE_index.md:653
msgid "FORTRAN 77 and later"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:509
msgid "[__achar__(3)](ACHAR), [__iachar__(3)](IACHAR), [__ichar__(3)](ICHAR)"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:516
#: ../../source/learn/intrinsics/CHARACTER_index.md:606
msgid ""
"__Elemental:__ [__adjustl__(3)](ADJUSTL), [__adjustr__(3)](ADJUSTR), "
"[__index__(3)](INDEX),  [__scan__(3)](SCAN), [__verify__(3)](VERIFY)"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:526
msgid "IACHAR"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:529
msgid ""
"__iachar__(3) - \\[CHARACTER:CONVERSION\\] Code in ASCII collating "
"sequence"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:538
msgid ""
"__iachar__(c) returns the code for the ASCII character in the first "
"character position of C."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:543
#: ../../source/learn/intrinsics/CHARACTER_index.md:642
msgid "__c__"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:544
msgid "Shall be a scalar _character_, with _intent(in)_"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:590
msgid ""
"See [__ichar__(3)](ICHAR) for a discussion of converting between "
"numerical values and formatted string representations."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:599
msgid "[__achar__(3)](ACHAR), [__char__(3)](CHAR), [__ichar__(3)](ICHAR)"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:616
msgid "ICHAR"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:619
msgid ""
"__ichar__(3) - \\[CHARACTER:CONVERSION\\] Character-to-integer conversion"
" function"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:631
msgid ""
"__ichar(c)__ returns the code for the character in the system's native "
"character set. The correspondence between characters and their codes is "
"not necessarily the same across different Fortran implementations. For "
"example, a platform using EBCDIC would return different values than an "
"ASCII platform."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:637
msgid "See __iachar__(3) for specifically working with the ASCII character set."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:643
msgid "Shall be a scalar _character_, with __intent(in)__"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:688
msgid ""
"No intrinsic exists to convert between a numeric value and a formatted "
"character string representation -- for instance, given the _character_ "
"value '154', obtaining an _integer_ or _real_ value with the value 154, "
"or vice versa. Instead, this functionality is provided by internal-file "
"I/O, as in the following example:"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:717
msgid "Fortran 95 and later, with KIND argument -Fortran 2003 and later"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:721
msgid "[__achar__(3)](ACHAR), [__char__(3)](CHAR), [__iachar__(3)](IACHAR)"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:728
#: ../../source/learn/intrinsics/CHARACTER_index.md:1217
#: ../../source/learn/intrinsics/CHARACTER_index.md:1282
#: ../../source/learn/intrinsics/CHARACTER_index.md:1393
#: ../../source/learn/intrinsics/CHARACTER_index.md:1756
msgid ""
"__Elemental:__ [__adjustl__(3)](ADJUSTL), [__adjustr__(3)](ADJUSTR), "
"[__index__(3)](INDEX),"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:733
#: ../../source/learn/intrinsics/CHARACTER_index.md:1222
#: ../../source/learn/intrinsics/CHARACTER_index.md:1398
#: ../../source/learn/intrinsics/CHARACTER_index.md:1761
msgid "[__scan__(3)](SCAN),  [__verify__(3)](VERIFY)"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:743
msgid "INDEX"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:746
msgid ""
"__index__(3) - \\[CHARACTER:SEARCH\\] Position of a substring within a "
"string"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:761
msgid ""
"Returns the position of the start of the leftmost or rightmost occurrence"
" of string __substring__ in __string__, counting from one. If "
"__substring__ is not present in __string__, zero is returned."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:768
msgid "string to be searched"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:770
msgid "__substring__"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:771
msgid "string to attempt to locate in __string__"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:774
msgid ""
"If the __back__ argument is present and true, the return value is the "
"start of the rightmost occurrence rather than the leftmost."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:783
msgid "__START__"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:789
msgid "Example program"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:829
msgid "SCAN"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:832
msgid ""
"__scan__(3) - \\[CHARACTER:SEARCH\\] Scan a string for the presence of a "
"set of characters"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:841
msgid "Scans a __string__ for any of the characters in a __set__ of characters."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:843
msgid ""
"If __back__ is either absent or equals __.false.__, this function returns"
" the position of the leftmost character of __STRING__ that is in __set__."
" If __back__ equals __.true.__, the rightmost position is returned. If no"
" character of __set__ is found in __string__, the result is zero."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:851
#: ../../source/learn/intrinsics/CHARACTER_index.md:854
#: ../../source/learn/intrinsics/CHARACTER_index.md:946
#: ../../source/learn/intrinsics/CHARACTER_index.md:949
msgid "Shall be of type _character_."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:853
#: ../../source/learn/intrinsics/CHARACTER_index.md:948
msgid "__set__"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:857
msgid "(Optional) shall be of type _logical_."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:905
msgid "VERIFY"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:908
msgid ""
"__verify__(3) - \\[CHARACTER:SEARCH\\] Scan a string for the absence of a"
" set of characters"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:923
msgid ""
"Verifies that all the characters in __string__ belong to the set of "
"characters in __set__ by identifying the first character in the string(s)"
" that is not in the set(s)."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:927
msgid ""
"If __back__ is either absent or equals __.false.__, this function returns"
" the position of the leftmost character of __string__ that is not in "
"__set__."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:931
msgid "If __back__ equals __.true.__, the rightmost position is returned."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:933
msgid "If all characters of __string__ are found in __set__, the result is zero."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:935
msgid ""
"This makes it easy to verify strings are all uppercase or lowercase,  "
"follow a basic syntax, only contain printable characters, and many of the"
" conditions tested for with the C routines __isalnum__(3c), "
"__isalpha__(3c), __isascii__(3c), __isblank__(3c), __iscntrl__(3c), "
"__isdigit__(3c), __isgraph__(3c), __islower__(3c), __isprint__(3c), "
"__ispunct__(3c), __isspace__(3c), __isupper__(3c), and __isxdigit__(3c); "
"but for a string as well an an array of characters."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:952
msgid "shall be of type _logical_."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:965
msgid "Sample program I:"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1040
msgid "Sample program II:"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1042
msgid "Determine if strings are valid integer representations"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1090
msgid "Sample program III:"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1092
msgid "Determine if strings represent valid Fortran symbol names"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1155
msgid ""
"__Elemental:__ [__adjustl__(3)](ADJUSTL), [__adjustr__(3)](ADJUSTR), "
"[__index__(3)](INDEX), [__scan__(3)](SCAN),  [__verify__(3)](VERIFY)"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1162
msgid ""
"__Nonelemental:__ [__len\\_trim__(3)](LEN_TRIM), [__len__(3)](LEN), "
"[__repeat__(3)](REPEAT),  [__trim__(3)](TRIM)"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1169
msgid "LGE"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1172
msgid "__lge__(3) - \\[CHARACTER:COMPARE\\] Lexical greater than or equal"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1181
msgid ""
"Determines whether one string is lexically greater than or equal to "
"another string, where the two strings are interpreted as containing ASCII"
" character codes. If the String __a__ and String __b__ are not the same "
"length, the shorter is compared as if spaces were appended to it to form "
"a value that has the same length as the longer."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1187
msgid ""
"In general, the lexical comparison intrinsics __lge__(3), __lgt__(3), "
"__lle__(3), and __llt__(3) differ from the corresponding intrinsic "
"operators .ge., .gt., .le., and .lt., in that the latter use the "
"processor's character ordering (which is not ASCII on some targets), "
"whereas the former always use the ASCII ordering."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1195
#: ../../source/learn/intrinsics/CHARACTER_index.md:1258
#: ../../source/learn/intrinsics/CHARACTER_index.md:1434
msgid "__string\\_a__"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1196
#: ../../source/learn/intrinsics/CHARACTER_index.md:1199
#: ../../source/learn/intrinsics/CHARACTER_index.md:1259
#: ../../source/learn/intrinsics/CHARACTER_index.md:1262
#: ../../source/learn/intrinsics/CHARACTER_index.md:1435
#: ../../source/learn/intrinsics/CHARACTER_index.md:1438
msgid "Shall be of default _character_ type."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1198
#: ../../source/learn/intrinsics/CHARACTER_index.md:1261
#: ../../source/learn/intrinsics/CHARACTER_index.md:1437
msgid "__string\\_b__"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1203
msgid ""
"Returns .true. if string\\_a \\>= string\\_b, and .false. otherwise, "
"based on the ASCII ordering."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1212
msgid "__\\[\\[lgt__(3), __\\[\\[lle__(3), __\\[\\[llt__(3)"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1232
msgid "LGT"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1235
msgid "__lgt__(3) - \\[CHARACTER:COMPARE\\] Lexical greater than"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1244
msgid ""
"Determines whether one string is lexically greater than another string, "
"where the two strings are interpreted as containing ASCII character "
"codes. If the String __a__ and String __b__ are not the same length, the "
"shorter is compared as if spaces were appended to it to form a value that"
" has the same length as the longer."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1250
#: ../../source/learn/intrinsics/CHARACTER_index.md:1321
#: ../../source/learn/intrinsics/CHARACTER_index.md:1426
msgid ""
"In general, the lexical comparison intrinsics LGE, LGT, LLE, and LLT "
"differ from the corresponding intrinsic operators .ge., .gt., .le., and "
".lt., in that the latter use the processor's character ordering (which is"
" not ASCII on some targets), whereas the former always use the ASCII "
"ordering."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1266
msgid ""
"Returns .true. if string\\_a \\> string\\_b, and .false. otherwise, based"
" on the ASCII ordering."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1275
msgid "[__lge__(3)](LGE), [__lle__(3)](LLE), [__llt__(3)](LLT)"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1287
msgid "[__scan__(3)](SCAN), [__verify__(3)](VERIFY)"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1297
msgid "LLE"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1300
msgid "__lle__(3) - \\[CHARACTER:COMPARE\\] Lexical less than or equal"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1315
msgid ""
"Determines whether one string is lexically less than or equal to another "
"string, where the two strings are interpreted as containing ASCII "
"character codes. if the __string\\_a__ and __string\\_b__ are not the "
"same length, the shorter is compared as if spaces were appended to it to "
"form a value that has the same length as the longer. Leading spaces are "
"significant."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1329
msgid "__str\\_a__"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1330
#: ../../source/learn/intrinsics/CHARACTER_index.md:1333
msgid "variable or array of default _character_ type."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1332
msgid "__str\\_b__"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1335
msgid "if __str_a__ and __str_b__ are both arrays they must be of the same shape."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1340
msgid ""
"__result__ Returns __.true.__ if __STR\\_A \\<= STR\\_B__, and "
"__.false.__ otherwise, based on the ASCII ordering."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1386
msgid "[__lge__(3)](LGE), [__lgt__(3),](LGT), [__llt__(3)](LLT)"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1408
msgid "LLT"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1411
msgid "__llt__(3) - \\[CHARACTER:COMPARE\\] Lexical less than"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1420
msgid ""
"Determines whether one string is lexically less than another string, "
"where the two strings are interpreted as containing ASCII character "
"codes. If the __string\\_a__ and __string\\_b__ are not the same length, "
"the shorter is compared as if spaces were appended to it to form a value "
"that has the same length as the longer."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1442
msgid ""
"Returns .true. if string\\_a \\<= string\\_b, and .false. otherwise, "
"based on the ASCII ordering."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1451
msgid "[__lge__(3)](LGE), [__lgt__(3)](LGT), [__lle__(3](LLE))"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1468
msgid "ADJUSTL"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1471
msgid "__adjustl__(3) - \\[CHARACTER:WHITESPACE\\] Left-adjust a string"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1483
msgid ""
"__adjustl(string)__ will left-adjust a string by removing leading spaces."
" Spaces are inserted at the end of the string as needed."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1489
#: ../../source/learn/intrinsics/CHARACTER_index.md:1555
msgid "the type shall be _character_."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1493
msgid ""
"The return value is of type _character_ and of the same kind as "
"__string__ where leading spaces are removed and the same number of spaces"
" are inserted on the end of __string__."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1530
msgid "[__adjustr__(3)](ADJUSTR)"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1533
msgid "ADJUSTR"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1536
msgid "__adjustr__(3) - \\[CHARACTER:WHITESPACE\\] Right-adjust a string"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1548
msgid ""
"__adjustr(string)__ right-adjusts a string by removing trailing spaces. "
"Spaces are inserted at the start of the string as needed to retain the "
"original length."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1559
msgid ""
"The return value is of type _character_ and of the same kind as "
"__string__ where trailing spaces are removed and the same number of "
"spaces are inserted at the start of __string__."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1608
msgid "[__adjustl__(3)](ADJUSTL)"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1611
msgid "LEN_TRIM"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1614
msgid ""
"__len\\_trim__(3) - \\[CHARACTER:WHITESPACE\\] Length of a character "
"entity without trailing blank characters"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1627
msgid "Returns the length of a character string, ignoring any trailing blanks."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1632
msgid ""
"The input string whose length is to be measured. Shall be a scalar of "
"type _character_"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1693
msgid ""
"__Nonelemental:__ [__repeat__(3)](REPEAT), [__len__(3)](LEN), "
"[__trim__(3)](TRIM)"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1699
msgid "TRIM"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1702
msgid ""
"__trim__(3) - \\[CHARACTER:WHITESPACE\\] Remove trailing blank characters"
" of a string"
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1711
msgid "Removes trailing blank characters of a string."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1716
msgid "Shall be a scalar of type _character_."
msgstr ""

#: ../../source/learn/intrinsics/CHARACTER_index.md:1720
msgid ""
"A scalar of type _character_ which length is that of __string__ less the "
"number of trailing blanks."
msgstr ""

#: ../../source/learn/intrinsics/COMPILER_index.md:1
#: ../../source/learn/intrinsics/index.md:139
msgid "COMPILER_index"
msgstr ""

#: ../../source/learn/intrinsics/COMPILER_index.md:2
msgid "information about compiler and compiler options used for building"
msgstr ""

#: ../../source/learn/intrinsics/COMPILER_index.md:4
msgid "COMPILER_OPTIONS"
msgstr ""

#: ../../source/learn/intrinsics/COMPILER_index.md:7
msgid ""
"__compiler\\_options__(3) - \\[COMPILER INQUIRY\\] Options passed to the "
"compiler"
msgstr ""

#: ../../source/learn/intrinsics/COMPILER_index.md:16
msgid "compiler\\_options returns a string with the options used for compiling."
msgstr ""

#: ../../source/learn/intrinsics/COMPILER_index.md:20
#: ../../source/learn/intrinsics/COMPILER_index.md:81
msgid "None."
msgstr ""

#: ../../source/learn/intrinsics/COMPILER_index.md:24
msgid ""
"The return value is a default-kind string with system-dependent length. "
"It contains the compiler flags used to compile the file, which called the"
" compiler\\_options intrinsic."
msgstr ""

#: ../../source/learn/intrinsics/COMPILER_index.md:54
#: ../../source/learn/intrinsics/COMPILER_index.md:115
#: ../../source/learn/intrinsics/C_index.md:364
msgid "Fortran 2008"
msgstr ""

#: ../../source/learn/intrinsics/COMPILER_index.md:58
msgid "[__compiler\\_version__(3)](COMPILER_VERSION), __iso\\_fortran\\_env__(7)"
msgstr ""

#: ../../source/learn/intrinsics/COMPILER_index.md:62
msgid "COMPILER_VERSION"
msgstr ""

#: ../../source/learn/intrinsics/COMPILER_index.md:65
msgid "__compiler\\_version__(3) - \\[COMPILER INQUIRY\\] Compiler version string"
msgstr ""

#: ../../source/learn/intrinsics/COMPILER_index.md:76
msgid ""
"__compiler\\_version__(3) returns a string containing the name and "
"version of the compiler."
msgstr ""

#: ../../source/learn/intrinsics/COMPILER_index.md:85
msgid ""
"The return value is a default-kind string with system-dependent length. "
"It contains the name of the compiler and its version number."
msgstr ""

#: ../../source/learn/intrinsics/COMPILER_index.md:119
msgid "[__compiler\\_options__(3)](COMPILER_OPTIONS), __iso\\_fortran\\_env__(7)"
msgstr ""

#: ../../source/learn/intrinsics/C_index.md:1
#: ../../source/learn/intrinsics/index.md:139
msgid "C_index"
msgstr ""

#: ../../source/learn/intrinsics/C_index.md:2
#: ../../source/learn/intrinsics/index.md:30
msgid "procedures useful for binding to C interfaces"
msgstr ""

#: ../../source/learn/intrinsics/C_index.md:4
msgid "C_ASSOCIATED"
msgstr ""

#: ../../source/learn/intrinsics/C_index.md:7
msgid "__c\\_associated__(3) - \\[ISO\\_C\\_BINDING\\] Status of a C pointer"
msgstr ""

#: ../../source/learn/intrinsics/C_index.md:16
msgid ""
"__c\\_associated(c\\_prt\\_1\\[, c\\_ptr\\_2\\])__ determines the status "
"of the C pointer c\\_ptr\\_1 or if c\\_ptr\\_1 is associated with the "
"target c\\_ptr\\_2."
msgstr ""

#: ../../source/learn/intrinsics/C_index.md:22
msgid "__c\\_ptr\\_1__"
msgstr ""

#: ../../source/learn/intrinsics/C_index.md:23
msgid "Scalar of the type c\\_ptr or c\\_funptr."
msgstr ""

#: ../../source/learn/intrinsics/C_index.md:25
msgid "__c\\_ptr\\_2__"
msgstr ""

#: ../../source/learn/intrinsics/C_index.md:26
msgid "(Optional) Scalar of the same type as c\\_ptr\\_1."
msgstr ""

#: ../../source/learn/intrinsics/C_index.md:30
msgid ""
"The return value is of type _logical_; it is .false. if either "
"c\\_ptr\\_1 is a C NULL pointer or if c\\_ptr1 and c\\_ptr\\_2 point to "
"different addresses."
msgstr ""

#: ../../source/learn/intrinsics/C_index.md:61
msgid ""
"[__c\\_loc__(3)](C_LOC), [__c\\_funloc__(3)](C_FUNLOC), "
"__iso\\_c\\_binding__(3)"
msgstr ""

#: ../../source/learn/intrinsics/C_index.md:66
msgid "C_F_POINTER"
msgstr ""

#: ../../source/learn/intrinsics/C_index.md:69
msgid ""
"__c\\_f\\_pointer__(3) - \\[ISO\\_C\\_BINDING\\] Convert C into Fortran "
"pointer"
msgstr ""

#: ../../source/learn/intrinsics/C_index.md:78
msgid ""
"__c\\_f\\_pointer(cptr, fptr\\[, shape\\])__ Assign the target, the C "
"pointer, __cptr__ to the Fortran pointer __fptr__ and specify its shape."
msgstr ""

#: ../../source/learn/intrinsics/C_index.md:83
#: ../../source/learn/intrinsics/C_index.md:143
msgid "__cptr__"
msgstr ""

#: ../../source/learn/intrinsics/C_index.md:84
msgid "scalar of the type c\\_ptr. It is __intent(in)__."
msgstr ""

#: ../../source/learn/intrinsics/C_index.md:86
#: ../../source/learn/intrinsics/C_index.md:146
msgid "__fptr__"
msgstr ""

#: ../../source/learn/intrinsics/C_index.md:87
msgid "pointer interoperable with __cptr__. it is __intent(out)__."
msgstr ""

#: ../../source/learn/intrinsics/C_index.md:90
msgid ""
"(Optional) Rank-one array of type _integer_ with __intent(in)__ . It "
"shall be present if and only if __fptr__ is an array. The size must be "
"equal to the rank of __fptr__."
msgstr ""

#: ../../source/learn/intrinsics/C_index.md:121
msgid ""
"[__c\\_loc__(3)](C_LOC), [__c\\_f\\_procpointer__(3)](C_F_PROCPOINTER), "
"__iso\\_c\\_binding__(3)"
msgstr ""

#: ../../source/learn/intrinsics/C_index.md:126
msgid "C_F_PROCPOINTER"
msgstr ""

#: ../../source/learn/intrinsics/C_index.md:129
msgid ""
"__c\\_f\\_procpointer__(3) - \\[ISO\\_C\\_BINDING\\] Convert C into "
"Fortran procedure pointer"
msgstr ""

#: ../../source/learn/intrinsics/C_index.md:138
msgid ""
"__c\\_f\\_procpointer(cptr, fptr)__ assigns the target of the C function "
"pointer __cptr__ to the Fortran procedure pointer __fptr__."
msgstr ""

#: ../../source/learn/intrinsics/C_index.md:144
msgid "scalar of the type c\\_funptr. It is __intent(in)__."
msgstr ""

#: ../../source/learn/intrinsics/C_index.md:147
msgid "procedure pointer interoperable with __cptr__. It is __intent(out)__."
msgstr ""

#: ../../source/learn/intrinsics/C_index.md:183
msgid ""
"[__c\\_loc__(3)](C_LOC), [__c\\_f\\_pointer__(3)](C_F_POINTER), "
"__iso\\_c\\_binding__(3)"
msgstr ""

#: ../../source/learn/intrinsics/C_index.md:188
msgid "C_FUNLOC"
msgstr ""

#: ../../source/learn/intrinsics/C_index.md:191
msgid ""
"__c\\_funloc__(3) - \\[ISO\\_C\\_BINDING\\] Obtain the C address of a "
"procedure"
msgstr ""

#: ../../source/learn/intrinsics/C_index.md:200
msgid "__c\\_funloc(x)__ determines the C address of the argument."
msgstr ""

#: ../../source/learn/intrinsics/C_index.md:204
#: ../../source/learn/intrinsics/C_index.md:273
#: ../../source/learn/intrinsics/C_index.md:330
#: ../../source/learn/intrinsics/MATH_index.md:25
#: ../../source/learn/intrinsics/MATH_index.md:93
#: ../../source/learn/intrinsics/MATH_index.md:157
#: ../../source/learn/intrinsics/MATH_index.md:251
#: ../../source/learn/intrinsics/MATH_index.md:311
#: ../../source/learn/intrinsics/MATH_index.md:396
#: ../../source/learn/intrinsics/MATH_index.md:450
#: ../../source/learn/intrinsics/MATH_index.md:513
#: ../../source/learn/intrinsics/MATH_index.md:586
#: ../../source/learn/intrinsics/MATH_index.md:647
#: ../../source/learn/intrinsics/MATH_index.md:780
#: ../../source/learn/intrinsics/MATH_index.md:857
#: ../../source/learn/intrinsics/MATH_index.md:908
#: ../../source/learn/intrinsics/MATH_index.md:1129
#: ../../source/learn/intrinsics/MATH_index.md:1212
#: ../../source/learn/intrinsics/MATH_index.md:1264
#: ../../source/learn/intrinsics/MATH_index.md:1344
#: ../../source/learn/intrinsics/MATH_index.md:1417
#: ../../source/learn/intrinsics/MATH_index.md:1502
#: ../../source/learn/intrinsics/MATH_index.md:1559
#: ../../source/learn/intrinsics/MATH_index.md:1630
#: ../../source/learn/intrinsics/MATH_index.md:1687
#: ../../source/learn/intrinsics/MATH_index.md:1743
#: ../../source/learn/intrinsics/MATH_index.md:1809
#: ../../source/learn/intrinsics/MATH_index.md:1866
#: ../../source/learn/intrinsics/MATH_index.md:1937
#: ../../source/learn/intrinsics/MATH_index.md:1996
#: ../../source/learn/intrinsics/MATH_index.md:2048
#: ../../source/learn/intrinsics/MATH_index.md:2168
#: ../../source/learn/intrinsics/MATH_index.md:2215
#: ../../source/learn/intrinsics/MODEL_index.md:21
#: ../../source/learn/intrinsics/MODEL_index.md:89
#: ../../source/learn/intrinsics/MODEL_index.md:155
#: ../../source/learn/intrinsics/MODEL_index.md:238
#: ../../source/learn/intrinsics/MODEL_index.md:289
#: ../../source/learn/intrinsics/MODEL_index.md:360
#: ../../source/learn/intrinsics/MODEL_index.md:429
#: ../../source/learn/intrinsics/MODEL_index.md:503
#: ../../source/learn/intrinsics/MODEL_index.md:587
#: ../../source/learn/intrinsics/MODEL_index.md:707
#: ../../source/learn/intrinsics/MODEL_index.md:808
#: ../../source/learn/intrinsics/MODEL_index.md:876
#: ../../source/learn/intrinsics/MODEL_index.md:943
#: ../../source/learn/intrinsics/MODEL_index.md:1010
#: ../../source/learn/intrinsics/MODEL_index.md:1084
#: ../../source/learn/intrinsics/MODEL_index.md:1155
#: ../../source/learn/intrinsics/NUMERIC_index.md:159
#: ../../source/learn/intrinsics/NUMERIC_index.md:500
#: ../../source/learn/intrinsics/NUMERIC_index.md:563
#: ../../source/learn/intrinsics/NUMERIC_index.md:574
#: ../../source/learn/intrinsics/TYPE_index.md:435
#: ../../source/learn/intrinsics/TYPE_index.md:545
#: ../../source/learn/intrinsics/TYPE_index.md:849
msgid "__x__"
msgstr ""

#: ../../source/learn/intrinsics/C_index.md:205
msgid "Interoperable function or pointer to such function."
msgstr ""

#: ../../source/learn/intrinsics/C_index.md:209
msgid ""
"The return value is of type c\\_funptr and contains the C address of the "
"argument."
msgstr ""

#: ../../source/learn/intrinsics/C_index.md:249
msgid ""
"[__c\\_associated__(3)](C_ASSOCIATED), [__c\\_loc__(3)](C_LOC), "
"[__c\\_f\\_pointer__(3)](C_F_POINTER),"
msgstr ""

#: ../../source/learn/intrinsics/C_index.md:253
#: ../../source/learn/intrinsics/C_index.md:309
msgid "[__c\\_f\\_procpointer__(3)](C_F_PROCPOINTER), __iso\\_c\\_binding__(3)"
msgstr ""

#: ../../source/learn/intrinsics/C_index.md:257
msgid "C_LOC"
msgstr ""

#: ../../source/learn/intrinsics/C_index.md:260
msgid "__c\\_loc__(3) - \\[ISO\\_C\\_BINDING\\] Obtain the C address of an object"
msgstr ""

#: ../../source/learn/intrinsics/C_index.md:269
msgid "__c\\_loc(x)__ determines the C address of the argument."
msgstr ""

#: ../../source/learn/intrinsics/C_index.md:274
msgid ""
"Shall have either the _pointer_ or _target_ attribute. It shall not be a "
"coindexed object. It shall either be a variable with interoperable type "
"and kind type parameters, or be a scalar, nonpolymorphic variable with no"
" length type parameters."
msgstr ""

#: ../../source/learn/intrinsics/C_index.md:281
msgid ""
"The return value is of type c\\_ptr and contains the C address of the "
"argument."
msgstr ""

#: ../../source/learn/intrinsics/C_index.md:305
msgid ""
"[__c\\_associated__(3)](C_ASSOCIATED), [__c\\_funloc__(3)](C_FUNLOC), "
"[__c\\_f\\_pointer__(3)](C_F_POINTER),"
msgstr ""

#: ../../source/learn/intrinsics/C_index.md:313
msgid "C_SIZEOF"
msgstr ""

#: ../../source/learn/intrinsics/C_index.md:316
msgid "__c\\_sizeof__(3) - \\[ISO\\_C\\_BINDING\\] Size in bytes of an expression"
msgstr ""

#: ../../source/learn/intrinsics/C_index.md:325
msgid ""
"__c\\_sizeof(x)__ calculates the number of bytes of storage the "
"expression __x__ occupies."
msgstr ""

#: ../../source/learn/intrinsics/C_index.md:331
msgid "The argument shall be an interoperable data entity."
msgstr ""

#: ../../source/learn/intrinsics/C_index.md:335
msgid ""
"The return value is of type integer and of the system-dependent kind "
"c\\_size\\_t (from the *iso\\_c\\_binding* module). Its value is the "
"number of bytes occupied by the argument. If the argument has the "
"_pointer_ attribute, the number of bytes of the storage area pointed to "
"is returned. If the argument is of a derived type with _pointer_ or "
"_allocatable_ components, the return value does not account for the sizes"
" of the data pointed to by these components."
msgstr ""

#: ../../source/learn/intrinsics/C_index.md:359
msgid ""
"The example will print .true. unless you are using a platform where "
"default _real_ variables are unusually padded."
msgstr ""

#: ../../source/learn/intrinsics/C_index.md:368
msgid "[__storage\\_size__(3)](STORAGE_SIZE)"
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:6
#: ../../source/learn/intrinsics/index.md:139
msgid "GNU_Free_Documentation_License"
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:7
msgid "*Version 1.2, November 2002*"
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:14
msgid "0. PREAMBLE"
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:16
msgid ""
"The purpose of this License is to make a manual, textbook, or other "
"functional and useful document \"free\" in the sense of freedom: to "
"assure everyone the effective freedom to copy and redistribute it, with "
"or without modifying it, either commercially or noncommercially. "
"Secondarily, this License preserves for the author and publisher a way to"
" get credit for their work, while not being considered responsible for "
"modifications made by others."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:24
msgid ""
"This License is a kind of \"copyleft\", which means that derivative works"
" of the document must themselves be free in the same sense.  It "
"complements the GNU General Public License, which is a copyleft license "
"designed for free software."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:29
msgid ""
"We have designed this License in order to use it for manuals for free "
"software, because free software needs free documentation: a free program "
"should come with manuals providing the same freedoms that the software "
"does.  But this License is not limited to software manuals; it can be "
"used for any textual work, regardless of subject matter or whether it is "
"published as a printed book.  We recommend this License principally for "
"works whose purpose is instruction or reference."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:38
msgid "1. APPLICABILITY AND DEFINITIONS"
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:40
msgid ""
"This License applies to any manual or other work, in any medium, that "
"contains a notice placed by the copyright holder saying it can be "
"distributed under the terms of this License.  Such a notice grants a "
"world-wide, royalty-free license, unlimited in duration, to use that work"
" under the conditions stated herein.  The \"Document\", below, refers to "
"any such manual or work.  Any member of the public is a licensee, and is "
"addressed as \"you\".  You accept the license if you copy, modify or "
"distribute the work in a way requiring permission under copyright law."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:50
msgid ""
"A \"Modified Version\" of the Document means any work containing the "
"Document or a portion of it, either copied verbatim, or with "
"modifications and/or translated into another language."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:54
msgid ""
"A \"Secondary Section\" is a named appendix or a front-matter section of "
"the Document that deals exclusively with the relationship of the "
"publishers or authors of the Document to the Document's overall subject "
"(or to related matters) and contains nothing that could fall directly "
"within that overall subject.  (Thus, if the Document is in part a "
"textbook of mathematics, a Secondary Section may not explain any "
"mathematics.)  The relationship could be a matter of historical "
"connection with the subject or with related matters, or of legal, "
"commercial, philosophical, ethical or political position regarding them."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:65
msgid ""
"The \"Invariant Sections\" are certain Secondary Sections whose titles "
"are designated, as being those of Invariant Sections, in the notice that "
"says that the Document is released under this License.  If a section does"
" not fit the above definition of Secondary then it is not allowed to be "
"designated as Invariant.  The Document may contain zero Invariant "
"Sections.  If the Document does not identify any Invariant Sections then "
"there are none."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:73
msgid ""
"The \"Cover Texts\" are certain short passages of text that are listed, "
"as Front-Cover Texts or Back-Cover Texts, in the notice that says that "
"the Document is released under this License.  A Front-Cover Text may be "
"at most 5 words, and a Back-Cover Text may be at most 25 words."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:78
msgid ""
"A \"Transparent\" copy of the Document means a machine-readable copy, "
"represented in a format whose specification is available to the general "
"public, that is suitable for revising the document straightforwardly with"
" generic text editors or (for images composed of pixels) generic paint "
"programs or (for drawings) some widely available drawing editor, and that"
" is suitable for input to text formatters or for automatic translation to"
" a variety of formats suitable for input to text formatters.  A copy made"
" in an otherwise Transparent file format whose markup, or absence of "
"markup, has been arranged to thwart or discourage subsequent modification"
" by readers is not Transparent. An image format is not Transparent if "
"used for any substantial amount of text.  A copy that is not "
"\"Transparent\" is called \"Opaque\"."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:91
msgid ""
"Examples of suitable formats for Transparent copies include plain ASCII "
"without markup, Texinfo input format, LaTeX input format, SGML or XML "
"using a publicly available DTD, and standard-conforming simple HTML, "
"PostScript or PDF designed for human modification.  Examples of "
"transparent image formats include PNG, XCF and JPG.  Opaque formats "
"include proprietary formats that can be read and edited only by "
"proprietary word processors, SGML or XML for which the DTD and/or "
"processing tools are not generally available, and the machine-generated "
"HTML, PostScript or PDF produced by some word processors for output "
"purposes only."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:102
msgid ""
"The \"Title Page\" means, for a printed book, the title page itself, plus"
" such following pages as are needed to hold, legibly, the material this "
"License requires to appear in the title page.  For works in formats which"
" do not have any title page as such, \"Title Page\" means the text near "
"the most prominent appearance of the work's title, preceding the "
"beginning of the body of the text."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:109
msgid ""
"A section \"Entitled XYZ\" means a named subunit of the Document whose "
"title either is precisely XYZ or contains XYZ in parentheses following "
"text that translates XYZ in another language.  (Here XYZ stands for a "
"specific section name mentioned below, such as \"Acknowledgements\", "
"\"Dedications\", \"Endorsements\", or \"History\".)  To \"Preserve the "
"Title\" of such a section when you modify the Document means that it "
"remains a section \"Entitled XYZ\" according to this definition."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:117
msgid ""
"The Document may include Warranty Disclaimers next to the notice which "
"states that this License applies to the Document.  These Warranty "
"Disclaimers are considered to be included by reference in this License, "
"but only as regards disclaiming warranties: any other implication that "
"these Warranty Disclaimers may have is void and has no effect on the "
"meaning of this License."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:125
msgid "2. VERBATIM COPYING"
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:127
msgid ""
"You may copy and distribute the Document in any medium, either "
"commercially or noncommercially, provided that this License, the "
"copyright notices, and the license notice saying this License applies to "
"the Document are reproduced in all copies, and that you add no other "
"conditions whatsoever to those of this License.  You may not use "
"technical measures to obstruct or control the reading or further copying "
"of the copies you make or distribute.  However, you may accept "
"compensation in exchange for copies.  If you distribute a large enough "
"number of copies you must also follow the conditions in section 3."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:137
msgid ""
"You may also lend copies, under the same conditions stated above, and you"
" may publicly display copies."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:141
msgid "3. COPYING IN QUANTITY"
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:143
msgid ""
"If you publish printed copies (or copies in media that commonly have "
"printed covers) of the Document, numbering more than 100, and the "
"Document's license notice requires Cover Texts, you must enclose the "
"copies in covers that carry, clearly and legibly, all these Cover Texts: "
"Front-Cover Texts on the front cover, and Back-Cover Texts on the back "
"cover.  Both covers must also clearly and legibly identify you as the "
"publisher of these copies.  The front cover must present the full title "
"with all words of the title equally prominent and visible.  You may add "
"other material on the covers in addition. Copying with changes limited to"
" the covers, as long as they preserve the title of the Document and "
"satisfy these conditions, can be treated as verbatim copying in other "
"respects."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:156
msgid ""
"If the required texts for either cover are too voluminous to fit legibly,"
" you should put the first ones listed (as many as fit reasonably) on the "
"actual cover, and continue the rest onto adjacent pages."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:161
msgid ""
"If you publish or distribute Opaque copies of the Document numbering more"
" than 100, you must either include a machine-readable Transparent copy "
"along with each Opaque copy, or state in or with each Opaque copy a "
"computer-network location from which the general network-using public has"
" access to download using public-standard network protocols a complete "
"Transparent copy of the Document, free of added material. If you use the "
"latter option, you must take reasonably prudent steps, when you begin "
"distribution of Opaque copies in quantity, to ensure that this "
"Transparent copy will remain thus accessible at the stated location until"
" at least one year after the last time you distribute an Opaque copy "
"(directly or through your agents or retailers) of that edition to the "
"public."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:174
msgid ""
"It is requested, but not required, that you contact the authors of the "
"Document well before redistributing any large number of copies, to give "
"them a chance to provide you with an updated version of the Document."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:179
msgid "4. MODIFICATIONS"
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:181
msgid ""
"You may copy and distribute a Modified Version of the Document under the "
"conditions of sections 2 and 3 above, provided that you release the "
"Modified Version under precisely this License, with the Modified Version "
"filling the role of the Document, thus licensing distribution and "
"modification of the Modified Version to whoever possesses a copy of it.  "
"In addition, you must do these things in the Modified Version:"
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:188
msgid ""
"__A__. Use in the Title Page (and on the covers, if any) a title distinct"
"  from that of the Document, and from those of previous versions  (which "
"should, if there were any, be listed in the History section  of the "
"Document).  You may use the same title as a previous version  if the "
"original publisher of that version gives permission."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:193
msgid ""
"__B__. List on the Title Page, as authors, one or more persons or "
"entities  responsible for authorship of the modifications in the Modified"
"  Version, together with at least five of the principal authors of the  "
"Document (all of its principal authors, if it has fewer than five),  "
"unless they release you from this requirement."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:198
msgid ""
"__C__. State on the Title page the name of the publisher of the  Modified"
" Version, as the publisher."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:200
msgid "__D__. Preserve all the copyright notices of the Document."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:201
msgid ""
"__E__. Add an appropriate copyright notice for your modifications  "
"adjacent to the other copyright notices."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:203
msgid ""
"__F__. Include, immediately after the copyright notices, a license notice"
"  giving the public permission to use the Modified Version under the  "
"terms of this License, in the form shown in the Addendum below."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:206
msgid ""
"__G__. Preserve in that license notice the full lists of Invariant "
"Sections  and required Cover Texts given in the Document's license "
"notice."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:208
msgid "__H__. Include an unaltered copy of this License."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:209
msgid ""
"__I__. Preserve the section Entitled \"History\", Preserve its Title, and"
" add  to it an item stating at least the title, year, new authors, and  "
"publisher of the Modified Version as given on the Title Page.  If  there "
"is no section Entitled \"History\" in the Document, create one  stating "
"the title, year, authors, and publisher of the Document as  given on its "
"Title Page, then add an item describing the Modified  Version as stated "
"in the previous sentence."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:216
msgid ""
"__J__. Preserve the network location, if any, given in the Document for  "
"public access to a Transparent copy of the Document, and likewise  the "
"network locations given in the Document for previous versions  it was "
"based on.  These may be placed in the \"History\" section.  You may omit "
"a network location for a work that was published at  least four years "
"before the Document itself, or if the original  publisher of the version "
"it refers to gives permission."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:223
msgid ""
"__K__. For any section Entitled \"Acknowledgements\" or \"Dedications\","
"  Preserve the Title of the section, and preserve in the section all  the"
" substance and tone of each of the contributor acknowledgements  and/or "
"dedications given therein."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:227
msgid ""
"__L__. Preserve all the Invariant Sections of the Document,  unaltered in"
" their text and in their titles.  Section numbers  or the equivalent are "
"not considered part of the section titles."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:230
msgid ""
"__M__. Delete any section Entitled \"Endorsements\".  Such a section  may"
" not be included in the Modified Version."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:232
msgid ""
"__N__. Do not retitle any existing section to be Entitled "
"\"Endorsements\"  or to conflict in title with any Invariant Section."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:234
msgid "__O__. Preserve any Warranty Disclaimers."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:236
msgid ""
"If the Modified Version includes new front-matter sections or appendices "
"that qualify as Secondary Sections and contain no material copied from "
"the Document, you may at your option designate some or all of these "
"sections as invariant.  To do this, add their titles to the list of "
"Invariant Sections in the Modified Version's license notice. These titles"
" must be distinct from any other section titles."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:243
msgid ""
"You may add a section Entitled \"Endorsements\", provided it contains "
"nothing but endorsements of your Modified Version by various parties--for"
" example, statements of peer review or that the text has been approved by"
" an organization as the authoritative definition of a standard."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:249
msgid ""
"You may add a passage of up to five words as a Front-Cover Text, and a "
"passage of up to 25 words as a Back-Cover Text, to the end of the list of"
" Cover Texts in the Modified Version.  Only one passage of Front-Cover "
"Text and one of Back-Cover Text may be added by (or through arrangements "
"made by) any one entity.  If the Document already includes a cover text "
"for the same cover, previously added by you or by arrangement made by the"
" same entity you are acting on behalf of, you may not add another; but "
"you may replace the old one, on explicit permission from the previous "
"publisher that added the old one."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:259
msgid ""
"The author(s) and publisher(s) of the Document do not by this License "
"give permission to use their names for publicity for or to assert or "
"imply endorsement of any Modified Version."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:264
msgid "5. COMBINING DOCUMENTS"
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:266
msgid ""
"You may combine the Document with other documents released under this "
"License, under the terms defined in section 4 above for modified "
"versions, provided that you include in the combination all of the "
"Invariant Sections of all of the original documents, unmodified, and list"
" them all as Invariant Sections of your combined work in its license "
"notice, and that you preserve all their Warranty Disclaimers."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:273
msgid ""
"The combined work need only contain one copy of this License, and "
"multiple identical Invariant Sections may be replaced with a single copy."
"  If there are multiple Invariant Sections with the same name but "
"different contents, make the title of each such section unique by adding "
"at the end of it, in parentheses, the name of the original author or "
"publisher of that section if known, or else a unique number. Make the "
"same adjustment to the section titles in the list of Invariant Sections "
"in the license notice of the combined work."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:282
msgid ""
"In the combination, you must combine any sections Entitled \"History\" in"
" the various original documents, forming one section Entitled "
"\"History\"; likewise combine any sections Entitled \"Acknowledgements\","
" and any sections Entitled \"Dedications\".  You must delete all sections"
" Entitled \"Endorsements\"."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:289
msgid "6. COLLECTIONS OF DOCUMENTS"
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:291
msgid ""
"You may make a collection consisting of the Document and other documents "
"released under this License, and replace the individual copies of this "
"License in the various documents with a single copy that is included in "
"the collection, provided that you follow the rules of this License for "
"verbatim copying of each of the documents in all other respects."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:297
msgid ""
"You may extract a single document from such a collection, and distribute "
"it individually under this License, provided you insert a copy of this "
"License into the extracted document, and follow this License in all other"
" respects regarding verbatim copying of that document."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:303
msgid "7. AGGREGATION WITH INDEPENDENT WORKS"
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:305
msgid ""
"A compilation of the Document or its derivatives with other separate and "
"independent documents or works, in or on a volume of a storage or "
"distribution medium, is called an \"aggregate\" if the copyright "
"resulting from the compilation is not used to limit the legal rights of "
"the compilation's users beyond what the individual works permit. When the"
" Document is included in an aggregate, this License does not apply to the"
" other works in the aggregate which are not themselves derivative works "
"of the Document."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:314
msgid ""
"If the Cover Text requirement of section 3 is applicable to these copies "
"of the Document, then if the Document is less than one half of the entire"
" aggregate, the Document's Cover Texts may be placed on covers that "
"bracket the Document within the aggregate, or the electronic equivalent "
"of covers if the Document is in electronic form. Otherwise they must "
"appear on printed covers that bracket the whole aggregate."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:323
msgid "8. TRANSLATION"
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:325
msgid ""
"Translation is considered a kind of modification, so you may distribute "
"translations of the Document under the terms of section 4. Replacing "
"Invariant Sections with translations requires special permission from "
"their copyright holders, but you may include translations of some or all "
"Invariant Sections in addition to the original versions of these "
"Invariant Sections.  You may include a translation of this License, and "
"all the license notices in the Document, and any Warranty Disclaimers, "
"provided that you also include the original English version of this "
"License and the original versions of those notices and disclaimers.  In "
"case of a disagreement between the translation and the original version "
"of this License or a notice or disclaimer, the original version will "
"prevail."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:338
msgid ""
"If a section in the Document is Entitled \"Acknowledgements\", "
"\"Dedications\", or \"History\", the requirement (section 4) to Preserve "
"its Title (section 1) will typically require changing the actual title."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:344
msgid "9. TERMINATION"
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:346
msgid ""
"You may not copy, modify, sublicense, or distribute the Document except "
"as expressly provided for under this License.  Any other attempt to copy,"
" modify, sublicense or distribute the Document is void, and will "
"automatically terminate your rights under this License.  However, parties"
" who have received copies, or rights, from you under this License will "
"not have their licenses terminated so long as such parties remain in full"
" compliance."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:355
msgid "10. FUTURE REVISIONS OF THIS LICENSE"
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:357
msgid ""
"The Free Software Foundation may publish new, revised versions of the GNU"
" Free Documentation License from time to time.  Such new versions will be"
" similar in spirit to the present version, but may differ in detail to "
"address new problems or concerns.  See http://www.gnu.org/copyleft/."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:363
msgid ""
"Each version of the License is given a distinguishing version number. If "
"the Document specifies that a particular numbered version of this License"
" \"or any later version\" applies to it, you have the option of following"
" the terms and conditions either of that specified version or of any "
"later version that has been published (not as a draft) by the Free "
"Software Foundation.  If the Document does not specify a version number "
"of this License, you may choose any version ever published (not as a "
"draft) by the Free Software Foundation."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:373
msgid "ADDENDUM: How to use this License for your documents"
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:375
msgid ""
"To use this License in a document you have written, include a copy of the"
" License in the document and put the following copyright and license "
"notices just after the title page:"
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:387
msgid ""
"If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts, "
"replace the \"with...Texts.\" line with this:"
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:393
msgid ""
"If you have Invariant Sections without Cover Texts, or some other "
"combination of the three, merge those two alternatives to suit the "
"situation."
msgstr ""

#: ../../source/learn/intrinsics/GNU_Free_Documentation_License.md:397
msgid ""
"If your document contains nontrivial examples of program code, we "
"recommend releasing these examples in parallel under your choice of free "
"software license, such as the GNU General Public License, to permit their"
" use in free software."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1
#: ../../source/learn/intrinsics/index.md:139
msgid "MATH_index"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:2
#: ../../source/learn/intrinsics/index.md:17
msgid "General mathematical functions"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:4
msgid "ACOS"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:6
msgid ""
"__acos__(3) - \\[MATHEMATICS:TRIGONOMETRIC\\] arccosine (inverse cosine) "
"function"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:16
msgid ""
"where __TYPE__ may be _real_ or _complex_ and __KIND__ may be any "
"__KIND__ supported by the associated type."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:21
msgid "__acos(x)__ computes the arccosine of __x__ (inverse of __cos(x)__)."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:26
msgid ""
"Must be type _real_ or _complex_. If the type is _real_, the value must "
"satisfy |__x__| <= 1."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:31
#, python-format
msgid ""
"The return value is of the same type and kind as __x__. The _real_ part "
"of the result is in radians and lies in the range __0 \\<= acos(x%re) "
"\\<= PI__ ."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:62
msgid "FORTRAN 77 and later; for a _complex_ argument - Fortran 2008 and later"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:66
#: ../../source/learn/intrinsics/MATH_index.md:224
#: ../../source/learn/intrinsics/MATH_index.md:365
msgid ""
"[wikipedia: inverse trigonometric "
"functions](https://en.wikipedia.org/wiki/Inverse_trigonometric_functions)"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:68
msgid "Inverse function: [__cos__(3](COS))"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:71
msgid "ACOSH"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:74
msgid ""
"__acosh__(3) - \\[MATHEMATICS:TRIGONOMETRIC\\] Inverse hyperbolic cosine "
"function"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:84
#: ../../source/learn/intrinsics/MATH_index.md:500
msgid ""
"where TYPE may be _real_ or _complex_ and KIND may be any KIND supported "
"by the associated type."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:89
msgid "__acosh(x)__ computes the inverse hyperbolic cosine of __x__ in radians."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:94
msgid "the type shall be _real_ or _complex_."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:98
#: ../../source/learn/intrinsics/MATH_index.md:653
#: ../../source/learn/intrinsics/MATH_index.md:862
#: ../../source/learn/intrinsics/MATH_index.md:1136
msgid "The return value has the same type and kind as __x__."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:100
msgid ""
"If __x__ is _complex_, the imaginary part of the result is in radians and"
" lies between"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:103
msgid "__0 \\<= aimag(acosh(x)) \\<= PI__"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:127
#: ../../source/learn/intrinsics/MATH_index.md:284
#: ../../source/learn/intrinsics/MATH_index.md:483
#: ../../source/learn/intrinsics/MATH_index.md:616
#: ../../source/learn/intrinsics/MATH_index.md:836
#: ../../source/learn/intrinsics/MATH_index.md:942
msgid ""
"[Wikipedia:hyperbolic "
"functions](https://en.wikipedia.org/wiki/Hyperbolic_functions)"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:129
msgid "Inverse function: [__cosh__(3)](COSH)"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:132
msgid "ASIN"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:135
msgid "__asin__(3) - \\[MATHEMATICS:TRIGONOMETRIC\\] Arcsine function"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:144
msgid ""
"where the returned value has the kind of the input value  and TYPE may be"
" _real_ or _complex_"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:149
msgid "__asin(x)__ computes the arcsine of its argument __x__."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:151
msgid ""
"The arcsine is the inverse function of the sine function. It is commonly "
"used in trigonometry when trying to find the angle when the lengths of "
"the hypotenuse and the opposite side of a right triangle are known."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:158
msgid ""
"The type shall be either _real_ and a magnitude that is less than or "
"equal to one; or be _complex_."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:163
#: ../../source/learn/intrinsics/MATH_index.md:652
#: ../../source/learn/intrinsics/STATE_index.md:118
msgid "__result__"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:164
msgid ""
"The return value is of the same type and kind as __x__. The real part of "
"the result is in radians and lies in the range __-PI/2 \\<= asin(x) \\<= "
"PI/2__."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:170
msgid ""
"The arcsine will allow you to find the measure of a right angle when you "
"know the ratio of the side opposite the angle to the hypotenuse."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:173
msgid ""
"So if you knew that a train track rose 1.25 vertical miles on a track "
"that was 50 miles long, you could determine the average angle of incline "
"of the track using the arcsine. Given"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:207
msgid ""
"The percentage grade is the slope, written as a percent. To calculate the"
" slope you divide the rise by the run. In the example the rise is 1.25 "
"mile over a run of 50 miles so the slope is 1.25/50 = 0.025. Written as a"
" percent this is 2.5 %."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:212
msgid ""
"For the US, two and 1/2 percent is generally thought of as the upper "
"limit. This means a rise of 2.5 feet when going 100 feet forward. In the "
"US this was the maximum grade on the first major US railroad, the "
"Baltimore and Ohio. Note curves increase the frictional drag on a train "
"reducing the allowable grade."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:220
#: ../../source/learn/intrinsics/MATH_index.md:939
msgid "FORTRAN 77 and later, for a complex argument Fortran 2008 or later"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:226
msgid "Inverse function: [__sin__(3)](SIN)"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:229
msgid "ASINH"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:232
msgid ""
"__asinh__(3) - \\[MATHEMATICS:TRIGONOMETRIC\\] Inverse hyperbolic sine "
"function"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:242
#: ../../source/learn/intrinsics/MATH_index.md:764
msgid ""
"Where the returned value has the kind of the input value  and TYPE may be"
" _real_ or _complex_"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:247
msgid "__asinh(x)__ computes the inverse hyperbolic sine of __x__."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:252
#: ../../source/learn/intrinsics/MATH_index.md:451
#: ../../source/learn/intrinsics/MATH_index.md:587
#: ../../source/learn/intrinsics/MATH_index.md:781
#: ../../source/learn/intrinsics/MATH_index.md:858
#: ../../source/learn/intrinsics/MATH_index.md:909
#: ../../source/learn/intrinsics/MATH_index.md:1130
#: ../../source/learn/intrinsics/MATH_index.md:1213
msgid "The type shall be _real_ or _complex_."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:256
msgid ""
"The return value is of the same type and kind as __x__. If __x__ is "
"_complex_, the imaginary part of the result is in radians and lies "
"between  __-PI/2 \\<= aimag(asinh(x)) \\<= PI/2__."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:286
msgid "Inverse function: [__sinh__(3)](SINH)"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:289
msgid "ATAN"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:292
msgid "__atan__(3) - \\[MATHEMATICS:TRIGONOMETRIC\\] Arctangent function"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:302
msgid ""
"where __TYPE__ may be _real_ or _complex_ and __KIND__ may be any "
"__KIND__ supported by the associated type. If __y__ is present __x__ is "
"_real`."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:307
msgid "__atan(x)__ computes the arctangent of __x__."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:312
msgid ""
"The type shall be _real_ or _complex_; if __y__ is present, __x__ shall "
"be _real_."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:315
#: ../../source/learn/intrinsics/MATH_index.md:393
#: ../../source/learn/intrinsics/MATH_index.md:1420
#: ../../source/learn/intrinsics/NUMERIC_index.md:503
#: ../../source/learn/intrinsics/NUMERIC_index.md:566
#: ../../source/learn/intrinsics/NUMERIC_index.md:577
msgid "__y__"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:316
msgid ""
"Shall be of the same type and kind as __x__. If __x__ is zero, __y__  "
"must not be zero."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:321
msgid ""
"The returned value is of the same type and kind as __x__. If __y__ is "
"present, the result is identical to __atan2(y,x)__. Otherwise, it is the "
"arc tangent of __x__, where the real part of the result is in radians and"
" lies in the range __-PI/2 \\<= atan(x) \\<= PI/2__"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:360
msgid ""
"FORTRAN 77 and later for a complex argument; and for two arguments "
"Fortran 2008 or later"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:367
msgid "[__atan2__(3)](ATAN2), [__tan__(3)](TAN)"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:370
msgid "ATAN2"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:373
msgid "__atan2__(3) - \\[MATHEMATICS:TRIGONOMETRIC\\] Arctangent function"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:381
msgid ""
"__atan2(y, x)__ computes the arctangent of the complex number ( __x__ + i"
" __y__ ) ."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:384
msgid ""
"This function can be used to transform from Cartesian into polar "
"coordinates and allows to determine the angle in the correct quadrant. To"
" convert from Cartesian Coordinates __(x,y)__ to polar coordinates"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:388
msgid ""
"(r,theta): $$ \\begin{aligned} r &= \\sqrt{x**2 + y**2} \\\\ \\theta &= "
"\\tan**{__-1__}(y / x) \\end{aligned} $$"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:394
#: ../../source/learn/intrinsics/MATH_index.md:1418
#: ../../source/learn/intrinsics/MATH_index.md:1503
#: ../../source/learn/intrinsics/MATH_index.md:1560
#: ../../source/learn/intrinsics/MATH_index.md:1688
#: ../../source/learn/intrinsics/MATH_index.md:1744
#: ../../source/learn/intrinsics/MATH_index.md:1867
#: ../../source/learn/intrinsics/MATH_index.md:1938
#: ../../source/learn/intrinsics/MATH_index.md:1997
#: ../../source/learn/intrinsics/MODEL_index.md:22
#: ../../source/learn/intrinsics/MODEL_index.md:588
#: ../../source/learn/intrinsics/NUMERIC_index.md:323
#: ../../source/learn/intrinsics/NUMERIC_index.md:652
msgid "The type shall be _real_."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:397
msgid ""
"The type and kind type parameter shall be the same as __y__. If __y__ is "
"zero, then __x__ must be nonzero."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:402
msgid ""
"The return value has the same type and kind type parameter as __y__. It "
"is the principal value of the complex number __(x + i, y)__. If x is "
"nonzero, then it lies in the range __-PI \\<= atan(x) \\<= PI__. The sign"
" is positive if __y__ is positive. If __y__ is zero, then the return "
"value is zero if __x__ is strictly positive, __PI__ if __x__ is negative "
"and __y__ is positive zero (or the processor does not handle signed "
"zeros), and __-PI__ if __x__ is negative and __Y__ is negative zero. "
"Finally, if __x__ is zero, then the magnitude of the result is __PI/2__."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:434
msgid "ATANH"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:437
msgid ""
"__atanh__(3) - \\[MATHEMATICS:TRIGONOMETRIC\\] Inverse hyperbolic tangent"
" function"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:446
msgid "__atanh(x)__ computes the inverse hyperbolic tangent of __x__."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:455
msgid ""
"The return value has same type and kind as __x__. If __x__ is _complex_, "
"the imaginary part of the result is in radians and lies between"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:458
msgid "__-PI/2 \\<= aimag(atanh(x)) \\<= PI/2__"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:485
msgid "Inverse function: [__tanh__(3)](TANH)"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:488
msgid "COS"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:491
msgid "__cos__(3) - \\[MATHEMATICS:TRIGONOMETRIC\\] Cosine function"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:505
msgid ""
"__cos(x)__ computes the cosine of an angle __x__ given the size of the "
"angle in radians."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:508
msgid ""
"The cosine of a _real_ value is the ratio of the adjacent side to the "
"hypotenuse of a right-angled triangle."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:514
msgid "The type shall be _real_ or _complex_. __x__ is assumed to be in radians."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:519
#: ../../source/learn/intrinsics/MODEL_index.md:1162
msgid "The return value is of the same type and kind as __x__."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:521
msgid ""
"If __x__ is of the type _real_, the return value lies in the range __-1 "
"\\<= cos(x) \\<= 1__ ."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:556
#: ../../source/learn/intrinsics/MATH_index.md:745
msgid "[Wikipedia:sine and cosine](https://en.wikipedia.org/wiki/Sine_and_cosine)"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:558
msgid "[__acos__(3)](ACOS), [__sin__(3)](SIN), [__tan__(3)](TAN)"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:563
msgid "COSH"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:566
msgid "__cosh__(3) - \\[MATHEMATICS:TRIGONOMETRIC\\] Hyperbolic cosine function"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:576
msgid ""
"where TYPE may be _real_ or _complex_ and KIND may be any  supported kind"
" for the associated type. The returned __value__ will be the same type "
"and kind as the input value __x__."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:582
msgid "__cosh(x)__ computes the hyperbolic cosine of __x__."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:591
msgid ""
"The return value has same type and kind as __x__. If __x__ is _complex_, "
"the imaginary part of the result is in radians."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:594
msgid ""
"If __x__ is _real_, the return value has a lower bound of one,  __cosh(x)"
" \\>= 1__."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:613
msgid "FORTRAN 77 and later, for a complex argument - Fortran 2008 or later"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:618
msgid "Inverse function: [__acosh__(3)](ACOSH)"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:621
msgid "SIN"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:624
msgid "__sin__(3) - \\[MATHEMATICS:TRIGONOMETRIC\\] Sine function"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:633
msgid ""
"Where the returned value has the kind of the input value and TYPE may be "
"_real_ or _complex_"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:638
msgid ""
"__sin(x)__ computes the sine of an angle given the size of the angle in "
"radians."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:641
msgid ""
"The sine of an angle in a right-angled triangle is the ratio of the "
"length of the side opposite the given angle divided by the length of the "
"hypotenuse."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:648
msgid "The type shall be _real_ or _complex_ in radians."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:667
msgid "__Haversine Formula__"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:669
msgid "From the article on \"Haversine formula\" in Wikipedia:"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:677
msgid ""
"So to show the great-circle distance between the Nashville International "
"Airport (BNA) in TN, USA, and the Los Angeles International Airport (LAX)"
" in CA, USA you would start with their latitude and longitude, commonly "
"given as"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:687
msgid "which converted to floating-point values in degrees is:"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:699
msgid ""
"And then use the haversine formula to roughly calculate the distance "
"along the surface of the Earth between the locations:"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:747
msgid "[__asin__(3)](ASIN), [__cos__(3)](COS), [__tan__(3)](TAN)"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:752
msgid "SINH"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:755
msgid "__sinh__(3) - \\[MATHEMATICS:TRIGONOMETRIC\\] Hyperbolic sine function"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:769
msgid "__sinh(x)__ computes the hyperbolic sine of __x__."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:771
msgid "The hyperbolic sine of x is defined mathematically as:"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:773
msgid "__sinh(x) = (exp(x) - exp(-x)) / 2.0__"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:775
msgid ""
"If __x__ is of type _complex_ its imaginary part is regarded as a value "
"in radians."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:785
msgid "The return value has same type and kind as __x__."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:833
msgid "Fortran 95 and later, for a complex argument Fortran 2008 or later"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:838
msgid "[__asinh__(3)](ASINH)"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:841
msgid "TAN"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:844
msgid "__tan__(3) - \\[MATHEMATICS:TRIGONOMETRIC\\] Tangent function"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:853
msgid "__tan(x)__ computes the tangent of __x__."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:883
msgid "FORTRAN 77 and later. For a complex argument, Fortran 2008 or later."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:887
msgid "[__atan__(3)](ATAN), [__cos__(3)](COS), [__sin__(3)](SIN)"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:892
msgid "TANH"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:895
msgid "__tanh__(3) - \\[MATHEMATICS:TRIGONOMETRIC\\] Hyperbolic tangent function"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:904
msgid "__tanh(x)__ computes the hyperbolic tangent of __x__."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:913
msgid ""
"The return value has same type and kind as __x__. If __x__ is complex, "
"the imaginary part of the result is in radians. If __x__ is _real_, the "
"return value lies in the range"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:944
msgid "[__atanh__(3)](ATANH)"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:947
msgid "RANDOM_NUMBER"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:950
msgid "__random\\_number__(3) - \\[MATHEMATICS:RANDOM\\] Pseudo-random number"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:959
msgid ""
"Returns a single pseudorandom number or an array of pseudorandom numbers "
"from the uniform distribution over the range 0 \\<= x \\< 1."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:964
msgid "__harvest__"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:965
msgid "Shall be a scalar or an array of type _real_."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1032
msgid "[__random\\_seed__(3)](RANDOM_SEED)"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1035
msgid "RANDOM_SEED"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1038
msgid ""
"__random\\_seed__(3) - \\[MATHEMATICS:RANDOM\\] Initialize a pseudo-"
"random number sequence"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1047
msgid ""
"Restarts or queries the state of the pseudorandom number generator used "
"by random\\_number."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1050
msgid ""
"If random\\_seed is called without arguments, it is seeded with random "
"data retrieved from the operating system."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1056
msgid ""
"(Optional) Shall be a scalar and of type default _integer_, with "
"__intent(out)__. It specifies the minimum size of the arrays used with "
"the __put__ and __get__ arguments."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1060
msgid "__put__"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1061
msgid ""
"(Optional) Shall be an array of type default _integer_ and rank one. It "
"is __intent(in)__ and the size of the array must be larger than or equal "
"to the number returned by the __size__ argument."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1065
msgid "__get__"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1066
msgid ""
"(Optional) Shall be an array of type default _integer_ and rank one. It "
"is __intent(out)__ and the size of the array must be larger than or equal"
" to the number returned by the __size__ argument."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1099
msgid "[__random\\_number__(3)](RANDOM_NUMBER)"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1102
msgid "EXP"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1105
msgid "__exp__(3) - \\[MATHEMATICS\\] Exponential function"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1113
msgid ""
"__exp__(x) computes the base \"_e_\" exponential of __x__ where \"_e_\" "
"is _Euler's constant_."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1116
msgid ""
"If __x__ is of type _complex_, its imaginary part is regarded as a value "
"in radians such that (see _Euler's formula_):"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1119
msgid ""
"if       __cx=(re,im)__  then       "
"__exp(cx)=exp(re)*cmplx(cos(im),sin(im),kind=kind(cx))__"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1124
msgid ""
"Since __exp__(3) is the inverse function of __log__(3) the maximum valid "
"magnitude of the _real_ component of __x__ is __log(huge(x))__."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1134
msgid "The value of the result is __e\\*\\*x__ where __e__ is Euler's constant."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1188
msgid "[__log__(3)](LOG)"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1190
msgid ""
"Wikipedia:[Exponential "
"function](https://en.wikipedia.org/wiki/Exponential_function)"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1192
#, python-format
msgid ""
"Wikipedia:[Euler's "
"formula](https://en.wikipedia.org/wiki/Euler%27s_formula)"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1195
msgid "LOG"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1198
msgid "__log__(3) - \\[MATHEMATICS\\] Logarithm function"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1207
msgid ""
"__log(x)__ computes the natural logarithm of __x__, i.e. the logarithm to"
" the base \"e\"."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1217
msgid ""
"The return value is of type _real_ or _complex_. The kind type parameter "
"is the same as __x__. If __x__ is _complex_, the imaginary part OMEGA is "
"in the range"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1220
msgid "__-PI__ \\< OMEGA \\<= PI."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1245
msgid "LOG10"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1248
msgid "__log10__(3) - \\[MATHEMATICS\\] Base 10 logarithm function"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1259
msgid ""
"__log10(x)__ computes the base 10 logarithm of __x__. This is generally "
"called the \"common logarithm\"."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1265
msgid "A _real_ value > 0 to take the log of."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1269
msgid ""
"The return value is of type _real_ . The kind type parameter is the same "
"as __x__."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1303
msgid "SQRT"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1306
msgid "__sqrt__(3) - \\[MATHEMATICS\\] Square-root function"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1316
msgid ""
"Where TYPE may be _real_ or _complex_ and __KIND__ may be any kind valid "
"for the declared type."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1321
msgid "__sqrt(x)__ computes the principal square root of __x__."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1323
msgid ""
"In mathematics, a square root of a number __x__ is a number __y__ such "
"that __y*y = x__."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1326
msgid ""
"The number whose square root is being considered is known as the "
"_radicand_."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1329
msgid ""
"Every nonnegative  number _x_ has two square roots of the same unique "
"magnitude, one positive and one negative. The nonnegative square root is "
"called the principal square root."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1333
msgid ""
"The principal square root of 9 is 3, for example, even though (-3)*(-3) "
"is also 9."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1336
msgid "A _real_, _radicand_ must be positive."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1338
msgid ""
"Square roots of negative numbers are a special case of complex numbers, "
"where the components of the _radicand_ need not be positive in order to "
"have a valid square root."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1345
msgid ""
"If __x__ is real its value must be greater than or equal to zero. The "
"type shall be _real_ or _complex_."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1350
msgid ""
"The return value is of type _real_ or _complex_. The kind type parameter "
"is the same as __x__."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1391
msgid "HYPOT"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1394
msgid ""
"__hypot__(3) - \\[MATHEMATICS\\] returns the distance between the point "
"and the origin."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1403
msgid "where __x,y,value__ shall all be of the same __kind__."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1407
msgid ""
"__hypot(x,y)__ is referred to as the Euclidean distance function. It is "
"equal to __sqrt(x**2 + y**2)__, without undue underflow or overflow."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1410
msgid ""
"In mathematics, the _Euclidean distance_ between two points in Euclidean "
"space is the length of a line segment between two points."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1413
msgid ""
"__hypot(x,y)__ returns the distance between the point __<x,y>__ and the "
"origin."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1421
msgid "The type and kind type parameter shall be the same as __x__."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1425
msgid "The return value has the same type and kind type parameter as __x__."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1427
msgid ""
"The result is the positive magnitude of the distance of the point "
"__<x,y>__ from the origin __<0.0,0.0>__ ."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1485
msgid "BESSEL_J0"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1488
msgid ""
"__bessel\\_j0__(3) - \\[MATHEMATICS\\] Bessel function of the first kind "
"of order 0"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1497
msgid ""
"__bessel\\_j0(x)__ computes the Bessel function of the first kind of "
"order __0__ of __x__."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1507
msgid ""
"The return value is of type _real_ and lies in the range  __-0.4027 \\<= "
"bessel(0,x) \\<= 1__. It has the same kind as __x__."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1535
msgid ""
"[__bessel\\_j1__(3)](BESSEL_J1), [__bessel\\_jn__(3)](BESSEL_JN),  "
"[__bessel\\_y0__(3)](BESSEL_Y0), [__bessel\\_y1__(3)](BESSEL_Y1),  "
"[__bessel\\_yn__(3)](BESSEL_YN)"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1542
msgid "BESSEL_J1"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1545
msgid ""
"__bessel\\_j1__(3) - \\[MATHEMATICS\\] Bessel function of the first kind "
"of order 1"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1554
msgid ""
"__bessel\\_j1(x)__ computes the Bessel function of the first kind of "
"order __1__ of __x__."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1564
msgid ""
"The return value is of type _real_ and lies in the range  __-0.5818 \\<= "
"bessel(0,x) \\<= 0.5818__ . It has the same kind as __x__."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1591
msgid ""
"[__bessel\\_j0__(3)](BESSEL_J0), [__bessel\\_jn__(3)](BESSEL_JN),  "
"[__bessel\\_y0__(3)](BESSEL_Y0), [__bessel\\_y1__(3)](BESSEL_Y1),  "
"[__bessel\\_yn__(3)](BESSEL_YN)"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1598
msgid "BESSEL_JN"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1601
msgid "__bessel\\_jn__(3) - \\[MATHEMATICS\\] Bessel function of the first kind"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1612
msgid ""
"__bessel\\_jn(n, x)__ computes the Bessel function of the first kind of "
"order __n__ of __x__. If __n__ and __x__ are arrays, their ranks and "
"shapes shall conform."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1616
msgid ""
"__bessel\\_jn(n1, n2, x)__ returns an array with the Bessel "
"function\\|Bessel functions  of the first kind of the orders __n1__ to "
"__n2__."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1621
#: ../../source/learn/intrinsics/MATH_index.md:1800
msgid "__n__"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1622
#: ../../source/learn/intrinsics/MATH_index.md:1801
msgid "Shall be a scalar or an array of type _integer_."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1624
#: ../../source/learn/intrinsics/MATH_index.md:1803
msgid "__n1__"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1625
#: ../../source/learn/intrinsics/MATH_index.md:1628
#: ../../source/learn/intrinsics/MATH_index.md:1804
#: ../../source/learn/intrinsics/MATH_index.md:1807
msgid "Shall be a non-negative scalar of type _integer_."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1627
#: ../../source/learn/intrinsics/MATH_index.md:1806
msgid "__n2__"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1631
msgid ""
"Shall be a scalar or an array of type _real_. For  __bessel\\_jn(n1, n2, "
"x)__ it shall be scalar."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1636
msgid ""
"The return value is a scalar of type _real_. It has the same kind as "
"__x__."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1663
msgid ""
"[__bessel\\_j0__(3)](BESSEL_J0), [__bessel\\_j1__(3)](BESSEL_J1), "
"[__bessel\\_y0__(3)](BESSEL_Y0), [__bessel\\_y1__(3)](BESSEL_Y1),  "
"[__bessel\\_yn__(3)](BESSEL_YN)"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1670
msgid "BESSEL_Y0"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1673
msgid ""
"__bessel\\_y0__(3) - \\[MATHEMATICS\\] Bessel function of the second kind"
" of order 0"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1682
msgid ""
"__bessel\\_y0(x)__ computes the Bessel function of the second kind of "
"order 0 of __x__."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1692
msgid "The return value is of type _real_. It has the same kind as __x__."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1719
msgid ""
"[__bessel\\_j0__(3)](BESSEL_J0), [__bessel\\_j1__(3)](BESSEL_J1), "
"[__bessel\\_jn__(3)](BESSEL_JN),  [__bessel\\_y1__(3)](BESSEL_Y1),  "
"[__bessel\\_yn__(3)](BESSEL_YN)"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1726
msgid "BESSEL_Y1"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1729
msgid ""
"__bessel\\_y1__(3) - \\[MATHEMATICS\\] Bessel function of the second kind"
" of order 1"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1738
msgid ""
"__bessel\\_y1(x)__ computes the Bessel function of the second kind of "
"order 1 of __x__."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1748
#: ../../source/learn/intrinsics/MATH_index.md:1815
msgid "The return value is _real_. It has the same kind as __x__."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1770
msgid ""
"[__bessel\\_j0__(3)](BESSEL_J0), [__bessel\\_j1__(3)](BESSEL_J1), "
"[__bessel\\_jn__(3)](BESSEL_JN),  [__bessel\\_y0__(3)](BESSEL_Y0), "
"[__bessel\\_yn__(3)](BESSEL_YN)"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1777
msgid "BESSEL_YN"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1780
msgid "__bessel\\_yn__(3) - \\[MATHEMATICS\\] Bessel function of the second kind"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1791
msgid ""
"__bessel\\_yn(n, x)__ computes the Bessel function of the second kind of "
"order __n__ of __x__. If __n__ and __x__ are arrays, their ranks and "
"shapes shall conform."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1795
msgid ""
"__bessel\\_yn(n1, n2, x)__ returns an array with the Bessel "
"function\\|Bessel functions of the first kind of the orders __n1__ to "
"__n2__."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1810
msgid ""
"Shall be a scalar or an array of type _real_; for  __bessel\\_yn(n1, n2, "
"x)__ it shall be scalar."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1840
msgid ""
"[__bessel\\_j0__(3)](BESSEL_J0), [__bessel\\_j1__(3)](BESSEL_J1), "
"[__bessel\\_jn__(3)](BESSEL_JN), [__bessel\\_y0__(3)](BESSEL_Y0), "
"[__bessel\\_y1__(3)](BESSEL_Y1)"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1847
msgid "ERF"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1850
msgid "__erf__(3) - \\[MATHEMATICS\\] Error function"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1859
msgid ""
"__erf__(x) computes the error function of __x__, defined as  $$ "
"\\text{erf}(x) = \\frac{2}{\\sqrt{\\pi}} \\int_0^x e^{__-t__^2} dt. $$"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1871
msgid ""
"The return value is of type _real_, of the same kind as __x__ and lies in"
" the range __-1__ \\<= __erf__(x) \\<= 1 ."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1895
#: ../../source/learn/intrinsics/MATH_index.md:1968
msgid "See also"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1897
msgid "[__erfc__(3)](ERFC)"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1899
#: ../../source/learn/intrinsics/MATH_index.md:1971
msgid "[Wikipedia:error function](https://en.wikipedia.org/wiki/Error_function)"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1902
msgid "ERFC"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1905
msgid "__erfc__(3) - \\[MATHEMATICS\\] Complementary error function"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1918
msgid ""
"__erfc__(x) computes the complementary error function of __x__.  Simpy "
"put this is equivalent to __1 - erf(x)__, but __erfc__ is provided "
"because of the extreme loss of relative accuracy if __erf(x)__ is called "
"for large __x__ and the result is subtracted from __1__."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1923
msgid "__erfc(x)__ is defined as"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1931
msgid ""
"$$ \\text{erfc}(x) = 1 - \\text{erf}(x) = 1 - \\frac{2}{\\sqrt{\\pi}} "
"\\int_x^{\\infty} e^{-t^2} dt. $$"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1942
msgid ""
"The return value is of type _real_ and of the same kind as __x__. It lies"
" in the range"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1945
msgid "0 \\<= __erfc__(x) \\<= 2."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1969
msgid "[__erf__(3)](ERF)"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1973
msgid "fortran-lang intrinsic descriptions license: MIT) @urbanjost"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1974
msgid "ERFC_SCALED"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1977
msgid "__erfc\\_scaled__(3) - \\[MATHEMATICS\\] Error function"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1986
msgid ""
"__erfc\\_scaled__(x) computes the exponentially-scaled complementary "
"error function of __x__:"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:1989
msgid "$$ e^{x^2} \\frac{2}{\\sqrt{\\pi}} \\int_{x}^{\\infty} e^{-t^2} dt. $$"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:2001
msgid "The return value is of type _real_ and of the same kind as __x__."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:2025
msgid "GAMMA"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:2028
msgid ""
"__gamma__(3) - \\[MATHEMATICS\\] Gamma function, which yields factorials "
"for positive whole numbers"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:2036
msgid ""
"__gamma(x)__ computes Gamma of __x__. For positive whole number values of"
" __n__ the Gamma function can be used to calculate factorials, as  "
"__(n-1)!  == gamma(real(n))__. That is"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:2043
msgid ""
"$$ \\\\__Gamma__(x) = \\\\int\\_0\\*\\*\\\\infty "
"t\\*\\*{x-1}{\\\\mathrm{e}}\\*\\*{__-t__}\\\\,{\\\\mathrm{d}}t $$"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:2049
#: ../../source/learn/intrinsics/MATH_index.md:2169
#: ../../source/learn/intrinsics/MATH_index.md:2216
msgid "Shall be of type _real_ and neither zero nor a negative integer."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:2053
msgid "The return value is of type _real_ of the same kind as _x_."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:2147
msgid "Logarithm of the Gamma function: [__log\\_gamma__(3)](LOG_GAMMA)"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:2149
msgid "[Wikipedia: Gamma_function](https://en.wikipedia.org/wiki/Gamma_function)"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:2152
#: ../../source/learn/intrinsics/MATH_index.md:2199
msgid "LOG_GAMMA"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:2155
#: ../../source/learn/intrinsics/MATH_index.md:2202
msgid "__log\\_gamma__(3) - \\[MATHEMATICS\\] Logarithm of the Gamma function"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:2164
#: ../../source/learn/intrinsics/MATH_index.md:2211
msgid ""
"__log\\_gamma(x)__ computes the natural logarithm of the absolute value "
"of the Gamma function."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:2173
#: ../../source/learn/intrinsics/MATH_index.md:2220
msgid "The return value is of type _real_ of the same kind as __x__."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:2196
#: ../../source/learn/intrinsics/MATH_index.md:2243
msgid "Gamma function: [__gamma__(3)](GAMMA)"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:2246
msgid "NORM2"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:2249
msgid "__norm2__(3) - \\[MATHEMATICS\\] Euclidean vector norm"
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:2263
msgid ""
"Calculates the Euclidean vector norm (L\\_2 norm) of __array__ along "
"dimension __dim__."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:2269
msgid "Shall be an array of type _real_."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:2272
msgid ""
"shall be a scalar of type _integer_ with a value in the range from __1__ "
"to  __rank(array)__."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:2279
msgid ""
"If __dim__ is absent, a scalar with the square root of the sum of squares"
" of the elements of __array__ is returned."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:2282
msgid ""
"Otherwise, an array of rank __n-1__, where __n__ equals the rank of "
"__array__, and a shape similar to that of __array__ with dimension DIM "
"dropped is returned."
msgstr ""

#: ../../source/learn/intrinsics/MATH_index.md:2331
msgid "[__product__(3)](PRODUCT), [__sum__(3)](SUM), [__hypot__(3)](HYPOT)"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:1
#: ../../source/learn/intrinsics/index.md:139
msgid "MODEL_index"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:2
msgid "These routines support controlling and querying the current numeric model."
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:4
msgid "EXPONENT"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:7
msgid "__exponent__(3) - \\[MODEL\\_COMPONENTS\\] Exponent function"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:16
msgid ""
"__exponent__(x) returns the value of the exponent part of __x__. If __x__"
" is zero the value returned is zero."
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:26
msgid "The return value is of type default _integer_."
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:53
msgid ""
"[__digits__(3)](DIGITS), [__epsilon__(3)](EPSILON), "
"[__fraction__(3)](FRACTION), [__huge__(3)](HUGE), "
"[__maxexponent__(3)](MAXEXPONENT), [__minexponent__(3)](MINEXPONENT), "
"[__nearest__(3)](NEAREST), [__precision__(3)](PRECISION), "
"[__radix__(3)](RADIX), [__range__(3)](RANGE), "
"[__rrspacing__(3)](RRSPACING), [__scale__(3)](SCALE), "
"[__set\\_exponent__(3)](SET_EXPONENT), [__spacing__(3)](SPACING), "
"[__tiny__(3)](TINY)"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:71
msgid "FRACTION"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:74
msgid ""
"__fraction__(3) - \\[MODEL\\_COMPONENTS\\] Fractional part of the model "
"representation"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:83
msgid ""
"__fraction(x)__ returns the fractional part of the model representation "
"of __x__."
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:90
#: ../../source/learn/intrinsics/MODEL_index.md:290
msgid "The type of the argument shall be a _real_."
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:94
msgid ""
"The return value is of the same type and kind as the argument. The "
"fractional part of the model representation of __x__ is returned; it is  "
"__x \\* radix(x)\\*\\*(-exponent(x))__."
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:120
msgid ""
"[__digits__(3)](DIGITS), [__epsilon__(3)](EPSILON), "
"[__exponent__(3)](EXPONENT), [__huge__(3)](HUGE), "
"[__maxexponent__(3)](MAXEXPONENT), [__minexponent__(3)](MINEXPONENT), "
"[__nearest__(3)](NEAREST), [__precision__(3)](PRECISION), "
"[__radix__(3)](RADIX), [__range__(3)](RANGE), "
"[__rrspacing__(3)](RRSPACING), [__scale__(3)](SCALE), "
"[__set\\_exponent__(3)](SET_EXPONENT), [__spacing__(3)](SPACING), "
"[__tiny__(3)](TINY)"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:138
msgid "NEAREST"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:141
msgid "__nearest__(3) - \\[MODEL\\_COMPONENTS\\] Nearest representable number"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:150
msgid ""
"__nearest(x, s)__ returns the processor-representable number nearest to "
"__x__ in the direction indicated by the sign of __s__."
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:156
#: ../../source/learn/intrinsics/MODEL_index.md:239
#: ../../source/learn/intrinsics/MODEL_index.md:361
#: ../../source/learn/intrinsics/MODEL_index.md:430
#: ../../source/learn/intrinsics/MODEL_index.md:809
#: ../../source/learn/intrinsics/MODEL_index.md:877
#: ../../source/learn/intrinsics/MODEL_index.md:1156
msgid "Shall be of type _real_."
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:158
msgid "__s__"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:159
msgid "Shall be of type _real_ and not equal to zero."
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:163
msgid ""
"The return value is of the same type as __x__. If __s__ is positive, "
"__nearest__ returns the processor-representable number greater than __x__"
" and nearest to it. If __s__ is negative, __nearest__ returns the "
"processor-representable number smaller than __x__ and nearest to it."
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:203
msgid ""
"[__digits__(3)](DIGITS), [__epsilon__(3)](EPSILON), "
"[__exponent__(3)](EXPONENT), [__fraction__(3)](FRACTION), "
"[__huge__(3)](HUGE), [__maxexponent__(3)](MAXEXPONENT), "
"[__minexponent__(3)](MINEXPONENT), [__precision__(3)](PRECISION), "
"[__radix__(3)](RADIX), [__range__(3)](RANGE), "
"[__rrspacing__(3)](RRSPACING), [__scale__(3)](SCALE), "
"[__set\\_exponent__(3)](SET_EXPONENT), [__spacing__(3)](SPACING), "
"[__tiny__(3)](TINY)"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:221
msgid "RRSPACING"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:224
msgid ""
"__rrspacing__(3) - \\[MODEL\\_COMPONENTS\\] Reciprocal of the relative "
"spacing"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:233
msgid ""
"__rrspacing(x)__ returns the reciprocal of the relative spacing of model "
"numbers near __x__."
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:243
msgid ""
"The return value is of the same type and kind as __x__. The value "
"returned is equal to __abs(fraction(x)) \\* "
"float(radix(x))\\*\\*digits(x)__."
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:252
msgid ""
"[__digits__(3)](DIGITS), [__epsilon__(3)](EPSILON), "
"[__exponent__(3)](EXPONENT), [__fraction__(3)](FRACTION), "
"[__huge__(3)](HUGE), [__maxexponent__(3)](MAXEXPONENT), "
"[__minexponent__(3)](MINEXPONENT), [__nearest__(3)](NEAREST), "
"[__precision__(3)](PRECISION), [__radix__(3)](RADIX), "
"[__range__(3)](RANGE), [__scale__(3)](SCALE), "
"[__set\\_exponent__(3)](SET_EXPONENT), [__spacing__(3)](SPACING), "
"[__tiny__(3)](TINY)"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:270
msgid "SCALE"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:273
msgid ""
"__scale__(3) - \\[MODEL\\_COMPONENTS\\] Scale a real value by a whole "
"power of the radix"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:285
msgid "__scale(x,i)__ returns x \\* __radix(x)\\*\\*i__."
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:293
msgid "The type of the argument shall be a _integer_."
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:297
msgid ""
"The return value is of the same type and kind as __x__. Its value is  __x"
" \\* radix(x)\\*\\*i__."
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:325
msgid ""
"[__digits__(3)](DIGITS), [__epsilon__(3)](EPSILON), "
"[__exponent__(3)](EXPONENT), [__fraction__(3)](FRACTION), "
"[__huge__(3)](HUGE), [__maxexponent__(3)](MAXEXPONENT), "
"[__minexponent__(3)](MINEXPONENT), [__nearest__(3)](NEAREST), "
"[__precision__(3)](PRECISION), [__radix__(3)](RADIX), "
"[__range__(3)](RANGE), [__rrspacing__(3)](RRSPACING), "
"[__set\\_exponent__(3)](SET_EXPONENT), [__spacing__(3)](SPACING), "
"[__tiny__(3)](TINY)"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:343
msgid "SET_EXPONENT"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:346
msgid ""
"__set\\_exponent__(3) - \\[MODEL\\_COMPONENTS\\] Set the exponent of the "
"model"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:355
msgid ""
"__set\\_exponent(x, i)__ returns the real number whose fractional part is"
" that of __x__ and whose exponent part is __i__."
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:368
msgid ""
"The return value is of the same type and kind as __x__. The real number "
"whose fractional part is that that of __x__ and whose exponent part if "
"__i__ is returned; it is __fraction(x) \\* radix(x)\\*\\*i__."
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:394
msgid ""
"[__digits__(3)](DIGITS), [__epsilon__(3)](EPSILON), "
"[__exponent__(3)](EXPONENT), [__fraction__(3)](FRACTION), "
"[__huge__(3)](HUGE), [__maxexponent__(3)](MAXEXPONENT), "
"[__minexponent__(3)](MINEXPONENT), [__nearest__(3)](NEAREST), "
"[__precision__(3)](PRECISION), [__radix__(3)](RADIX), "
"[__range__(3)](RANGE), [__rrspacing__(3)](RRSPACING), "
"[__scale__(3)](SCALE), [__spacing__(3)](SPACING), [__tiny__(3)](TINY)"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:412
msgid "SPACING"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:415
msgid ""
"__spacing__(3) - \\[MODEL\\_COMPONENTS\\] Smallest distance between two "
"numbers of a given type"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:424
msgid ""
"Determines the distance between the argument __x__ and the nearest "
"adjacent number of the same type."
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:434
msgid "The result is of the same type as the input argument __x__."
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:461
msgid ""
"[__digits__(3)](DIGITS), [__epsilon__(3)](EPSILON), "
"[__exponent__(3)](EXPONENT), [__fraction__(3)](FRACTION), "
"[__huge__(3)](HUGE), [__maxexponent__(3)](MAXEXPONENT), "
"[__minexponent__(3)](MINEXPONENT), [__nearest__(3)](NEAREST), "
"[__precision__(3)](PRECISION), [__radix__(3)](RADIX), "
"[__range__(3)](RANGE), [__rrspacing__(3)](RRSPACING), "
"[__scale__(3)](SCALE), [__set\\_exponent__(3)](SET_EXPONENT), "
"[__tiny__(3)](TINY)"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:479
msgid "DIGITS"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:482
msgid "__digits__(3) - \\[NUMERIC MODEL\\] Significant digits function"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:491
msgid ""
"where TYPE may be _integer_ or _real_ and KIND is any kind supported by "
"TYPE."
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:496
msgid ""
"__digits(x)__ returns the number of significant digits of the internal "
"model representation of __x__. For example, on a system using a 32-bit "
"floating point representation, a default real number would likely return "
"24."
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:504
msgid "The type may be a scalar or array of type _integer_ or _real_."
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:508
msgid "The return value is of type _integer_ of default kind."
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:540
msgid ""
"[__epsilon__(3)](EPSILON), [__exponent__(3)](EXPONENT), "
"[__fraction__(3)](FRACTION), [__huge__(3)](HUGE), "
"[__maxexponent__(3)](MAXEXPONENT), [__minexponent__(3)](MINEXPONENT), "
"[__nearest__(3)](NEAREST), [__precision__(3)](PRECISION), "
"[__radix__(3)](RADIX), [__range__(3)](RANGE), "
"[__rrspacing__(3)](RRSPACING), [__scale__(3)](SCALE), "
"[__set\\_exponent__(3)](SET_EXPONENT), [__spacing__(3)](SPACING), "
"[__tiny__(3)](TINY)"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:557
msgid "EPSILON"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:560
msgid "__epsilon__(3) - \\[NUMERIC MODEL\\] Epsilon function"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:568
msgid ""
"__epsilon(x)__ returns the floating point relative accuracy.  It is the "
"nearly negligible number relative to __1__ such that __1+ little_number__"
" is not equal to __1__; or more precisely"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:575
msgid ""
"It may be thought of as the distance from 1.0 to the next largest "
"floating point number."
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:578
msgid ""
"One use of __epsilon__(3) is to select a _delta_ value for algorithms "
"that search until the calculation is within _delta_ of an estimate."
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:581
msgid ""
"If _delta_ is too small the algorithm might never halt, as a computation "
"summing values smaller than the decimal resolution of the data type does "
"not change."
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:592
msgid "The return value is of the same type as the argument."
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:667
msgid ""
"[__digits__(3)](DIGITS), [__exponent__(3)](EXPONENT), "
"[__fraction__(3)](FRACTION), [__huge__(3)](HUGE), "
"[__maxexponent__(3)](MAXEXPONENT), [__minexponent__(3)](MINEXPONENT), "
"[__nearest__(3)](NEAREST), [__precision__(3)](PRECISION), "
"[__radix__(3)](RADIX), [__range__(3)](RANGE), "
"[__rrspacing__(3)](RRSPACING), [__scale__(3)](SCALE), "
"[__set\\_exponent__(3)](SET_EXPONENT), [__spacing__(3)](SPACING), "
"[__tiny__(3)](TINY)"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:684
msgid "HUGE"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:687
msgid "__huge__(3) - \\[NUMERIC MODEL\\] Largest number of a type and kind"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:697
msgid ""
"where __TYPE__ may be _real_ or _integer_ and __KIND__ is any supported"
"    associated _kind_."
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:702
msgid ""
"__huge(x)__ returns the largest number that is not an infinity for the "
"kind and type of __x__."
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:708
msgid ""
"Shall be an arbitrary value of type _real_ or _integer_. The value is "
"used merely to determine what _kind_ and _type_ of scalar is being "
"queried."
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:714
msgid ""
"The return value is of the same type and kind as _x_ and is the largest "
"value supported by the specified model."
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:773
msgid ""
"[__digits__(3)](DIGITS), [__epsilon__(3)](EPSILON), "
"[__exponent__(3)](EXPONENT), [__fraction__(3)](FRACTION), "
"[__maxexponent__(3)](MAXEXPONENT), [__minexponent__(3)](MINEXPONENT), "
"[__nearest__(3)](NEAREST), [__precision__(3)](PRECISION), "
"[__radix__(3)](RADIX), [__range__(3)](RANGE), "
"[__rrspacing__(3)](RRSPACING), [__scale__(3)](SCALE), "
"[__set\\_exponent__(3)](SET_EXPONENT), [__spacing__(3)](SPACING), "
"[__tiny__(3)](TINY)"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:791
msgid "MAXEXPONENT"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:794
msgid "__maxexponent__(3) - \\[NUMERIC MODEL\\] Maximum exponent of a real kind"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:803
msgid ""
"__maxexponent(x)__ returns the maximum exponent in the model of the type "
"of __x__."
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:841
msgid ""
"[__digits__(3)](DIGITS), [__epsilon__(3)](EPSILON), "
"[__exponent__(3)](EXPONENT), [__fraction__(3)](FRACTION), "
"[__huge__(3)](HUGE), [__minexponent__(3)](MINEXPONENT), "
"[__nearest__(3)](NEAREST), [__precision__(3)](PRECISION), "
"[__radix__(3)](RADIX), [__range__(3)](RANGE), "
"[__rrspacing__(3)](RRSPACING), [__scale__(3)](SCALE), "
"[__set\\_exponent__(3)](SET_EXPONENT), [__spacing__(3)](SPACING), "
"[__tiny__(3)](TINY)"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:859
msgid "MINEXPONENT"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:862
msgid "__minexponent__(3) - \\[NUMERIC MODEL\\] Minimum exponent of a real kind"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:871
msgid ""
"__minexponent(x)__ returns the minimum exponent in the model of the type "
"of __x__."
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:909
msgid ""
"[__digits__(3)](DIGITS), [__epsilon__(3)](EPSILON), "
"[__exponent__(3)](EXPONENT), [__fraction__(3)](FRACTION), "
"[__huge__(3)](HUGE), [__maxexponent__(3)](MAXEXPONENT), "
"[__nearest__(3)](NEAREST), [__precision__(3)](PRECISION), "
"[__radix__(3)](RADIX), [__range__(3)](RANGE), "
"[__rrspacing__(3)](RRSPACING), [__scale__(3)](SCALE), "
"[__set\\_exponent__(3)](SET_EXPONENT), [__spacing__(3)](SPACING), "
"[__tiny__(3)](TINY)"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:926
msgid "PRECISION"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:929
msgid "__precision__(3) - \\[NUMERIC MODEL\\] Decimal precision of a real kind"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:938
msgid ""
"__precision(x)__ returns the decimal precision in the model of the type "
"of __x__."
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:944
#: ../../source/learn/intrinsics/MODEL_index.md:1085
msgid "Shall be of type _real_ or _complex_."
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:976
msgid ""
"[__digits__(3)](DIGITS), [__epsilon__(3)](EPSILON), "
"[__exponent__(3)](EXPONENT), [__fraction__(3)](FRACTION), "
"[__huge__(3)](HUGE), [__maxexponent__(3)](MAXEXPONENT), "
"[__minexponent__(3)](MINEXPONENT), [__nearest__(3)](NEAREST), "
"[__radix__(3)](RADIX), [__range__(3)](RANGE), "
"[__rrspacing__(3)](RRSPACING), [__scale__(3)](SCALE), "
"[__set\\_exponent__(3)](SET_EXPONENT), [__spacing__(3)](SPACING), "
"[__tiny__(3)](TINY)"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:994
msgid "RADIX"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:997
msgid "__radix__(3) - \\[NUMERIC MODEL\\] Base of a model number"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:1006
msgid "__radix(x)__ returns the base of the model representing the entity __x__."
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:1011
msgid "Shall be of type _integer_ or _real_"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:1015
#: ../../source/learn/intrinsics/TYPE_index.md:854
msgid ""
"The return value is a scalar of type _integer_ and of the default integer"
" kind."
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:1043
msgid ""
"[__digits__(3)](DIGITS), [__epsilon__(3)](EPSILON), "
"[__exponent__(3)](EXPONENT), [__fraction__(3)](FRACTION), "
"[__huge__(3)](HUGE), [__maxexponent__(3)](MAXEXPONENT), "
"[__minexponent__(3)](MINEXPONENT), [__nearest__(3)](NEAREST), "
"[__precision__(3)](PRECISION), [__range__(3)](RANGE), "
"[__rrspacing__(3)](RRSPACING), [__scale__(3)](SCALE), "
"[__set\\_exponent__(3)](SET_EXPONENT), [__spacing__(3)](SPACING), "
"[__tiny__(3)](TINY)"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:1061
msgid "RANGE"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:1064
msgid "__range__(3) - \\[NUMERIC MODEL\\] Decimal exponent range of a real kind"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:1075
msgid ""
"where TYPE is _real_ or _complex_ and KIND is any kind supported by     "
"TYPE."
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:1079
msgid ""
"__range(x)__ returns the decimal exponent range in the model of the type "
"of __x__."
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:1117
msgid ""
"[__digits__(3)](DIGITS), [__epsilon__(3)](EPSILON), "
"[__exponent__(3)](EXPONENT), [__fraction__(3)](FRACTION), "
"[__huge__(3)](HUGE), [__maxexponent__(3)](MAXEXPONENT), "
"[__minexponent__(3)](MINEXPONENT), [__nearest__(3)](NEAREST), "
"[__precision__(3)](PRECISION), [__radix__(3)](RADIX), "
"[__rrspacing__(3)](RRSPACING), [__scale__(3)](SCALE), "
"[__set\\_exponent__(3)](SET_EXPONENT), [__spacing__(3)](SPACING), "
"[__tiny__(3)](TINY)"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:1134
msgid "TINY"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:1137
msgid "__tiny__(3) - \\[NUMERIC MODEL\\] Smallest positive number of a real kind"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:1146
msgid "where KIND may be any kind supported by type _real_"
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:1150
msgid ""
"__tiny(x)__ returns the smallest positive (non zero) number of the type "
"and kind of __x__."
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:1160
msgid "The smallest positive value for the _real_ type of the specified kind."
msgstr ""

#: ../../source/learn/intrinsics/MODEL_index.md:1186
msgid ""
"[__digits__(3)](DIGITS), [__epsilon__(3)](EPSILON), "
"[__exponent__(3)](EXPONENT), [__fraction__(3)](FRACTION), "
"[__huge__(3)](HUGE), [__maxexponent__(3)](MAXEXPONENT), "
"[__minexponent__(3)](MINEXPONENT), [__nearest__(3)](NEAREST), "
"[__precision__(3)](PRECISION), [__radix__(3)](RADIX), "
"[__range__(3)](RANGE), [__rrspacing__(3)](RRSPACING), "
"[__scale__(3)](SCALE), [__set_exponent__(3)](SET_EXPONENT), "
"[__spacing__(3)](SPACING)"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:1
#: ../../source/learn/intrinsics/index.md:139
msgid "NUMERIC_index"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:2
#: ../../source/learn/intrinsics/index.md:20
msgid "Manipulation and properties of numeric values"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:4
msgid "ABS"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:8
msgid "__abs__(3) - \\[NUMERIC\\] Absolute value"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:18
msgid ""
"where the TYPE and KIND is determined by the type and type attributes of "
"__a__, which may be any _real_, _integer_, or _complex_ value."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:21
msgid ""
"If the type of __a__ is _cmplx_ the type returned will be _real_ with the"
" same kind as the _real_ part of the input value."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:24
msgid "Otherwise the returned type will be the same type as __a__."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:28
msgid "__abs(a)__ computes the absolute value of numeric argument __a__."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:30
msgid ""
"In mathematics, the absolute value or modulus of a real number __x__, "
"denoted __|x|__, is the magnitude of __x__ without regard to its sign."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:33
msgid ""
"The absolute value of a number may be thought of as its distance from "
"zero, which is the definition used by __abs__(3) when dealing with "
"_complex_ values (_see below_)."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:40
msgid ""
"the type of the argument shall be an _integer_, _real_, or _complex_ "
"scalar or array."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:45
msgid ""
"If __a__ is of type _integer_ or _real_, the value of the result is "
"__|a|__ and of the same type and kind as the input argument."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:48
msgid ""
"(Take particular note) if __a__ is _complex_ with value __(x, y)__, the "
"result is a _real_ equal to a processor-dependent approximation to "
"__sqrt(x\\*\\*2 + y\\*\\*2)__ computed without undue overflow or "
"underflow."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:130
msgid "AINT"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:133
msgid "__aint__(3) - \\[NUMERIC\\] Truncate to a whole number"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:155
msgid "__aint(x, kind)__ truncates its argument to a whole number."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:160
#: ../../source/learn/intrinsics/NUMERIC_index.md:238
msgid "the type of the argument shall be _real_."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:168
msgid ""
"The return value is of type _real_ with the kind type parameter of the "
"argument if the optional __kind__ is absent; otherwise, the kind type "
"parameter will be given by __kind__. If the magnitude of __x__ is less "
"than one, __aint(x)__ returns zero. If the magnitude is equal to or "
"greater than one then it returns the largest whole number that does not "
"exceed its magnitude. The sign is the same as the sign of __x__."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:213
msgid ""
"[__anint__(3)](ANINT), [__int__(3)](INT), [__nint__(3)](NINT), "
"[__selected_int_kind__(3)](SELECTED_INT_KIND), [__ceiling__(3)](CEILING),"
" [__floor__(3)](FLOOR)"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:221
msgid "ANINT"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:224
msgid "__anint__(3) - \\[NUMERIC\\] Nearest whole number"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:233
msgid "__anint(a \\[, kind\\])__ rounds its argument to the nearest whole number."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:246
msgid ""
"The return value is of type real with the kind type parameter of the "
"argument if the optional __kind__ is absent; otherwise, the kind type "
"parameter will be given by __kind__. If __a__ is greater than zero, "
"__anint(a)__ returns __aint(a + 0.5)__. If __a__ is less than or equal to"
" zero then it returns __aint(a - 0.5)__."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:294
msgid ""
"[__aint__(3)](AINT), [__int__(3)](INT), [__nint__(3)](NINT), "
"[__selected_int_kind__(3)](SELECTED_INT_KIND), [__ceiling__(3)](CEILING),"
" [__floor__(3)](FLOOR)"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:302
msgid "CEILING"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:305
msgid "__ceiling__(3) - \\[NUMERIC\\] Integer ceiling function"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:318
msgid "__ceiling(a)__ returns the least integer greater than or equal to __a__."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:331
msgid ""
"The return value is of type __integer__(kind) if __kind__ is present and "
"a default-kind _integer_ otherwise."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:334
#: ../../source/learn/intrinsics/NUMERIC_index.md:663
#: ../../source/learn/intrinsics/TYPE_index.md:331
#: ../../source/learn/intrinsics/TYPE_index.md:450
msgid ""
"The result is undefined if it cannot be represented in the specified "
"integer type."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:369
msgid "[__floor__(3)](FLOOR), [__nint__(3)](NINT)"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:373
#: ../../source/learn/intrinsics/NUMERIC_index.md:711
msgid ""
"[__aint__(3)](AINT), [__anint__(3)](ANINT), [__int__(3)](INT), "
"[__selected_int_kind__(3)](SELECTED_INT_KIND)"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:379
msgid "CONJG"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:382
msgid "__conjg__(3) - \\[NUMERIC\\] Complex conjugate of a complex value"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:391
msgid "where __K__ is the kind of the parameter __z__"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:395
msgid "__conjg(z)__ returns the complex conjugate of the _complex_ value __z__."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:397
msgid ""
"In mathematics, the complex conjugate of a complex_ number is the number "
"with an equal real part and an imaginary part equal in magnitude but "
"opposite in sign."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:401
msgid "That is, If __z__ is __(x, y)__ then the result is __(x, -y)__."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:403
msgid ""
"For matrices of complex numbers, __conjg(array)__ represents the element-"
"by-element conjugation of __array__; not the conjugate transpose of "
"__array__ ."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:409
#: ../../source/learn/intrinsics/TYPE_index.md:77
msgid "__z__"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:410
msgid "The type shall be _complex_."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:414
msgid "The return value is of type _complex_."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:478
msgid "DIM"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:481
msgid "__dim__(3) - \\[NUMERIC\\] Positive difference"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:492
#: ../../source/learn/intrinsics/NUMERIC_index.md:1052
msgid ""
"where TYPE may be _real_ or _integer_ and KIND is any supported kind for "
"the type."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:495
msgid ""
"__dim(x,y)__ returns the difference __x - y__ if the result is positive; "
"otherwise it returns zero."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:501
msgid "The type shall be _integer_ or _real_"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:504
msgid "The type shall be the same type and kind as __x__."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:508
msgid ""
"The return value is the same type and kind as the input arguments __x__ "
"and __y__."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:543
msgid "DPROD"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:546
msgid "__dprod__(3) - \\[NUMERIC\\] Double product function"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:555
msgid ""
"__dprod(x,y)__ produces a higher _doubleprecision_ product of default "
"_real_ numbers __x__ and __y__."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:558
msgid ""
"The result has a value equal to a processor-dependent approximation to "
"the product of __x__ and __y__. It is recommended that the processor "
"compute the product in double precision, rather than in single precision "
"and then converted to double precision."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:564
#: ../../source/learn/intrinsics/NUMERIC_index.md:567
msgid "shall be default real."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:569
msgid ""
"The setting of compiler options specifying _real_ size can affect this "
"function."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:575
msgid "Must be of default _real(kind=kind(0.0))_ type"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:578
msgid "Must have the same type and kind parameters as __x__"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:582
msgid "The return value is of type _real(kind=kind(0.0d0))_."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:628
msgid "FLOOR"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:631
msgid ""
"__floor__(3) - \\[NUMERIC\\] function to return largest integral value "
"not greater than argument"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:645
msgid ""
"__floor(a)__ returns the greatest integer less than or equal to __a__. "
"That is, it picks the whole number at or to the left of the value on the "
"scale __-huge(int(a,kind=KIND))-1__ to __huge(int(a),kind=KIND)__."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:655
msgid ""
"(Optional) A scalar _integer_ constant initialization expression "
"indicating the kind parameter of the result."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:660
msgid ""
"The return value is of type _integer(kind)_ if __kind__ is present and of"
" default-kind _integer_ otherwise."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:707
msgid "[__ceiling__(3)](CEILING), [__nint__(3)](NINT)"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:717
msgid "MAX"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:720
msgid "__max__(3) - \\[NUMERIC\\] Maximum value of an argument list"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:728
msgid "Returns the argument with the largest (most positive) value."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:732
#: ../../source/learn/intrinsics/NUMERIC_index.md:851
msgid "__a1__"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:733
#: ../../source/learn/intrinsics/NUMERIC_index.md:852
msgid "The type shall be _integer_ or _real_."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:735
msgid "__a2,a3,...__"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:736
msgid "An expression of the same type and kind as __a1__."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:740
msgid ""
"The return value corresponds to the maximum value among the arguments, "
"and has the same type and kind as the first argument."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:743
msgid ""
"The function is both elemental and allows for an arbitrary number of "
"arguments. This means if some elements are scalar and some are arrays "
"that all the arrays must be of the same size, and the returned value will"
" be an array that is the result as if multiple calls were made with all "
"scalar values with a single element of each array used in each call. If "
"called with all arrays the returned array is the same as if multiple "
"calls were made with __max(arr1(1),arr2(1), ...)__ to "
"__max(arr1(N),arr2(N))__."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:830
msgid "[__maxloc__(3)](MAXLOC), [__maxval__(3)](MAXVAL), [__min__(3)](MIN)"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:835
msgid "MIN"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:838
msgid "__min__(3) - \\[NUMERIC\\] Minimum value of an argument list"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:847
msgid "Returns the argument with the smallest (most negative) value."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:854
msgid "__a2, a3, \\`\\`\\`__"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:855
msgid "An expression of the same type and kind as __A1__."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:859
msgid ""
"The return value corresponds to the minimum value among the arguments, "
"and has the same type and kind as the first argument."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:885
msgid "[__max__(3)](MAX), [__minloc__(3)](MINLOC), [__minval__(3)](MINVAL)"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:890
msgid "MOD"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:893
msgid "__mod__(3) - \\[NUMERIC\\] Remainder function"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:902
msgid "__mod__(a,p) computes the remainder of the division of __a__ by __p__."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:907
#: ../../source/learn/intrinsics/NUMERIC_index.md:984
msgid "Shall be a scalar of type _integer_ or _real_."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:909
#: ../../source/learn/intrinsics/NUMERIC_index.md:986
#: ../../source/learn/intrinsics/TYPE_index.md:1019
msgid "__p__"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:910
msgid ""
"Shall be a scalar of the same type and kind as __a__ and not equal to "
"zero."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:915
msgid ""
"The return value is the result of __a - (int(a/p) \\* p)__. The type and "
"kind of the return value is the same as that of the arguments. The "
"returned value has the same sign as __a__ and a magnitude less than the "
"magnitude of __p__."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:964
msgid "[__modulo__(3)](MODULO)"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:967
msgid "MODULO"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:970
msgid "__modulo__(3) - \\[NUMERIC\\] Modulo function"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:979
msgid "__modulo(a,p)__ computes the __a__ modulo __p__."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:987
msgid ""
"Shall be a scalar of the same type and kind as __a__. It shall not be "
"zero."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:992
msgid "The type and kind of the result are those of the arguments."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:994
msgid ""
"If __a__ and __p__ are of type _integer_: __modulo(a,p)__ has the value "
"of  __a - floor (real(a) / real(p)) \\* p__."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:997
msgid ""
"If __a__ and __p__ are of type _real_: __modulo(a,p)__ has the value of  "
"__a - floor (a / p) \\* p__."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:1000
msgid ""
"The returned value has the same sign as __p__ and a magnitude less than "
"the magnitude of __p__."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:1035
msgid "[__mod__(3)](MOD)"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:1038
msgid "SIGN"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:1041
msgid "__sign__(3) - \\[NUMERIC\\] Sign copying function"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:1112
msgid "fortran-lang intrinsic descriptions (license: MIT)"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:1113
#: ../../source/learn/intrinsics/TRANSFORM_index.md:4
msgid "CSHIFT"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:1116
#: ../../source/learn/intrinsics/TRANSFORM_index.md:7
msgid "__cshift__(3) - \\[TRANSFORMATIONAL\\] Circular shift elements of an array"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:1125
#: ../../source/learn/intrinsics/TRANSFORM_index.md:16
msgid ""
"__cshift(array, shift \\[, dim\\])__ performs a circular shift on "
"elements of __array__ along the dimension of __dim__. If __dim__ is "
"omitted it is taken to be __1__. __dim__ is a scalar of type _integer_ in"
" the range of __1 \\<= dim \\<= n__, where \"n\" is the rank of "
"__array__. If the rank of __array__ is one, then all elements of "
"__array__ are shifted by __shift__ places. If rank is greater than one, "
"then all complete rank one sections of __array__ along the given "
"dimension are shifted. Elements shifted out one end of each rank one "
"section are shifted back in the other end."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:1147
#: ../../source/learn/intrinsics/NUMERIC_index.md:1296
#: ../../source/learn/intrinsics/TRANSFORM_index.md:38
#: ../../source/learn/intrinsics/TRANSFORM_index.md:187
msgid "Returns an array of same type and rank as the __array__ argument."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:1183
#: ../../source/learn/intrinsics/TRANSFORM_index.md:74
msgid "DOT_PRODUCT"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:1186
#: ../../source/learn/intrinsics/TRANSFORM_index.md:77
msgid "__dot\\_product__(3) - \\[TRANSFORMATIONAL\\] Dot product function"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:1195
#: ../../source/learn/intrinsics/TRANSFORM_index.md:86
msgid ""
"__dot\\_product(vector\\_a, vector\\_b)__ computes the dot product "
"multiplication of two vectors vector\\_a and vector\\_b. The two vectors "
"may be either numeric or logical and must be arrays of rank one and of "
"equal size. If the vectors are _integer_ or _real_, the result is "
"__sum(vector\\_a\\*vector\\_b)__. If the vectors are _complex_, the "
"result is __sum(conjg(vector\\_a)\\*vector\\_b)__. If the vectors are "
"_logical_, the result is __any(vector\\_a .and. vector\\_b)__."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:1205
#: ../../source/learn/intrinsics/TRANSFORM_index.md:96
msgid "__vector\\_a__"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:1206
#: ../../source/learn/intrinsics/TRANSFORM_index.md:97
msgid "The type shall be numeric or _logical_, rank 1."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:1208
#: ../../source/learn/intrinsics/TRANSFORM_index.md:99
msgid "__vector\\_b__"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:1209
#: ../../source/learn/intrinsics/TRANSFORM_index.md:100
msgid ""
"The type shall be numeric if vector\\_a is of numeric type or _logical_ "
"if vector\\_a is of type _logical_. vector\\_b shall be a rank-one array."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:1215
#: ../../source/learn/intrinsics/TRANSFORM_index.md:106
msgid ""
"If the arguments are numeric, the return value is a scalar of numeric "
"type, _integer_, _real_, or _complex_. If the arguments are _logical_, "
"the return value is .true. or .false.."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:1249
#: ../../source/learn/intrinsics/TRANSFORM_index.md:140
msgid "EOSHIFT"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:1252
#: ../../source/learn/intrinsics/TRANSFORM_index.md:143
msgid "__eoshift__(3) - \\[TRANSFORMATIONAL\\] End-off shift elements of an array"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:1261
#: ../../source/learn/intrinsics/TRANSFORM_index.md:152
msgid ""
"__eoshift(array, shift\\[, boundary, dim\\])__ performs an end-off shift "
"on elements of __array__ along the dimension of __dim__. If __dim__ is "
"omitted it is taken to be __1__. __dim__ is a scalar of type _integer_ in"
" the range of __1 \\<= DIM \\<= n__ where __\"n\"__ is the rank of "
"__array__. If the rank of __array__ is one, then all elements of "
"__array__ are shifted by __shift__ places. If rank is greater than one, "
"then all complete rank one sections of __array__ along the given "
"dimension are shifted. Elements shifted out one end of each rank one "
"section are dropped. If __boundary__ is present then the corresponding "
"value of from __boundary__ is copied back in the other end. If "
"__boundary__ is not present then the following are copied in depending on"
" the type of __array__."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:1272
#: ../../source/learn/intrinsics/TRANSFORM_index.md:163
msgid "\\*Array Type\\* - \\*Boundary Value\\*"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:1274
#: ../../source/learn/intrinsics/TRANSFORM_index.md:165
msgid "Numeric 0 of the type and kind of __array__"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:1276
#: ../../source/learn/intrinsics/TRANSFORM_index.md:167
msgid "Logical .false."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:1278
#: ../../source/learn/intrinsics/TRANSFORM_index.md:169
msgid "__Character(len)__ LEN blanks"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:1283
#: ../../source/learn/intrinsics/TRANSFORM_index.md:174
msgid "May be any type, not scalar."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:1288
#: ../../source/learn/intrinsics/TRANSFORM_index.md:179
msgid "__boundary__"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:1289
#: ../../source/learn/intrinsics/TRANSFORM_index.md:180
msgid "Same type as ARRAY."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:1332
#: ../../source/learn/intrinsics/TRANSFORM_index.md:223
msgid "MATMUL"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:1335
#: ../../source/learn/intrinsics/TRANSFORM_index.md:226
msgid "__matmul__(3) - \\[TRANSFORMATIONAL\\] matrix multiplication"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:1344
#: ../../source/learn/intrinsics/TRANSFORM_index.md:235
msgid "Performs a matrix multiplication on numeric or logical arguments."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:1348
#: ../../source/learn/intrinsics/TRANSFORM_index.md:239
msgid "__matrix\\_a__"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:1349
#: ../../source/learn/intrinsics/TRANSFORM_index.md:240
msgid ""
"An array of _integer_, _real_, _complex_, or _logical_ type, with a rank "
"of one or two."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:1352
#: ../../source/learn/intrinsics/TRANSFORM_index.md:243
msgid "__matrix\\_b__"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:1353
#: ../../source/learn/intrinsics/TRANSFORM_index.md:244
msgid ""
"An array of _integer_, _real_, or _complex_ type if __matrix\\_a__ is of "
"a numeric type; otherwise, an array of _logical_ type. The rank shall be "
"one or two, and the first (or only) dimension of __matrix\\_b__ shall be "
"equal to the last (or only) dimension of __matrix\\_a__."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:1360
#: ../../source/learn/intrinsics/TRANSFORM_index.md:251
msgid ""
"The matrix product of __matrix\\_a__ and __matrix\\_b__. The type and "
"kind of the result follow the usual type and kind promotion rules, as for"
" the \\* or .and. operators."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:1369
#: ../../source/learn/intrinsics/TRANSFORM_index.md:260
msgid "PARITY"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:1372
#: ../../source/learn/intrinsics/TRANSFORM_index.md:263
msgid "__parity__(3) - \\[TRANSFORMATIONAL\\] Reduction with exclusive __OR__()"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:1384
#: ../../source/learn/intrinsics/TRANSFORM_index.md:275
msgid "where KIND and LKIND are any supported kind for the type."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:1431
#: ../../source/learn/intrinsics/TRANSFORM_index.md:322
msgid "NULL"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:1434
#: ../../source/learn/intrinsics/TRANSFORM_index.md:325
msgid ""
"__null__(3) - \\[TRANSFORMATIONAL\\] Function that returns a "
"disassociated pointer"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:1444
#: ../../source/learn/intrinsics/TRANSFORM_index.md:335
msgid "Returns a disassociated pointer."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:1446
#: ../../source/learn/intrinsics/TRANSFORM_index.md:337
msgid ""
"If __mold__ is present, a disassociated pointer of the same type is "
"returned, otherwise the type is determined by context."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:1449
#: ../../source/learn/intrinsics/TRANSFORM_index.md:340
msgid ""
"In _Fortran 95_, __mold__ is optional. Please note that _Fortran 2003_ "
"includes cases where it is required."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:1453
#: ../../source/learn/intrinsics/STATE_index.md:112
#: ../../source/learn/intrinsics/TRANSFORM_index.md:344
#: ../../source/learn/intrinsics/TYPE_index.md:685
msgid "__mold__"
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:1454
#: ../../source/learn/intrinsics/TRANSFORM_index.md:345
msgid "(Optional) shall be a pointer of any association status and of any type."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:1459
#: ../../source/learn/intrinsics/TRANSFORM_index.md:350
msgid "A disassociated pointer or an unallocated allocatable entity."
msgstr ""

#: ../../source/learn/intrinsics/NUMERIC_index.md:1545
#: ../../source/learn/intrinsics/TRANSFORM_index.md:436
msgid "[__associated__(3)](ASSOCIATED)"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:1
#: ../../source/learn/intrinsics/index.md:139
msgid "PARALLEL_index"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:2
msgid ""
"These routines support parallel programming using co_arrays and "
"co_indexed arrays."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:4
msgid "CO_BROADCAST"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:7
msgid ""
"__co\\_broadcast__(3) - \\[COLLECTIVE\\] Copy a value to all images the "
"current set of images"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:16
msgid ""
"__co\\_broadcast(3)__ copies the value of argument __a__ on the image "
"with image index source\\_image to all images in the current team. __a__ "
"becomes defined as if by intrinsic assignment. If the execution was "
"successful and __stat__ is present, it is assigned the value zero. If the"
" execution failed, __stat__ gets assigned a nonzero value and, if "
"present, __errmsg__ gets assigned a value describing the occurred error."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:26
msgid ""
"__intent(inout)__ argument; shall have the same dynamic type and type "
"parameters on all images of the current team. If it is an array, it shall"
" have the same shape on all images."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:30
msgid "__source\\_image__"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:31
msgid ""
"a scalar integer expression. It shall have the same the same value on all"
" images and refer to an image of the current team."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:34
#: ../../source/learn/intrinsics/PARALLEL_index.md:141
#: ../../source/learn/intrinsics/PARALLEL_index.md:211
#: ../../source/learn/intrinsics/PARALLEL_index.md:294
#: ../../source/learn/intrinsics/PARALLEL_index.md:377
#: ../../source/learn/intrinsics/PARALLEL_index.md:490
#: ../../source/learn/intrinsics/PARALLEL_index.md:745
#: ../../source/learn/intrinsics/PARALLEL_index.md:810
#: ../../source/learn/intrinsics/PARALLEL_index.md:876
#: ../../source/learn/intrinsics/PARALLEL_index.md:942
#: ../../source/learn/intrinsics/PARALLEL_index.md:1004
#: ../../source/learn/intrinsics/PARALLEL_index.md:1066
#: ../../source/learn/intrinsics/PARALLEL_index.md:1125
#: ../../source/learn/intrinsics/PARALLEL_index.md:1194
#: ../../source/learn/intrinsics/PARALLEL_index.md:1257
#: ../../source/learn/intrinsics/PARALLEL_index.md:1321
#: ../../source/learn/intrinsics/PARALLEL_index.md:1384
msgid "__stat__"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:35
#: ../../source/learn/intrinsics/PARALLEL_index.md:142
#: ../../source/learn/intrinsics/PARALLEL_index.md:212
#: ../../source/learn/intrinsics/PARALLEL_index.md:295
#: ../../source/learn/intrinsics/PARALLEL_index.md:378
msgid "(optional) a scalar integer variable"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:37
#: ../../source/learn/intrinsics/PARALLEL_index.md:144
#: ../../source/learn/intrinsics/PARALLEL_index.md:214
#: ../../source/learn/intrinsics/PARALLEL_index.md:297
#: ../../source/learn/intrinsics/PARALLEL_index.md:380
msgid "__errmsg__"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:38
#: ../../source/learn/intrinsics/PARALLEL_index.md:145
#: ../../source/learn/intrinsics/PARALLEL_index.md:215
#: ../../source/learn/intrinsics/PARALLEL_index.md:298
#: ../../source/learn/intrinsics/PARALLEL_index.md:381
msgid "(optional) a scalar character variable"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:58
msgid ""
"[__co\\_max__(3)](CO_MAX), [__co\\_min__(3)](CO_MIN), "
"[__co\\_sum__(3)](CO_SUM), [__co\\_reduce__(3)](CO_REDUCE)"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:64
msgid "CO_LBOUND"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:67
msgid "__co\\_lbound__(3) - \\[COLLECTIVE\\] Lower codimension bounds of an array"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:76
msgid ""
"Returns the lower bounds of a coarray, or a single lower cobound along "
"the __dim__ codimension."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:82
#: ../../source/learn/intrinsics/PARALLEL_index.md:434
msgid "Shall be an coarray, of any type."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:93
#: ../../source/learn/intrinsics/PARALLEL_index.md:445
msgid ""
"The return value is of type _integer_ and of kind __kind__. If __kind__ "
"is absent, the return value is of default integer kind. If __dim__ is "
"absent, the result is an array of the lower cobounds of __coarray__. If "
"__dim__ is present, the result is a scalar corresponding to the lower "
"cobound of the array along that codimension."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:105
msgid "[__co\\_ubound__(3)](CO_UBOUND), [__lbound__(3)](LBOUND)"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:109
msgid "CO_MAX"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:112
msgid ""
"__co\\_max__(3) - \\[COLLECTIVE\\] Maximal value on the current set of "
"images"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:121
msgid ""
"co\\_max determines element-wise the maximal value of __a__ on all images"
" of the current team. If result\\_image is present, the maximum values "
"are returned in __a__ on the specified image only and the value of __a__ "
"on the other images become undefined. If result\\_image is not present, "
"the value is returned on all images. If the execution was successful and "
"__stat__ is present, it is assigned the value zero. If the execution "
"failed, __stat__ gets assigned a nonzero value and, if present, "
"__errmsg__ gets assigned a value describing the occurred error."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:133
#: ../../source/learn/intrinsics/PARALLEL_index.md:203
msgid ""
"shall be an integer, real or character variable, which has the same type "
"and type parameters on all images of the team."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:136
#: ../../source/learn/intrinsics/PARALLEL_index.md:206
#: ../../source/learn/intrinsics/PARALLEL_index.md:372
msgid "__result\\_image__"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:137
#: ../../source/learn/intrinsics/PARALLEL_index.md:207
#: ../../source/learn/intrinsics/PARALLEL_index.md:290
#: ../../source/learn/intrinsics/PARALLEL_index.md:373
msgid ""
"(optional) a scalar integer expression; if present, it shall have the "
"same the same value on all images and refer to an image of the current "
"team."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:169
#: ../../source/learn/intrinsics/PARALLEL_index.md:235
#: ../../source/learn/intrinsics/PARALLEL_index.md:335
#: ../../source/learn/intrinsics/PARALLEL_index.md:406
#: ../../source/learn/intrinsics/PARALLEL_index.md:514
#: ../../source/learn/intrinsics/PARALLEL_index.md:762
#: ../../source/learn/intrinsics/PARALLEL_index.md:828
#: ../../source/learn/intrinsics/PARALLEL_index.md:894
#: ../../source/learn/intrinsics/PARALLEL_index.md:960
#: ../../source/learn/intrinsics/PARALLEL_index.md:1022
#: ../../source/learn/intrinsics/PARALLEL_index.md:1084
#: ../../source/learn/intrinsics/PARALLEL_index.md:1143
#: ../../source/learn/intrinsics/PARALLEL_index.md:1212
#: ../../source/learn/intrinsics/PARALLEL_index.md:1339
msgid "TS 18508 or later"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:173
msgid ""
"[__co\\_min__(3)](CO_MIN), [__co\\_sum__(3)](CO_SUM), "
"[__co\\_reduce__(3)](CO_REDUCE), [__co\\_broadcast__(3)](CO_BROADCAST)"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:179
msgid "CO_MIN"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:182
msgid ""
"__co\\_min__(3) - \\[COLLECTIVE\\] Minimal value on the current set of "
"images"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:191
msgid ""
"co\\_min determines element-wise the minimal value of __a__ on all images"
" of the current team. If result\\_image is present, the minimal values "
"are returned in __a__ on the specified image only and the value of __a__ "
"on the other images become undefined. If result\\_image is not present, "
"the value is returned on all images. If the execution was successful and "
"__stat__ is present, it is assigned the value zero. If the execution "
"failed, __stat__ gets assigned a nonzero value and, if present, "
"__errmsg__ gets assigned a value describing the occurred error."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:239
msgid ""
"[__co\\_max__(3)](CO_MAX), [__co\\_sum__(3)](CO_SUM), "
"[__co\\_reduce__(3)](CO_REDUCE), [__co\\_broadcast__(3)](CO_BROADCAST)"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:245
msgid "CO_REDUCE"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:248
msgid ""
"__co\\_reduce__(3) - \\[COLLECTIVE\\] Reduction of values on the current "
"set of images"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:257
msgid ""
"co\\_reduce determines element-wise the reduction of the value of __a__ "
"on all images of the current team. The pure function passed as "
"__operation__ is used to pairwise reduce the values of __a__ by passing "
"either the value of __a__ of different images or the result values of "
"such a reduction as argument. If __a__ is an array, the reduction is done"
" element wise. If result\\_image is present, the result values are "
"returned in __a__ on the specified image only and the value of __a__ on "
"the other images become undefined. If result\\_image is not present, the "
"value is returned on all images. If the execution was successful and "
"__stat__ is present, it is assigned the value zero. If the execution "
"failed, __stat__ gets assigned a nonzero value and, if present, "
"__errmsg__ gets assigned a value describing the occurred error."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:273
msgid ""
"is an __intent(inout)__ argument and shall be nonpolymorphic. If it is "
"allocatable, it shall be allocated; if it is a pointer, it shall be "
"associated. __a__ shall have the same type and type parameters on all "
"images of the team; if it is an array, it shall have the same shape on "
"all images."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:279
msgid "__operation__"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:280
msgid ""
"pure function with two scalar nonallocatable arguments, which shall be "
"nonpolymorphic and have the same type and type parameters as __a__. The "
"function shall return a nonallocatable scalar of the same type and type "
"parameters as __a__. The function shall be the same on all images and "
"with regards to the arguments mathematically commutative and associative."
" Note that OPERATION may not be an elemental"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:287
msgid "__function, unless it is an intrinsic function.__ result\\_image"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:328
msgid ""
"While the rules permit in principle an intrinsic function, none of the "
"intrinsics in the standard fulfill the criteria of having a specific "
"function, which takes two arguments of the same type and returning that "
"type as a result."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:339
msgid ""
"[__co\\_min__(3)](CO_MIN), [__co\\_max__(3)](CO_MAX), "
"[__co\\_sum__(3)](CO_SUM), [__co\\_broadcast__(3)](CO_BROADCAST)"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:345
msgid "CO_SUM"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:348
msgid ""
"__co\\_sum__(3) - \\[COLLECTIVE\\] Sum of values on the current set of "
"images"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:357
msgid ""
"co\\_sum sums up the values of each element of __a__ on all images of the"
" current team. If result\\_image is present, the summed-up values are "
"returned in __a__ on the specified image only and the value of __a__ on "
"the other images become undefined. If result\\_image is not present, the "
"value is returned on all images. If the execution was successful and "
"__stat__ is present, it is assigned the value zero. If the execution "
"failed, __stat__ gets assigned a nonzero value and, if present, "
"__errmsg__ gets assigned a value describing the occurred error."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:369
msgid ""
"shall be an integer, real or complex variable, which has the same type "
"and type parameters on all images of the team."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:410
msgid ""
"[__co\\_max__(3)](CO_MAX), [__co\\_min__(3)](CO_MIN), "
"[__co\\_reduce__(3)](CO_REDUCE), [__co\\_broadcast__(3)](CO_BROADCAST)"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:416
msgid "CO_UBOUND"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:419
msgid "__co\\_ubound__(3) - \\[COLLECTIVE\\] Upper codimension bounds of an array"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:428
msgid ""
"Returns the upper cobounds of a coarray, or a single upper cobound along "
"the __dim__ codimension."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:457
msgid ""
"[__co\\_lbound__(3)](CO_LBOUND), [__lbound__(3)](LBOUND), "
"[__ubound__(3)](UBOUND)"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:462
msgid "EVENT_QUERY"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:465
msgid ""
"__event\\_query__(3) - \\[COLLECTIVE\\] Query whether a coarray event has"
" occurred"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:474
msgid ""
"__event\\_query__ assigns the number of events to __count__ which have "
"been posted to the __event__ variable and not yet been removed by calling"
" __event\\_wait__. When __stat__ is present and the invocation was "
"successful, it is assigned the value __0__. If it is present and the "
"invocation has failed, it is assigned a positive value and __count__ is "
"assigned the value __-1__."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:482
msgid "__event__"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:483
msgid ""
"(intent(in)) Scalar of type event\\_type, defined in iso\\_fortran\\_env;"
" shall not be coindexed."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:486
#: ../../source/learn/intrinsics/SYSTEM_index.md:27
#: ../../source/learn/intrinsics/SYSTEM_index.md:503
msgid "__count__"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:487
msgid ""
"(intent(out))Scalar integer with at least the precision of default "
"_integer_."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:491
msgid "(OPTIONAL) Scalar default-kind _integer_ variable."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:517
msgid "IMAGE_INDEX"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:520
msgid ""
"__image\\_index__(3) - \\[COLLECTIVE\\] Cosubscript to image index "
"conversion"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:529
msgid "Returns the image index belonging to a cosubscript."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:533
#: ../../source/learn/intrinsics/PARALLEL_index.md:655
msgid "__coarray__"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:534
msgid "Coarray of any type."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:536
msgid "__sub__"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:537
msgid "default integer rank-1 array of a size equal to the corank of __coarray__."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:542
msgid ""
"Scalar default integer with the value of the image index which "
"corresponds to the cosubscripts. For invalid cosubscripts the result is "
"zero."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:565
msgid "[__this\\_image__(3)](THIS_IMAGE), [__num\\_images__(3)](NUM_IMAGES)"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:569
msgid "NUM_IMAGES"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:572
msgid "__num\\_images__(3) - \\[COLLECTIVE\\] Number of images"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:581
msgid "Returns the number of images."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:585
#: ../../source/learn/intrinsics/PARALLEL_index.md:651
msgid "__distance__"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:586
msgid "(optional, __intent(in)__) Nonnegative scalar integer"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:588
msgid "__failed__"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:589
msgid "(optional, __intent(in)__) Scalar logical expression"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:593
msgid ""
"Scalar default-kind _integer_. If __distance__ is not present or has "
"value 0, the number of images in the current team is returned. For values"
" smaller or equal distance to the initial team, it returns the number of "
"images index on the ancestor team which has a distance of __distance__ "
"from the invoking team. If __distance__ is larger than the distance to "
"the initial team, the number of images of the initial team is returned. "
"If __failed__ is not present the total number of images is returned; if "
"it has the value .true., the number of failed images is returned, "
"otherwise, the number of images which do have not the failed status."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:626
msgid ""
"Fortran 2008 and later. With DISTANCE or FAILED argument, TS 18508 or "
"later"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:630
msgid "[__this\\_image__(3)](THIS_IMAGE), [__image\\_index__(3)](THIS_INDEX)"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:634
msgid "THIS_IMAGE"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:637
msgid "__this\\_image__(3) - \\[COLLECTIVE\\] Cosubscript index of this image"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:647
msgid "Returns the cosubscript for this image."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:652
msgid ""
"(optional, __intent(in)__) Nonnegative scalar integer (not permitted "
"together with __coarray__)."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:656
msgid "Coarray of any type (optional; if __dim__ present, required)."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:659
msgid ""
"default integer scalar (optional). If present, __dim__ shall be between "
"one and the corank of __coarray__."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:664
msgid ""
"Default integer. If __coarray__ is not present, it is scalar; if "
"__distance__ is not present or has value __0__, its value is the image "
"index on the invoking image for the current team, for values smaller or "
"equal distance to the initial team, it returns the image index on the "
"ancestor team which has a distance of __distance__ from the invoking "
"team. If __distance__ is larger than the distance to the initial team, "
"the image index of the initial team is returned. Otherwise when the "
"__coarray__ is present, if __dim__ is not present, a rank-1 array with "
"corank elements is returned, containing the cosubscripts for __coarray__ "
"specifying the invoking image. If __dim__ is present, a scalar is "
"returned, with the value of the __dim__ element of "
"__this\\_image(coarray)__."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:698
msgid ""
"! ! Check whether the current image is the initial image if "
"(this_image(huge(1)) /= this_image()) error stop \"something is rotten "
"here\""
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:727
msgid ""
"__atomic\\_and(atom, value)__ atomically defines __atom__ with the "
"bitwise __and__ between the values of __atom__ and __value__. When "
"__stat__ is present and the invocation was successful, it is assigned the"
" value 0. If it is present and the invocation has failed, it is assigned "
"a positive value; in particular, for a coindexed __atom__, if the remote "
"image has stopped, it is assigned the value of iso\\_fortran\\_env's "
"stat\\_stopped\\_image and if the remote image has failed, the value "
"stat\\_failed\\_image."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:737
#: ../../source/learn/intrinsics/PARALLEL_index.md:799
#: ../../source/learn/intrinsics/PARALLEL_index.md:865
#: ../../source/learn/intrinsics/PARALLEL_index.md:931
#: ../../source/learn/intrinsics/PARALLEL_index.md:996
#: ../../source/learn/intrinsics/PARALLEL_index.md:1058
#: ../../source/learn/intrinsics/PARALLEL_index.md:1117
#: ../../source/learn/intrinsics/PARALLEL_index.md:1179
#: ../../source/learn/intrinsics/PARALLEL_index.md:1248
#: ../../source/learn/intrinsics/PARALLEL_index.md:1310
#: ../../source/learn/intrinsics/PARALLEL_index.md:1379
msgid "__atom__"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:738
#: ../../source/learn/intrinsics/PARALLEL_index.md:800
#: ../../source/learn/intrinsics/PARALLEL_index.md:866
#: ../../source/learn/intrinsics/PARALLEL_index.md:932
#: ../../source/learn/intrinsics/PARALLEL_index.md:997
#: ../../source/learn/intrinsics/PARALLEL_index.md:1059
#: ../../source/learn/intrinsics/PARALLEL_index.md:1118
msgid ""
"Scalar coarray or coindexed variable of integer type with "
"atomic\\_int\\_kind kind."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:742
#: ../../source/learn/intrinsics/PARALLEL_index.md:804
#: ../../source/learn/intrinsics/PARALLEL_index.md:870
#: ../../source/learn/intrinsics/PARALLEL_index.md:936
#: ../../source/learn/intrinsics/PARALLEL_index.md:1001
#: ../../source/learn/intrinsics/PARALLEL_index.md:1063
#: ../../source/learn/intrinsics/PARALLEL_index.md:1122
#: ../../source/learn/intrinsics/PARALLEL_index.md:1254
#: ../../source/learn/intrinsics/PARALLEL_index.md:1315
#: ../../source/learn/intrinsics/PARALLEL_index.md:1376
msgid ""
"Scalar of the same type as __atom__. If the kind is different, the value "
"is converted to the kind of __atom__."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:746
#: ../../source/learn/intrinsics/PARALLEL_index.md:811
#: ../../source/learn/intrinsics/PARALLEL_index.md:877
#: ../../source/learn/intrinsics/PARALLEL_index.md:943
#: ../../source/learn/intrinsics/PARALLEL_index.md:1005
#: ../../source/learn/intrinsics/PARALLEL_index.md:1067
#: ../../source/learn/intrinsics/PARALLEL_index.md:1126
#: ../../source/learn/intrinsics/PARALLEL_index.md:1195
#: ../../source/learn/intrinsics/PARALLEL_index.md:1258
#: ../../source/learn/intrinsics/PARALLEL_index.md:1322
#: ../../source/learn/intrinsics/PARALLEL_index.md:1385
msgid "(optional) Scalar default-kind integer variable."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:766
msgid ""
"[__atomic\\_fetch\\_and__(3)](ATOMIC_FETCH_AND), "
"[__atomic\\_define__(3)](ATOMIC_DEFINE), "
"[__atomic\\_ref__(3)](ATOMIC_REF), [__atomic\\_cas__(3)](ATOMIC_CAS), "
"__iso\\_fortran\\_env__(3), [__atomic\\_add__(3)](ATOMIC_ADD), "
"[__atomic\\_or__(3)](ATOMIC_OR), [__atomic\\_xor__(3)](ATOMIC_XOR)"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:776
msgid "ATOMIC_FETCH_AND"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:779
msgid ""
"__atomic\\_fetch\\_and__(3) - \\[ATOMIC:BIT MANIPULATION\\] Atomic "
"bitwise AND operation with prior fetch"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:788
msgid ""
"__atomic\\_fetch\\_and(atom, value, old)__ atomically stores the value of"
" __atom__ in __old__ and defines __atom__ with the bitwise AND between "
"the values of __atom__ and __value__. When __stat__ is present and the "
"invocation was successful, it is assigned the value __0__. If it is "
"present and the invocation has failed, it is assigned a positive value; "
"in particular, for a coindexed __atom__, if the remote image has stopped,"
" it is assigned the value of iso\\_fortran\\_env's stat\\_stopped\\_image"
" and if the remote image has failed, the value stat\\_failed\\_image."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:807
#: ../../source/learn/intrinsics/PARALLEL_index.md:873
#: ../../source/learn/intrinsics/PARALLEL_index.md:939
#: ../../source/learn/intrinsics/PARALLEL_index.md:1184
#: ../../source/learn/intrinsics/PARALLEL_index.md:1318
msgid "__old__"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:808
#: ../../source/learn/intrinsics/PARALLEL_index.md:874
#: ../../source/learn/intrinsics/PARALLEL_index.md:940
#: ../../source/learn/intrinsics/PARALLEL_index.md:1185
#: ../../source/learn/intrinsics/PARALLEL_index.md:1319
msgid "Scalar of the same type and kind as __atom__."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:832
msgid ""
"[__atomic\\_define__(3)](ATOMIC_DEFINE), "
"[__atomic\\_and__(3)](ATOMIC_AND), [__iso\\_fortran\\_env__(3)](),"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:836
msgid ""
"[__atomic\\_fetch\\_add__(3)](ATOMIC_FETCH_ADD), "
"[__atomic\\_fetch\\_or__(3)](ATOMIC_FETCH_OR),"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:839
#: ../../source/learn/intrinsics/PARALLEL_index.md:905
#: ../../source/learn/intrinsics/PARALLEL_index.md:1350
msgid "[__atomic\\_fetch\\_xor__(3)](ATOMIC_FETCH_XOR)"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:842
msgid "ATOMIC_FETCH_OR"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:845
msgid ""
"__atomic\\_fetch\\_or__(3) - \\[ATOMIC:BIT MANIPULATION\\] Atomic bitwise"
" OR operation with prior fetch"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:854
msgid ""
"__atomic\\_fetch\\_or(atom, value, old)__ atomically stores the value of "
"__atom__ in __old__ and defines __atom__ with the bitwise OR between the "
"values of __atom__ and __value__. When __stat__ is present and the "
"invocation was successful, it is assigned the value __0__. If it is "
"present and the invocation has failed, it is assigned a positive value; "
"in particular, for a coindexed __atom__, if the remote image has stopped,"
" it is assigned the value of iso\\_fortran\\_env's stat\\_stopped\\_image"
" and if the remote image has failed, the value stat\\_failed\\_image."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:898
msgid ""
"[__atomic\\_define__(3)](ATOMIC_DEFINE), [__atomic\\_or__(3)](ATOMIC_OR),"
" [__iso\\_fortran\\_env__(3)](),"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:902
#: ../../source/learn/intrinsics/PARALLEL_index.md:968
msgid ""
"[__atomic\\_fetch\\_add__(3)](ATOMIC_FETCH_ADD), "
"[__atomic\\_fetch\\_and__(3)](ATOMIC_FETCH_AND),"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:908
msgid "ATOMIC_FETCH_XOR"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:911
msgid ""
"__atomic\\_fetch\\_xor__(3) - \\[ATOMIC:BIT MANIPULATION\\] Atomic "
"bitwise XOR operation with prior fetch"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:920
msgid ""
"__atomic\\_fetch\\_xor(atom, value, old)__ atomically stores the value of"
" __atom__ in __old__ and defines __atom__ with the bitwise __xor__ "
"between the values of __atom__ and __value__. When __stat__ is present "
"and the invocation was successful, it is assigned the value __0__. If it "
"is present and the invocation has failed, it is assigned a positive "
"value; in particular, for a coindexed __atom__, if the remote image has "
"stopped, it is assigned the value of iso\\_fortran\\_env's "
"stat\\_stopped\\_image and if the remote image has failed, the value "
"stat\\_failed\\_image."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:964
msgid ""
"[__atomic\\_define__(3)](ATOMIC_DEFINE), "
"[__atomic\\_xor__(3)](ATOMIC_XOR), [__iso\\_fortran\\_env__(3)](),"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:971
msgid "[__atomic\\_fetch\\_or__(3)](ATOMIC_FETCH_OR)"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:974
msgid "ATOMIC_OR"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:977
msgid ""
"__atomic\\_or__(3) - \\[ATOMIC:BIT MANIPULATION\\] Atomic bitwise OR "
"operation"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:986
msgid ""
"__atomic\\_or(atom, value)__ atomically defines __atom__ with the bitwise"
" __or__ between the values of __atom__ and __value__. When __stat__ is "
"present and the invocation was successful, it is assigned the value "
"__0__. If it is present and the invocation has failed, it is assigned a "
"positive value; in particular, for a coindexed __atom__, if the remote "
"image has stopped, it is assigned the value of iso\\_fortran\\_env's "
"stat\\_stopped\\_image and if the remote image has failed, the value "
"stat\\_failed\\_image."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:1026
msgid ""
"[__atomic\\_define__(3)](ATOMIC_DEFINE), "
"[__atomic\\_fetch\\_or__(3)](ATOMIC_FETCH),"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:1029
msgid ""
"[__iso\\_fortran\\_env__(3)](), [__atomic\\_add__(3)](ATOMIC_ADD), "
"[__atomic\\_or__(3)](ATOMIC_OR),"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:1033
msgid "[__atomic\\_xor__(3)](ATOMIC_XOR)"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:1036
msgid "ATOMIC_XOR"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:1039
msgid ""
"__atomic\\_xor__(3) - \\[ATOMIC:BIT MANIPULATION\\] Atomic bitwise OR "
"operation"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:1048
msgid ""
"__atomic\\_xor(atom, value)__ atomically defines __atom__ with the "
"bitwise __xor__ between the values of __atom__ and __value__. When "
"__stat__ is present and the invocation was successful, it is assigned the"
" value __0__. If it is present and the invocation has failed, it is "
"assigned a positive value; in particular, for a coindexed __atom__, if "
"the remote image has stopped, it is assigned the value of "
"iso\\_fortran\\_env's stat\\_stopped\\_image and if the remote image has "
"failed, the value stat\\_failed\\_image."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:1088
msgid ""
"[__atomic\\_define__(3)](ATOMIC_DEFINE), "
"[__atomic\\_fetch\\_xor__(3)](ATOMIC_FETCH), "
"[__iso\\_fortran\\_env__(3)](), [__atomic\\_add__(3)](ATOMIC_ADD), "
"[__atomic\\_or__(3)](ATOMIC_OR), [__atomic\\_xor__(3)](ATOMIC_XOR)"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:1096
msgid "ATOMIC_ADD"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:1099
msgid "__atomic\\_add__(3) - \\[ATOMIC\\] Atomic ADD operation"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:1107
msgid ""
"__atomic\\_ad(atom, value)__ atomically adds the value of VAR to the "
"variable __atom__. When __stat__ is present and the invocation was "
"successful, it is assigned the value 0. If it is present and the "
"invocation has failed, it is assigned a positive value; in particular, "
"for a coindexed ATOM, if the remote image has stopped, it is assigned the"
" value of iso\\_fortran\\_env's stat\\_stopped\\_image and if the remote "
"image has failed, the value stat\\_failed\\_image."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:1147
msgid ""
"[__atomic\\_define__(3)](ATOMIC_DEFINE), "
"[__atomic\\_fetch\\_add__(3)](ATOMIC_FETCH), "
"[__atomic\\_and__(3)](ATOMIC_AND), [__atomic\\_or__(3)](ATOMIC_OR), "
"[__atomic\\_xor__(3)](ATOMIC_XOR) __iso\\_fortran\\_env__(3),"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:1155
msgid "ATOMIC_CAS"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:1158
msgid "__atomic\\_cas__(3) - \\[ATOMIC\\] Atomic compare and swap"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:1167
msgid ""
"atomic\\_cas compares the variable __atom__ with the value of "
"__compare__; if the value is the same, __atom__ is set to the value of "
"__new__. Additionally, __old__ is set to the value of __atom__ that was "
"used for the comparison. When __stat__ is present and the invocation was "
"successful, it is assigned the value 0. If it is present and the "
"invocation has failed, it is assigned a positive value; in particular, "
"for a coindexed __atom__, if the remote image has stopped, it is assigned"
" the value of iso\\_fortran\\_env's stat\\_stopped\\_image and if the "
"remote image has failed, the value stat\\_failed\\_image."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:1180
#: ../../source/learn/intrinsics/PARALLEL_index.md:1249
#: ../../source/learn/intrinsics/PARALLEL_index.md:1380
msgid ""
"Scalar coarray or coindexed variable of either integer type with "
"atomic\\_int\\_kind kind or logical type with atomic\\_logical\\_kind "
"kind."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:1187
msgid "__compare__"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:1188
msgid "Scalar variable of the same type and kind as __atom__."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:1190
msgid "__new__"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:1191
msgid ""
"Scalar variable of the same type as __atom__. If kind is different, the "
"value is converted to the kind of __atom__."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:1216
msgid ""
"[__atomic\\_define__(3)](ATOMIC_DEFINE), "
"[__atomic\\_ref__(3)](ATOMIC_REF), [__iso\\_fortran\\_env__(3)]()"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:1221
msgid "ATOMIC_DEFINE"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:1224
msgid "__atomic\\_define__(3) - \\[ATOMIC\\] Setting a variable atomically"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:1238
msgid ""
"__atomic\\_define(atom, value)__ defines the variable __atom__ with the "
"value __value__ atomically. When __stat__ is present and the invocation "
"was successful, it is assigned the value __0__. If it is present and the "
"invocation has failed, it is assigned a positive value; in particular, "
"for a coindexed __atom__, if the remote image has stopped, it is assigned"
" the value of iso\\_fortran\\_env's stat\\_stopped\\_image and if the "
"remote image has failed, the value stat\\_failed\\_image."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:1274
msgid "Fortran 2008 and later; with __stat__, TS 18508 or later"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:1278
msgid ""
"[__atomic\\_ref__(3)](ATOMIC_REF), [__atomic\\_cas__(3)](ATOMIC_CAS), "
"__iso\\_fortran\\_env__(3), [__atomic\\_add__(3)](ATOMIC_ADD), "
"[__atomic\\_and__(3)](ATOMIC_AND), [__atomic\\_or__(3)](ATOMIC_OR), "
"[__atomic\\_xor__(3)](ATOMIC_XOR)"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:1287
msgid "ATOMIC_FETCH_ADD"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:1290
msgid ""
"__atomic\\_fetch\\_add__(3) - \\[ATOMIC\\] Atomic ADD operation with "
"prior fetch"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:1299
msgid ""
"__atomic\\_fetch\\_add(atom, value, old)__ atomically stores the value of"
" __atom__ in __old__ and adds the value of __var__ to the variable "
"__atom__. When __stat__ is present and the invocation was successful, it "
"is assigned the value __0__. If it is present and the invocation has "
"failed, it is assigned a positive value; in particular, for a coindexed "
"__atom__, if the remote image has stopped, it is assigned the value of "
"iso\\_fortran\\_env's stat\\_stopped\\_image and if the remote image has "
"failed, the value stat\\_failed\\_image."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:1311
msgid ""
"Scalar coarray or coindexed variable of integer type with "
"atomic\\_int\\_kind kind. atomic\\_logical\\_kind kind."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:1343
msgid ""
"[__atomic\\_define__(3)](ATOMIC_DEFINE), "
"[__atomic\\_add__(3)](ATOMIC_ADD), __iso\\_fortran\\_env__(3),"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:1347
msgid ""
"[__atomic\\_fetch\\_and__(3)](ATOMIC_FETCH_AND), "
"[__atomic\\_fetch\\_or__(3)](ATOMIC_FETCH_OR),"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:1353
msgid "ATOMIC_REF"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:1356
msgid ""
"__atomic\\_ref__(3) - \\[ATOMIC\\] Obtaining the value of a variable "
"atomically"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:1365
msgid ""
"__atomic\\_ref(value, atom)__ atomically assigns the value of the "
"variable __atom__ to __value__. When __stat__ is present and the "
"invocation was successful, it is assigned the value __0__. If it is "
"present and the invocation has failed, it is assigned a positive value; "
"in particular, for a coindexed __atom__, if the remote image has stopped,"
" it is assigned the value of iso\\_fortran\\_env's "
"__stat\\_stopped\\_image__ and if the remote image has failed, the value "
"__stat\\_failed\\_image__."
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:1408
msgid "Fortran 2008 and later; with STAT, TS 18508 or later"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:1412
msgid ""
"[__atomic\\_define__(3)](ATOMIC_DEFINE), "
"[__atomic\\_cas__(3)](ATOMIC_CAS), [__iso\\_fortran\\_env__(3)](),"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:1416
msgid ""
"[__atomic\\_fetch\\_add__(3)](ATOMIC_ADD), "
"[__atomic\\_fetch\\_and__(3)](ATOMIC_AND),"
msgstr ""

#: ../../source/learn/intrinsics/PARALLEL_index.md:1419
msgid ""
"[__atomic\\_fetch\\_or__(3)](ATOMIC_OR), "
"[__atomic\\_fetch\\_xor__(3)](ATOMIC_XOR)"
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:1
#: ../../source/learn/intrinsics/index.md:139
msgid "STATE_index"
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:2
msgid "General and miscellaneous intrinsics"
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:4
msgid "ASSOCIATED"
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:7
msgid "__associated__(3) - \\[STATE\\] Status of a pointer or pointer/target pair"
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:16
msgid ""
"__associated(pointer \\[, target\\])__ determines the status of the "
"pointer __pointer__ or if __pointer__ is associated with the target "
"__target__."
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:21
msgid "__pointer__"
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:22
msgid "__pointer__ shall have the _pointer_ attribute and it can be of any type."
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:24
msgid "__target__"
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:25
msgid ""
"(Optional) __target__ shall be a pointer or a target. It must have the "
"same type, kind type parameter, and array rank as __pointer__."
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:28
msgid ""
"The association status of neither __pointer__ nor __target__ shall be "
"undefined."
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:32
msgid ""
"__associated(pointer)__ returns a scalar value of type _logical_. There "
"are several cases:"
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:35
msgid ""
"When the optional __target__ is not present then __associated(pointer)__ "
"is true if __pointer__ is associated with a target; otherwise, it returns"
" false."
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:39
msgid ""
"If __target__ is present and a scalar target, the result is true if "
"__target__ is not a zero-sized storage sequence and the target associated"
" with __pointer__ occupies the same storage units. If __pointer__ is "
"disassociated, the result is false."
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:44
msgid ""
"If __target__ is present and an array target, the result is true if "
"__target__ and __pointer__ have the same shape, are not zero-sized "
"arrays, are arrays whose elements are not zero-sized storage sequences, "
"and __target__ and __pointer__ occupy the same storage units in array "
"element order."
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:50
msgid "As in case 2, the result is false, if __pointer__ is disassociated."
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:52
msgid ""
"If __target__ is present and an scalar pointer, the result is true if "
"__target__ is associated with __pointer__, the target associated with "
"__target__ are not zero-sized storage sequences and occupy the same "
"storage units."
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:57
msgid ""
"The result is __.false.__, if either __target__ or __pointer__ is "
"disassociated."
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:59
msgid ""
"If __target__ is present and an array pointer, the result is true if "
"target associated with __pointer__ and the target associated with "
"__target__ have the same shape, are not zero-sized arrays, are arrays "
"whose elements are not zero-sized storage sequences, and __target__ and "
"__pointer__ occupy the same storage units in array element order. The "
"result is false, if either __target__ or __pointer__ is disassociated."
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:88
msgid "[__null__(3)](NULL)"
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:91
msgid "EXTENDS_TYPE_OF"
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:94
msgid ""
"__extends\\_type\\_of__(3) - \\[STATE\\] determine if the dynamic type of"
" __a__ is an extension of the dynamic type of __mold__."
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:103
msgid ""
"__extends\\_type\\_of__(3) is __.true.__ if and only if the dynamic type "
"of __a__ is an extension of the dynamic type of __mold__."
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:109
#: ../../source/learn/intrinsics/STATE_index.md:113
msgid ""
"shall be an object of extensible type. If it is a pointer, it shall not "
"have an undefined association status."
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:119
msgid "Default logical scalar."
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:122
msgid ""
"If __mold__ is unlimited polymorphic and is either a disassociated "
"pointer or unallocated allocatable variable, the result is true; "
"otherwise if __a__ is unlimited polymorphic and is either a disassociated"
" pointer or unallocated allocatable variable, the result is false; "
"otherwise the result is true if and only if the dynamic type of __a__ is "
"an extension type of the dynamic type of __mold__."
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:129
msgid ""
"The dynamic type of a disassociated pointer or unallocated allocatable "
"variable is its declared type."
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:135
msgid "IS_IOSTAT_END"
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:138
msgid "__is\\_iostat\\_end__(3) - \\[STATE\\] Test for end-of-file value"
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:150
msgid ""
"is\\_iostat\\_end(3) tests whether a variable (assumed returned as a "
"status from an I/O statement) has the \"end of file\" I/O status value."
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:153
msgid ""
"The function is equivalent to comparing the variable with the "
"__iostat\\_end__ parameter of the intrinsic module "
"__iso\\_fortran\\_env__."
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:159
msgid "An _integer_ status value to test if indicating end of file."
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:163
msgid ""
"Returns a _logical_ of the default kind, __.true.__ if __i__ has the "
"value which indicates an end of file condition for __iostat=__ "
"specifiers, and is __.false.__ otherwise."
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:197
msgid "IS_IOSTAT_EOR"
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:200
msgid "__is\\_iostat\\_eor__(3) - \\[STATE\\] Test for end-of-record value"
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:209
msgid ""
"is\\_iostat\\_eor tests whether an variable has the value of the I/O "
"status \"end of record\". The function is equivalent to comparing the "
"variable with the iostat\\_eor parameter of the intrinsic module "
"__iso\\_fortran\\_env__."
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:217
msgid "Shall be of the type _integer_."
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:221
msgid ""
"Returns a _logical_ of the default kind, which .true. if __i__ has the "
"value which indicates an end of file condition for iostat= specifiers, "
"and is .false. otherwise."
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:247
msgid "MOVE_ALLOC"
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:250
msgid "__move\\_alloc__(3) - \\[\\] Move allocation from one object to another"
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:259
msgid ""
"__move\\_alloc(src, dest)__ moves the allocation from SRC to DEST. SRC "
"will become deallocated in the process."
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:264
msgid "__src__"
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:265
msgid "allocatable, __intent(inout)__, may be of any type and kind."
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:267
msgid "__dest__"
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:268
msgid ""
"allocatable, __intent(out)__, shall be of the same type, kind and rank as"
" SRC."
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:273
msgid "Basic Sample program to allocate a bigger grid"
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:315
msgid "[__allocated__(3)](ALLOCATED)"
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:318
msgid "PRESENT"
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:321
msgid ""
"__present__(3) - [STATE\\] Determine whether an optional dummy argument"
"                  is specified"
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:333
msgid "Determines whether an optional dummy argument is present."
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:338
msgid ""
"May be of any type and may be a pointer, scalar or array value, or a "
"dummy procedure. It shall be the name of an optional dummy argument "
"accessible within the current subroutine or function."
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:344
msgid ""
"Returns either __.true.__ if the optional argument __a__ is present, or "
"__.false.__ otherwise."
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:378
msgid "SAME_TYPE_AS"
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:381
msgid "__same\\_type\\_as__(3) - \\[STATE\\] Query dynamic types for equality"
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:390
msgid "Query dynamic types for equality."
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:395
#: ../../source/learn/intrinsics/STATE_index.md:399
msgid "Shall be an object of extensible declared type or unlimited polymorphic."
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:398
msgid "__b__"
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:404
msgid ""
"The return value is a scalar of type default logical. It is true if and "
"only if the dynamic type of __a__ is the same as the dynamic type of "
"__b__."
msgstr ""

#: ../../source/learn/intrinsics/STATE_index.md:413
msgid "[__extends\\_type\\_of__(3)](EXTENDS_TYPE_OF)"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:1
#: ../../source/learn/intrinsics/index.md:139
msgid "SYSTEM_index"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:2
msgid "accessing external system information"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:4
msgid "COMMAND_ARGUMENT_COUNT"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:7
msgid ""
"__command\\_argument\\_count__(3) - \\[SYSTEM:COMMAND LINE\\] Get number "
"of command line arguments"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:18
msgid ""
"__command\\_argument\\_count()__ returns the number of arguments passed"
"    on the command line when the containing program was invoked."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:23
msgid "None"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:28
msgid ""
"The return value is of type default _integer_. It is the number of "
"arguments passed on the command line when the program was invoked."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:44
msgid "Sample output:"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:62
msgid ""
"[__get\\_command__(3)](GET_COMMAND), "
"[__get\\_command\\_argument__(3)](GET_COMMAND_ARGUMENT)"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:66
msgid "GET_COMMAND"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:69
msgid ""
"__get\\_command__(3) - \\[SYSTEM:COMMAND LINE\\] Get the entire command "
"line"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:82
msgid "Retrieve the entire command line that was used to invoke the program."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:84
msgid ""
"Note that what is typed on the command line is often processed by a "
"shell. The shell typically processes special characters and white space "
"before passing it to the program. The processing can typically be turned "
"off by turning off globbing or quoting the command line arguments and/or "
"changing the default field separators, but this should rarely be "
"necessary."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:93
#: ../../source/learn/intrinsics/SYSTEM_index.md:605
msgid "__command__"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:94
msgid ""
"Shall be of type _character_ and of default kind. If __command__ is "
"present, stores the entire command line that was used to invoke the "
"program in __command__."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:98
#: ../../source/learn/intrinsics/SYSTEM_index.md:709
msgid "__length__"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:99
msgid ""
"Shall be of type _integer_ and of default kind. If __length__ is present,"
" it is assigned the length of the command line."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:102
#: ../../source/learn/intrinsics/SYSTEM_index.md:715
msgid "__status__"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:103
msgid ""
"Shall be of type _integer_ and of default kind. If __status__ is present,"
" it is assigned 0 upon success of the command, __-1__ if __command__ is "
"too short to store the command line, or a positive value in case of an "
"error."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:147
msgid ""
"[__get\\_command\\_argument__(3)](GET_COMMAND_ARGUMENT), "
"[__command\\_argument\\_count__(3)](COMMAND_ARGUMENT_COUNT)"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:151
msgid "GET_COMMAND_ARGUMENT"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:154
msgid ""
"__get\\_command\\_argument__(3) - \\[SYSTEM:COMMAND LINE\\] Get command "
"line arguments"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:168
msgid ""
"Retrieve the __number__-th argument that was passed on the command line "
"when the containing program was invoked."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:171
msgid ""
"There is not anything specifically stated about what an argument is but "
"in practice the arguments are split on whitespace unless the arguments "
"are quoted and IFS values (Internal Field Separators) used by common "
"shells are ignored."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:178
msgid "__number__"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:179
msgid ""
"Shall be a scalar of type __integer__, __number \\>= 0__. If __number = "
"0__, __value__ is set to the name of the program (on systems that support"
" this feature)."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:185
msgid ""
"__value__ :Shall be a scalar of type _character_ and of default kind. "
"After get\\_command\\_argument returns, the __value__ argument holds the "
"__number__-th command line argument. If __value__ can not hold the "
"argument, it is truncated to fit the length of __value__. If there are "
"less than __number__ arguments specified at the command line, __value__ "
"will be filled with blanks."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:193
msgid ""
"__length__ :(Optional) Shall be a scalar of type _integer_. The "
"__length__ argument contains the length of the __number__-th command line"
" argument."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:197
msgid ""
"__status__ :(Optional) Shall be a scalar of type _integer_. If the "
"argument retrieval fails, __status__ is a positive number; if __value__ "
"contains a truncated command line argument, __status__ is __-1__; and "
"otherwise the __status__ is zero."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:274
msgid ""
"[__get\\_command__(3)](GET_COMMAND), "
"[__command\\_argument\\_count__(3)](COMMAND_ARGUMENT_COUNT)"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:278
msgid "CPU_TIME"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:281
msgid "__cpu\\_time__(3) - \\[SYSTEM:TIME\\] return CPU processor time in seconds"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:290
msgid ""
"Returns a _real_ value representing the elapsed CPU time in seconds. This"
" is useful for testing segments of code to determine execution time."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:293
msgid ""
"The exact definition of time is left imprecise because of the variability"
" in what different processors are able to provide."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:296
msgid "If no time source is available, TIME is set to a negative value."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:298
msgid ""
"Note that TIME may contain a system dependent, arbitrary offset and may "
"not start with 0.0. For cpu\\_time the absolute value is meaningless. "
"Only differences between subsequent calls, as shown in the example below,"
" should be used."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:303
msgid ""
"A processor for which a single result is inadequate (for example, a "
"parallel processor) might choose to provide an additional version for "
"which time is an array."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:309
msgid "__TIME__"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:310
msgid ""
"The type shall be _real_ with __intent(out)__. It is assigned a "
"processor-dependent approximation to the processor time in seconds. If "
"the processor cannot return a meaningful time, a processor-dependent "
"negative value"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:315
msgid ""
"__is returned.__ The start time is left imprecise because the purpose is "
"to time sections of code, as in the example. This might or might not "
"include system overhead time."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:347
msgid ""
"[__system\\_clock__(3)](SYSTEM_CLOCK), "
"[__date\\_and\\_time__(3)](DATE_AND_TIME)"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:351
msgid "DATE_AND_TIME"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:354
msgid "__date\\_and\\_time__(3) - \\[SYSTEM:TIME\\] gets current time"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:367
msgid ""
"__date\\_and\\_time(date, time, zone, values)__ gets the corresponding "
"date and time information from the real-time system clock."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:370
msgid "Unavailable time and date _character_ parameters return blanks."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:374
msgid "__date__"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:375
msgid ""
"A character string of default kind of the form CCYYMMDD, of length 8 or "
"larger."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:377
msgid "__time__"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:378
msgid ""
"A character string of default kind of the form HHMMSS.SSS, of length 10 "
"or larger."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:380
msgid "__zone__"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:381
msgid ""
"A character string of default kind of the form (+-)HHMM, of length 5 or "
"larger, representing the difference with respect to Coordinated Universal"
" Time (UTC)."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:384
msgid "__values__"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:385
msgid "An _integer_ array of eight elements that contains:"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:387
msgid "__values__(1)"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:388
msgid ": The year"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:389
msgid "__values__(2)"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:390
msgid ": The month"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:391
msgid "__values__(3)"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:392
msgid ": The day of the month"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:393
msgid "__values__(4)"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:394
msgid ": Time difference with UTC in minutes"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:395
msgid "__values__(5)"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:396
msgid ": The hour of the day"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:397
msgid "__values__(6)"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:398
msgid ": The minutes of the hour"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:399
msgid "__values__(7)"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:400
msgid ": The seconds of the minute"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:401
msgid "__values__(8)"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:402
msgid ": The milliseconds of the second"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:452
msgid "[__cpu\\_time__(3)](CPU_TIME), [__system\\_clock__(3)](SYSTEM_CLOCK)"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:456
msgid "date and time conversion, formatting and computation"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:458
msgid "[M_time](https://github.com/urbanjost/M_time)"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:459
msgid "[datetime](https://github.com/wavebitscientific/datetime-fortran)"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:460
msgid "[datetime-fortran](https://github.com/wavebitscientific/datetime-fortran)"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:463
msgid "SYSTEM_CLOCK"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:466
msgid ""
"__system\\_clock__(3) - \\[SYSTEM:TIME\\] Return numeric data from a "
"real-time clock."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:481
msgid ""
"__system\\_clock__ lets you measure durations of time with the precision "
"of the smallest time increment generally available on a system by "
"returning processor-dependent values based on the current value of the "
"processor clock. The __clock__ value is incremented by one for each clock"
" count until the value __count\\_max__ is reached and is then reset to "
"zero at the next count. __clock__ therefore is a modulo value that lies "
"in the range __0 to count\\_max__. __count\\_rate__ and __count\\_max__ "
"are assumed constant (even though CPU rates can vary on a single "
"platform)."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:490
msgid ""
"__count\\_rate__ is system dependent and can vary depending on the kind "
"of the arguments."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:493
msgid ""
"If there is no clock, or querying the clock fails, __count__ is set to "
"__-huge(count)__, and __count\\_rate__ and __count\\_max__ are set to "
"zero."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:496
msgid ""
"__system\\_clock__ is typically used to measure short time intervals "
"(system clocks may be 24-hour clocks or measure processor clock ticks "
"since boot, for example). It is most often used for measuring or tracking"
" the time spent in code blocks in lieu of using profiling tools."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:504
msgid ""
"(optional) shall be an _integer_ scalar. It is assigned a processor-"
"dependent value based on the current value of the processor clock, or "
"__-huge(count)__ if there is no clock. The processor-dependent value is "
"incremented by one for each clock count until the value __count\\_max__ "
"is reached and is reset to zero at the next count. It lies in the range "
"__0__ to __count\\_max__ if there is a clock."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:512
msgid "__count\\_rate__"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:513
msgid ""
"(optional) shall be an _integer_ or _real_ scalar. It is assigned a "
"processor-dependent approximation to the number of processor clock counts"
" per second, or zero if there is no clock."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:517
msgid "__count\\_max__"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:518
msgid ""
"(optional) shall be an _integer_ scalar. It is assigned the maximum value"
" that __COUNT__ can have, or zero if there is no clock."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:543
msgid ""
"If the processor clock is a 24-hour clock that registers time at "
"approximately 18.20648193 ticks per second, at 11:30 A.M. the reference"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:548
msgid "defines"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:561
msgid "[__date\\_and\\_time__(3)](DATE_AND_TIME), [__cpu\\_time__(3)](CPU_TIME)"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:565
msgid "EXECUTE_COMMAND_LINE"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:568
msgid ""
"__execute\\_command\\_line__(3) - \\[SYSTEM:PROCESSES\\] Execute a shell "
"command"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:583
msgid ""
"The __command__ argument is passed to the shell and executed. (The shell "
"is generally __sh__(1) on Unix systems, and cmd.exe on Windows.) If "
"__wait__ is present and has the value __.false.__, the execution of the "
"command is asynchronous if the system supports it; otherwise, the command"
" is executed synchronously."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:589
msgid ""
"The three last arguments allow the user to get status information. After "
"synchronous execution, __exitstat__ contains the integer exit code of the"
" command, as returned by __system__. __cmdstat__ is set to zero if the "
"command line was executed (whatever its exit status was). __cmdmsg__ is "
"assigned an error message if an error has occurred."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:595
msgid ""
"Note that the system call need not be thread-safe. It is the "
"responsibility of the user to ensure that the system is not called "
"concurrently if required."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:599
msgid ""
"When the command is executed synchronously, __execute\\_command\\_line__ "
"returns after the command line has completed execution. Otherwise, "
"__execute\\_command\\_line__ returns without waiting."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:606
msgid ""
"a default _character_ scalar containing the command line to be executed. "
"The interpretation is programming-environment dependent."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:609
msgid "__wait__"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:610
msgid ""
"(Optional) a default _logical_ scalar. If __wait__ is present with the "
"value .false., and the processor supports asynchronous execution of the "
"command, the command is executed asynchronously; otherwise it is executed"
" synchronously."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:615
msgid "__exitstat__"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:616
msgid ""
"(Optional) an _integer_ of the default kind with __intent(inout)__. If "
"the command is executed synchronously, it is assigned the value of the "
"processor-dependent exit status. Otherwise, the value of __exitstat__ is "
"unchanged."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:621
msgid "__cmdstat__"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:622
msgid ""
"(Optional) an _integer_ of default kind with __intent(inout)__. If an "
"error condition occurs and __cmdstat__ is not present, error termination "
"of execution of the image is initiated."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:626
msgid ""
"It is assigned the value __-1__ if the processor does not support command"
" line execution, a processor-dependent positive value if an error "
"condition occurs, or the value __-2__ if no error condition occurs but "
"__wait__ is present with the value false and the processor does not "
"support asynchronous execution. Otherwise it is assigned the value 0."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:633
msgid "__cmdmsg__"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:634
msgid ""
"(Optional) a _character_ scalar of the default kind. It is an __intent "
"(inout)__ argument.If an error condition occurs, it is assigned a "
"processor-dependent explanatory message.Otherwise, it is unchanged."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:657
msgid ""
"Because this intrinsic is making a system call, it is very system "
"dependent. Its behavior with respect to signaling is processor dependent."
" In particular, on POSIX-compliant systems, the SIGINT and SIGQUIT "
"signals will be ignored, and the SIGCHLD will be blocked. As such, if the"
" parent process is terminated, the child process might not be terminated "
"alongside."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:669
msgid "GET_ENVIRONMENT_VARIABLE"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:672
msgid ""
"__get\\_environment\\_variable__(3) - \\[SYSTEM:ENVIRONMENT\\] Get an "
"environmental variable"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:686
msgid "Get the __value__ of the environmental variable __name__."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:688
msgid ""
"Note that __get\\_environment\\_variable__(3) need not be thread-safe. It"
" is the responsibility of the user to ensure that the environment is not "
"being updated concurrently."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:694
#: ../../source/learn/intrinsics/TYPE_index.md:902
msgid "__name__"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:695
msgid "The name of the environment variable to query."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:697
msgid "Shall be a scalar of type _character_ and of default kind."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:702
msgid "The value of the environment variable being queried."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:704
msgid ""
"Shall be a scalar of type _character_ and of default kind. The value of "
"__name__ is stored in __value__. If __value__ is not large enough to hold"
" the data, it is truncated. If __name__ is not set, __value__ will be "
"filled with blanks."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:710
msgid ""
"Argument __length__ contains the length needed for storing the "
"environment variable __name__ or zero if it is not present."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:713
#: ../../source/learn/intrinsics/SYSTEM_index.md:721
msgid "Shall be a scalar of type _integer_ and of default kind."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:716
msgid ""
"__status__ is __-1__ if __value__ is present but too short for the "
"environment variable; it is __1__ if the environment variable does not "
"exist and __2__ if the processor does not support environment variables; "
"in all other cases __status__ is zero."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:723
msgid "__trim\\_name__"
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:724
msgid ""
"If __trim\\_name__ is present with the value __.false.__, the trailing "
"blanks in __name__ are significant; otherwise they are not part of the "
"environment variable name."
msgstr ""

#: ../../source/learn/intrinsics/SYSTEM_index.md:728
msgid "Shall be a scalar of type _logical_ and of default kind."
msgstr ""

#: ../../source/learn/intrinsics/TRANSFORM_index.md:1
#: ../../source/learn/intrinsics/index.md:139
msgid "TRANSFORM_index"
msgstr ""

#: ../../source/learn/intrinsics/TRANSFORM_index.md:2
#: ../../source/learn/intrinsics/index.md:22
msgid "Matrix multiplication, Dot product, array shifts,"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:1
#: ../../source/learn/intrinsics/index.md:139
msgid "TYPE_index"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:2
msgid "Types and kinds"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:4
msgid ""
"These intrinsics allow for explicitly casting one type of variable to "
"another or can be used to conditionally execute code blocks based on "
"variable types when working with polymorphic variables."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:8
msgid "Fortran Data Types"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:10
msgid "Fortran provides five basic intrinsic data types:"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:12
msgid "Integer type"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:13
msgid "The integer types can hold only whole number values."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:14
msgid "Real type"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:15
msgid "Stores floating point numbers, such as 2.0, 3.1415, -100.876, etc."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:16
msgid "Complex type"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:17
msgid ""
"A complex number has two parts, the real part and the imaginary part. Two"
" consecutive floating point storage units store the two parts."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:20
msgid "Logical type"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:21
msgid "There are only two logical values: .true. and .false."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:22
msgid "Character type"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:23
msgid ""
"The character type stores strings. The length of the string can be "
"specified by the __len__ specifier. If no length is specified, it is 1."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:26
msgid ""
"These \"types\" can be of many \"kinds\". Often different numeric kinds "
"take up different storage sizes and therefore can represent different "
"ranges; but a different kind can have other meanings. A _character_ "
"variable might represent ASCII characters or UTF-8 or Unicode characters,"
" for example."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:32
msgid "You can derive your own data types from these fundamental types as well."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:34
msgid "Implicit Typing"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:36
msgid ""
"Fortran allows a feature called implicit typing, i.e., you do not have to"
" declare some variables before use. By default if a variable is not "
"declared, then the first letter of its name will determine its type:"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:40
msgid ""
"Variable names starting with __i-n__ (the first two letters of "
"\"integer\") specify _integer_ variables."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:43
msgid "All other variable names default to _real_."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:46
msgid ""
"However, in most circles it is considered good programming practice to "
"declare all the variables. For that to be enforced, you start your "
"variable declaration section with  a statement that turns off implicit "
"typing: the statement"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:53
msgid "For more information refer to the __implicit__ statement."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:57
msgid "AIMAG"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:60
msgid "__aimag__(3) - \\[TYPE:NUMERIC\\] Imaginary part of complex number"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:73
msgid "__aimag(z)__ yields the imaginary part of complex argument __z__."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:78
msgid "The type of the argument shall be _complex_."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:82
msgid ""
"The return value is of type _real_ with the kind type parameter of the "
"argument."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:120
msgid "CMPLX"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:123
msgid "__cmplx__(3) - \\[TYPE:NUMERIC\\] Complex conversion function"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:137
msgid ""
"To convert numeric variables to complex, use the __cmplx__(3) function. "
"Constants can be used to define a complex variable using the syntax"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:144
msgid ""
"but this will not work for variables. You must use the __cmplx__(3) "
"function."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:146
msgid ""
"__cmplx(x \\[, y \\[, kind\\]\\])__ returns a complex number where __x__ "
"is converted to the _real_ component. If __x__ is _complex_ then __y__ "
"must not be present. If __y__ is present it is converted to the imaginary"
" component. If __y__ is not present then the imaginary component is set "
"to __0.0__."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:151
msgid "__cmplx(3) and double precision__"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:153
msgid ""
"The Fortran 90 language defines __cmplx__(3) as always returning a result"
" that is type __complex(kind=KIND(0.0))__."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:156
msgid ""
"This means \\`__cmplx(d1,d2)__', where __\\`d1'__ and __\\`d2'__ are "
"_doubleprecision_, is treated as: fortran"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:163
msgid "_doubleprecision complex_ numbers require specifying a precision."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:165
msgid ""
"It was necessary for Fortran 90 to specify this behavior for "
"_doubleprecision_ arguments, since that is the behavior mandated by "
"FORTRAN 77."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:169
msgid ""
"So Fortran 90 extends the __cmplx__(3) intrinsic by adding an extra "
"argument used to specify the desired kind of complex result."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:193
msgid ""
"F2018 COMPONENT SYNTAX The real and imaginary parts of a complex entity "
"can be accessed independently with a component-like syntax in f2018:"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:196
msgid "A complex-part-designator is"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:198
msgid "``fortran       designator % RE       or       designator % IM."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:221
msgid "__x__ The type may be _integer_, _real_, or _complex_."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:224
msgid ""
"__y__ (Optional; only allowed if __x__ is not _complex_.). May be "
"_integer_ or _real_."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:228
msgid ""
"__kind__ (Optional) An _integer_ initialization expression indicating the"
" kind parameter of the result."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:234
msgid ""
"The return value is of _complex_ type, with a kind equal to __kind__ if "
"it is specified. If __kind__ is not specified, the result is of the "
"default _complex_ kind, regardless of the kinds of __x__ and __y__."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:271
msgid "[__aimag__(3)](AIMAG) - Imaginary part of complex number"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:273
msgid "[__cmplx__(3)](CMPLX) - Complex conversion function"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:275
msgid "[__conjg__(3)](CONJG) - Complex conjugate function"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:277
msgid "[__real__(3)](REAL) - Convert to real type"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:284
msgid "INT"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:286
msgid ""
"__int__(3) - \\[TYPE:NUMERIC\\] Convert to integer type by truncating "
"towards zero"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:298
msgid "Convert to integer type by truncating towards zero."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:303
msgid ""
"Shall be of type _integer_, _real_, or _complex_ or a BOZ-literal-"
"constant."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:309
msgid "If not present the returned type is that of default integer type."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:313
msgid "returns an _integer_ variable or array applying the following rules:"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:315
msgid "__Case__:"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:317
msgid "If __a__ is of type _integer_, __int__(a) = a"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:319
msgid ""
"If __a__ is of type _real_ and __|a| \\< 1, int(a)__ equals __0__. If "
"__|a| \\>= 1__, then __int(a)__ equals the integer whose magnitude does "
"not exceed __a__ and whose sign is the same as the sign of __a__."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:323
msgid ""
"If __a__ is of type _complex_, rule 2 is applied to the _real_ part of "
"__a__."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:325
msgid ""
"If _a_ is a boz-literal constant, it is treated as an _integer_ with the "
"_kind_ specified."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:328
msgid ""
"The interpretation of a bit sequence whose most significant bit is __1__ "
"is processor dependent."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:400
msgid ""
"[__aint__(3)](AINT), [__anint__(3)](ANINT), [__nint__(3)](NINT), "
"[__selected_int_kind__(3)](SELECTED_INT_KIND), [__ceiling__(3)](CEILING),"
" [__floor__(3)](FLOOR)"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:408
msgid "NINT"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:411
msgid "__nint__(3) - \\[TYPE:NUMERIC\\] Nearest whole number"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:421
msgid ""
"__nint(x)__ rounds its argument to the nearest whole number with its sign"
" preserved."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:424
msgid ""
"The user must ensure the value is a valid value for the range of the "
"__kind__ returned. If the processor cannot represent the result in the "
"kind specified, the result is undefined."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:428
msgid "If __x__ is greater than zero, __nint(x)__ has the value __int(x+0.5)__."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:430
msgid ""
"If __x__ is less than or equal to zero, __nint(x)__ has the value "
"__int(a-0.5)__."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:436
msgid "The type of the argument shall be _real_."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:439
msgid ""
"(Optional) A constant _integer_ expression indicating the kind parameter "
"of the result. Otherwise, the kind type parameter is that of default "
"_integer_ type."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:445
msgid "__answer__"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:446
msgid ""
"The result is the integer nearest __x__, or if there are two integers "
"equally near __x__, the result is whichever such _integer_ has the "
"greater magnitude."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:518
msgid "FORTRAN 77 and later, with KIND argument - Fortran 90 and later"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:522
msgid ""
"[__aint__(3)](AINT), [__anint__(3)](ANINT), [__int__(3)](INT), "
"[__selected_int_kind__(3)](SELECTED_INT_KIND), [__ceiling__(3)](CEILING),"
" [__floor__(3)](FLOOR)"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:530
msgid "REAL"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:532
msgid "__real__(3) - \\[TYPE:NUMERIC\\] Convert to real type"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:541
msgid "__real(x, kind)__ converts its argument __x__ to a real type."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:546
msgid "Shall be _integer_, _real_, or _complex_."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:554
msgid ""
"These functions return a _real_ variable or array under the following "
"rules:"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:557
msgid ""
"__real__(x) is converted to a default _real_ type if __x__ is an "
"_integer_ or _real_ variable."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:560
msgid ""
"__real__(x) is converted to a real type with the kind type parameter of "
"__x__ if __x__ is a _complex_ variable."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:563
msgid ""
"__real(x, kind)__ is converted to a _real_ type with kind type parameter "
"__kind__ if __x__ is a _complex_, _integer_, or _real_ variable."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:599
msgid "[__dble__(3)](DBLE), [__float__(3)](FLOAT)"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:603
msgid "DBLE"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:606
msgid "__dble__(3) - \\[TYPE:NUMERIC\\] Double conversion function"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:617
msgid ""
"where TYPE may be _integer_, _real_, or _complex_ and KIND any kind "
"supported by the TYPE."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:621
msgid "__dble(a)__ Converts __a__ to double precision _real_ type."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:626
msgid "The type shall be _integer_, _real_, or _complex_."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:630
msgid ""
"The return value is of type _doubleprecision_. For _complex_ input, the "
"returned value has the magnitude and sign of the real component of the "
"input value."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:657
msgid "[__float__(3)](FLOAT), [__real__(3)](REAL)"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:661
msgid "TRANSFER"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:664
msgid "__transfer__(3) - \\[TYPE:MOLD\\] Transfer bit patterns"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:673
msgid ""
"Interprets the bitwise representation of __source__ in memory as if it is"
" the representation of a variable or array of the same type and type "
"parameters as __mold__."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:677
msgid ""
"This is approximately equivalent to the C concept of \\*casting\\* one "
"type to another."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:683
#: ../../source/learn/intrinsics/TYPE_index.md:686
msgid "Shall be a scalar or an array of any type."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:689
msgid "(Optional) shall be a scalar of type _integer_."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:693
msgid ""
"The result has the same type as __mold__, with the bit level "
"representation of __source__. If __size__ is present, the result is a "
"one-dimensional array of length __size__. If __size__ is absent but "
"__mold__ is an array (of any size or shape), the result is a one-"
"dimensional array of the minimum length needed to contain the entirety of"
" the bitwise representation of __source__. If __size__ is absent and "
"__mold__ is a scalar, the result is a scalar."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:700
msgid ""
"If the bitwise representation of the result is longer than that of "
"__source__, then the leading bits of the result correspond to those of "
"__source__ and any trailing bits are filled arbitrarily."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:704
msgid ""
"When the resulting bit representation does not correspond to a valid "
"representation of a variable of the same type as __mold__, the results "
"are undefined, and subsequent operations on the result cannot be "
"guaranteed to produce sensible behavior. For example, it is possible to "
"create _logical_ variables for which __var__ and .not. var both appear to"
" be true."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:739
msgid "__Comments__"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:741
msgid "_Joe Krahn_: Fortran uses __molding__ rather than __casting__."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:743
msgid ""
"Casting, as in C, is an in-place reinterpretation. A cast is a device "
"that is built around an object to change its shape."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:746
msgid ""
"Fortran TRANSFER reinterprets data out-of-place. It can be considered "
"__molding__ rather than casting. A __mold__ is a device that confers a "
"shape onto an object placed into it."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:750
msgid ""
"The advantage of molding is that data is always valid in the context of "
"the variable that holds it. For many cases, a decent compiler should "
"optimize TRANSFER into a simple assignment."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:754
msgid ""
"There are disadvantages of this approach. It is problematic to define a "
"union of data types because you must know the largest data object, which "
"can vary by compiler or compile options. In many cases, an EQUIVALENCE "
"would be far more effective, but Fortran Standards committees seem "
"oblivious to the benefits of EQUIVALENCEs when used sparingly."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:762
msgid "Fortran 90 and later"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:765
msgid "LOGICAL"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:768
msgid ""
"__logical__(3) - \\[TYPE:LOGICAL\\] Converts one kind of _logical_ "
"variable to another"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:781
msgid "Converts one kind of _logical_ variable to another."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:786
msgid "__l__"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:795
msgid ""
"The return value is a _logical_ value equal to __l__, with a kind "
"corresponding to __kind__, or of the default logical kind if __kind__ is "
"not given."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:824
msgid "Fortran 95 and later, related ISO_FORTRAN_ENV module - fortran 2009"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:828
msgid "[__int__(3)](INT), [__real__(3)](REAL), [__cmplx__(3)](CMPLX)"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:833
msgid "KIND"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:836
msgid "__kind__(3) - \\[KIND INQUIRY\\] Kind of an entity"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:845
msgid "__kind(x)__ returns the kind value of the entity __x__."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:850
msgid "Shall be of type _logical_, _integer_, _real_, _complex_ or _character_."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:882
msgid "SELECTED_CHAR_KIND"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:885
msgid ""
"__selected\\_char\\_kind__(3) - \\[KIND\\] Choose character kind such as "
"\"Unicode\""
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:894
msgid ""
"__selected\\_char\\_kind(name)__ returns the kind value for the character"
" set named NAME, if a character set with such a name is supported, or "
"__-1__ otherwise. Currently, supported character sets include \"ASCII\" "
"and \"DEFAULT\" (iwhich are equivalent), and \"ISO\\_10646\" (Universal "
"Character Set, UCS-4) which is commonly known as \"Unicode\"."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:903
msgid "Shall be a scalar and of the default character type."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:940
msgid "SELECTED_INT_KIND"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:943
msgid "__selected\\_int\\_kind__(3) - \\[KIND\\] Choose integer kind"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:952
msgid ""
"__selected\\_int\\_kind(r)__ return the kind value of the smallest "
"integer type that can represent all values ranging from __-10\\*\\*r__ "
"(exclusive) to __10\\*\\*r__ (exclusive). If there is no integer kind "
"that accommodates this range, selected\\_int\\_kind returns __-1__."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:959
#: ../../source/learn/intrinsics/TYPE_index.md:1022
msgid "__r__"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:960
msgid "Shall be a scalar and of type _integer_."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:993
msgid ""
"[__aint__(3)](AINT), [__anint__(3)](ANINT), [__int__(3)](INT), "
"[__nint__(3)](NINT), [__ceiling__(3)](CEILING), [__floor__(3)](FLOOR)"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:1001
msgid "SELECTED_REAL_KIND"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:1004
msgid "__selected\\_real\\_kind__(3) - \\[KIND\\] Choose real kind"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:1013
msgid ""
"__selected\\_real\\_kind(p, r, radix)__ return the kind value of a real "
"data type with decimal precision of at least __p__ digits, exponent range"
" of at least __r__, and with a radix of __radix__."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:1020
#: ../../source/learn/intrinsics/TYPE_index.md:1023
#: ../../source/learn/intrinsics/TYPE_index.md:1026
msgid "(Optional) shall be a scalar and of type _integer_."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:1025
msgid "__radix__"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:1028
msgid ""
"Before __Fortran 2008__, at least one of the arguments __r__ or __p__ "
"shall be present; since __Fortran 2008__, they are assumed to be zero if "
"absent."
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:1034
msgid ""
"selected\\_real\\_kind returns the value of the kind type parameter of a "
"real data type with decimal precision of at least __p__ digits, a decimal"
" exponent range of at least R, and with the requested __radix__. If the "
"__radix__ parameter is absent, real kinds with any radix can be returned."
" If more than one real data type meet the criteria, the kind of the data "
"type with the smallest decimal precision is returned. If no real data "
"type matches the criteria, the result is"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:1042
msgid ""
"__-1__ if the processor does not support a real data type with a "
"precision greater than or equal to __p__, but the __r__ and __radix__ "
"requirements can be fulfilled"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:1046
msgid ""
"__-2__ if the processor does not support a real type with an exponent "
"range greater than or equal to __r__, but __p__ and __radix__ are "
"fulfillable"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:1050
msgid "__-3__ if __radix__ but not __p__ and __r__ requirements are fulfillable"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:1052
msgid "__-4__ if __radix__ and either __p__ or __r__ requirements are fulfillable"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:1054
msgid "__-5__ if there is no real type with the given __radix__"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:1083
msgid "Fortran 95 and later; with RADIX - Fortran 2008 and later"
msgstr ""

#: ../../source/learn/intrinsics/TYPE_index.md:1087
msgid ""
"[__precision__(3)](PRECISION), [__range__(3)](RANGE), "
"[__radix__(3)](RADIX)"
msgstr ""

#: ../../source/learn/intrinsics/index.md:7
msgid "Fortran Intrinsics"
msgstr ""

#: ../../source/learn/intrinsics/index.md:9
msgid ""
"This is a collection of extended descriptions of the Fortran intrinsics "
"based on the reference document \"[Current F2018 Working Document as of "
"April "
"2018](http://isotc.iso.org/livelink/livelink?func=ll&objId=19442438&objAction=Open)\"."
" Vendor-specific extensions are not included."
msgstr ""

#: ../../source/learn/intrinsics/index.md:14
msgid "&#9755;[Array Operations](ARRAY_index)"
msgstr ""

#: ../../source/learn/intrinsics/index.md:16
msgid "&#9755;[Mathematics](MATH_index)"
msgstr ""

#: ../../source/learn/intrinsics/index.md:18
msgid "&#9755;[Type and Kind](TYPE_index)"
msgstr ""

#: ../../source/learn/intrinsics/index.md:19
msgid "&#9755;[Numeric](NUMERIC_index)"
msgstr ""

#: ../../source/learn/intrinsics/index.md:21
msgid "&#9755;[Transformational](TRANSFORM_index)"
msgstr ""

#: ../../source/learn/intrinsics/index.md:23
msgid "&#9755;[General State](STATE_index)"
msgstr ""

#: ../../source/learn/intrinsics/index.md:24
msgid "General and miscellaneous intrinsics on state of variables and I/O"
msgstr ""

#: ../../source/learn/intrinsics/index.md:25
msgid "&#9755;[Character](CHARACTER_index)"
msgstr ""

#: ../../source/learn/intrinsics/index.md:27
msgid "&#9755;[System Environment](SYSTEM_index)"
msgstr ""

#: ../../source/learn/intrinsics/index.md:28
msgid ""
"accessing external system information such as environmental variables, "
"command line arguments, date and timing data ..."
msgstr ""

#: ../../source/learn/intrinsics/index.md:29
msgid "&#9755;[C Interface](C_index)"
msgstr ""

#: ../../source/learn/intrinsics/index.md:31
msgid "&#9755;[Bit-level](BIT_index)"
msgstr ""

#: ../../source/learn/intrinsics/index.md:32
msgid "bit-level manipulation and inquiry of values0"
msgstr ""

#: ../../source/learn/intrinsics/index.md:33
msgid "&#9755;[Parallel Programming](PARALLEL_index)"
msgstr ""

#: ../../source/learn/intrinsics/index.md:34
msgid "Parallel programming using co-arrays and co-indexing"
msgstr ""

#: ../../source/learn/intrinsics/index.md:35
msgid "&#9755;[Numeric Model](MODEL_index)"
msgstr ""

#: ../../source/learn/intrinsics/index.md:36
msgid "numeric compiler-specific numeric model information"
msgstr ""

#: ../../source/learn/intrinsics/index.md:37
msgid "&#9755;[Compiler Information](COMPILER_index)"
msgstr ""

#: ../../source/learn/intrinsics/index.md:38
msgid "information about compiler version and compiler options used for building"
msgstr ""

#: ../../source/learn/intrinsics/index.md:40
msgid "Overview"
msgstr ""

#: ../../source/learn/intrinsics/index.md:41
msgid ""
"The standard documents and most vendor-supplied descriptions of the "
"intrinsics are often very brief and concise to the point of the "
"functionality of the intrinsics being obscure, particularly to someone "
"unfamiliar with  the procedure."
msgstr ""

#: ../../source/learn/intrinsics/index.md:46
msgid "By describing the procedures here"
msgstr ""

#: ../../source/learn/intrinsics/index.md:47
msgid "in greater detail"
msgstr ""

#: ../../source/learn/intrinsics/index.md:48
msgid "with a working example"
msgstr ""

#: ../../source/learn/intrinsics/index.md:49
msgid ""
"providing links to additional resources (including additional documents "
"at fortran-lang.org and related discussions in Fortran Discourse)"
msgstr ""

#: ../../source/learn/intrinsics/index.md:53
msgid "these documents strive to be a valuable asset for Fortran programmers."
msgstr ""

#: ../../source/learn/intrinsics/index.md:55
msgid ""
"This is a community-driven resource and everyone is encouraged to "
"contribute  to the documents. For contribution guidelines see "
"[MINIBOOKS](https://github.com/fortran-lang/fortran-"
"lang.org/blob/master/MINIBOOKS.md) and the following Copyright "
"guidelines."
msgstr ""

#: ../../source/learn/intrinsics/index.md:60
msgid "See Also"
msgstr ""

#: ../../source/learn/intrinsics/index.md:61
msgid "The [Fortran stdlib](https://stdlib.fortran-lang.org/) project"
msgstr ""

#: ../../source/learn/intrinsics/index.md:62
msgid ""
"[fpm(1)](https://fortran-lang.org/packages/fpm) packages, many of which "
"are general-purpose libraries/modules"
msgstr ""

#: ../../source/learn/intrinsics/index.md:64
msgid "Experimental"
msgstr ""

#: ../../source/learn/intrinsics/index.md:66
msgid ""
"[review by procedure "
"](http://www.urbanjost.altervista.org/SUPPLEMENTS/slidy_byprocedure.html)"
msgstr ""

#: ../../source/learn/intrinsics/index.md:68
msgid ""
"[review by header "
"](http://www.urbanjost.altervista.org/SUPPLEMENTS/slidy_byheader.html)"
msgstr ""

#: ../../source/learn/intrinsics/index.md:70
msgid ""
"[fman(1)](http://www.urbanjost.altervista.org/SUPPLEMENTS/fman.f90) A "
"self-contained Fortran program that lets you view the non-graphical plain"
" ASCII portions of the documentation from a terminal interface. Compile "
"the program and enter \"./fman --help\" for directions."
msgstr ""

#: ../../source/learn/intrinsics/index.md:75
msgid ""
"[man pages](http://www.urbanjost.altervista.org/SUPPLEMENTS/fortran.tgz) "
"A gzipped tar(1) file containing early versions of man-pages derived from"
" the markdown documents."
msgstr ""

#: ../../source/learn/intrinsics/index.md:78
msgid ""
"Typical installation on a Linux platform as an administrator ( but it "
"varies) :"
msgstr ""

#: ../../source/learn/intrinsics/index.md:110
msgid "Text Content Copyrights"
msgstr ""

#: ../../source/learn/intrinsics/index.md:112
msgid ""
"Many of the documents presented here are modified versions of man-pages "
"from the [Fortran Wiki](https://fortranwiki.org) and as such are "
"available under the terms of the GNU Free Documentation License "
"[__GFDL__](GNU_Free_Documentation_License.md) with no invariant sections,"
" front-cover texts, or back-cover texts."
msgstr ""

#: ../../source/learn/intrinsics/index.md:118
msgid ""
"If you contribute to this site by modifying the files marked as GFDL, you"
" thereby agree to license the contributed material to the public under "
"the GFDL (version 1.2 or any later version published by the Free Software"
" Foundation, with no invariant sections, front-cover texts, or back-cover"
" texts)."
msgstr ""

#: ../../source/learn/intrinsics/index.md:124
msgid ""
"If you contribute new material you thereby agree to release it under the "
"MIT license, and should indicate this by placing MIT on the specially-"
"formatted last line. For example, change"
msgstr ""

#: ../../source/learn/intrinsics/index.md:130
msgid "to"
msgstr ""

#: ../../source/learn/intrinsics/index.md:135
msgid ""
"Written in [Markdown](https://github.com/adam-p/markdown-here/wiki"
"/Markdown-Cheatsheet) "
"[kramdown](https://kramdown.gettalong.org/syntax.html)"
msgstr ""

#: ../../source/learn/os_setup/choose_compiler.md:8
msgid "Choosing a compiler"
msgstr ""

#: ../../source/learn/os_setup/choose_compiler.md:10
msgid ""
"A comprehensive list of available compilers is provided "
"[here]({{site.baseurl}}/compilers). In this guide, we will focus only on "
"those that are free to install and use."
msgstr ""

#: ../../source/learn/os_setup/choose_compiler.md:12
msgid ""
"Of those listed at the link above, open source and free are GFortran "
"(with OpenCoarrays), Flang, and LFortran. NVIDIA and Intel offer their "
"compilers for free and as of the latest update of this tutorial, "
"NVFortran (NVIDIA) is available only for Linux systems, while Intel "
"oneAPI is available for Linux, Windows and macOS systems. Both are well "
"documented and readers can find detailed information about installing and"
" using them on their websites respectively."
msgstr ""

#: ../../source/learn/os_setup/choose_compiler.md:14
msgid ""
"In the next chapter, we use GFortran for the tutorial as it is a mature "
"open source compiler. We encourage users to also try other open source "
"and commercial compilers."
msgstr ""

#: ../../source/learn/os_setup/ides.md:8
msgid "IDEs"
msgstr ""

#: ../../source/learn/os_setup/ides.md:10
msgid ""
"An IDE (Integrated Development Environment) refers to a complete software"
" development environment, where, all those packages that come as external"
" plug-ins in Text-Editors, are already integrated within the software. An"
" IDE is usually optimized towards a specific set of languages. For "
"example it is very common for IDEs to advertise themselves towards either"
" compiled or interpreted languages, or even towards a single language, or"
" depending on the application developed, like scientific or web "
"development.  IDEs are recommended for beginner programmers, since it is "
"possible to start coding with minimum effort after installation. However,"
" it is quite common, in professional environments, individual developers "
"and teams alike, to choose an IDE for large projects because of some "
"unique features that they may offer over a Text-Editor."
msgstr ""

#: ../../source/learn/os_setup/ides.md:13
msgid ""
"A list of popular IDEs that provide good Fortran support is provided in "
"alphabetical order:"
msgstr ""

#: ../../source/learn/os_setup/ides.md:14
msgid ""
"[AbsoftTools](https://www.absoft.com/technology/absofttools-fortran-"
"ide/): commercial product, cross-platform, comes with Absoft's own "
"Fortran compiler."
msgstr ""

#: ../../source/learn/os_setup/ides.md:15
msgid ""
"[Code::Blocks](http://www.codeblocks.org/): free product, cross-platform "
"and supports multiple compilers. Plenty of tutorials online on how to "
"install it and add a Fortran Compiler. As well as a recent presentation, "
"[here](https://www.youtube.com/watch?v=M1RwVGGSAgE&ab_channel=FortranCon),"
" of its capabilities and future prospects at the International Fortran "
"Conference 2020 by its main developer."
msgstr ""

#: ../../source/learn/os_setup/ides.md:16
msgid ""
"[Eclipse-Photran](https://marketplace.eclipse.org/content/photran-"
"fortran-ide-eclipse) *Photran is an IDE and refactoring tool for Fortran "
"based on Eclipse and the C/C++ Development Tools*. A free product, cross-"
"platform and supports multiple compilers."
msgstr ""

#: ../../source/learn/os_setup/ides.md:17
msgid ""
"[Geany](https://www.geany.org/): a free product, cross platform and "
"supports multiple compilers."
msgstr ""

#: ../../source/learn/os_setup/ides.md:18
msgid ""
"[NAG Fortran Builder](https://www.nag.com/content/nag-fortran-builder-0) "
"is a commercial product, available in Windows and MacOS and supports "
"NAG's own Fortran Compiler."
msgstr ""

#: ../../source/learn/os_setup/ides.md:19
msgid ""
"[Plato](https://www.silverfrost.com/16/ftn95/plato.aspx) is a commercial "
"product, cross-platform, comes with Silverfrost's Fortran FTN95 own "
"Fortran compiler."
msgstr ""

#: ../../source/learn/os_setup/ides.md:20
msgid ""
"[SimplyFortran](https://simplyfortran.com/) is a commercial product, "
"cross-platform with support of the GNU Fortran compiler."
msgstr ""

#: ../../source/learn/os_setup/ides.md:21
msgid ""
"[Visual Studio](https://visualstudio.microsoft.com/) its *Community "
"Edition 2019* is a free product, available in Windows and macOS and "
"supports only Intel's Fortran compiler, now bundled with many other free-"
"to-use HPC tools under *Intel oneAPI*."
msgstr ""

#: ../../source/learn/os_setup/index.md:32
msgid "choose compiler"
msgstr ""

#: ../../source/learn/os_setup/index.md:32
msgid "text editors"
msgstr ""

#: ../../source/learn/os_setup/index.md:32
msgid "ides"
msgstr ""

#: ../../source/learn/os_setup/index.md:32
msgid "install gfortran"
msgstr ""

#: ../../source/learn/os_setup/index.md:32
msgid "tips"
msgstr ""

#: ../../source/learn/os_setup/index.md:7
msgid "<br/><br/>"
msgstr ""

#: ../../source/learn/os_setup/index.md:12
msgid ""
"<span style=\"color:grey; font-size:0.8em\">*Authors: Stavros Meskos, "
"Laurence Kedward, Arjen Markus, Ondřej Čertík, Milan Curcic*</span>"
msgstr ""

#: ../../source/learn/os_setup/index.md:14
msgid ""
"<span style=\"color:grey; font-size:0.8em\">*Last update: "
"16-Feb-2021*</span>"
msgstr ""

#: ../../source/learn/os_setup/index.md:18
msgid "Setting up your OS"
msgstr ""

#: ../../source/learn/os_setup/index.md:20
msgid ""
"In this mini-book we address the very first problem that many new Fortran"
" programmers encounter. Before everything, you will need to choose a "
"compiler and install it. Then you will need a text editor or perhaps an "
"IDE (Integrated Development Environment). There are many options, most of"
" them available in all major OSs (operating systems). However, the "
"process to install and configure them greatly differs between Windows, "
"Linux, and macOS. There are several Fortran compilers. Here, we pick "
"those that meet certain criteria and provide a guide on how to install "
"them in all the aforementioned OSs. A list of popular text editors and "
"IDEs and information on how to choose between them is presented as well."
msgstr ""

#: ../../source/learn/os_setup/index.md:22
#, python-format
msgid ""
"{% capture redirect_note %} If you have already set up your environment, "
"you may skip this tutorial and move forward with the [Quickstart Fortran "
"Tutorial]({{site.baseurl}}/learn/quickstart) to start coding your first "
"`Hello World` program or with the [Building "
"programs]({{site.baseurl}}/learn/building_programs) mini-book to "
"understand how a compiler works. {% endcapture %}"
msgstr ""

#: ../../source/learn/os_setup/index.md:26
#, python-format
msgid "{% include note.html content=redirect_note %}"
msgstr ""

#: ../../source/learn/os_setup/index.md:30
msgid ""
"*The choice of text editors and IDEs has been controversial among the "
"developers. What you choose is a matter of personal taste. Every solution"
" comes with its own pros and cons. For that reason, in this guide, we "
"will not push the reader towards one or another direction. We will, "
"however, present a list of the most popular tools.*"
msgstr ""

#: ../../source/learn/os_setup/install_gfortran.md:8
msgid "Installing GFortran"
msgstr ""

#: ../../source/learn/os_setup/install_gfortran.md:10
msgid ""
"GFortran is the name of the [GNU Fortran "
"project](https://gcc.gnu.org/fortran/). The main "
"[wiki](https://gcc.gnu.org/wiki/GFortran) page offers many helpful links "
"about GFortran, as well as Fortran in general. In this guide, the "
"installation process for GFortran on Windows, Linux, macOS and OpenBSD is"
" presented in a beginner-friendly format based on the information from "
"[GFortranBinaries](https://gcc.gnu.org/wiki/GFortranBinaries)."
msgstr ""

#: ../../source/learn/os_setup/install_gfortran.md:12
msgid "Windows"
msgstr ""

#: ../../source/learn/os_setup/install_gfortran.md:15
msgid ""
"Three sources provide quick and easy way to install GFortran compiler on "
"Windows:"
msgstr ""

#: ../../source/learn/os_setup/install_gfortran.md:16
msgid ""
"[http://www.equation.com](http://www.equation.com/servlet/equation.cmd?fa=fortran),"
" provides 32 and 64-bit x86 executables of the latest (10.2) gcc-version."
msgstr ""

#: ../../source/learn/os_setup/install_gfortran.md:18
msgid ""
"[TDM GCC](https://jmeubank.github.io/tdm-"
"gcc/articles/2020-03/9.2.0-release), provides 32 and 64-bit x86 "
"executables of the 9.2 gcc-version."
msgstr ""

#: ../../source/learn/os_setup/install_gfortran.md:19
msgid ""
"[MinGW-w64](http://mingw-w64.org/doku.php/download/mingw-builds) provides"
" a 64-bit x86 executable of the 8.1.0 gcc-version."
msgstr ""

#: ../../source/learn/os_setup/install_gfortran.md:21
msgid ""
"In all the above choices, the process is straightforward—just download "
"the installer and follow the installation wizard."
msgstr ""

#: ../../source/learn/os_setup/install_gfortran.md:23
msgid "Unix-like development on Windows"
msgstr ""

#: ../../source/learn/os_setup/install_gfortran.md:24
msgid ""
"For those familiar with a unix-like development environment, several "
"emulation options are available on Windows each of which provide packages"
" for gfortran:"
msgstr ""

#: ../../source/learn/os_setup/install_gfortran.md:26
msgid ""
"__Cygwin:__ A runtime environment that provides POSIX compatibility to "
"Windows;"
msgstr ""

#: ../../source/learn/os_setup/install_gfortran.md:27
msgid ""
"__MSYS2:__ A collection of Unix-like development tools, based on modern "
"Cygwin and MinGW-w64;"
msgstr ""

#: ../../source/learn/os_setup/install_gfortran.md:28
msgid ""
"__Windows Subsystem for Linux (WSL):__ An official compatibility layer "
"for running Linux binary executables on Windows. With [Windows Subsystem "
"for Linux GUI](https://github.com/microsoft/wslg) one can run text "
"editors and other graphical programs."
msgstr ""

#: ../../source/learn/os_setup/install_gfortran.md:30
msgid ""
"All of the above approaches provide access to common shells such as bash "
"and development tools including GNU coreutils, Make, CMake, autotools, "
"git, grep, sed, awk, ssh, etc."
msgstr ""

#: ../../source/learn/os_setup/install_gfortran.md:32
msgid ""
"We recommend the WSL environment for those looking for a Unix-like "
"development environment on Windows."
msgstr ""

#: ../../source/learn/os_setup/install_gfortran.md:34
msgid "Linux"
msgstr ""

#: ../../source/learn/os_setup/install_gfortran.md:37
msgid "Debian-based (Debian, Ubuntu, Mint, etc...)"
msgstr ""

#: ../../source/learn/os_setup/install_gfortran.md:38
msgid "Check whether you have gfortran already installed"
msgstr ""

#: ../../source/learn/os_setup/install_gfortran.md:42
msgid ""
"If nothing is returned then gfortran is not installed. To install "
"gfortran type:"
msgstr ""

#: ../../source/learn/os_setup/install_gfortran.md:47
msgid "to check what version was installed type:"
msgstr ""

#: ../../source/learn/os_setup/install_gfortran.md:51
msgid ""
"You can install multiple versions up to version 9 by typing the version "
"number immediately after \"gfortran\", e.g.:"
msgstr ""

#: ../../source/learn/os_setup/install_gfortran.md:55
msgid ""
"To install the latest version 10 you need first to add / update the "
"following repository and then install:"
msgstr ""

#: ../../source/learn/os_setup/install_gfortran.md:61
#, python-format
msgid ""
"Finally, you can switch between different versions or set the default one"
" with the **update-alternatives** ([see "
"manpage](https://manpages.ubuntu.com/manpages/trusty/man8/update-"
"alternatives.8.html#:~:text=update%2Dalternatives%20creates%2C%20removes%2C,system%20at%20the%20same%20time.))."
" There are many online tutorials on how to use this feature. A well "
"structured one using as an example C and C++ can be found "
"[here](https://linuxconfig.org/how-to-switch-between-multiple-gcc-and-g"
"-compiler-versions-on-ubuntu-20-04-lts-focal-fossa), you can apply the "
"same logic by replacing either `gcc` or `g++` with `gfortran`."
msgstr ""

#: ../../source/learn/os_setup/install_gfortran.md:63
msgid "RPM-based (Red Hat Linux, CentOS, Fedora, openSuse, Mandrake Linux)"
msgstr ""

#: ../../source/learn/os_setup/install_gfortran.md:68
msgid "Since Fedora 22, `dnf` is the default package manager for Fedora:"
msgstr ""

#: ../../source/learn/os_setup/install_gfortran.md:73
msgid "Arch-based (Arch Linux, Antergos, Manjaro, etc...)"
msgstr ""

#: ../../source/learn/os_setup/install_gfortran.md:78
msgid "macOS"
msgstr ""

#: ../../source/learn/os_setup/install_gfortran.md:79
msgid "Xcode"
msgstr ""

#: ../../source/learn/os_setup/install_gfortran.md:80
msgid "If you have Xcode installed, open a terminal window and type:"
msgstr ""

#: ../../source/learn/os_setup/install_gfortran.md:84
msgid "Binaries"
msgstr ""

#: ../../source/learn/os_setup/install_gfortran.md:85
msgid ""
"Go to [fxcoudert/gfortran-for-macOS](https://github.com/fxcoudert"
"/gfortran-for-macOS/releases) to directly install binaries."
msgstr ""

#: ../../source/learn/os_setup/install_gfortran.md:86
msgid "Homebrew"
msgstr ""

#: ../../source/learn/os_setup/install_gfortran.md:90
msgid "Fink"
msgstr ""

#: ../../source/learn/os_setup/install_gfortran.md:91
msgid ""
"GNU-gcc Package "
"[link](https://pdb.finkproject.org/pdb/browse.php?summary=GNU+Compiler+Collection+Version)"
msgstr ""

#: ../../source/learn/os_setup/install_gfortran.md:92
msgid "MacPorts"
msgstr ""

#: ../../source/learn/os_setup/install_gfortran.md:93
msgid "Search for available gcc versions:"
msgstr ""

#: ../../source/learn/os_setup/install_gfortran.md:97
msgid "Install a gcc version:"
msgstr ""

#: ../../source/learn/os_setup/install_gfortran.md:102
msgid "OpenBSD"
msgstr ""

#: ../../source/learn/os_setup/install_gfortran.md:107
msgid ""
"On OpenBSD, the GFortran executable is named `egfortran`. To test it, "
"type:"
msgstr ""

#: ../../source/learn/os_setup/install_gfortran.md:113
msgid "OpenCoarrays"
msgstr ""

#: ../../source/learn/os_setup/install_gfortran.md:115
msgid ""
"[OpenCoarrays](http://www.opencoarrays.org/) is an open-source software "
"project that produces an application binary interface (ABI) used by the "
"GNU Compiler Collection (GCC) Fortran front-end to build executable "
"programs that leverage the parallel programming features of Fortran 2018."
" Since OpenCoarrays is not a separate compiler, we include it here, under"
" gfortran."
msgstr ""

#: ../../source/learn/os_setup/install_gfortran.md:117
msgid ""
"While with gfortran you can compile perfectly valid code using coarrays, "
"the generated binaries will only run in a single image (_image_ is a "
"Fortran term for a parallel process), that is, in serial mode. "
"OpenCoarrays allows running code in parallel on shared- and distributed-"
"memory machines, similar to MPI:"
msgstr ""

#: ../../source/learn/os_setup/install_gfortran.md:122
msgid ""
"The process of installation is provided in a clear and comprehensive "
"manner on the official site."
msgstr ""

#: ../../source/learn/os_setup/install_gfortran.md:124
msgid ""
"We emphasize that native installation on Windows is not possible. It is "
"only possible through WSL."
msgstr ""

#: ../../source/learn/os_setup/text_editors.md:8
msgid "Text Editors"
msgstr ""

#: ../../source/learn/os_setup/text_editors.md:10
msgid ""
"After you have installed your compiler, you will need a text editor to "
"write your code. Any text editor can serve this purpose, even the built-"
"in Notepad on Windows. However, there are specialized editors for "
"programming languages. These editors come with many useful features like "
"auto-complete, syntax-highlighting, auto-indentation, brace-matching, and"
" many more, with few of them pre-installed and the majority in form of "
"external plug-ins. This means that by default these features are not "
"installed in the editor, but it's up to you to search for them through a "
"package manager and install and configure them manually."
msgstr ""

#: ../../source/learn/os_setup/text_editors.md:12
msgid ""
"Here's a list of the most popular text editors that support Fortran "
"syntax, in alphabetical order:"
msgstr ""

#: ../../source/learn/os_setup/text_editors.md:13
msgid "[Atom](https://atom.io/)"
msgstr ""

#: ../../source/learn/os_setup/text_editors.md:14
msgid "[Emacs](https://www.gnu.org/software/emacs/)"
msgstr ""

#: ../../source/learn/os_setup/text_editors.md:15
msgid "[NotePad++](https://notepad-plus-plus.org/)"
msgstr ""

#: ../../source/learn/os_setup/text_editors.md:16
msgid "[SublimeText](https://www.sublimetext.com/)"
msgstr ""

#: ../../source/learn/os_setup/text_editors.md:17
msgid "[Vim](https://www.vim.org/) and [Neovim](https://neovim.io/)"
msgstr ""

#: ../../source/learn/os_setup/text_editors.md:18
msgid "[Visual Studio Code](https://code.visualstudio.com/)"
msgstr ""

#: ../../source/learn/os_setup/text_editors.md:20
msgid ""
"A comprehensive list with more choices is provided in "
"[fortranwiki.org](http://fortranwiki.org/fortran/show/Source+code+editors)."
msgstr ""

#: ../../source/learn/os_setup/text_editors.md:22
msgid "Things to consider before choosing a text editor:"
msgstr ""

#: ../../source/learn/os_setup/text_editors.md:23
msgid ""
"**Ergonomics:** This is purely subjective and concerns how easy, "
"uninterrupted the UI (User Interface) feels to the developer while using "
"the editor."
msgstr ""

#: ../../source/learn/os_setup/text_editors.md:24
msgid ""
"**Extensibility:** As mentioned above, text editors come with many "
"features as external packages. The variety, the installation process, the"
" documentation, and user-friendliness of the packages all fall under this"
" category."
msgstr ""

#: ../../source/learn/os_setup/text_editors.md:25
msgid ""
"**Speed:** With how powerful modern hardware can be, the speed of editors"
" is becoming of minor importance. However, for the less powerful systems,"
" you may want to consider this as well. Heavyweight editors may impact "
"the writing performance. For example, you can expect Atom and VSCode to "
"run slower than the lightweight editors like Vim or Emacs."
msgstr ""

#: ../../source/learn/os_setup/text_editors.md:26
msgid ""
"**Learning curve:** Last but not least, new users should consider how "
"easy it is to get used to a new editor. Vim and Emacs have a steep "
"learning curve and are notoriously difficult for newcomers. They offer a "
"uniquely different experience than any other editor by forcing you to use"
" the keyboard for all editing tasks."
msgstr ""

#: ../../source/learn/os_setup/text_editors.md:28
msgid "Configuring VS Code"
msgstr ""

#: ../../source/learn/os_setup/text_editors.md:30
msgid ""
"With the editor opened, at the main UI, at the buttoned-column on the "
"left, there is a *four-square-shaped* icon to open the Marketplace for "
"extensions.  Install [Modern "
"Fortran](https://marketplace.visualstudio.com/items?itemName=krvajalm"
".linter-gfortran) for syntax highlighting, linting and Language Server "
"support and formatting."
msgstr ""

#: ../../source/learn/os_setup/text_editors.md:33
msgid "Additional Tools"
msgstr ""

#: ../../source/learn/os_setup/text_editors.md:35
msgid ""
"The following extensions are not essential but most users might find them"
" useful:"
msgstr ""

#: ../../source/learn/os_setup/text_editors.md:37
msgid ""
"[GitLens](https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens)"
" for advanced Git visualization and operations."
msgstr ""

#: ../../source/learn/os_setup/text_editors.md:38
msgid ""
"[CMake](https://marketplace.visualstudio.com/items?itemName=ms-vscode"
".cmake-tools) for full-featured CMake integration in VS Code."
msgstr ""

#: ../../source/learn/os_setup/text_editors.md:39
msgid ""
"[Remote Development](https://marketplace.visualstudio.com/items?itemName"
"=ms-vscode-remote.vscode-remote-extensionpack) for working with "
"containers, on a remote machines, or in the Windows Subsystem for Linux "
"(WSL)."
msgstr ""

#: ../../source/learn/os_setup/text_editors.md:40
msgid ""
"[Even Better TOML by "
"tamasfe](https://marketplace.visualstudio.com/items?itemName=tamasfe"
".even-better-toml). For Fortran developers that are using the new "
"[fpm](https://github.com/fortran-lang/fpm) *Fortran Package Manager*, a "
"TOML language support might come in handy."
msgstr ""

#: ../../source/learn/os_setup/text_editors.md:42
msgid "Configuring SublimeText"
msgstr ""

#: ../../source/learn/os_setup/text_editors.md:44
msgid ""
"A well structured gist that provides instructions on how to set up "
"SublimeText for Fortran developement is given "
"[here](https://gist.github.com/sestelo/6b01e1405c1d0fa7f0ecdc951caaa995)."
msgstr ""

#: ../../source/learn/os_setup/text_editors.md:46
msgid "Configuring Atom"
msgstr ""

#: ../../source/learn/os_setup/text_editors.md:48
msgid ""
"Atom's configuration process is similar to VSCode one. At the main "
"interface, if the *Welcome Guide* page is already opened for you, just "
"click the **Install a Package** option, otherwise you can find the same "
"option through the navigation bar at the top by clicking *Packages*. In "
"doing so a new page under *Settings* opens where you can just start "
"typing the package you want to install."
msgstr ""

#: ../../source/learn/os_setup/text_editors.md:50
msgid ""
"One package that includes many Fortran features is [IDE-FORTRAN by "
"hansec](https://atom.io/packages/ide-fortran). It needs the following "
"packages to be installed:"
msgstr ""

#: ../../source/learn/os_setup/text_editors.md:51
msgid "[atom-ide ui by facebook-atom](https://atom.io/packages/atom-ide-ui)"
msgstr ""

#: ../../source/learn/os_setup/text_editors.md:52
msgid "[language-fortran by dparkins](https://atom.io/packages/language-fortran)"
msgstr ""

#: ../../source/learn/os_setup/text_editors.md:54
msgid ""
"Additionally just like in VSCode it needs "
"[Python](https://www.python.org/) and [Fortran Language "
"Server](https://github.com/hansec/fortran-language-server) to be "
"installed."
msgstr ""

#: ../../source/learn/os_setup/text_editors.md:56
msgid ""
"For version control a very popular package is [Git-Plus by "
"akonwi](https://atom.io/packages/git-plus)."
msgstr ""

#: ../../source/learn/os_setup/tips.md:8
msgid "Smart Tips"
msgstr ""

#: ../../source/learn/os_setup/tips.md:10
msgid ""
"To conclude, we give a few tips that may help you to choose a compiler "
"and an editor or an IDE."
msgstr ""

#: ../../source/learn/os_setup/tips.md:12
msgid ""
"Check [this site](https://www.fortran.uk/fortran-compiler-comparisons/) "
"for a comprehensive comparison of Fortran compilers."
msgstr ""

#: ../../source/learn/os_setup/tips.md:13
msgid ""
"Since NVFortran version 17.1, the support for compute capability 2.0 "
"(Fermi) and lower has been removed. This is important because, at any "
"time, only the latest compiler version is free to download. Users with "
"older GPUs will not be able to run CUDA Fortran with the current (20.7) "
"or future versions. Read [this "
"wiki](https://www.wikiwand.com/en/CUDA#/GPUs_supported) to find your "
"GPU's compute capability and cross-check with the latest CUDA SDK that "
"supports it."
msgstr ""

#: ../../source/learn/os_setup/tips.md:14
msgid ""
"There are many online Fortran compilers. These are websites that offer a "
"basic text editor and allow you to compile and run your code on a remote "
"server. They are particularly useful for quick prototyping and testing. "
"Although we promised neutrality, we recommend that you check out the "
"open-source and free [Compiler Explorer](https://godbolt.org/), an "
"amazing tool with unique features."
msgstr ""

#: ../../source/learn/os_setup/tips.md:15
msgid ""
"Arguably the most popular text editor, according to recent online "
"surveys, is the Visual Studio Code, developed by Microsoft."
msgstr ""

#: ../../source/learn/os_setup/tips.md:16
msgid ""
"The most popular free IDEs are the Code::Blocks and Geany. Many "
"commercial IDEs give up to 30 days of free trial. Keep in mind that the "
"prices of commercial IDEs may vary, and some may be quite affordable. "
"Finally, if you are a student, an open-source developer, or a …hobbyist "
"*Fortraner* do not hesitate to contact those companies and request a "
"discount. There have been cases, e.g., in r/fortran, where "
"representatives, from at least one company, have offered discount codes "
"to individuals looking for affordable complete solutions (IDE + "
"compiler)."
msgstr ""

#: ../../source/learn/os_setup/tips.md:17
msgid ""
"Finally, please join us on [Fortran Discourse](https://fortran-"
"lang.discourse.group/) and do not hesitate to post your questions and "
"request for further information."
msgstr ""

#: ../../source/learn/quickstart/arrays_strings.md:9
msgid ""
"More often than not, we need to store and operate on long lists of "
"numbers as opposed to just the single scalar variables that we have been "
"using so far; in computer programming such lists are called  _arrays_."
msgstr ""

#: ../../source/learn/quickstart/arrays_strings.md:12
msgid ""
"Arrays are _multidimensional_ variables that contain more than one value "
"where each value is accessed using one or more indices."
msgstr ""

#: ../../source/learn/quickstart/arrays_strings.md:15
msgid ""
"Arrays in Fortran are _one-based_ by default; this means that the first "
"element along any dimension is at index 1."
msgstr ""

#: ../../source/learn/quickstart/arrays_strings.md:19
msgid "Array declaration"
msgstr ""

#: ../../source/learn/quickstart/arrays_strings.md:21
msgid ""
"We can declare arrays of any type. There are two common notations for "
"declaring array variables: using the `dimension` attribute or by "
"appending the array dimensions in parentheses to the variable name."
msgstr ""

#: ../../source/learn/quickstart/arrays_strings.md:24
msgid "__Example:__ static array declaration"
msgstr ""

#: ../../source/learn/quickstart/arrays_strings.md:45
msgid "Array slicing"
msgstr ""

#: ../../source/learn/quickstart/arrays_strings.md:47
msgid ""
"A powerful feature of the Fortran language is its built-in support for "
"array operations; we can perform operations on all or part of an array "
"using array _slicing_ notation:"
msgstr ""

#: ../../source/learn/quickstart/arrays_strings.md:50
msgid "__Example:__ array slicing"
msgstr ""

#: ../../source/learn/quickstart/arrays_strings.md:72
msgid ""
"Fortran arrays are stored in _column-major_ order; the first index varies"
" fastest."
msgstr ""

#: ../../source/learn/quickstart/arrays_strings.md:75
msgid "Allocatable (dynamic) arrays"
msgstr ""

#: ../../source/learn/quickstart/arrays_strings.md:77
msgid ""
"So far we have specified the size of our array in our program code---this"
" type of array is known as a _static_ array since its size is fixed when "
"we compile our program."
msgstr ""

#: ../../source/learn/quickstart/arrays_strings.md:81
msgid ""
"Quite often, we do not know how big our array needs to be until we run "
"our program, for example, if we are reading data from a file of unknown "
"size."
msgstr ""

#: ../../source/learn/quickstart/arrays_strings.md:83
msgid ""
"For this problem, we need `allocatable` arrays. These are _allocated_ "
"while the program is running once we know how big the array needs to be."
msgstr ""

#: ../../source/learn/quickstart/arrays_strings.md:86
msgid "__Example:__ allocatable arrays"
msgstr ""

#: ../../source/learn/quickstart/arrays_strings.md:105
msgid ""
"Allocatable local arrays are deallocated automatically when they go out "
"of scope."
msgstr ""

#: ../../source/learn/quickstart/arrays_strings.md:109
msgid "Character strings"
msgstr ""

#: ../../source/learn/quickstart/arrays_strings.md:112
msgid "__Example:__ static character string"
msgstr ""

#: ../../source/learn/quickstart/arrays_strings.md:132
msgid "__Example:__ allocatable character string"
msgstr ""

#: ../../source/learn/quickstart/arrays_strings.md:153
msgid "Array of strings"
msgstr ""

#: ../../source/learn/quickstart/arrays_strings.md:155
msgid ""
"An array of strings can be expressed in Fortran as an array of "
"`character` variables. All elements in a `character` array have equal "
"length. However, strings of varying lengths can be provided as input to "
"the array constructor, as shown in the example below. They will be "
"truncated or right-padded with spaces if they are longer or shorter, "
"respectively, than the declared length of the `character` array. Finally,"
" we use the intrinsic function `trim` to remove any excess spaces when "
"printing the values to the standard output."
msgstr ""

#: ../../source/learn/quickstart/arrays_strings.md:162
msgid "__Example:__ string array"
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:6
msgid "Derived Types"
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:7
msgid ""
"As discussed previously in [Variables](variables), there are five built-"
"in data types in Fortran. A _derived type_ is a special form of data type"
" that can encapsulate other built-in types as well as other derived "
"types. It could be considered equivalent to _struct_ in the C and C++ "
"programming languages."
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:9
msgid "A quick take on derived types"
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:11
msgid "Here's an example of a basic derived type:"
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:20
msgid ""
"The syntax to create a variable of type `t_pair` and access its members "
"is:"
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:29
msgid "The percentage symbol `%` is used to access the members of a derived type."
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:31
msgid ""
"In the above snippet, we declared an instance of a derived type and "
"initialized its members explicitly. You can also initialize derived type "
"members by invoking the derived type constructor."
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:35
msgid "Example using the derived type constructor:"
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:42
msgid "Example with default initialization:"
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:55
msgid "Derived types in detail"
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:57
msgid ""
"The full syntax of a derived type with all optional properties is "
"presented below:"
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:69
msgid "Options to declare a derived type"
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:71
msgid "`attribute-list` may refer to the following:"
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:73
msgid "_access-type_ that is either `public` or `private`"
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:74
msgid "`bind(c)` offers interoperability with C programming language"
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:75
msgid ""
"`extends(`_parent_`)`, where _parent_ is the name of a previously "
"declared derived type from which the current derived type will inherit "
"all its members and functionality"
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:76
msgid ""
"`abstract` -- an object oriented feature that is covered in the advanced "
"programming tutorial"
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:78
msgid ""
"If the attribute `bind(c)` or the statement `sequence` is used, then a "
"derived type cannot have the attribute `extends` and vice versa."
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:80
msgid ""
"The `sequence` attribute may be used only to declare that the following  "
"members should be accessed in the same order as they are defined within "
"the derived type."
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:82
msgid "Example with `sequence`:"
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:93
msgid ""
"The use of the statement `sequence` presupposes that the data types "
"defined below are neither of `allocatable` nor of `pointer` type. "
"Furthermore, it does not imply that these data types will be stored in "
"memory in any particular form, i.e., there is no relation to the "
"`contiguous` attribute."
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:95
msgid ""
"The _access-type_ attributes `public` and `private`, if used, declare "
"that all member-variables declared below will be automatically assigned "
"the attribute accordingly."
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:97
msgid ""
"The attribute `bind(c)` is used to achieve compatibility between "
"Fortran's derived type and C's struct."
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:99
msgid "Example with `bind(c)`:"
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:111
msgid "matches the following C struct type:"
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:117
msgid ""
"A fortran derived type with the attribute `bind(c)` cannot have the "
"`sequence` and `extends` attributes. Furthermore it cannot contain any "
"Fortran `pointer` or `allocatable` types."
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:119
msgid ""
"`parameterized-declaration-list` is an optional feature. If used, then "
"the parameters must be listed in place of `[parameterized-definition-"
"statements]` and must be either `len` or `kind` parameters or both."
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:121
msgid ""
"Example of a derived type with `parameterized-declaration-list` and with "
"the attribute `public`:"
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:143
msgid ""
"In this example the parameter `k` has already been assigned a default "
"value of `kind(0.0)` (single-precision floating-point). Therefore, it can"
" be omitted, as is the case here in the declaration inside the main "
"program."
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:145
msgid ""
"By default, derived types and their members are public. However, in this "
"example, the attribute `private` is used at the beginning of the module. "
"Therefore, everything within the module will be by default `private` "
"unless explicitly declared as `public`. If the type `t_matrix` was not "
"given the attribute `public` in the above example, then the compiler "
"would throw an error inside `program test`."
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:147
msgid ""
"The attribute `extends` was added in the F2003 standard and introduces an"
" important feature of the object oriented paradigm (OOP), namely "
"inheritance. It allows code reusability by letting child types derive "
"from extensible parent types: `type, extends(parent) :: child`. Here, "
"`child` inherits all the members and functionality from `type :: parent`."
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:149
msgid "Example with the attribute `extends`:"
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:209
msgid "Options to declare members of a derived type"
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:211
msgid ""
"`[member-variables]` refers to the declaration of all the member data "
"types. These data types can be of any built-in data type, and/or of other"
" derived types, as already showcased in the above examples. However, "
"member-variables can have their own extensive syntax, in form of: `type "
"[,member-attributes] :: name[attr-dependent-spec][init]`"
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:214
msgid "`type`: any built-in type or other derived type"
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:216
msgid "`member-attributes` (optional):"
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:218
msgid "`public` or `private` access attributes"
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:219
msgid "`protected` access attribute"
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:220
msgid "`allocatable` with or without `dimension` to specify a dynamic array"
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:221
msgid "`pointer`, `codimension`, `contiguous`, `volatile`, `asynchronous`"
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:223
msgid "Examples of common cases:"
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:245
msgid ""
"The following attributes: `pointer`, `codimension`, `contiguous`, "
"`volatile`, `asynchronous` are advanced features that will not be "
"addressed in the *Quickstart* tutorial. However, they are presented here,"
" in order for the readers to know that these features do exist and be "
"able to recognize them. These features will be covered in detail in the "
"upcoming *Advanced programing* mini-book."
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:247
msgid "Type-bound procedures"
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:249
msgid ""
"A derived type can contain functions or subroutines that are *bound* to "
"it. We'll refer to them as _type-bound procedures_. Type-bound procedures"
" follow the `contains` statement that, in turn, follows all member "
"variable declarations."
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:251
msgid ""
"It is impossible to describe type-bound procedures in full without "
"delving into OOP features of modern Fortran. For now we'll focus on a "
"simple example to show their basic use."
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:253
msgid "Here's an example of a derived type with a basic type-bound procedure:"
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:296
msgid "What is new:"
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:298
msgid ""
"`self` is an arbitrary name that we chose to represent the instance of "
"the derived type `t_square` inside the type-bound function. This allows "
"us to access its members and to automatically pass it as an argument when"
" we invoke a type-bound procedure."
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:299
msgid ""
"We now use `class(t_square)` instead of `type(t_square)` in the interface"
" of the `area` function. This allows us to invoke the `area` function "
"with any derived type that extends `t_square`. The keyword `class` "
"introduces the OOP feature polymorphism."
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:301
msgid ""
"In the above example, the type-bound procedure `area` is defined as a "
"function and can be invoked only in an expression, for example `x = "
"sq%area()` or `print *, sq%area()`. If you define it instead as a "
"subroutine, you can invoke it from its own `call` statement:"
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:319
msgid ""
"In contrast to the example with the type-bound function, we now have two "
"arguments:"
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:321
msgid ""
"`class(t_square), intent(in) :: self` -- the instance of the derived type"
" itself"
msgstr ""

#: ../../source/learn/quickstart/derived_types.md:322
msgid ""
"`real, intent(out) :: x` -- used to store the calculated area and return "
"to the caller"
msgstr ""

#: ../../source/learn/quickstart/hello_world.md:7
msgid ""
"In this part of the tutorial, we will write our first Fortran program: "
"the ubiquitous [\"Hello, "
"World!\"](https://en.wikipedia.org/wiki/%22Hello,_World!%22_program) "
"example."
msgstr ""

#: ../../source/learn/quickstart/hello_world.md:10
msgid ""
"However, before we can write our program, we need to ensure that we have "
"a Fortran compiler set up."
msgstr ""

#: ../../source/learn/quickstart/hello_world.md:13
msgid ""
"Fortran is a *compiled language*, which means that, once written, the "
"source code must be passed through a compiler to produce a machine "
"executable that can be run."
msgstr ""

#: ../../source/learn/quickstart/hello_world.md:17
msgid "Compiler setup"
msgstr ""

#: ../../source/learn/quickstart/hello_world.md:19
msgid ""
"In this tutorial, we'll work with the free and open source  [GNU Fortran "
"compiler (gfortran)](https://gcc.gnu.org/fortran/),  which is part of the"
"  [GNU Compiler Collection (GCC)](https://gcc.gnu.org/)."
msgstr ""

#: ../../source/learn/quickstart/hello_world.md:24
msgid ""
"To install gfortran on Linux, use your system package manager. On macOS, "
"you can install gfortran using [Homebrew](https://brew.sh/) or "
"[MacPorts](https://www.macports.org/). On Windows, you can get native "
"binaries [here](http://www.equation.com/servlet/equation.cmd?fa=fortran)."
msgstr ""

#: ../../source/learn/quickstart/hello_world.md:28
msgid ""
"To check if you have _gfortran_ setup correctly, open a terminal and run "
"the following command:"
msgstr ""

#: ../../source/learn/quickstart/hello_world.md:34
msgid "this should output something like:"
msgstr ""

#: ../../source/learn/quickstart/hello_world.md:43
msgid "Hello world"
msgstr ""

#: ../../source/learn/quickstart/hello_world.md:45
msgid ""
"Once you have set up your compiler, open a new file in your favourite "
"code editor and enter the following:"
msgstr ""

#: ../../source/learn/quickstart/hello_world.md:54
msgid ""
"Having saved your program to `hello.f90`, compile at the command line "
"with:"
msgstr ""

#: ../../source/learn/quickstart/hello_world.md:59
msgid ""
"`.f90` is the standard file extension for modern Fortran source files. "
"The 90 refers to the first modern Fortran standard in 1990."
msgstr ""

#: ../../source/learn/quickstart/hello_world.md:62
msgid "To run your compiled program:"
msgstr ""

#: ../../source/learn/quickstart/hello_world.md:68
msgid ""
"Congratulations, you've written, compiled and run your first Fortran "
"program! In the next part of this tutorial, we will introduce variables "
"for storing data."
msgstr ""

#: ../../source/learn/quickstart/index.md:17
msgid "arrays strings"
msgstr ""

#: ../../source/learn/quickstart/index.md:17
msgid "hello world"
msgstr ""

#: ../../source/learn/quickstart/index.md:17
msgid "operators control_flow"
msgstr ""

#: ../../source/learn/quickstart/index.md:17
msgid "variables"
msgstr ""

#: ../../source/learn/quickstart/index.md:17
msgid "derived types"
msgstr ""

#: ../../source/learn/quickstart/index.md:17
msgid "organising code"
msgstr ""

#: ../../source/learn/quickstart/index.md:7
msgid "Quickstart"
msgstr ""

#: ../../source/learn/quickstart/index.md:9
msgid ""
"This quickstart tutorial gives an overview of the Fortran programming "
"language and its syntax for common structured programming concepts "
"including: types, variables, arrays, control flow and functions."
msgstr ""

#: ../../source/learn/quickstart/index.md:13
msgid ""
"The contents of this tutorial are shown in the navigation bar on the left"
" with the current page highlighted bold."
msgstr ""

#: ../../source/learn/quickstart/index.md:15
msgid ""
"Use the _Next_ button at the bottom to start the tutorial with a _Hello "
"World_ example."
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md:7
msgid ""
"One of the powerful advantages of computer algorithms, compared to simple"
" mathematical formulae, comes in the form of program _branching_ whereby "
"the program can decide which instructions to execute next based on a "
"logical condition."
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md:11
msgid "There are two main forms of controlling program flow:"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md:13
msgid ""
"_Conditional_ (if): choose program path based on a boolean (true or "
"false) value"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md:15
msgid "_Loop_: repeat a portion of code multiple times"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md:19
msgid "Logical operators"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md:20
msgid ""
"Before we use a conditional branching operator, we need to be able to "
"form a logical expression."
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md:23
msgid ""
"To form a logical expression, the following set of relational operators "
"are available:"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md
#: ../../source/learn/quickstart/variables.md
msgid "Operator &nbsp;"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md
msgid "Alternative &nbsp;"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md
#: ../../source/learn/quickstart/variables.md
msgid "Description"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md
msgid "`==`"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md
msgid "`.eq.`"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md
msgid "Tests for equality of two operands"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md
msgid "`/=`"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md
msgid "`.ne.`"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md
msgid "Test for inequality of two operands"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md
msgid "`> `"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md
msgid "`.gt.`"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md
msgid "Tests if left operand is strictly greater than right operand"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md
msgid "`< `"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md
msgid "`.lt.`"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md
msgid "Tests if left operand is strictly less than right operand"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md
msgid "`>=`"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md
msgid "`.ge.`"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md
msgid "Tests if left operand is greater than or equal to right operand"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md
msgid "`<=`"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md
msgid "`.le.`"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md
msgid "Tests if left operand is less than or equal to right operand"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md:36
msgid "as well as the following logical operators:"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md
msgid "`.and.`"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md
msgid "TRUE if both left and right operands are TRUE"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md
msgid "`.or.`"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md
msgid "TRUE if either left or right or both operands are TRUE"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md
msgid "`.not.`"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md
msgid "TRUE if right operand is FALSE"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md
msgid "`.eqv.`"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md
msgid "TRUE if left operand has same logical value as right operand"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md
msgid "`.neqv.`"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md
msgid "TRUE if left operand has the opposite logical value as right operand"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md:49
msgid "Conditional construct (`if`)"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md:51
msgid ""
"In the following examples, a conditional `if` construct is used to print "
"out a message to describe the nature of the `angle` variable:"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md:54
msgid "__Example:__ single branch `if`"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md:62
msgid ""
"In this first example, the code within the `if` construct is _only "
"executed if_ the test expression (`angle < 90.0`) is true."
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md:65
#, python-format
msgid ""
"{% include tip.html content=\"It is good practice to indent code within "
"constructs such as `if` and `do` to make code more readable.\" %}"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md:68
msgid ""
"We can add an alternative branch to the construct using the `else` "
"keyword:"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md:70
msgid "__Example:__ two-branch `if`-`else`"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md:80
msgid ""
"Now there are two _branches_ in the `if` construct, but _only one branch "
"is executed_ depending on the logical expression following the `if` "
"keyword."
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md:83
msgid ""
"We can actually add any number of branches using `else if` to specify "
"more conditions:"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md:85
msgid "__Example:__ multi-branch  `if`-`else if`-`else`"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md:96
msgid ""
"When multiple conditional expressions are used, each conditional "
"expression is tested only if none of the previous expressions have "
"evaluated to true."
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md:99
msgid "Loop constructs (`do`)"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md:101
msgid ""
"In the following example, a `do` loop construct is used to print out the "
"numbers in a sequence. The `do` loop has an integer _counter_ variable "
"which is used to track which iteration of the loop is currently "
"executing. In this example we use a common name for this counter "
"variable: `i`."
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md:106
msgid ""
"When we define the start of the `do` loop, we use our counter variable "
"name followed by an equals (`=`) sign to specify the start value and "
"final value of our counting variable."
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md:109
msgid "__Example:__ `do` loop"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md:119
msgid "__Example:__ `do` loop with skip"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md:129
msgid "Conditional loop (`do while`)"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md:131
msgid ""
"A condition may be added to a `do` loop with the `while` keyword. The "
"loop will be executed while the condition given in `while()` evaluates to"
" `.true.`."
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md:134
msgid "__Example:__ `do while()` loop"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md:147
msgid "Loop control statements (`exit` and `cycle`)"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md:149
msgid ""
"Most often than not, loops need to be stopped if a condition is met. "
"Fortran provides two executable statements to deal with such cases."
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md:152
msgid ""
"`exit` is used to quit the loop prematurely. It is usually enclosed "
"inside an `if`."
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md:154
msgid "__Example:__ loop with `exit`"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md:168
msgid ""
"On the other hand, `cycle` skips whatever is left of the loop and goes "
"into the next cycle."
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md:170
msgid "__Example:__ loop with `cycle`"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md:182
#, python-format
msgid ""
"{% include note.html content=\"When used within nested loops, the `cycle`"
" and `exit` statements operate on the innermost loop.\" %}"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md:184
msgid "Nested loop control: tags"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md:186
msgid ""
"A recurring case in any programming language is the use of nested loops. "
"Nested loops refer to loops that exist within another loop. Fortran "
"allows the programmer to _tag_ or _name_ each loop. If loops are tagged, "
"there are two potential benefits:"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md:187
msgid ""
"The readability of the code may be improved (when the naming is "
"meaningful)."
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md:188
msgid ""
"`exit` and `cycle` may be used with tags, which allows for very fine-"
"grained control of the loops."
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md:190
msgid "__Example:__ tagged nested loops"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md:205
msgid "Parallelizable loop (`do concurrent`)"
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md:207
msgid ""
"The `do concurrent` loop is used to explicitly specify that the _inside "
"of the loop has no interdependencies_; this informs the compiler that it "
"may use parallelization/_SIMD_ to speed up execution of the loop and "
"conveys programmer intention more clearly. More specifically, this means "
"that any given loop iteration does not depend on the prior execution of "
"other loop iterations. It is also necessary that any state changes that "
"may occur must only happen within each `do concurrent` loop. These "
"requirements place restrictions on what can be placed within the loop "
"body."
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md:213
msgid ""
"Simply replacing a `do` loop with a `do concurrent` does not guarantee "
"parallel execution. The explanation given above does not detail all the "
"requirements that need to be met in order to write a correct `do "
"concurrent` loop. Compilers are also free to do as they see fit, meaning "
"they may not optimize the loop (e.g., a small number of iterations doing "
"a simple calculation, like the >below example). In general, compiler "
"flags are required to activate possible parallelization for `do "
"concurrent` loops."
msgstr ""

#: ../../source/learn/quickstart/operators_control_flow.md:219
msgid "__Example:__ `do concurrent()` loop"
msgstr ""

#: ../../source/learn/quickstart/organising_code.md:6
msgid "Organising Code"
msgstr ""

#: ../../source/learn/quickstart/organising_code.md:8
msgid ""
"Most programming languages allow you to collect commonly-used code into "
"_procedures_ that can be reused by _calling_ them from other sections of "
"code."
msgstr ""

#: ../../source/learn/quickstart/organising_code.md:11
msgid "Fortran has two forms of procedure:"
msgstr ""

#: ../../source/learn/quickstart/organising_code.md:13
msgid "__Subroutine__: invoked by a `call` statement"
msgstr ""

#: ../../source/learn/quickstart/organising_code.md:14
msgid ""
"__Function__: invoked within an expression or assignment to which it "
"returns a value"
msgstr ""

#: ../../source/learn/quickstart/organising_code.md:16
msgid ""
"Both subroutines and functions have access to variables in the parent "
"scope by _argument association_; unless the `value` attribute is "
"specified, this is similar to call by reference."
msgstr ""

#: ../../source/learn/quickstart/organising_code.md:19
msgid "Subroutines"
msgstr ""

#: ../../source/learn/quickstart/organising_code.md:21
msgid ""
"The subroutine input arguments, known as _dummy arguments_, are specified"
" in parentheses after the subroutine name; the dummy argument types and "
"attributes are declared within the body of the subroutine just like local"
" variables."
msgstr ""

#: ../../source/learn/quickstart/organising_code.md:24
#: ../../source/learn/quickstart/organising_code.md:118
#: ../../source/learn/quickstart/variables.md:134
msgid "__Example:__"
msgstr ""

#: ../../source/learn/quickstart/organising_code.md:44
msgid ""
"Note the additional `intent` attribute when declaring the dummy "
"arguments; this optional attribute signifies to the compiler whether the "
"argument is ''read-only'' (`intent(in)`) ''write-only'' (`intent(out)`) "
"or ''read-write'' (`intent(inout)`) within the procedure. In this "
"example, the subroutine does not modify its arguments, hence all "
"arguments are `intent(in)`."
msgstr ""

#: ../../source/learn/quickstart/organising_code.md:48
msgid ""
"It is good practice to always specify the `intent` attribute for dummy "
"arguments; this allows the compiler to check for unintentional errors and"
" provides self-documentation."
msgstr ""

#: ../../source/learn/quickstart/organising_code.md:52
msgid "We can call this subroutine from a program using a `call` statement:"
msgstr ""

#: ../../source/learn/quickstart/organising_code.md:66
msgid ""
"This example uses a so-called _explicit-shape_ array argument since we "
"have passed additional variables to describe the dimensions of the array "
"`A`; this will not be necessary if we place our subroutine in a module as"
" described later."
msgstr ""

#: ../../source/learn/quickstart/organising_code.md:70
msgid "Functions"
msgstr ""

#: ../../source/learn/quickstart/organising_code.md:84
msgid "In production code, the intrinsic function `norm2` should be used."
msgstr ""

#: ../../source/learn/quickstart/organising_code.md:86
msgid "To execute this function:"
msgstr ""

#: ../../source/learn/quickstart/organising_code.md:102
msgid ""
"It is good programming practice for functions not to modify their "
"arguments---that is, all function arguments should be `intent(in)`. Such "
"functions are known as `pure` functions. Use subroutines if your "
"procedure needs to modify its arguments."
msgstr ""

#: ../../source/learn/quickstart/organising_code.md:107
msgid "Modules"
msgstr ""

#: ../../source/learn/quickstart/organising_code.md:109
msgid ""
"Fortran modules contain definitions that are made accessible to programs,"
" procedures, and other modules through the `use` statement. They can "
"contain data objects, type definitions, procedures, and interfaces."
msgstr ""

#: ../../source/learn/quickstart/organising_code.md:112
msgid ""
"Modules allow controlled scoping extension whereby entity access is made "
"explicit"
msgstr ""

#: ../../source/learn/quickstart/organising_code.md:113
msgid ""
"Modules automatically generate explicit interfaces required for modern "
"procedures"
msgstr ""

#: ../../source/learn/quickstart/organising_code.md:115
msgid ""
"It is recommended to always place functions and subroutines within "
"modules."
msgstr ""

#: ../../source/learn/quickstart/organising_code.md:147
msgid ""
"Compare this `print_matrix` subroutine with that written outside of a "
"module we no longer have to explicitly pass the matrix dimensions and can"
" instead take advantage of _assumed-shape_ arguments since the module "
"will generate the required explicit interface for us. This results in a "
"much simpler subroutine interface."
msgstr ""

#: ../../source/learn/quickstart/organising_code.md:152
msgid "To `use` the module within a program:"
msgstr ""

#: ../../source/learn/quickstart/organising_code.md:167
msgid "__Example:__ explicit import list"
msgstr ""

#: ../../source/learn/quickstart/organising_code.md:173
msgid "__Example:__ aliased import"
msgstr ""

#: ../../source/learn/quickstart/organising_code.md:179
msgid ""
"Each module should be written in a separate `.f90` source file. Modules "
"need to be compiled prior to any program units that `use` them."
msgstr ""

#: ../../source/learn/quickstart/variables.md:7
msgid ""
"Variables store information that can be manipulated by the program. "
"Fortran is a _strongly typed_ language, which means that each variable "
"must have a type."
msgstr ""

#: ../../source/learn/quickstart/variables.md:11
msgid "There are 5 built-in data types in Fortran:"
msgstr ""

#: ../../source/learn/quickstart/variables.md:13
msgid "`integer` -- for data that represent whole numbers, positive or negative"
msgstr ""

#: ../../source/learn/quickstart/variables.md:14
msgid "`real` -- for floating-point data (not a whole number)"
msgstr ""

#: ../../source/learn/quickstart/variables.md:15
msgid "`complex` -- pair consisting of a real part and an imaginary part"
msgstr ""

#: ../../source/learn/quickstart/variables.md:16
msgid "`character` -- for text data"
msgstr ""

#: ../../source/learn/quickstart/variables.md:17
msgid "`logical` -- for data that represent boolean (true or false) values"
msgstr ""

#: ../../source/learn/quickstart/variables.md:19
msgid ""
"Before we can use a variable, we must _declare_ it; this tells the "
"compiler the variable type and any other variable attributes."
msgstr ""

#: ../../source/learn/quickstart/variables.md:22
msgid ""
"Fortran is a _statically typed_ language, which means the type of each "
"variable is fixed when the program is compiled---variable types cannot "
"change while the program is running."
msgstr ""

#: ../../source/learn/quickstart/variables.md:25
msgid "Declaring variables"
msgstr ""

#: ../../source/learn/quickstart/variables.md:27
msgid "The syntax for declaring variables is:"
msgstr ""

#: ../../source/learn/quickstart/variables.md:33
msgid ""
"where `<variable_type>` is one of the built-in variable types listed "
"above and `<variable_name>` is the name that you would like to call your "
"variable."
msgstr ""

#: ../../source/learn/quickstart/variables.md:36
msgid ""
"Variable names must start with a letter and can consist of letters, "
"numbers and underscores. In the following example we declare a variable "
"for each of the built-in types."
msgstr ""

#: ../../source/learn/quickstart/variables.md:39
msgid "__Example:__ variable declaration"
msgstr ""

#: ../../source/learn/quickstart/variables.md:54
msgid ""
"Fortran code is __case-insensitive__; you don't have to worry about the "
"capitalisation of your variable names, but it's good practice to keep it "
"consistent."
msgstr ""

#: ../../source/learn/quickstart/variables.md:57
msgid ""
"Note the additional statement at the beginning of the program: `implicit "
"none`. This statement tells the compiler that all variables will be "
"explicitly declared; without  this statement variables will be implicitly"
" typed according to the letter they begin with."
msgstr ""

#: ../../source/learn/quickstart/variables.md:61
msgid ""
"Always use the `implicit none` statement at the beginning of each program"
" and procedure. Implicit typing is considered bad practice in  modern "
"programming since it hides information leading to more program errors."
msgstr ""

#: ../../source/learn/quickstart/variables.md:66
msgid ""
"Once we have declared a variable, we can assign and reassign values to it"
" using the assignment operator `=`."
msgstr ""

#: ../../source/learn/quickstart/variables.md:68
msgid "__Example:__ variable assignment"
msgstr ""

#: ../../source/learn/quickstart/variables.md:78
msgid "Characters are surrounded by either single (`'`) or double quotes (`\"`)."
msgstr ""

#: ../../source/learn/quickstart/variables.md:80
msgid "Logical or boolean values can be either `.true.` or `.false.`."
msgstr ""

#: ../../source/learn/quickstart/variables.md:82
msgid ""
"Watch out\" content=\"for assignment at declaration: `integer :: amount ="
" 1`.  __This is NOT a normal initialisation;__ it implies the `save` "
"attribute which means that the variable retains its value between "
"procedure calls. Good practice is to initialise your variables separately"
" to their declaration."
msgstr ""

#: ../../source/learn/quickstart/variables.md:87
msgid "Standard input / output"
msgstr ""

#: ../../source/learn/quickstart/variables.md:89
msgid ""
"In our _Hello World_ example, we printed text to the command window. This"
" is commonly referred to as writing to `standard output` or `stdout`."
msgstr ""

#: ../../source/learn/quickstart/variables.md:92
msgid ""
"We can use the `print` statement introduced earlier to print variable "
"values to `stdout`:"
msgstr ""

#: ../../source/learn/quickstart/variables.md:102
msgid ""
"In a similar way, we can read values from the command window using the "
"`read` statement:"
msgstr ""

#: ../../source/learn/quickstart/variables.md:118
msgid "This input source is commonly referred to as `standard input` or `stdin`."
msgstr ""

#: ../../source/learn/quickstart/variables.md:121
msgid "Expressions"
msgstr ""

#: ../../source/learn/quickstart/variables.md:122
msgid ""
"The usual set of arithmetic operators are available, listed in order or "
"precedence:"
msgstr ""

#: ../../source/learn/quickstart/variables.md
msgid "`**`"
msgstr ""

#: ../../source/learn/quickstart/variables.md
msgid "Exponent"
msgstr ""

#: ../../source/learn/quickstart/variables.md
msgid "`*`"
msgstr ""

#: ../../source/learn/quickstart/variables.md
msgid "Multiplication"
msgstr ""

#: ../../source/learn/quickstart/variables.md
msgid "`/ `"
msgstr ""

#: ../../source/learn/quickstart/variables.md
msgid "Division"
msgstr ""

#: ../../source/learn/quickstart/variables.md
msgid "`+`"
msgstr ""

#: ../../source/learn/quickstart/variables.md
msgid "Addition"
msgstr ""

#: ../../source/learn/quickstart/variables.md
msgid "`-`"
msgstr ""

#: ../../source/learn/quickstart/variables.md
msgid "Subtraction"
msgstr ""

#: ../../source/learn/quickstart/variables.md:170
msgid "Floating-point precision"
msgstr ""

#: ../../source/learn/quickstart/variables.md:172
msgid ""
"The desired floating-point precision can be explicitly declared using a "
"`kind` parameter. The `iso_fortran_env` intrinsic module provides `kind` "
"parameters for the common 32-bit and 64-bit floating-point types."
msgstr ""

#: ../../source/learn/quickstart/variables.md:175
msgid "__Example:__ explicit real `kind`"
msgstr ""

#: ../../source/learn/quickstart/variables.md:190
msgid "Always use a `kind` suffix for floating-point literal constants."
msgstr ""

#: ../../source/learn/quickstart/variables.md:192
msgid "__Example:__ C-interoperable `kind`s"
msgstr ""

#: ../../source/learn/quickstart/variables.md:204
msgid ""
"In the next part we will learn how to use arrays for storing more than "
"one value in a variable."
msgstr ""

